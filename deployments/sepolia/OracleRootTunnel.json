{
  "address": "0x7C33837C312498FbDC32166f5c4F5E0dcdD13B2E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        }
      ],
      "name": "PriceRequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        }
      ],
      "name": "PushedPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ancillaryBytesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "publishPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x08972d9a3eb74c7e3342d72bbb24b0069cd7475f5494f7fcf300b726b00e413f",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x7C33837C312498FbDC32166f5c4F5E0dcdD13B2E",
    "transactionIndex": 21,
    "gasUsed": "1771243",
    "logsBloom": "0x
    "blockHash": "0x23c6c588ca9690b53c35b9c8000c109d2ab04c844ce4a0f0c8899bf2e1dc55d5",
    "transactionHash": "0x08972d9a3eb74c7e3342d72bbb24b0069cd7475f5494f7fcf300b726b00e413f",
    "logs": [],
    "blockNumber": 6161299,
    "cumulativeGasUsed": "4731933",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "0x47CACA50f7A2CeE78Fa9f196C04ba8F4E6B54F73",
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"PriceRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"PushedPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"publishPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract must be a registered financial contract in order to make DVM price requests.\",\"kind\":\"dev\",\"methods\":{\"publishPrice(bytes32,uint256,bytes)\":{\"details\":\"Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must be registered with the DVM to query price requests.\",\"params\":{\"ancillaryData\":\"extra data of price request to resolve.\",\"identifier\":\"Identifier of price request to resolve.\",\"time\":\"Timestamp of price request to resolve.\"}},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}}},\"title\":\"Adapter deployed on mainnet that validates and sends price requests from sidechain to the DVM on mainnet.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"publishPrice(bytes32,uint256,bytes)\":{\"notice\":\"This is the first method that should be called in order to publish a price request to the sidechain.\"},\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol\":\"OracleRootTunnel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct ExitPayload {\\n        RLPReader.RLPItem[] data;\\n    }\\n\\n    struct Receipt {\\n        RLPReader.RLPItem[] data;\\n        bytes raw;\\n        uint256 logIndex;\\n    }\\n\\n    struct Log {\\n        RLPReader.RLPItem data;\\n        RLPReader.RLPItem[] list;\\n    }\\n\\n    struct LogTopics {\\n        RLPReader.RLPItem[] data;\\n    }\\n\\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n        \\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n        return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n        return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n        return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\\n        receipt.raw = payload.data[6].toBytes();\\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n        if (receiptItem.isList()) {\\n            // legacy tx\\n            receipt.data = receiptItem.toList();\\n        } else {\\n            // pop first byte before parsting receipt\\n            bytes memory typedBytes = receipt.raw;\\n            bytes memory result = new bytes(typedBytes.length - 1);\\n            uint256 srcPtr;\\n            uint256 destPtr;\\n            assembly {\\n                srcPtr := add(33, typedBytes)\\n                destPtr := add(0x20, result)\\n            }\\n\\n            copy(srcPtr, destPtr, result.length);\\n            receipt.data = result.toRlpItem().toList();\\n        }\\n\\n        receipt.logIndex = getReceiptLogIndex(payload);\\n        return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n        return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\\n        return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[9].toUint();\\n    }\\n\\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns (address) {\\n        return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns (bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\\n        return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\\n        return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xe0a46b1a34ba0564638fb0b8d3c38b969dd6dcf8a84f7de935f18d9abbf3c584\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x3efdfa22d02994bddb88a504ec63920018b912768ea1782f8dc09e70237060a8\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\n    }\\n}\\n\",\"keccak256\":\"0xefa98466a4e3c85857cea4772f25f52ed61f2b90662fb6f67fb155455d644ffc\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x16e8cbf7c2a240044182576be529be0fa666ce0cdec46be3ff76d40491362a80\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages\\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\n                blockNumber - startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0xd9ddea51d758d6406e10c35f10a150495cfcc90f9334e34755ce5de31b27d447\",\"license\":\"MIT\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/polygon-cross-chain-oracle/OracleBaseTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Enforces lifecycle of price requests for deriving contract.\\r\\n */\\r\\nabstract contract OracleBaseTunnel {\\r\\n    enum RequestState { NeverRequested, Requested, Resolved }\\r\\n\\r\\n    struct Price {\\r\\n        RequestState state;\\r\\n        int256 price;\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be resolved by the DVM which refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    // Mapping of encoded price requests {identifier, time, ancillaryData} to Price objects.\\r\\n    mapping(bytes32 => Price) internal prices;\\r\\n\\r\\n    // Finder to provide addresses for DVM system contracts.\\r\\n    FinderInterface public finder;\\r\\n\\r\\n    event PriceRequestAdded(bytes32 indexed identifier, uint256 time, bytes ancillaryData, bytes32 indexed requestHash);\\r\\n    event PushedPrice(\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        bytes ancillaryData,\\r\\n        int256 price,\\r\\n        bytes32 indexed requestHash\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\\r\\n     */\\r\\n    constructor(address _finderAddress) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given (identifier, time,\\r\\n     * ancillary data) combination. Will only emit an event if the request has never been requested.\\r\\n     */\\r\\n    function _requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) internal {\\r\\n        require(ancillaryData.length <= ancillaryBytesLimit, \\\"Invalid ancillary data\\\");\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\\r\\n        Price storage lookup = prices[priceRequestId];\\r\\n        if (lookup.state == RequestState.NeverRequested) {\\r\\n            lookup.state = RequestState.Requested;\\r\\n            emit PriceRequestAdded(identifier, time, ancillaryData, priceRequestId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes price for a requested query. Will only emit an event if the request has never been resolved.\\r\\n     */\\r\\n    function _publishPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 price\\r\\n    ) internal {\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\\r\\n        Price storage lookup = prices[priceRequestId];\\r\\n        if (lookup.state == RequestState.Requested) {\\r\\n            lookup.price = price;\\r\\n            lookup.state = RequestState.Resolved;\\r\\n            emit PushedPrice(identifier, time, ancillaryData, lookup.price, priceRequestId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the convenient way to store price requests, uniquely identified by {identifier, time,\\r\\n     * ancillaryData }.\\r\\n     */\\r\\n    function _encodePriceRequest(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(identifier, time, ancillaryData));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf35e0889668f5abe46cead21796a69430f539e14e375ee0d3e3188199dd1bb0d\",\"license\":\"AGPL-3.0-only\"},\"contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\r\\n\\r\\nimport \\\"./OracleBaseTunnel.sol\\\";\\r\\nimport \\\"../data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\\\";\\r\\nimport \\\"../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Adapter deployed on mainnet that validates and sends price requests from sidechain to the DVM on mainnet.\\r\\n * @dev This contract must be a registered financial contract in order to make DVM price requests.\\r\\n */\\r\\ncontract OracleRootTunnel is OracleBaseTunnel, FxBaseRootTunnel, Lockable {\\r\\n    constructor(\\r\\n        address _checkpointManager,\\r\\n        address _fxRoot,\\r\\n        address _finderAddress\\r\\n    ) OracleBaseTunnel(_finderAddress) FxBaseRootTunnel(_checkpointManager, _fxRoot) {}\\r\\n\\r\\n    /**\\r\\n     * @notice This is the first method that should be called in order to publish a price request to the sidechain.\\r\\n     * @dev Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must\\r\\n     * be registered with the DVM to query price requests.\\r\\n     * @param identifier Identifier of price request to resolve.\\r\\n     * @param time Timestamp of price request to resolve.\\r\\n     * @param ancillaryData extra data of price request to resolve.\\r\\n     */\\r\\n    function publishPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public nonReentrant() {\\r\\n        // `getPrice` will revert if there is no price.\\r\\n        int256 price = _getOracle().getPrice(identifier, time, ancillaryData);\\r\\n        // This implementation allows duplicate MessageSent events via _sendMessageToRoot. The child tunnel on the\\r\\n        // sidechain will not have a problem handling duplicate price resolutions (it will just ignore them). This is\\r\\n        // potentially a fallback in case the automatic state sync to the sidechain is missing the `publishPrice`\\r\\n        // transaction for some reason. There is little risk in duplicating MessageSent emissions because the sidechain\\r\\n        // bridge does not impose any rate-limiting.\\r\\n        _publishPrice(identifier, time, ancillaryData, price);\\r\\n        _sendMessageToChild(abi.encode(identifier, time, ancillaryData, price));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Submits a price request.\\r\\n     * @dev This internal method will be called inside `receiveMessage(bytes memory inputData)`. The `inputData` is a\\r\\n     * proof of transaction that is derived from the transaction hash of the transaction on the child chain that\\r\\n     * originated the cross-chain price request via _sendMessageToRoot. This contract must be registered with the DVM\\r\\n     * to submit price requests.\\r\\n     * @param data ABI encoded params with which to call `requestPrice`.\\r\\n     */\\r\\n    function _processMessageFromChild(bytes memory data) internal override {\\r\\n        (bytes32 identifier, uint256 time, bytes memory ancillaryData) = abi.decode(data, (bytes32, uint256, bytes));\\r\\n        _requestPrice(identifier, time, ancillaryData);\\r\\n        _getOracle().requestPrice(identifier, time, ancillaryData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Return DVM for this network.\\r\\n     */\\r\\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\\r\\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3a10e2ef4b0b1bcef2a7961d7fb0f8d875b2b1c99b3b02e8d9105ac236007326\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620000be57601f62001e4f38819003918201601f19168301916001600160401b03831184841017620000c357808492606094604052833981010312620000be57620000796200005182620000d9565b9160406200006260208301620000d9565b6001600160a01b03939092849283929101620000d9565b169360018060a01b0319948560015416176001551683600354161760035516906002541617600255600160ff196006541617600655604051611d609081620000ef8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620000be5756fe60806040526004361015610013575b600080fd5b6000803560e01c9081630e387de6146100de57508063607f2d42146100d5578063972c4928146100cc578063aea4e49e146100c3578063b9a3c84c146100ba578063c0857ba0146100b1578063c371dda7146100a8578063de9b771f1461009f578063deda381b146100965763f953cec71461008e57600080fd5b61000e610549565b5061000e6103e0565b5061000e6102a3565b5061000e610285565b5061000e61025b565b5061000e610231565b5061000e610193565b5061000e610158565b5061000e610126565b346101185780600319360112610118577f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660805260206080f35b80fd5b600091031261000e57565b503461000e57602036600319011261000e576004356000526005602052602060ff604060002054166040519015158152f35b503461000e57600036600319011261000e576004546040516001600160a01b039091168152602090f35b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356101b181610182565b600454906001600160a01b03908183166101d9576001600160a01b0319909216911617600455005b60405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608490fd5b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e5760206040516120008152f35b503461000e57600036600319011261000e576002546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761030057604052565b6103086102cd565b604052565b6040810190811067ffffffffffffffff82111761030057604052565b67ffffffffffffffff811161030057604052565b90601f8019910116810190811067ffffffffffffffff82111761030057604052565b6040519061036c8261030d565b565b60209067ffffffffffffffff811161038c575b601f01601f19160190565b6103946102cd565b610381565b81601f8201121561000e578035906103b08261036e565b926103be604051948561033d565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57606036600319011261000e5760043560243560443567ffffffffffffffff811161000e57610418903690600401610399565b60065460ff8116156105045760ff19166006556001600160a01b0361043b611c9f565b1690602060405180936338ce36ab60e11b8252818061045f86898b60048501611977565b03915afa9182156104f7575b6000926104c2575b509261049b828561048c6104a9956104ae988887611a2f565b60405195869460208601611993565b03601f19810183528261033d565b6119ba565b6104c0600160ff196006541617600655565b005b90916020823d82116104ef575b816104dc6020938361033d565b810103126101185750519061049b610473565b3d91506104cf565b6104ff61168d565b61046b565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b503461000e57602036600319011261000e5760043567ffffffffffffffff811161000e5761071661070761058c6105876104c0943690600401610399565b610924565b6106be61059882610d2f565b916105a281610a26565b9061061a61060d6105b28661114a565b61049b6105d36105c186610d48565b60405192839160208301958a8761073e565b5190206105fd6105f76105f0836000526005602052604060002090565b5460ff1690565b15610763565b6000526005602052604060002090565b805460ff19166001179055565b602061069361068e61062b84610b5f565b61063481610d7a565b600454909890610670906001600160a01b031661065f6106538c610dec565b6001600160a01b031690565b6001600160a01b03909116146107bb565b61067986610a6e565b94859201519061068887610d16565b91610ec9565b610815565b61069c82610a3e565b6106a583610a56565b906106b86106b2856109dd565b94610a00565b946116e6565b506107027f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366106fc6106f76106f285610e28565b610e6c565b611418565b1461086d565b610e51565b602080825183010191016108fe565b611b07565b60005b83811061072e5750506000910152565b818101518382015260200161071e565b60409392918152610758825180936020808501910161071b565b019060208201520190565b1561076a57565b60405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608490fd5b156107c257565b60405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608490fd5b1561081c57565b60405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608490fd5b1561087457565b60405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606490fd5b81601f8201121561000e5780516108cf8161036e565b926108dd604051948561033d565b8184526020828401011161000e576108fb916020808501910161071b565b90565b9060208282031261000e57815167ffffffffffffffff811161000e576108fb92016108b9565b61093f610944916060604051610939816102e4565b526112a5565b6112f2565b60405190610951826102e4565b815290565b50634e487b7160e01b600052603260045260246000fd5b60e09080516006101561097e570190565b610986610956565b0190565b60209080511561097e570190565b60409080516001101561097e570190565b6102209080516010101561097e570190565b60209181518110156109d0575b60051b010190565b6109d8610956565b6109c8565b60206108fb91518051156109f3575b0151611418565b6109fb610956565b6109ec565b60406108fb9151805160011015610a19575b01516114bb565b610a21610956565b610a12565b60606108fb91518051600210156109f3570151611418565b60806108fb91518051600310156109f3570151611418565b60a06108fb91518051600410156109f3570151611418565b60c06108fb91518051600510156109f3570151611418565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211610aac57565b61036c610a86565b6020039060208211610aac57565b600119810191908211610aac57565b60bf19810191908211610aac57565b607f19810191908211610aac57565b60f619810191908211610aac57565b60b619810191908211610aac57565b91908203918211610aac57565b60405190610b27826102e4565b60008252565b90610b378261036e565b610b44604051918261033d565b8281528092610b55601f199161036e565b0190602036910137565b604051906060820182811067ffffffffffffffff821117610c0d575b60405260608252610bd4602083019160608352604084019260008452610bb5610bad610ba7845161096d565b516114bb565b8083526112a5565b610bbe816113c5565b15610bd957610bcd91506112f2565b8452610d48565b905290565b5061093f610bcd9151610c08610bf7610bf28351610a9d565b610b2d565b918251908360200190602101610c6e565b6112a5565b610c156102cd565b610b7b565b9060018201809211610aac57565b9060028201809211610aac57565b9060208201809211610aac57565b91908201809211610aac57565b601f8111610c61575b6101000a90565b610c69610a86565b610c5a565b929091928315610d105792915b602093848410610cda5780518252848101809111610ccd575b938101809111610cc0575b91601f198101908111610cb3575b91610c7b565b610cbb610a86565b610cad565b610cc8610a86565b610c9f565b610cd5610a86565b610c94565b919350918015610d0b57610cf8610cf3610cfd92610ab4565b610c51565b610a9d565b905182518216911916179052565b505050565b50915050565b6101006108fb9151805160071015610a195701516114bb565b6101206108fb9151805160081015610a195701516114bb565b6101406108fb91518051600910156109f3570151611418565b60405190610d6e8261030d565b60006020838281520152565b610dbe9060606020604051610d8e8161030d565b610d96610d61565b815201526040610db560808351805160031015610ddf575b01516112f2565b910151906109bb565b51610dc8816112f2565b60405191610dd58361030d565b8252602082015290565b610de7610956565b610dae565b602080910151805115610e1b575b0151601581510361000e576001600160a01b0390610e1790611418565b1690565b610e23610956565b610dfa565b604060206109449260608351610e3d816102e4565b520151805160011015610ddf5701516112f2565b606060206108fb920151805160021015610a195701516114bb565b602090610e77610d61565b5051805115610e8557015190565b610e8d610956565b015190565b6001906000198114610ea2570190565b610986610a86565b906020918051821015610ebc57010190565b610ec4610956565b010190565b9093600093610edc61093f6000956112a5565b90610ee7859761114a565b9182511561106f578597915b8151891015611064578351831161105857610f17610f118a846109bb565b516113ec565b9081516020809301200361105857610f38610f328a846109bb565b516112f2565b90815160118114600014610fe9575084518414610fb9575060ff610f76610f70610f628688610eaa565b516001600160f81b03191690565b60f81c90565b169060108211610fac57610f99610f93610fa593610f9f936109bb565b51611493565b93610c1a565b98610e92565b9791610ef3565b5050505050935050905090565b969750915050610fcf929650610ba791506109a9565b828151910120918151910120146000146108fb5750600190565b9199939091600203610fac5761100b8186611006610ba78e61098a565b61107a565b916110168383610c44565b86511461104357508115610fac57610f93611037610fa59361103d93610c44565b9a610998565b92610e92565b979850505050505093610ba7610fcf91610998565b50505050935050905090565b505050509293505050565b505050935050905090565b909161108760009261114a565b926110928451610b2d565b94825b85518401808511611119575b8110156110f1576110df906001600160f81b03196110bf8286610eaa565b51166110d9868303918383116110e4575b881a918a610eaa565b53610e92565b611095565b6110ec610a86565b6110d0565b509491505060209280519384910120906020815191012014600014611114575090565b905090565b611121610a86565b6110a1565b80600019046002118115151661113d575b60011b90565b611145610a86565b611137565b611152610b1a565b90805161115d575090565b6000915060ff61117f600f60f81b6111748461098a565b5160041c1660f81c90565b1691600192838114908115611233575b501561121257506111a6610bf2610cf88351611126565b916111b08261123e565b60001a6111bc8461098a565b538060ff815b1680915b6111d2575b5050505090565b845181101561120d57806111fa856111f56111f08661120796610b0d565b610c28565b611260565b60001a6110d98288610eaa565b826111c6565b6111cb565b9160ff61122a610bf26112258551611126565b610ac2565b939082916111c2565b60039150143861118f565b805115611253575b60200151600f60f81b1690565b61125b610956565b611246565b906001821661128b576112769160011c90610eaa565b5160fc1c5b60f81b6001600160f81b03191690565b61129b90600f9260011c90610eaa565b5160f81c1661127b565b6112ad610d61565b506020815191604051926112c08461030d565b835201602082015290565b60209067ffffffffffffffff81116112e5575b60051b0190565b6112ed6102cd565b6112de565b6112fb816113c5565b1561000e576113098161151c565b611312816112cb565b91611320604051938461033d565b818352601f1961132f836112cb565b0160005b8181106113ae57505061135460208092015161134e8161162d565b90610c44565b6000905b838210611366575050505090565b6113a2816113766113a8936115a7565b9061137f61035f565b8281528187820152611391868a6109bb565b5261139c85896109bb565b50610c44565b91610e92565b90611358565b6020906113b9610d61565b82828801015201611333565b8051156113e657602060c09101515160001a106113e157600190565b600090565b50600090565b6113f68151610b2d565b90815115611414578060206108fb9201519051908360200190610c6e565b5090565b80518015159081611487575b501561000e576020810190611439825161162d565b90519181830392831161147a575b5190810180911161146d575b519060208110611461575090565b6020036101000a900490565b611475610a86565b611453565b611482610a86565b611447565b60219150111538611424565b602181510361000e5760200151600181018091116114af575190565b6114b7610a86565b5190565b80511561000e576108fb60208201916114d4835161162d565b90519080820391821161150f575b6114eb82610b2d565b9351908101809111611502575b8360200190610c6e565b61150a610a86565b6114f8565b611517610a86565b6114e2565b8051156113e657600090602081019081516115368161162d565b810180911161159a575b91519051810180911161158d575b91905b82811061155e5750905090565b8061156b61157a926115a7565b81018091116115805791610e92565b90611551565b611588610a86565b6113a2565b611595610a86565b61154e565b6115a2610a86565b611540565b805160001a9060808210156115bd575050600190565b60b88210156115d857506115d36108fb91610ae0565b610c1a565b9060c08110156115fc5760b51991600160b783602003016101000a91015104010190565b9060f882101561161357506115d36108fb91610ad1565b60010151602082900360f7016101000a90040160f5190190565b5160001a60808110156116405750600090565b60b881108015611677575b156116565750600190565b60c081101561166b576115d36108fb91610afe565b6115d36108fb91610aef565b5060c0811015801561164b575060f8811061164b565b506040513d6000823e3d90fd5b156116a157565b60405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606490fd5b919294939060a0600180821b0360035416926024604051809581936320a9cea560e11b835260048301525afa9586156117e6575b6000948593869861177a575b50926108fb96949261176f92611766611775989661049b60405193849260208401968a889290916080949284526020840152604083015260608201520190565b51902092610b0d565b90611895565b61169a565b935096509360a0833d82116117de575b8161179760a0938361033d565b8101031261011857509161176f826108fb9694611775969451946117666020840151966117cc60806060870151960151610182565b96939a93969850509250929496611726565b3d915061178a565b6117ee61168d565b61171a565b156117fa57565b60405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60019060ff8111611845571b90565b61184d610a86565b1b90565b1561185857565b60405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606490fd5b93909192936118ae6118a88651601f1690565b156117f3565b6118cb6118c46118bf875160051c90565b611836565b8410611851565b60209182935b865185116119495786850151600193611917929185831661191d5760408051888101938452602084019290925261190b908290840161049b565b519020935b1c94610c36565b936118d1565b9061194061049b916040519283918a830195869091604092825260208201520190565b51902093611910565b50931493505050565b9060209161196b8151809281855285808601910161071b565b601f01601f1916010190565b6108fb9392606092825260208201528160408201520190611952565b9493926060926119b59287526020870152608060408701526080860190611952565b930152565b6002546004546001600160a01b0391821692911690823b1561000e57611a07926000928360405180968195829463b472047760e01b84526004840152604060248401526044830190611952565b03925af18015611a22575b611a195750565b61036c90610329565b611a2a61168d565b611a12565b91929092611a3e818585611ae7565b9384600052600060205260406000209283549360ff85166003811015611ad157600114611a6f575b50505050505050565b60027ffd38de8c79c8c3c553ecd154c6b11b67511ec8dee573c8a488a056d7335b34e89583600184015560ff1916179055611abc6040519384938452606060208501526060840190611952565b9060408301520390a338808080808080611a66565b634e487b7160e01b600052602160045260246000fd5b9190611b019061049b604051938492602084019687611977565b51902090565b8051810160608282031261000e5760208201519060408301519260608101519167ffffffffffffffff831161000e57611b479260208092019201016108b9565b611b52818484611bd2565b611b5d610653611c9f565b803b1561000e57611b8993600080946040519687958694859363085999a960e21b855260048501611977565b03925af18015611bae575b611b9b5750565b80611ba861036c92610329565b8061011b565b611bb661168d565b611b94565b6040906108fb939281528160208201520190611952565b90612000835111611c6157611be8838284611ae7565b9283600052600060205260406000209160ff8354166003811015611ad15715611c13575b5050505050565b611c457f55ad1db144341b8105784dba37a7cb1c3088262f75ea638cfb7c8ecfb73751c693600160ff19825416179055565b611c5460405192839283611bbb565b0390a33880808080611c0c565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420616e63696c6c617279206461746160501b6044820152606490fd5b6001546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa908115611d1d575b600091611ce957501690565b906020823d8211611d15575b81611d026020938361033d565b81010312610118575051610e1781610182565b3d9150611cf5565b611d2561168d565b611cdd56fea2646970667358221220261e3854209d634db0e8fe65839c75661b039d57161286cfc4205447d958762964736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c9081630e387de6146100de57508063607f2d42146100d5578063972c4928146100cc578063aea4e49e146100c3578063b9a3c84c146100ba578063c0857ba0146100b1578063c371dda7146100a8578063de9b771f1461009f578063deda381b146100965763f953cec71461008e57600080fd5b61000e610549565b5061000e6103e0565b5061000e6102a3565b5061000e610285565b5061000e61025b565b5061000e610231565b5061000e610193565b5061000e610158565b5061000e610126565b346101185780600319360112610118577f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03660805260206080f35b80fd5b600091031261000e57565b503461000e57602036600319011261000e576004356000526005602052602060ff604060002054166040519015158152f35b503461000e57600036600319011261000e576004546040516001600160a01b039091168152602090f35b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356101b181610182565b600454906001600160a01b03908183166101d9576001600160a01b0319909216911617600455005b60405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608490fd5b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e5760206040516120008152f35b503461000e57600036600319011261000e576002546040516001600160a01b039091168152602090f35b50634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff82111761030057604052565b6103086102cd565b604052565b6040810190811067ffffffffffffffff82111761030057604052565b67ffffffffffffffff811161030057604052565b90601f8019910116810190811067ffffffffffffffff82111761030057604052565b6040519061036c8261030d565b565b60209067ffffffffffffffff811161038c575b601f01601f19160190565b6103946102cd565b610381565b81601f8201121561000e578035906103b08261036e565b926103be604051948561033d565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57606036600319011261000e5760043560243560443567ffffffffffffffff811161000e57610418903690600401610399565b60065460ff8116156105045760ff19166006556001600160a01b0361043b611c9f565b1690602060405180936338ce36ab60e11b8252818061045f86898b60048501611977565b03915afa9182156104f7575b6000926104c2575b509261049b828561048c6104a9956104ae988887611a2f565b60405195869460208601611993565b03601f19810183528261033d565b6119ba565b6104c0600160ff196006541617600655565b005b90916020823d82116104ef575b816104dc6020938361033d565b810103126101185750519061049b610473565b3d91506104cf565b6104ff61168d565b61046b565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b503461000e57602036600319011261000e5760043567ffffffffffffffff811161000e5761071661070761058c6105876104c0943690600401610399565b610924565b6106be61059882610d2f565b916105a281610a26565b9061061a61060d6105b28661114a565b61049b6105d36105c186610d48565b60405192839160208301958a8761073e565b5190206105fd6105f76105f0836000526005602052604060002090565b5460ff1690565b15610763565b6000526005602052604060002090565b805460ff19166001179055565b602061069361068e61062b84610b5f565b61063481610d7a565b600454909890610670906001600160a01b031661065f6106538c610dec565b6001600160a01b031690565b6001600160a01b03909116146107bb565b61067986610a6e565b94859201519061068887610d16565b91610ec9565b610815565b61069c82610a3e565b6106a583610a56565b906106b86106b2856109dd565b94610a00565b946116e6565b506107027f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0366106fc6106f76106f285610e28565b610e6c565b611418565b1461086d565b610e51565b602080825183010191016108fe565b611b07565b60005b83811061072e5750506000910152565b818101518382015260200161071e565b60409392918152610758825180936020808501910161071b565b019060208201520190565b1561076a57565b60405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608490fd5b156107c257565b60405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608490fd5b1561081c57565b60405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608490fd5b1561087457565b60405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606490fd5b81601f8201121561000e5780516108cf8161036e565b926108dd604051948561033d565b8184526020828401011161000e576108fb916020808501910161071b565b90565b9060208282031261000e57815167ffffffffffffffff811161000e576108fb92016108b9565b61093f610944916060604051610939816102e4565b526112a5565b6112f2565b60405190610951826102e4565b815290565b50634e487b7160e01b600052603260045260246000fd5b60e09080516006101561097e570190565b610986610956565b0190565b60209080511561097e570190565b60409080516001101561097e570190565b6102209080516010101561097e570190565b60209181518110156109d0575b60051b010190565b6109d8610956565b6109c8565b60206108fb91518051156109f3575b0151611418565b6109fb610956565b6109ec565b60406108fb9151805160011015610a19575b01516114bb565b610a21610956565b610a12565b60606108fb91518051600210156109f3570151611418565b60806108fb91518051600310156109f3570151611418565b60a06108fb91518051600410156109f3570151611418565b60c06108fb91518051600510156109f3570151611418565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211610aac57565b61036c610a86565b6020039060208211610aac57565b600119810191908211610aac57565b60bf19810191908211610aac57565b607f19810191908211610aac57565b60f619810191908211610aac57565b60b619810191908211610aac57565b91908203918211610aac57565b60405190610b27826102e4565b60008252565b90610b378261036e565b610b44604051918261033d565b8281528092610b55601f199161036e565b0190602036910137565b604051906060820182811067ffffffffffffffff821117610c0d575b60405260608252610bd4602083019160608352604084019260008452610bb5610bad610ba7845161096d565b516114bb565b8083526112a5565b610bbe816113c5565b15610bd957610bcd91506112f2565b8452610d48565b905290565b5061093f610bcd9151610c08610bf7610bf28351610a9d565b610b2d565b918251908360200190602101610c6e565b6112a5565b610c156102cd565b610b7b565b9060018201809211610aac57565b9060028201809211610aac57565b9060208201809211610aac57565b91908201809211610aac57565b601f8111610c61575b6101000a90565b610c69610a86565b610c5a565b929091928315610d105792915b602093848410610cda5780518252848101809111610ccd575b938101809111610cc0575b91601f198101908111610cb3575b91610c7b565b610cbb610a86565b610cad565b610cc8610a86565b610c9f565b610cd5610a86565b610c94565b919350918015610d0b57610cf8610cf3610cfd92610ab4565b610c51565b610a9d565b905182518216911916179052565b505050565b50915050565b6101006108fb9151805160071015610a195701516114bb565b6101206108fb9151805160081015610a195701516114bb565b6101406108fb91518051600910156109f3570151611418565b60405190610d6e8261030d565b60006020838281520152565b610dbe9060606020604051610d8e8161030d565b610d96610d61565b815201526040610db560808351805160031015610ddf575b01516112f2565b910151906109bb565b51610dc8816112f2565b60405191610dd58361030d565b8252602082015290565b610de7610956565b610dae565b602080910151805115610e1b575b0151601581510361000e576001600160a01b0390610e1790611418565b1690565b610e23610956565b610dfa565b604060206109449260608351610e3d816102e4565b520151805160011015610ddf5701516112f2565b606060206108fb920151805160021015610a195701516114bb565b602090610e77610d61565b5051805115610e8557015190565b610e8d610956565b015190565b6001906000198114610ea2570190565b610986610a86565b906020918051821015610ebc57010190565b610ec4610956565b010190565b9093600093610edc61093f6000956112a5565b90610ee7859761114a565b9182511561106f578597915b8151891015611064578351831161105857610f17610f118a846109bb565b516113ec565b9081516020809301200361105857610f38610f328a846109bb565b516112f2565b90815160118114600014610fe9575084518414610fb9575060ff610f76610f70610f628688610eaa565b516001600160f81b03191690565b60f81c90565b169060108211610fac57610f99610f93610fa593610f9f936109bb565b51611493565b93610c1a565b98610e92565b9791610ef3565b5050505050935050905090565b969750915050610fcf929650610ba791506109a9565b828151910120918151910120146000146108fb5750600190565b9199939091600203610fac5761100b8186611006610ba78e61098a565b61107a565b916110168383610c44565b86511461104357508115610fac57610f93611037610fa59361103d93610c44565b9a610998565b92610e92565b979850505050505093610ba7610fcf91610998565b50505050935050905090565b505050509293505050565b505050935050905090565b909161108760009261114a565b926110928451610b2d565b94825b85518401808511611119575b8110156110f1576110df906001600160f81b03196110bf8286610eaa565b51166110d9868303918383116110e4575b881a918a610eaa565b53610e92565b611095565b6110ec610a86565b6110d0565b509491505060209280519384910120906020815191012014600014611114575090565b905090565b611121610a86565b6110a1565b80600019046002118115151661113d575b60011b90565b611145610a86565b611137565b611152610b1a565b90805161115d575090565b6000915060ff61117f600f60f81b6111748461098a565b5160041c1660f81c90565b1691600192838114908115611233575b501561121257506111a6610bf2610cf88351611126565b916111b08261123e565b60001a6111bc8461098a565b538060ff815b1680915b6111d2575b5050505090565b845181101561120d57806111fa856111f56111f08661120796610b0d565b610c28565b611260565b60001a6110d98288610eaa565b826111c6565b6111cb565b9160ff61122a610bf26112258551611126565b610ac2565b939082916111c2565b60039150143861118f565b805115611253575b60200151600f60f81b1690565b61125b610956565b611246565b906001821661128b576112769160011c90610eaa565b5160fc1c5b60f81b6001600160f81b03191690565b61129b90600f9260011c90610eaa565b5160f81c1661127b565b6112ad610d61565b506020815191604051926112c08461030d565b835201602082015290565b60209067ffffffffffffffff81116112e5575b60051b0190565b6112ed6102cd565b6112de565b6112fb816113c5565b1561000e576113098161151c565b611312816112cb565b91611320604051938461033d565b818352601f1961132f836112cb565b0160005b8181106113ae57505061135460208092015161134e8161162d565b90610c44565b6000905b838210611366575050505090565b6113a2816113766113a8936115a7565b9061137f61035f565b8281528187820152611391868a6109bb565b5261139c85896109bb565b50610c44565b91610e92565b90611358565b6020906113b9610d61565b82828801015201611333565b8051156113e657602060c09101515160001a106113e157600190565b600090565b50600090565b6113f68151610b2d565b90815115611414578060206108fb9201519051908360200190610c6e565b5090565b80518015159081611487575b501561000e576020810190611439825161162d565b90519181830392831161147a575b5190810180911161146d575b519060208110611461575090565b6020036101000a900490565b611475610a86565b611453565b611482610a86565b611447565b60219150111538611424565b602181510361000e5760200151600181018091116114af575190565b6114b7610a86565b5190565b80511561000e576108fb60208201916114d4835161162d565b90519080820391821161150f575b6114eb82610b2d565b9351908101809111611502575b8360200190610c6e565b61150a610a86565b6114f8565b611517610a86565b6114e2565b8051156113e657600090602081019081516115368161162d565b810180911161159a575b91519051810180911161158d575b91905b82811061155e5750905090565b8061156b61157a926115a7565b81018091116115805791610e92565b90611551565b611588610a86565b6113a2565b611595610a86565b61154e565b6115a2610a86565b611540565b805160001a9060808210156115bd575050600190565b60b88210156115d857506115d36108fb91610ae0565b610c1a565b9060c08110156115fc5760b51991600160b783602003016101000a91015104010190565b9060f882101561161357506115d36108fb91610ad1565b60010151602082900360f7016101000a90040160f5190190565b5160001a60808110156116405750600090565b60b881108015611677575b156116565750600190565b60c081101561166b576115d36108fb91610afe565b6115d36108fb91610aef565b5060c0811015801561164b575060f8811061164b565b506040513d6000823e3d90fd5b156116a157565b60405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606490fd5b919294939060a0600180821b0360035416926024604051809581936320a9cea560e11b835260048301525afa9586156117e6575b6000948593869861177a575b50926108fb96949261176f92611766611775989661049b60405193849260208401968a889290916080949284526020840152604083015260608201520190565b51902092610b0d565b90611895565b61169a565b935096509360a0833d82116117de575b8161179760a0938361033d565b8101031261011857509161176f826108fb9694611775969451946117666020840151966117cc60806060870151960151610182565b96939a93969850509250929496611726565b3d915061178a565b6117ee61168d565b61171a565b156117fa57565b60405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60019060ff8111611845571b90565b61184d610a86565b1b90565b1561185857565b60405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606490fd5b93909192936118ae6118a88651601f1690565b156117f3565b6118cb6118c46118bf875160051c90565b611836565b8410611851565b60209182935b865185116119495786850151600193611917929185831661191d5760408051888101938452602084019290925261190b908290840161049b565b519020935b1c94610c36565b936118d1565b9061194061049b916040519283918a830195869091604092825260208201520190565b51902093611910565b50931493505050565b9060209161196b8151809281855285808601910161071b565b601f01601f1916010190565b6108fb9392606092825260208201528160408201520190611952565b9493926060926119b59287526020870152608060408701526080860190611952565b930152565b6002546004546001600160a01b0391821692911690823b1561000e57611a07926000928360405180968195829463b472047760e01b84526004840152604060248401526044830190611952565b03925af18015611a22575b611a195750565b61036c90610329565b611a2a61168d565b611a12565b91929092611a3e818585611ae7565b9384600052600060205260406000209283549360ff85166003811015611ad157600114611a6f575b50505050505050565b60027ffd38de8c79c8c3c553ecd154c6b11b67511ec8dee573c8a488a056d7335b34e89583600184015560ff1916179055611abc6040519384938452606060208501526060840190611952565b9060408301520390a338808080808080611a66565b634e487b7160e01b600052602160045260246000fd5b9190611b019061049b604051938492602084019687611977565b51902090565b8051810160608282031261000e5760208201519060408301519260608101519167ffffffffffffffff831161000e57611b479260208092019201016108b9565b611b52818484611bd2565b611b5d610653611c9f565b803b1561000e57611b8993600080946040519687958694859363085999a960e21b855260048501611977565b03925af18015611bae575b611b9b5750565b80611ba861036c92610329565b8061011b565b611bb661168d565b611b94565b6040906108fb939281528160208201520190611952565b90612000835111611c6157611be8838284611ae7565b9283600052600060205260406000209160ff8354166003811015611ad15715611c13575b5050505050565b611c457f55ad1db144341b8105784dba37a7cb1c3088262f75ea638cfb7c8ecfb73751c693600160ff19825416179055565b611c5460405192839283611bbb565b0390a33880808080611c0c565b60405162461bcd60e51b8152602060048201526016602482015275496e76616c696420616e63696c6c617279206461746160501b6044820152606490fd5b6001546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa908115611d1d575b600091611ce957501690565b906020823d8211611d15575b81611d026020938361033d565b81010312610118575051610e1781610182565b3d9150611cf5565b611d2561168d565b611cdd56fea2646970667358221220261e3854209d634db0e8fe65839c75661b039d57161286cfc4205447d958762964736f6c63430008100033",
  "devdoc": {
    "details": "This contract must be a registered financial contract in order to make DVM price requests.",
    "kind": "dev",
    "methods": {
      "publishPrice(bytes32,uint256,bytes)": {
        "details": "Publishes the DVM resolved price for the price request, or reverts if not resolved yet. This contract must be registered with the DVM to query price requests.",
        "params": {
          "ancillaryData": "extra data of price request to resolve.",
          "identifier": "Identifier of price request to resolve.",
          "time": "Timestamp of price request to resolve."
        }
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      }
    },
    "title": "Adapter deployed on mainnet that validates and sends price requests from sidechain to the DVM on mainnet.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "publishPrice(bytes32,uint256,bytes)": {
        "notice": "This is the first method that should be called in order to publish a price request to the sidechain."
      },
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72263,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "prices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Price)72255_storage)"
      },
      {
        "astId": 72266,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "finder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FinderInterface)36753"
      },
      {
        "astId": 2923,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFxStateSender)2873"
      },
      {
        "astId": 2926,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICheckpointManager)2891"
      },
      {
        "astId": 2928,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2932,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 16304,
        "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
        "label": "_notEntered",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ICheckpointManager)2891": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2873": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_enum(RequestState)72249": {
        "encoding": "inplace",
        "label": "enum OracleBaseTunnel.RequestState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Price)72255_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OracleBaseTunnel.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)72255_storage"
      },
      "t_struct(Price)72255_storage": {
        "encoding": "inplace",
        "label": "struct OracleBaseTunnel.Price",
        "members": [
          {
            "astId": 72252,
            "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RequestState)72249"
          },
          {
            "astId": 72254,
            "contract": "contracts/polygon-cross-chain-oracle/OracleRootTunnel.sol:OracleRootTunnel",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}