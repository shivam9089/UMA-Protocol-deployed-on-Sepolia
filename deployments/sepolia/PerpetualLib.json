{
  "address": "0x4BC79d42400B678CE62038b6d1b3c478F3BBCb81",
  "abi": [],
  "transactionHash": "0x072877ea0d2bbd998279afe430a086668e853a00e17467f57e774faa22d16f26",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x4BC79d42400B678CE62038b6d1b3c478F3BBCb81",
    "transactionIndex": 40,
    "gasUsed": "5026456",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf68d899d2efedc42c4d268cb50f71ab7f11dae033659c5d6e33e96d4d8b0fd37",
    "transactionHash": "0x072877ea0d2bbd998279afe430a086668e853a00e17467f57e774faa22d16f26",
    "logs": [],
    "blockNumber": 6153701,
    "cumulativeGasUsed": "10557388",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Using this library to deploy Perpetuals allows calling contracts to avoid importing the full bytecode.\",\"kind\":\"dev\",\"methods\":{\"deploy(PerpetualLiquidatable.ConstructorParams)\":{\"details\":\"Caller will need to register new Perpetual with the Registry to begin requesting prices. Caller is also responsible for enforcing constraints on `params`.\",\"params\":{\"params\":\"is a `ConstructorParams` object from Perpetual.\"},\"returns\":{\"_0\":\"address of the deployed Perpetual contract\"}}},\"title\":\"Provides convenient Perpetual Multi Party contract utilities.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(PerpetualLiquidatable.ConstructorParams)\":{\"notice\":\"Returns address of new Perpetual deployed with given `params` configuration.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/financial-templates/perpetual-multiparty/PerpetualLib.sol\":\"PerpetualLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/AncillaryData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Library for encoding and decoding ancillary data for DVM price requests.\\r\\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\\r\\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\\r\\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\\r\\n * smart contracts. More details on UMA's ancillary data guidelines below:\\r\\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\\r\\n */\\r\\nlibrary AncillaryData {\\r\\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\\r\\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\\r\\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\\r\\n        unchecked {\\r\\n            uint256 x = uint256(bytesIn);\\r\\n\\r\\n            // Nibble interleave\\r\\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\r\\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\r\\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\r\\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\r\\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\r\\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\r\\n\\r\\n            // Hex encode\\r\\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\\r\\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\\r\\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\\r\\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\\r\\n\\r\\n            // Return the result.\\r\\n            return bytes32(x);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\\r\\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\\r\\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\\r\\n     * @param bytesIn bytes32 to encode.\\r\\n     * @return utf8 encoded bytes32.\\r\\n     */\\r\\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\\r\\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\\r\\n     * @dev Will return address in all lower case characters and without the leading 0x.\\r\\n     * @param x address to encode.\\r\\n     * @return utf8 encoded address bytes.\\r\\n     */\\r\\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\\r\\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\\r\\n     */\\r\\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\\r\\n        if (x == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = x;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (x != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            x /= 10;\\r\\n        }\\r\\n        return bstr;\\r\\n    }\\r\\n\\r\\n    function appendKeyValueBytes32(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        bytes32 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is an address that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueAddress(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        address value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueUint(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        uint256 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper method that returns the left hand side of a \\\"key:value\\\" pair plus the colon \\\":\\\" and a leading\\r\\n     * comma \\\",\\\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\\r\\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\\r\\n     */\\r\\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\\r\\n        if (currentAncillaryData.length > 0) {\\r\\n            return abi.encodePacked(\\\",\\\", key, \\\":\\\");\\r\\n        } else {\\r\\n            return abi.encodePacked(key, \\\":\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe2300c69cbaca3ca305dc9445e6f791ef26315d1af9cf4f8021757fd1e2fd07\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface that includes burn and mint methods.\\r\\n */\\r\\nabstract contract ExpandedIERC20 is IERC20 {\\r\\n    /**\\r\\n     * @notice Burns a specific amount of the caller's tokens.\\r\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\r\\n     */\\r\\n    function burn(uint256 value) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\r\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\r\\n     */\\r\\n    function mint(address to, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    function addMinter(address account) external virtual;\\r\\n\\r\\n    function addBurner(address account) external virtual;\\r\\n\\r\\n    function resetOwner(address account) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3e81268dc3417f29f6047fab4fa03d5b1fc23f280485ba81b90769c971293fc\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/AdministrateeInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that all financial contracts expose to the admin.\\r\\n */\\r\\ninterface AdministrateeInterface {\\r\\n    /**\\r\\n     * @notice Initiates the shutdown process, in case of an emergency.\\r\\n     */\\r\\n    function emergencyShutdown() external;\\r\\n\\r\\n    /**\\r\\n     * @notice A core contract method called independently or as a part of other financial contract transactions.\\r\\n     * @dev It pays fees and moves money between margin accounts to make sure they reflect the NAV of the contract.\\r\\n     */\\r\\n    function remargin() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\r\\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\r\\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\r\\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\r\\n     */\\r\\n    function pfc() external view returns (FixedPoint.Unsigned memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xc7e6dd59706bc988db6a3457a4c120cbfcfd23313d81371bad83c3fc21111f58\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestPrice(bytes32 identifier, uint256 time) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(bytes32 identifier, uint256 time) external view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(bytes32 identifier, uint256 time) external view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa135756eabf06899395052031d8a2f617ef504477dc3037585f2b4ce0e3da22a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/StoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\\r\\n */\\r\\ninterface StoreInterface {\\r\\n    /**\\r\\n     * @notice Pays Oracle fees in ETH to the store.\\r\\n     * @dev To be used by contracts whose margin currency is ETH.\\r\\n     */\\r\\n    function payOracleFees() external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\\r\\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\\r\\n     * @param erc20Address address of the ERC20 token used to pay the fee.\\r\\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\\r\\n     */\\r\\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\\r\\n     * @param startTime defines the beginning time from which the fee is paid.\\r\\n     * @param endTime end time until which the fee is paid.\\r\\n     * @param pfc \\\"profit from corruption\\\", or the maximum amount of margin currency that a\\r\\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\\r\\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\\r\\n     * @return latePenalty for paying the fee after the deadline.\\r\\n     */\\r\\n    function computeRegularFee(\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        FixedPoint.Unsigned calldata pfc\\r\\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\\r\\n     * @param currency token used to pay the final fee.\\r\\n     * @return finalFee amount due.\\r\\n     */\\r\\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe3b9671f228acd1025324f8460a7e007cc364f2d5896112b1c264aacfc2368b4\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/EmergencyShutdownable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title EmergencyShutdownable contract.\\r\\n * @notice Any contract that inherits this contract will have an emergency shutdown timestamp state variable.\\r\\n * This contract provides modifiers that can be used by children contracts to determine if the contract is\\r\\n * in the shutdown state. The child contract is expected to implement the logic that happens\\r\\n * once a shutdown occurs.\\r\\n */\\r\\n\\r\\nabstract contract EmergencyShutdownable {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /****************************************\\r\\n     * EMERGENCY SHUTDOWN DATA STRUCTURES *\\r\\n     ****************************************/\\r\\n\\r\\n    // Timestamp used in case of emergency shutdown. 0 if no shutdown has been triggered.\\r\\n    uint256 public emergencyShutdownTimestamp;\\r\\n\\r\\n    /****************************************\\r\\n     *              MODIFIERS               *\\r\\n     ****************************************/\\r\\n\\r\\n    modifier notEmergencyShutdown() {\\r\\n        _notEmergencyShutdown();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier isEmergencyShutdown() {\\r\\n        _isEmergencyShutdown();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          EXTERNAL FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    constructor() {\\r\\n        emergencyShutdownTimestamp = 0;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          INTERNAL FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    function _notEmergencyShutdown() internal view {\\r\\n        // Note: removed require string to save bytecode.\\r\\n        require(emergencyShutdownTimestamp == 0);\\r\\n    }\\r\\n\\r\\n    function _isEmergencyShutdown() internal view {\\r\\n        // Note: removed require string to save bytecode.\\r\\n        require(emergencyShutdownTimestamp != 0);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4776b2ab2f03f302d58034e9105519791613e4d051ba4eb4b232b86e17544e76\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/FeePayer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/interfaces/StoreInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/AdministrateeInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FeePayer contract.\\r\\n * @notice Provides fee payment functionality for the ExpiringMultiParty contract.\\r\\n * contract is abstract as each derived contract that inherits `FeePayer` must implement `pfc()`.\\r\\n */\\r\\n\\r\\nabstract contract FeePayer is AdministrateeInterface, Testable, Lockable {\\r\\n    using SafeMath for uint256;\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /****************************************\\r\\n     *      FEE PAYER DATA STRUCTURES       *\\r\\n     ****************************************/\\r\\n\\r\\n    // The collateral currency used to back the positions in this contract.\\r\\n    IERC20 public collateralCurrency;\\r\\n\\r\\n    // Finder contract used to look up addresses for UMA system contracts.\\r\\n    FinderInterface public finder;\\r\\n\\r\\n    // Tracks the last block time when the fees were paid.\\r\\n    uint256 private lastPaymentTime;\\r\\n\\r\\n    // Tracks the cumulative fees that have been paid by the contract for use by derived contracts.\\r\\n    // The multiplier starts at 1, and is updated by computing cumulativeFeeMultiplier * (1 - effectiveFee).\\r\\n    // Put another way, the cumulativeFeeMultiplier is (1 - effectiveFee1) * (1 - effectiveFee2) ...\\r\\n    // For example:\\r\\n    // The cumulativeFeeMultiplier should start at 1.\\r\\n    // If a 1% fee is charged, the multiplier should update to .99.\\r\\n    // If another 1% fee is charged, the multiplier should be 0.99^2 (0.9801).\\r\\n    FixedPoint.Unsigned public cumulativeFeeMultiplier;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event RegularFeesPaid(uint256 indexed regularFee, uint256 indexed lateFee);\\r\\n    event FinalFeesPaid(uint256 indexed amount);\\r\\n\\r\\n    /****************************************\\r\\n     *              MODIFIERS               *\\r\\n     ****************************************/\\r\\n\\r\\n    // modifier that calls payRegularFees().\\r\\n    modifier fees virtual {\\r\\n        // Note: the regular fee is applied on every fee-accruing transaction, where the total change is simply the\\r\\n        // regular fee applied linearly since the last update. This implies that the compounding rate depends on the\\r\\n        // frequency of update transactions that have this modifier, and it never reaches the ideal of continuous\\r\\n        // compounding. This approximate-compounding pattern is common in the Ethereum ecosystem because of the\\r\\n        // complexity of compounding data on-chain.\\r\\n        payRegularFees();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the FeePayer contract. Called by child contracts.\\r\\n     * @param _collateralAddress ERC20 token that is used as the underlying collateral for the synthetic.\\r\\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(\\r\\n        address _collateralAddress,\\r\\n        address _finderAddress,\\r\\n        address _timerAddress\\r\\n    ) Testable(_timerAddress) {\\r\\n        collateralCurrency = IERC20(_collateralAddress);\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n        lastPaymentTime = getCurrentTime();\\r\\n        cumulativeFeeMultiplier = FixedPoint.fromUnscaledUint(1);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        FEE PAYMENT FUNCTIONS         *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Pays UMA DVM regular fees (as a % of the collateral pool) to the Store contract.\\r\\n     * @dev These must be paid periodically for the life of the contract. If the contract has not paid its regular fee\\r\\n     * in a week or more then a late penalty is applied which is sent to the caller. If the amount of\\r\\n     * fees owed are greater than the pfc, then this will pay as much as possible from the available collateral.\\r\\n     * An event is only fired if the fees charged are greater than 0.\\r\\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\\r\\n     * This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\\r\\n     */\\r\\n    function payRegularFees() public nonReentrant() returns (FixedPoint.Unsigned memory) {\\r\\n        uint256 time = getCurrentTime();\\r\\n        FixedPoint.Unsigned memory collateralPool = _pfc();\\r\\n\\r\\n        // Fetch the regular fees, late penalty and the max possible to pay given the current collateral within the contract.\\r\\n        (\\r\\n            FixedPoint.Unsigned memory regularFee,\\r\\n            FixedPoint.Unsigned memory latePenalty,\\r\\n            FixedPoint.Unsigned memory totalPaid\\r\\n        ) = getOutstandingRegularFees(time);\\r\\n        lastPaymentTime = time;\\r\\n\\r\\n        // If there are no fees to pay then exit early.\\r\\n        if (totalPaid.isEqual(0)) {\\r\\n            return totalPaid;\\r\\n        }\\r\\n\\r\\n        emit RegularFeesPaid(regularFee.rawValue, latePenalty.rawValue);\\r\\n\\r\\n        _adjustCumulativeFeeMultiplier(totalPaid, collateralPool);\\r\\n\\r\\n        if (regularFee.isGreaterThan(0)) {\\r\\n            StoreInterface store = _getStore();\\r\\n            collateralCurrency.safeIncreaseAllowance(address(store), regularFee.rawValue);\\r\\n            store.payOracleFeesErc20(address(collateralCurrency), regularFee);\\r\\n        }\\r\\n\\r\\n        if (latePenalty.isGreaterThan(0)) {\\r\\n            collateralCurrency.safeTransfer(msg.sender, latePenalty.rawValue);\\r\\n        }\\r\\n        return totalPaid;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Fetch any regular fees that the contract has pending but has not yet paid. If the fees to be paid are more\\r\\n     * than the total collateral within the contract then the totalPaid returned is full contract collateral amount.\\r\\n     * @dev This returns 0 and exit early if there is no pfc, fees were already paid during the current block, or the fee rate is 0.\\r\\n     * @return regularFee outstanding unpaid regular fee.\\r\\n     * @return latePenalty outstanding unpaid late fee for being late in previous fee payments.\\r\\n     * @return totalPaid Amount of collateral that the contract paid (sum of the amount paid to the Store and caller).\\r\\n     */\\r\\n    function getOutstandingRegularFees(uint256 time)\\r\\n        public\\r\\n        view\\r\\n        returns (\\r\\n            FixedPoint.Unsigned memory regularFee,\\r\\n            FixedPoint.Unsigned memory latePenalty,\\r\\n            FixedPoint.Unsigned memory totalPaid\\r\\n        )\\r\\n    {\\r\\n        StoreInterface store = _getStore();\\r\\n        FixedPoint.Unsigned memory collateralPool = _pfc();\\r\\n\\r\\n        // Exit early if there is no collateral or if fees were already paid during this block.\\r\\n        if (collateralPool.isEqual(0) || lastPaymentTime == time) {\\r\\n            return (regularFee, latePenalty, totalPaid);\\r\\n        }\\r\\n\\r\\n        (regularFee, latePenalty) = store.computeRegularFee(lastPaymentTime, time, collateralPool);\\r\\n\\r\\n        totalPaid = regularFee.add(latePenalty);\\r\\n        if (totalPaid.isEqual(0)) {\\r\\n            return (regularFee, latePenalty, totalPaid);\\r\\n        }\\r\\n        // If the effective fees paid as a % of the pfc is > 100%, then we need to reduce it and make the contract pay\\r\\n        // as much of the fee that it can (up to 100% of its pfc). We'll reduce the late penalty first and then the\\r\\n        // regular fee, which has the effect of paying the store first, followed by the caller if there is any fee remaining.\\r\\n        if (totalPaid.isGreaterThan(collateralPool)) {\\r\\n            FixedPoint.Unsigned memory deficit = totalPaid.sub(collateralPool);\\r\\n            FixedPoint.Unsigned memory latePenaltyReduction = FixedPoint.min(latePenalty, deficit);\\r\\n            latePenalty = latePenalty.sub(latePenaltyReduction);\\r\\n            deficit = deficit.sub(latePenaltyReduction);\\r\\n            regularFee = regularFee.sub(FixedPoint.min(regularFee, deficit));\\r\\n            totalPaid = collateralPool;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current profit from corruption for this contract in terms of the collateral currency.\\r\\n     * @dev This is equivalent to the collateral pool available from which to pay fees. Therefore, derived contracts are\\r\\n     * expected to implement this so that pay-fee methods can correctly compute the owed fees as a % of PfC.\\r\\n     * @return pfc value for equal to the current profit from corruption denominated in collateral currency.\\r\\n     */\\r\\n    function pfc() external view override nonReentrantView() returns (FixedPoint.Unsigned memory) {\\r\\n        return _pfc();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes excess collateral balance not counted in the PfC by distributing it out pro-rata to all sponsors.\\r\\n     * @dev Multiplying the `cumulativeFeeMultiplier` by the ratio of non-PfC-collateral :: PfC-collateral effectively\\r\\n     * pays all sponsors a pro-rata portion of the excess collateral.\\r\\n     * @dev This will revert if PfC is 0 and this contract's collateral balance > 0.\\r\\n     */\\r\\n    function gulp() external nonReentrant() {\\r\\n        _gulp();\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *         INTERNAL FUNCTIONS           *\\r\\n     ****************************************/\\r\\n\\r\\n    // Pays UMA Oracle final fees of `amount` in `collateralCurrency` to the Store contract. Final fee is a flat fee\\r\\n    // charged for each price request. If payer is the contract, adjusts internal bookkeeping variables. If payer is not\\r\\n    // the contract, pulls in `amount` of collateral currency.\\r\\n    function _payFinalFees(address payer, FixedPoint.Unsigned memory amount) internal {\\r\\n        if (amount.isEqual(0)) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (payer != address(this)) {\\r\\n            // If the payer is not the contract pull the collateral from the payer.\\r\\n            collateralCurrency.safeTransferFrom(payer, address(this), amount.rawValue);\\r\\n        } else {\\r\\n            // If the payer is the contract, adjust the cumulativeFeeMultiplier to compensate.\\r\\n            FixedPoint.Unsigned memory collateralPool = _pfc();\\r\\n\\r\\n            // The final fee must be < available collateral or the fee will be larger than 100%.\\r\\n            // Note: revert reason removed to save bytecode.\\r\\n            require(collateralPool.isGreaterThan(amount));\\r\\n\\r\\n            _adjustCumulativeFeeMultiplier(amount, collateralPool);\\r\\n        }\\r\\n\\r\\n        emit FinalFeesPaid(amount.rawValue);\\r\\n\\r\\n        StoreInterface store = _getStore();\\r\\n        collateralCurrency.safeIncreaseAllowance(address(store), amount.rawValue);\\r\\n        store.payOracleFeesErc20(address(collateralCurrency), amount);\\r\\n    }\\r\\n\\r\\n    function _gulp() internal {\\r\\n        FixedPoint.Unsigned memory currentPfc = _pfc();\\r\\n        FixedPoint.Unsigned memory currentBalance = FixedPoint.Unsigned(collateralCurrency.balanceOf(address(this)));\\r\\n        if (currentPfc.isLessThan(currentBalance)) {\\r\\n            cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(currentBalance.div(currentPfc));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _pfc() internal view virtual returns (FixedPoint.Unsigned memory);\\r\\n\\r\\n    function _getStore() internal view returns (StoreInterface) {\\r\\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\\r\\n    }\\r\\n\\r\\n    function _computeFinalFees() internal view returns (FixedPoint.Unsigned memory finalFees) {\\r\\n        StoreInterface store = _getStore();\\r\\n        return store.computeFinalFee(address(collateralCurrency));\\r\\n    }\\r\\n\\r\\n    // Returns the user's collateral minus any fees that have been subtracted since it was originally\\r\\n    // deposited into the contract. Note: if the contract has paid fees since it was deployed, the raw\\r\\n    // value should be larger than the returned value.\\r\\n    function _getFeeAdjustedCollateral(FixedPoint.Unsigned memory rawCollateral)\\r\\n        internal\\r\\n        view\\r\\n        returns (FixedPoint.Unsigned memory collateral)\\r\\n    {\\r\\n        return rawCollateral.mul(cumulativeFeeMultiplier);\\r\\n    }\\r\\n\\r\\n    // Returns the user's collateral minus any pending fees that have yet to be subtracted.\\r\\n    function _getPendingRegularFeeAdjustedCollateral(FixedPoint.Unsigned memory rawCollateral)\\r\\n        internal\\r\\n        view\\r\\n        returns (FixedPoint.Unsigned memory)\\r\\n    {\\r\\n        (, , FixedPoint.Unsigned memory currentTotalOutstandingRegularFees) =\\r\\n            getOutstandingRegularFees(getCurrentTime());\\r\\n        if (currentTotalOutstandingRegularFees.isEqual(FixedPoint.fromUnscaledUint(0))) return rawCollateral;\\r\\n\\r\\n        // Calculate the total outstanding regular fee as a fraction of the total contract PFC.\\r\\n        FixedPoint.Unsigned memory effectiveOutstandingFee = currentTotalOutstandingRegularFees.divCeil(_pfc());\\r\\n\\r\\n        // Scale as rawCollateral* (1 - effectiveOutstandingFee) to apply the pro-rata amount to the regular fee.\\r\\n        return rawCollateral.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveOutstandingFee));\\r\\n    }\\r\\n\\r\\n    // Converts a user-readable collateral value into a raw value that accounts for already-assessed fees. If any fees\\r\\n    // have been taken from this contract in the past, then the raw value will be larger than the user-readable value.\\r\\n    function _convertToRawCollateral(FixedPoint.Unsigned memory collateral)\\r\\n        internal\\r\\n        view\\r\\n        returns (FixedPoint.Unsigned memory rawCollateral)\\r\\n    {\\r\\n        return collateral.div(cumulativeFeeMultiplier);\\r\\n    }\\r\\n\\r\\n    // Decrease rawCollateral by a fee-adjusted collateralToRemove amount. Fee adjustment scales up collateralToRemove\\r\\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\r\\n    // rawCollateral is decreased by less than expected. Because this method is usually called in conjunction with an\\r\\n    // actual removal of collateral from this contract, return the fee-adjusted amount that the rawCollateral is\\r\\n    // decreased by so that the caller can minimize error between collateral removed and rawCollateral debited.\\r\\n    function _removeCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToRemove)\\r\\n        internal\\r\\n        returns (FixedPoint.Unsigned memory removedCollateral)\\r\\n    {\\r\\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(rawCollateral);\\r\\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(collateralToRemove);\\r\\n        rawCollateral.rawValue = rawCollateral.sub(adjustedCollateral).rawValue;\\r\\n        removedCollateral = initialBalance.sub(_getFeeAdjustedCollateral(rawCollateral));\\r\\n    }\\r\\n\\r\\n    // Increase rawCollateral by a fee-adjusted collateralToAdd amount. Fee adjustment scales up collateralToAdd\\r\\n    // by dividing it by cumulativeFeeMultiplier. There is potential for this quotient to be floored, therefore\\r\\n    // rawCollateral is increased by less than expected. Because this method is usually called in conjunction with an\\r\\n    // actual addition of collateral to this contract, return the fee-adjusted amount that the rawCollateral is\\r\\n    // increased by so that the caller can minimize error between collateral added and rawCollateral credited.\\r\\n    // NOTE: This return value exists only for the sake of symmetry with _removeCollateral. We don't actually use it\\r\\n    // because we are OK if more collateral is stored in the contract than is represented by rawTotalPositionCollateral.\\r\\n    function _addCollateral(FixedPoint.Unsigned storage rawCollateral, FixedPoint.Unsigned memory collateralToAdd)\\r\\n        internal\\r\\n        returns (FixedPoint.Unsigned memory addedCollateral)\\r\\n    {\\r\\n        FixedPoint.Unsigned memory initialBalance = _getFeeAdjustedCollateral(rawCollateral);\\r\\n        FixedPoint.Unsigned memory adjustedCollateral = _convertToRawCollateral(collateralToAdd);\\r\\n        rawCollateral.rawValue = rawCollateral.add(adjustedCollateral).rawValue;\\r\\n        addedCollateral = _getFeeAdjustedCollateral(rawCollateral).sub(initialBalance);\\r\\n    }\\r\\n\\r\\n    // Scale the cumulativeFeeMultiplier by the ratio of fees paid to the current available collateral.\\r\\n    function _adjustCumulativeFeeMultiplier(FixedPoint.Unsigned memory amount, FixedPoint.Unsigned memory currentPfc)\\r\\n        internal\\r\\n    {\\r\\n        FixedPoint.Unsigned memory effectiveFee = amount.divCeil(currentPfc);\\r\\n        cumulativeFeeMultiplier = cumulativeFeeMultiplier.mul(FixedPoint.fromUnscaledUint(1).sub(effectiveFee));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x06cbd8086cd11506fc155255b6a5f8dcac9fccdda1c9036938a95a6e55a19402\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/FundingRateApplier.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../../common/implementation/AncillaryData.sol\\\";\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\nimport \\\"../../optimistic-oracle-v2/interfaces/OptimisticOracleInterface.sol\\\";\\r\\nimport \\\"../perpetual-multiparty/ConfigStoreInterface.sol\\\";\\r\\n\\r\\nimport \\\"./EmergencyShutdownable.sol\\\";\\r\\nimport \\\"./FeePayer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title FundingRateApplier contract.\\r\\n * @notice Provides funding rate payment functionality for the Perpetual contract.\\r\\n */\\r\\n\\r\\nabstract contract FundingRateApplier is EmergencyShutdownable, FeePayer {\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using FixedPoint for FixedPoint.Signed;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /****************************************\\r\\n     * FUNDING RATE APPLIER DATA STRUCTURES *\\r\\n     ****************************************/\\r\\n\\r\\n    struct FundingRate {\\r\\n        // Current funding rate value.\\r\\n        FixedPoint.Signed rate;\\r\\n        // Identifier to retrieve the funding rate.\\r\\n        bytes32 identifier;\\r\\n        // Tracks the cumulative funding payments that have been paid to the sponsors.\\r\\n        // The multiplier starts at 1, and is updated by computing cumulativeFundingRateMultiplier * (1 + effectivePayment).\\r\\n        // Put another way, the cumulativeFeeMultiplier is (1 + effectivePayment1) * (1 + effectivePayment2) ...\\r\\n        // For example:\\r\\n        // The cumulativeFundingRateMultiplier should start at 1.\\r\\n        // If a 1% funding payment is paid to sponsors, the multiplier should update to 1.01.\\r\\n        // If another 1% fee is charged, the multiplier should be 1.01^2 (1.0201).\\r\\n        FixedPoint.Unsigned cumulativeMultiplier;\\r\\n        // Most recent time that the funding rate was updated.\\r\\n        uint256 updateTime;\\r\\n        // Most recent time that the funding rate was applied and changed the cumulative multiplier.\\r\\n        uint256 applicationTime;\\r\\n        // The time for the active (if it exists) funding rate proposal. 0 otherwise.\\r\\n        uint256 proposalTime;\\r\\n    }\\r\\n\\r\\n    FundingRate public fundingRate;\\r\\n\\r\\n    // Remote config store managed an owner.\\r\\n    ConfigStoreInterface public configStore;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event FundingRateUpdated(int256 newFundingRate, uint256 indexed updateTime, uint256 reward);\\r\\n\\r\\n    /****************************************\\r\\n     *              MODIFIERS               *\\r\\n     ****************************************/\\r\\n\\r\\n    // This is overridden to both pay fees (which is done by applyFundingRate()) and apply the funding rate.\\r\\n    modifier fees override {\\r\\n        // Note: the funding rate is applied on every fee-accruing transaction, where the total change is simply the\\r\\n        // rate applied linearly since the last update. This implies that the compounding rate depends on the frequency\\r\\n        // of update transactions that have this modifier, and it never reaches the ideal of continuous compounding.\\r\\n        // This approximate-compounding pattern is common in the Ethereum ecosystem because of the complexity of\\r\\n        // compounding data on-chain.\\r\\n        applyFundingRate();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Note: this modifier is intended to be used if the caller intends to _only_ pay regular fees.\\r\\n    modifier paysRegularFees {\\r\\n        payRegularFees();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the FundingRateApplier contract. Called by child contracts.\\r\\n     * @param _fundingRateIdentifier identifier that tracks the funding rate of this contract.\\r\\n     * @param _collateralAddress address of the collateral token.\\r\\n     * @param _finderAddress Finder used to discover financial-product-related contracts.\\r\\n     * @param _configStoreAddress address of the remote configuration store managed by an external owner.\\r\\n     * @param _tokenScaling initial scaling to apply to the token value (i.e. scales the tracking index).\\r\\n     * @param _timerAddress address of the timer contract in test envs, otherwise 0x0.\\r\\n     */\\r\\n    constructor(\\r\\n        bytes32 _fundingRateIdentifier,\\r\\n        address _collateralAddress,\\r\\n        address _finderAddress,\\r\\n        address _configStoreAddress,\\r\\n        FixedPoint.Unsigned memory _tokenScaling,\\r\\n        address _timerAddress\\r\\n    ) FeePayer(_collateralAddress, _finderAddress, _timerAddress) EmergencyShutdownable() {\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        fundingRate.updateTime = currentTime;\\r\\n        fundingRate.applicationTime = currentTime;\\r\\n\\r\\n        // Seed the cumulative multiplier with the token scaling, from which it will be scaled as funding rates are\\r\\n        // applied over time.\\r\\n        fundingRate.cumulativeMultiplier = _tokenScaling;\\r\\n\\r\\n        fundingRate.identifier = _fundingRateIdentifier;\\r\\n        configStore = ConfigStoreInterface(_configStoreAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This method takes 3 distinct actions:\\r\\n     * 1. Pays out regular fees.\\r\\n     * 2. If possible, resolves the outstanding funding rate proposal, pulling the result in and paying out the rewards.\\r\\n     * 3. Applies the prevailing funding rate over the most recent period.\\r\\n     */\\r\\n    function applyFundingRate() public paysRegularFees() nonReentrant() {\\r\\n        _applyEffectiveFundingRate();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a new funding rate. Proposer receives a reward if correct.\\r\\n     * @param rate funding rate being proposed.\\r\\n     * @param timestamp time at which the funding rate was computed.\\r\\n     */\\r\\n    function proposeFundingRate(FixedPoint.Signed memory rate, uint256 timestamp)\\r\\n        external\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (FixedPoint.Unsigned memory totalBond)\\r\\n    {\\r\\n        require(fundingRate.proposalTime == 0);\\r\\n        _validateFundingRate(rate);\\r\\n\\r\\n        // Timestamp must be after the last funding rate update time, within the last 30 minutes.\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        uint256 updateTime = fundingRate.updateTime;\\r\\n        require(timestamp > updateTime && timestamp >= currentTime.sub(_getConfig().proposalTimePastLimit));\\r\\n\\r\\n        // Set the proposal time in order to allow this contract to track this request.\\r\\n        fundingRate.proposalTime = timestamp;\\r\\n\\r\\n        OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\\r\\n\\r\\n        // Set up optimistic oracle.\\r\\n        bytes32 identifier = fundingRate.identifier;\\r\\n        bytes memory ancillaryData = _getAncillaryData();\\r\\n        // Note: requestPrice will revert if `timestamp` is less than the current block timestamp.\\r\\n        optimisticOracle.requestPrice(identifier, timestamp, ancillaryData, collateralCurrency, 0);\\r\\n        totalBond = FixedPoint.Unsigned(\\r\\n            optimisticOracle.setBond(\\r\\n                identifier,\\r\\n                timestamp,\\r\\n                ancillaryData,\\r\\n                _pfc().mul(_getConfig().proposerBondPercentage).rawValue\\r\\n            )\\r\\n        );\\r\\n\\r\\n        // Pull bond from caller and send to optimistic oracle.\\r\\n        if (totalBond.isGreaterThan(0)) {\\r\\n            collateralCurrency.safeTransferFrom(msg.sender, address(this), totalBond.rawValue);\\r\\n            collateralCurrency.safeIncreaseAllowance(address(optimisticOracle), totalBond.rawValue);\\r\\n        }\\r\\n\\r\\n        optimisticOracle.proposePriceFor(\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            identifier,\\r\\n            timestamp,\\r\\n            ancillaryData,\\r\\n            rate.rawValue\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Returns a token amount scaled by the current funding rate multiplier.\\r\\n    // Note: if the contract has paid fees since it was deployed, the raw value should be larger than the returned value.\\r\\n    function _getFundingRateAppliedTokenDebt(FixedPoint.Unsigned memory rawTokenDebt)\\r\\n        internal\\r\\n        view\\r\\n        returns (FixedPoint.Unsigned memory tokenDebt)\\r\\n    {\\r\\n        return rawTokenDebt.mul(fundingRate.cumulativeMultiplier);\\r\\n    }\\r\\n\\r\\n    function _getOptimisticOracle() internal view returns (OptimisticOracleInterface) {\\r\\n        return OptimisticOracleInterface(finder.getImplementationAddress(OracleInterfaces.OptimisticOracle));\\r\\n    }\\r\\n\\r\\n    function _getConfig() internal returns (ConfigStoreInterface.ConfigSettings memory) {\\r\\n        return configStore.updateAndGetCurrentConfig();\\r\\n    }\\r\\n\\r\\n    function _updateFundingRate() internal {\\r\\n        uint256 proposalTime = fundingRate.proposalTime;\\r\\n        // If there is no pending proposal then do nothing. Otherwise check to see if we can update the funding rate.\\r\\n        if (proposalTime != 0) {\\r\\n            // Attempt to update the funding rate.\\r\\n            OptimisticOracleInterface optimisticOracle = _getOptimisticOracle();\\r\\n            bytes32 identifier = fundingRate.identifier;\\r\\n            bytes memory ancillaryData = _getAncillaryData();\\r\\n\\r\\n            // Try to get the price from the optimistic oracle. This call will revert if the request has not resolved\\r\\n            // yet. If the request has not resolved yet, then we need to do additional checks to see if we should\\r\\n            // \\\"forget\\\" the pending proposal and allow new proposals to update the funding rate.\\r\\n            try optimisticOracle.settleAndGetPrice(identifier, proposalTime, ancillaryData) returns (int256 price) {\\r\\n                // If successful, determine if the funding rate state needs to be updated.\\r\\n                // If the request is more recent than the last update then we should update it.\\r\\n                uint256 lastUpdateTime = fundingRate.updateTime;\\r\\n                if (proposalTime >= lastUpdateTime) {\\r\\n                    // Update funding rates\\r\\n                    fundingRate.rate = FixedPoint.Signed(price);\\r\\n                    fundingRate.updateTime = proposalTime;\\r\\n\\r\\n                    // If there was no dispute, send a reward.\\r\\n                    FixedPoint.Unsigned memory reward = FixedPoint.fromUnscaledUint(0);\\r\\n                    OptimisticOracleInterface.Request memory request =\\r\\n                        optimisticOracle.getRequest(address(this), identifier, proposalTime, ancillaryData);\\r\\n                    if (request.disputer == address(0)) {\\r\\n                        reward = _pfc().mul(_getConfig().rewardRatePerSecond).mul(proposalTime.sub(lastUpdateTime));\\r\\n                        if (reward.isGreaterThan(0)) {\\r\\n                            _adjustCumulativeFeeMultiplier(reward, _pfc());\\r\\n                            collateralCurrency.safeTransfer(request.proposer, reward.rawValue);\\r\\n                        }\\r\\n                    }\\r\\n\\r\\n                    // This event will only be emitted after the fundingRate struct's \\\"updateTime\\\" has been set\\r\\n                    // to the latest proposal's proposalTime, indicating that the proposal has been published.\\r\\n                    // So, it suffices to just emit fundingRate.updateTime here.\\r\\n                    emit FundingRateUpdated(fundingRate.rate.rawValue, fundingRate.updateTime, reward.rawValue);\\r\\n                }\\r\\n\\r\\n                // Set proposal time to 0 since this proposal has now been resolved.\\r\\n                fundingRate.proposalTime = 0;\\r\\n            } catch {\\r\\n                // Stop tracking and allow other proposals to come in if:\\r\\n                // - The requester address is empty, indicating that the Oracle does not know about this funding rate\\r\\n                //   request. This is possible if the Oracle is replaced while the price request is still pending.\\r\\n                // - The request has been disputed.\\r\\n                OptimisticOracleInterface.Request memory request =\\r\\n                    optimisticOracle.getRequest(address(this), identifier, proposalTime, ancillaryData);\\r\\n                if (request.disputer != address(0) || request.proposer == address(0)) {\\r\\n                    fundingRate.proposalTime = 0;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Constraining the range of funding rates limits the PfC for any dishonest proposer and enhances the\\r\\n    // perpetual's security. For example, let's examine the case where the max and min funding rates\\r\\n    // are equivalent to +/- 500%/year. This 1000% funding rate range allows a 8.6% profit from corruption for a\\r\\n    // proposer who can deter honest proposers for 74 hours:\\r\\n    // 1000%/year / 360 days / 24 hours * 74 hours max attack time = ~ 8.6%.\\r\\n    // How would attack work? Imagine that the market is very volatile currently and that the \\\"true\\\" funding\\r\\n    // rate for the next 74 hours is -500%, but a dishonest proposer successfully proposes a rate of +500%\\r\\n    // (after a two hour liveness) and disputes honest proposers for the next 72 hours. This results in a funding\\r\\n    // rate error of 1000% for 74 hours, until the DVM can set the funding rate back to its correct value.\\r\\n    function _validateFundingRate(FixedPoint.Signed memory rate) internal {\\r\\n        require(\\r\\n            rate.isLessThanOrEqual(_getConfig().maxFundingRate) &&\\r\\n                rate.isGreaterThanOrEqual(_getConfig().minFundingRate)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Fetches a funding rate from the Store, determines the period over which to compute an effective fee,\\r\\n    // and multiplies the current multiplier by the effective fee.\\r\\n    // A funding rate < 1 will reduce the multiplier, and a funding rate of > 1 will increase the multiplier.\\r\\n    // Note: 1 is set as the neutral rate because there are no negative numbers in FixedPoint, so we decide to treat\\r\\n    // values < 1 as \\\"negative\\\".\\r\\n    function _applyEffectiveFundingRate() internal {\\r\\n        // If contract is emergency shutdown, then the funding rate multiplier should no longer change.\\r\\n        if (emergencyShutdownTimestamp != 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 currentTime = getCurrentTime();\\r\\n        uint256 paymentPeriod = currentTime.sub(fundingRate.applicationTime);\\r\\n\\r\\n        _updateFundingRate(); // Update the funding rate if there is a resolved proposal.\\r\\n        fundingRate.cumulativeMultiplier = _calculateEffectiveFundingRate(\\r\\n            paymentPeriod,\\r\\n            fundingRate.rate,\\r\\n            fundingRate.cumulativeMultiplier\\r\\n        );\\r\\n\\r\\n        fundingRate.applicationTime = currentTime;\\r\\n    }\\r\\n\\r\\n    function _calculateEffectiveFundingRate(\\r\\n        uint256 paymentPeriodSeconds,\\r\\n        FixedPoint.Signed memory fundingRatePerSecond,\\r\\n        FixedPoint.Unsigned memory currentCumulativeFundingRateMultiplier\\r\\n    ) internal pure returns (FixedPoint.Unsigned memory newCumulativeFundingRateMultiplier) {\\r\\n        // Note: this method uses named return variables to save a little bytecode.\\r\\n\\r\\n        // The overall formula that this function is performing:\\r\\n        //   newCumulativeFundingRateMultiplier =\\r\\n        //   (1 + (fundingRatePerSecond * paymentPeriodSeconds)) * currentCumulativeFundingRateMultiplier.\\r\\n        FixedPoint.Signed memory ONE = FixedPoint.fromUnscaledInt(1);\\r\\n\\r\\n        // Multiply the per-second rate over the number of seconds that have elapsed to get the period rate.\\r\\n        FixedPoint.Signed memory periodRate = fundingRatePerSecond.mul(SafeCast.toInt256(paymentPeriodSeconds));\\r\\n\\r\\n        // Add one to create the multiplier to scale the existing fee multiplier.\\r\\n        FixedPoint.Signed memory signedPeriodMultiplier = ONE.add(periodRate);\\r\\n\\r\\n        // Max with 0 to ensure the multiplier isn't negative, then cast to an Unsigned.\\r\\n        FixedPoint.Unsigned memory unsignedPeriodMultiplier =\\r\\n            FixedPoint.fromSigned(FixedPoint.max(signedPeriodMultiplier, FixedPoint.fromUnscaledInt(0)));\\r\\n\\r\\n        // Multiply the existing cumulative funding rate multiplier by the computed period multiplier to get the new\\r\\n        // cumulative funding rate multiplier.\\r\\n        newCumulativeFundingRateMultiplier = currentCumulativeFundingRateMultiplier.mul(unsignedPeriodMultiplier);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev We do not need to check that the ancillary data length is less than the hardcoded max length in the\\r\\n     * OptimisticOracle because the length of the ancillary data is fixed in this function.\\r\\n     */\\r\\n    function _getAncillaryData() internal view returns (bytes memory) {\\r\\n        // When ancillary data is passed to the optimistic oracle, it should be tagged with the token address\\r\\n        // whose funding rate it's trying to get so that financial contracts can re-use the same identifier for\\r\\n        // multiple funding rate products.\\r\\n        return AncillaryData.appendKeyValueAddress(\\\"\\\", \\\"tokenAddress\\\", _getTokenAddress());\\r\\n    }\\r\\n\\r\\n    function _getTokenAddress() internal view virtual returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xfd7fb87901df8a1bec3bd74b61bc3c627ced6808d2a035f18c0849c2445f8458\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/perpetual-multiparty/ConfigStoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\ninterface ConfigStoreInterface {\\r\\n    // All of the configuration settings available for querying by a perpetual.\\r\\n    struct ConfigSettings {\\r\\n        // Liveness period (in seconds) for an update to currentConfig to become official.\\r\\n        uint256 timelockLiveness;\\r\\n        // Reward rate paid to successful proposers. Percentage of 1 E.g., .1 is 10%.\\r\\n        FixedPoint.Unsigned rewardRatePerSecond;\\r\\n        // Bond % (of given contract's PfC) that must be staked by proposers. Percentage of 1, e.g. 0.0005 is 0.05%.\\r\\n        FixedPoint.Unsigned proposerBondPercentage;\\r\\n        // Maximum funding rate % per second that can be proposed.\\r\\n        FixedPoint.Signed maxFundingRate;\\r\\n        // Minimum funding rate % per second that can be proposed.\\r\\n        FixedPoint.Signed minFundingRate;\\r\\n        // Funding rate proposal timestamp cannot be more than this amount of seconds in the past from the latest\\r\\n        // update time.\\r\\n        uint256 proposalTimePastLimit;\\r\\n    }\\r\\n\\r\\n    function updateAndGetCurrentConfig() external returns (ConfigSettings memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x764e50c9218cd9f94a534e16ae3908a1c6f7f635e55aa54ec680a84ec815a1bd\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/perpetual-multiparty/Perpetual.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./PerpetualLiquidatable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Perpetual Multiparty Contract.\\r\\n * @notice Convenient wrapper for Liquidatable.\\r\\n */\\r\\ncontract Perpetual is PerpetualLiquidatable {\\r\\n    /**\\r\\n     * @notice Constructs the Perpetual contract.\\r\\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\\r\\n     * are fed directly into the PositionManager's constructor within the inheritance tree.\\r\\n     */\\r\\n    constructor(ConstructorParams memory params)\\r\\n        PerpetualLiquidatable(params)\\r\\n    // Note: since there is no logic here, there is no need to add a re-entrancy guard.\\r\\n    {\\r\\n\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xacbb2441f2d181114c84d5bc37e22aa44f90a1b619647072ab2a7040ad5a93ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/perpetual-multiparty/PerpetualLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Perpetual.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Provides convenient Perpetual Multi Party contract utilities.\\r\\n * @dev Using this library to deploy Perpetuals allows calling contracts to avoid importing the full bytecode.\\r\\n */\\r\\nlibrary PerpetualLib {\\r\\n    /**\\r\\n     * @notice Returns address of new Perpetual deployed with given `params` configuration.\\r\\n     * @dev Caller will need to register new Perpetual with the Registry to begin requesting prices. Caller is also\\r\\n     * responsible for enforcing constraints on `params`.\\r\\n     * @param params is a `ConstructorParams` object from Perpetual.\\r\\n     * @return address of the deployed Perpetual contract\\r\\n     */\\r\\n    function deploy(Perpetual.ConstructorParams memory params) public returns (address) {\\r\\n        Perpetual derivative = new Perpetual(params);\\r\\n        return address(derivative);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb42fe5ebf398439eb86853fdec0ef757177dd91ac34c2fe77618623884732950\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/perpetual-multiparty/PerpetualLiquidatable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./PerpetualPositionManager.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title PerpetualLiquidatable\\r\\n * @notice Adds logic to a position-managing contract that enables callers to liquidate an undercollateralized position.\\r\\n * @dev The liquidation has a liveness period before expiring successfully, during which someone can \\\"dispute\\\" the\\r\\n * liquidation, which sends a price request to the relevant Oracle to settle the final collateralization ratio based on\\r\\n * a DVM price. The contract enforces dispute rewards in order to incentivize disputers to correctly dispute false\\r\\n * liquidations and compensate position sponsors who had their position incorrectly liquidated. Importantly, a\\r\\n * prospective disputer must deposit a dispute bond that they can lose in the case of an unsuccessful dispute.\\r\\n * NOTE: this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\r\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\r\\n * money themselves).\\r\\n */\\r\\ncontract PerpetualLiquidatable is PerpetualPositionManager {\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for ExpandedIERC20;\\r\\n\\r\\n    /****************************************\\r\\n     *     LIQUIDATION DATA STRUCTURES      *\\r\\n     ****************************************/\\r\\n\\r\\n    // Because of the check in withdrawable(), the order of these enum values should not change.\\r\\n    enum Status { Uninitialized, NotDisputed, Disputed, DisputeSucceeded, DisputeFailed }\\r\\n\\r\\n    struct LiquidationData {\\r\\n        // Following variables set upon creation of liquidation:\\r\\n        address sponsor; // Address of the liquidated position's sponsor\\r\\n        address liquidator; // Address who created this liquidation\\r\\n        Status state; // Liquidated (and expired or not), Pending a Dispute, or Dispute has resolved\\r\\n        uint256 liquidationTime; // Time when liquidation is initiated, needed to get price from Oracle\\r\\n        // Following variables determined by the position that is being liquidated:\\r\\n        FixedPoint.Unsigned tokensOutstanding; // Synthetic tokens required to be burned by liquidator to initiate dispute\\r\\n        FixedPoint.Unsigned lockedCollateral; // Collateral locked by contract and released upon expiry or post-dispute\\r\\n        // Amount of collateral being liquidated, which could be different from\\r\\n        // lockedCollateral if there were pending withdrawals at the time of liquidation\\r\\n        FixedPoint.Unsigned liquidatedCollateral;\\r\\n        // Unit value (starts at 1) that is used to track the fees per unit of collateral over the course of the liquidation.\\r\\n        FixedPoint.Unsigned rawUnitCollateral;\\r\\n        // Following variable set upon initiation of a dispute:\\r\\n        address disputer; // Person who is disputing a liquidation\\r\\n        // Following variable set upon a resolution of a dispute:\\r\\n        FixedPoint.Unsigned settlementPrice; // Final price as determined by an Oracle following a dispute\\r\\n        FixedPoint.Unsigned finalFee;\\r\\n    }\\r\\n\\r\\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\\r\\n    // This is required to enable more params, over and above Solidity's limits.\\r\\n    struct ConstructorParams {\\r\\n        // Params for PerpetualPositionManager only.\\r\\n        uint256 withdrawalLiveness;\\r\\n        address configStoreAddress;\\r\\n        address collateralAddress;\\r\\n        address tokenAddress;\\r\\n        address finderAddress;\\r\\n        address timerAddress;\\r\\n        bytes32 priceFeedIdentifier;\\r\\n        bytes32 fundingRateIdentifier;\\r\\n        FixedPoint.Unsigned minSponsorTokens;\\r\\n        FixedPoint.Unsigned tokenScaling;\\r\\n        // Params specifically for PerpetualLiquidatable.\\r\\n        uint256 liquidationLiveness;\\r\\n        FixedPoint.Unsigned collateralRequirement;\\r\\n        FixedPoint.Unsigned disputeBondPercentage;\\r\\n        FixedPoint.Unsigned sponsorDisputeRewardPercentage;\\r\\n        FixedPoint.Unsigned disputerDisputeRewardPercentage;\\r\\n    }\\r\\n\\r\\n    // This struct is used in the `withdrawLiquidation` method that disperses liquidation and dispute rewards.\\r\\n    // `payToX` stores the total collateral to withdraw from the contract to pay X. This value might differ\\r\\n    // from `paidToX` due to precision loss between accounting for the `rawCollateral` versus the\\r\\n    // fee-adjusted collateral. These variables are stored within a struct to avoid the stack too deep error.\\r\\n    struct RewardsData {\\r\\n        FixedPoint.Unsigned payToSponsor;\\r\\n        FixedPoint.Unsigned payToLiquidator;\\r\\n        FixedPoint.Unsigned payToDisputer;\\r\\n        FixedPoint.Unsigned paidToSponsor;\\r\\n        FixedPoint.Unsigned paidToLiquidator;\\r\\n        FixedPoint.Unsigned paidToDisputer;\\r\\n    }\\r\\n\\r\\n    // Liquidations are unique by ID per sponsor\\r\\n    mapping(address => LiquidationData[]) public liquidations;\\r\\n\\r\\n    // Total collateral in liquidation.\\r\\n    FixedPoint.Unsigned public rawLiquidationCollateral;\\r\\n\\r\\n    // Immutable contract parameters:\\r\\n    // Amount of time for pending liquidation before expiry.\\r\\n    // !!Note: The lower the liquidation liveness value, the more risk incurred by sponsors.\\r\\n    //       Extremely low liveness values increase the chance that opportunistic invalid liquidations\\r\\n    //       expire without dispute, thereby decreasing the usability for sponsors and increasing the risk\\r\\n    //       for the contract as a whole. An insolvent contract is extremely risky for any sponsor or synthetic\\r\\n    //       token holder for the contract.\\r\\n    uint256 public liquidationLiveness;\\r\\n    // Required collateral:TRV ratio for a position to be considered sufficiently collateralized.\\r\\n    FixedPoint.Unsigned public collateralRequirement;\\r\\n    // Percent of a Liquidation/Position's lockedCollateral to be deposited by a potential disputer\\r\\n    // Represented as a multiplier, for example 1.5e18 = \\\"150%\\\" and 0.05e18 = \\\"5%\\\"\\r\\n    FixedPoint.Unsigned public disputeBondPercentage;\\r\\n    // Percent of oraclePrice paid to sponsor in the Disputed state (i.e. following a successful dispute)\\r\\n    // Represented as a multiplier, see above.\\r\\n    FixedPoint.Unsigned public sponsorDisputeRewardPercentage;\\r\\n    // Percent of oraclePrice paid to disputer in the Disputed state (i.e. following a successful dispute)\\r\\n    // Represented as a multiplier, see above.\\r\\n    FixedPoint.Unsigned public disputerDisputeRewardPercentage;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event LiquidationCreated(\\r\\n        address indexed sponsor,\\r\\n        address indexed liquidator,\\r\\n        uint256 indexed liquidationId,\\r\\n        uint256 tokensOutstanding,\\r\\n        uint256 lockedCollateral,\\r\\n        uint256 liquidatedCollateral,\\r\\n        uint256 liquidationTime\\r\\n    );\\r\\n    event LiquidationDisputed(\\r\\n        address indexed sponsor,\\r\\n        address indexed liquidator,\\r\\n        address indexed disputer,\\r\\n        uint256 liquidationId,\\r\\n        uint256 disputeBondAmount\\r\\n    );\\r\\n    event DisputeSettled(\\r\\n        address indexed caller,\\r\\n        address indexed sponsor,\\r\\n        address indexed liquidator,\\r\\n        address disputer,\\r\\n        uint256 liquidationId,\\r\\n        bool disputeSucceeded\\r\\n    );\\r\\n    event LiquidationWithdrawn(\\r\\n        address indexed caller,\\r\\n        uint256 paidToLiquidator,\\r\\n        uint256 paidToDisputer,\\r\\n        uint256 paidToSponsor,\\r\\n        Status indexed liquidationStatus,\\r\\n        uint256 settlementPrice\\r\\n    );\\r\\n\\r\\n    /****************************************\\r\\n     *              MODIFIERS               *\\r\\n     ****************************************/\\r\\n\\r\\n    modifier disputable(uint256 liquidationId, address sponsor) {\\r\\n        _disputable(liquidationId, sponsor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier withdrawable(uint256 liquidationId, address sponsor) {\\r\\n        _withdrawable(liquidationId, sponsor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the liquidatable contract.\\r\\n     * @param params struct to define input parameters for construction of Liquidatable. Some params\\r\\n     * are fed directly into the PositionManager's constructor within the inheritance tree.\\r\\n     */\\r\\n    constructor(ConstructorParams memory params)\\r\\n        PerpetualPositionManager(\\r\\n            params.withdrawalLiveness,\\r\\n            params.collateralAddress,\\r\\n            params.tokenAddress,\\r\\n            params.finderAddress,\\r\\n            params.priceFeedIdentifier,\\r\\n            params.fundingRateIdentifier,\\r\\n            params.minSponsorTokens,\\r\\n            params.configStoreAddress,\\r\\n            params.tokenScaling,\\r\\n            params.timerAddress\\r\\n        )\\r\\n    {\\r\\n        require(params.collateralRequirement.isGreaterThan(1));\\r\\n        require(params.sponsorDisputeRewardPercentage.add(params.disputerDisputeRewardPercentage).isLessThan(1));\\r\\n\\r\\n        // Set liquidatable specific variables.\\r\\n        liquidationLiveness = params.liquidationLiveness;\\r\\n        collateralRequirement = params.collateralRequirement;\\r\\n        disputeBondPercentage = params.disputeBondPercentage;\\r\\n        sponsorDisputeRewardPercentage = params.sponsorDisputeRewardPercentage;\\r\\n        disputerDisputeRewardPercentage = params.disputerDisputeRewardPercentage;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        LIQUIDATION FUNCTIONS         *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Liquidates the sponsor's position if the caller has enough\\r\\n     * synthetic tokens to retire the position's outstanding tokens. Liquidations above\\r\\n     * a minimum size also reset an ongoing \\\"slow withdrawal\\\"'s liveness.\\r\\n     * @dev This method generates an ID that will uniquely identify liquidation for the sponsor. This contract must be\\r\\n     * approved to spend at least `tokensLiquidated` of `tokenCurrency` and at least `finalFeeBond` of `collateralCurrency`.\\r\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\r\\n     * @param sponsor address of the sponsor to liquidate.\\r\\n     * @param minCollateralPerToken abort the liquidation if the position's collateral per token is below this value.\\r\\n     * @param maxCollateralPerToken abort the liquidation if the position's collateral per token exceeds this value.\\r\\n     * @param maxTokensToLiquidate max number of tokens to liquidate.\\r\\n     * @param deadline abort the liquidation if the transaction is mined after this timestamp.\\r\\n     * @return liquidationId ID of the newly created liquidation.\\r\\n     * @return tokensLiquidated amount of synthetic tokens removed and liquidated from the `sponsor`'s position.\\r\\n     * @return finalFeeBond amount of collateral to be posted by liquidator and returned if not disputed successfully.\\r\\n     */\\r\\n    function createLiquidation(\\r\\n        address sponsor,\\r\\n        FixedPoint.Unsigned calldata minCollateralPerToken,\\r\\n        FixedPoint.Unsigned calldata maxCollateralPerToken,\\r\\n        FixedPoint.Unsigned calldata maxTokensToLiquidate,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        notEmergencyShutdown()\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (\\r\\n            uint256 liquidationId,\\r\\n            FixedPoint.Unsigned memory tokensLiquidated,\\r\\n            FixedPoint.Unsigned memory finalFeeBond\\r\\n        )\\r\\n    {\\r\\n        // Check that this transaction was mined pre-deadline.\\r\\n        require(getCurrentTime() <= deadline);\\r\\n\\r\\n        // Retrieve Position data for sponsor\\r\\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\\r\\n\\r\\n        tokensLiquidated = FixedPoint.min(maxTokensToLiquidate, positionToLiquidate.tokensOutstanding);\\r\\n        require(tokensLiquidated.isGreaterThan(0));\\r\\n\\r\\n        // Starting values for the Position being liquidated. If withdrawal request amount is > position's collateral,\\r\\n        // then set this to 0, otherwise set it to (startCollateral - withdrawal request amount).\\r\\n        FixedPoint.Unsigned memory startCollateral = _getFeeAdjustedCollateral(positionToLiquidate.rawCollateral);\\r\\n        FixedPoint.Unsigned memory startCollateralNetOfWithdrawal = FixedPoint.fromUnscaledUint(0);\\r\\n        if (positionToLiquidate.withdrawalRequestAmount.isLessThanOrEqual(startCollateral)) {\\r\\n            startCollateralNetOfWithdrawal = startCollateral.sub(positionToLiquidate.withdrawalRequestAmount);\\r\\n        }\\r\\n\\r\\n        // Scoping to get rid of a stack too deep error.\\r\\n        {\\r\\n            FixedPoint.Unsigned memory startTokens = positionToLiquidate.tokensOutstanding;\\r\\n\\r\\n            // The Position's collateralization ratio must be between [minCollateralPerToken, maxCollateralPerToken].\\r\\n            require(maxCollateralPerToken.mul(startTokens).isGreaterThanOrEqual(startCollateralNetOfWithdrawal));\\r\\n            // minCollateralPerToken >= startCollateralNetOfWithdrawal / startTokens.\\r\\n            require(minCollateralPerToken.mul(startTokens).isLessThanOrEqual(startCollateralNetOfWithdrawal));\\r\\n        }\\r\\n\\r\\n        // Compute final fee at time of liquidation.\\r\\n        finalFeeBond = _computeFinalFees();\\r\\n\\r\\n        // These will be populated within the scope below.\\r\\n        FixedPoint.Unsigned memory lockedCollateral;\\r\\n        FixedPoint.Unsigned memory liquidatedCollateral;\\r\\n\\r\\n        // Scoping to get rid of a stack too deep error. The amount of tokens to remove from the position\\r\\n        // are not funding-rate adjusted because the multiplier only affects their redemption value, not their\\r\\n        // notional.\\r\\n        {\\r\\n            FixedPoint.Unsigned memory ratio = tokensLiquidated.div(positionToLiquidate.tokensOutstanding);\\r\\n\\r\\n            // The actual amount of collateral that gets moved to the liquidation.\\r\\n            lockedCollateral = startCollateral.mul(ratio);\\r\\n\\r\\n            // For purposes of disputes, it's actually this liquidatedCollateral value that's used. This value is net of\\r\\n            // withdrawal requests.\\r\\n            liquidatedCollateral = startCollateralNetOfWithdrawal.mul(ratio);\\r\\n\\r\\n            // Part of the withdrawal request is also removed. Ideally:\\r\\n            // liquidatedCollateral + withdrawalAmountToRemove = lockedCollateral.\\r\\n            FixedPoint.Unsigned memory withdrawalAmountToRemove =\\r\\n                positionToLiquidate.withdrawalRequestAmount.mul(ratio);\\r\\n            _reduceSponsorPosition(sponsor, tokensLiquidated, lockedCollateral, withdrawalAmountToRemove);\\r\\n        }\\r\\n\\r\\n        // Add to the global liquidation collateral count.\\r\\n        _addCollateral(rawLiquidationCollateral, lockedCollateral.add(finalFeeBond));\\r\\n\\r\\n        // Construct liquidation object.\\r\\n        // Note: All dispute-related values are zeroed out until a dispute occurs. liquidationId is the index of the new\\r\\n        // LiquidationData that is pushed into the array, which is equal to the current length of the array pre-push.\\r\\n        liquidationId = liquidations[sponsor].length;\\r\\n        liquidations[sponsor].push(\\r\\n            LiquidationData({\\r\\n                sponsor: sponsor,\\r\\n                liquidator: msg.sender,\\r\\n                state: Status.NotDisputed,\\r\\n                liquidationTime: getCurrentTime(),\\r\\n                tokensOutstanding: _getFundingRateAppliedTokenDebt(tokensLiquidated),\\r\\n                lockedCollateral: lockedCollateral,\\r\\n                liquidatedCollateral: liquidatedCollateral,\\r\\n                rawUnitCollateral: _convertToRawCollateral(FixedPoint.fromUnscaledUint(1)),\\r\\n                disputer: address(0),\\r\\n                settlementPrice: FixedPoint.fromUnscaledUint(0),\\r\\n                finalFee: finalFeeBond\\r\\n            })\\r\\n        );\\r\\n\\r\\n        // If this liquidation is a subsequent liquidation on the position, and the liquidation size is larger than\\r\\n        // some \\\"griefing threshold\\\", then re-set the liveness. This enables a liquidation against a withdraw request to be\\r\\n        // \\\"dragged out\\\" if the position is very large and liquidators need time to gather funds. The griefing threshold\\r\\n        // is enforced so that liquidations for trivially small # of tokens cannot drag out an honest sponsor's slow withdrawal.\\r\\n\\r\\n        // We arbitrarily set the \\\"griefing threshold\\\" to `minSponsorTokens` because it is the only parameter\\r\\n        // denominated in token currency units and we can avoid adding another parameter.\\r\\n        FixedPoint.Unsigned memory griefingThreshold = minSponsorTokens;\\r\\n        if (\\r\\n            positionToLiquidate.withdrawalRequestPassTimestamp > 0 && // The position is undergoing a slow withdrawal.\\r\\n            positionToLiquidate.withdrawalRequestPassTimestamp > getCurrentTime() && // The slow withdrawal has not yet expired.\\r\\n            tokensLiquidated.isGreaterThanOrEqual(griefingThreshold) // The liquidated token count is above a \\\"griefing threshold\\\".\\r\\n        ) {\\r\\n            positionToLiquidate.withdrawalRequestPassTimestamp = getCurrentTime().add(withdrawalLiveness);\\r\\n        }\\r\\n\\r\\n        emit LiquidationCreated(\\r\\n            sponsor,\\r\\n            msg.sender,\\r\\n            liquidationId,\\r\\n            _getFundingRateAppliedTokenDebt(tokensLiquidated).rawValue,\\r\\n            lockedCollateral.rawValue,\\r\\n            liquidatedCollateral.rawValue,\\r\\n            getCurrentTime()\\r\\n        );\\r\\n\\r\\n        // Destroy tokens\\r\\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensLiquidated.rawValue);\\r\\n        tokenCurrency.burn(tokensLiquidated.rawValue);\\r\\n\\r\\n        // Pull final fee from liquidator.\\r\\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), finalFeeBond.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a liquidation, if the caller has enough collateral to post a dispute bond and pay a fixed final\\r\\n     * fee charged on each price request.\\r\\n     * @dev Can only dispute a liquidation before the liquidation expires and if there are no other pending disputes.\\r\\n     * This contract must be approved to spend at least the dispute bond amount of `collateralCurrency`. This dispute\\r\\n     * bond amount is calculated from `disputeBondPercentage` times the collateral in the liquidation.\\r\\n     * @param liquidationId of the disputed liquidation.\\r\\n     * @param sponsor the address of the sponsor whose liquidation is being disputed.\\r\\n     * @return totalPaid amount of collateral charged to disputer (i.e. final fee bond + dispute bond).\\r\\n     */\\r\\n    function dispute(uint256 liquidationId, address sponsor)\\r\\n        external\\r\\n        disputable(liquidationId, sponsor)\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (FixedPoint.Unsigned memory totalPaid)\\r\\n    {\\r\\n        LiquidationData storage disputedLiquidation = _getLiquidationData(sponsor, liquidationId);\\r\\n\\r\\n        // Multiply by the unit collateral so the dispute bond is a percentage of the locked collateral after fees.\\r\\n        FixedPoint.Unsigned memory disputeBondAmount =\\r\\n            disputedLiquidation.lockedCollateral.mul(disputeBondPercentage).mul(\\r\\n                _getFeeAdjustedCollateral(disputedLiquidation.rawUnitCollateral)\\r\\n            );\\r\\n        _addCollateral(rawLiquidationCollateral, disputeBondAmount);\\r\\n\\r\\n        // Request a price from DVM. Liquidation is pending dispute until DVM returns a price.\\r\\n        disputedLiquidation.state = Status.Disputed;\\r\\n        disputedLiquidation.disputer = msg.sender;\\r\\n\\r\\n        // Enqueue a request with the DVM.\\r\\n        _requestOraclePrice(disputedLiquidation.liquidationTime);\\r\\n\\r\\n        emit LiquidationDisputed(\\r\\n            sponsor,\\r\\n            disputedLiquidation.liquidator,\\r\\n            msg.sender,\\r\\n            liquidationId,\\r\\n            disputeBondAmount.rawValue\\r\\n        );\\r\\n        totalPaid = disputeBondAmount.add(disputedLiquidation.finalFee);\\r\\n\\r\\n        // Pay the final fee for requesting price from the DVM.\\r\\n        _payFinalFees(msg.sender, disputedLiquidation.finalFee);\\r\\n\\r\\n        // Transfer the dispute bond amount from the caller to this contract.\\r\\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), disputeBondAmount.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice After a dispute has settled or after a non-disputed liquidation has expired,\\r\\n     * anyone can call this method to disperse payments to the sponsor, liquidator, and disputer.\\r\\n     * @dev If the dispute SUCCEEDED: the sponsor, liquidator, and disputer are eligible for payment.\\r\\n     * If the dispute FAILED: only the liquidator receives payment. This method deletes the liquidation data.\\r\\n     * This method will revert if rewards have already been dispersed.\\r\\n     * @param liquidationId uniquely identifies the sponsor's liquidation.\\r\\n     * @param sponsor address of the sponsor associated with the liquidation.\\r\\n     * @return data about rewards paid out.\\r\\n     */\\r\\n    function withdrawLiquidation(uint256 liquidationId, address sponsor)\\r\\n        public\\r\\n        withdrawable(liquidationId, sponsor)\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (RewardsData memory)\\r\\n    {\\r\\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\\r\\n\\r\\n        // Settles the liquidation if necessary. This call will revert if the price has not resolved yet.\\r\\n        _settle(liquidationId, sponsor);\\r\\n\\r\\n        // Calculate rewards as a function of the TRV.\\r\\n        // Note1: all payouts are scaled by the unit collateral value so all payouts are charged the fees pro rata.\\r\\n        // Note2: the tokenRedemptionValue uses the tokensOutstanding which was calculated using the funding rate at\\r\\n        // liquidation time from _getFundingRateAppliedTokenDebt. Therefore the TRV considers the full debt value at that time.\\r\\n        FixedPoint.Unsigned memory feeAttenuation = _getFeeAdjustedCollateral(liquidation.rawUnitCollateral);\\r\\n        FixedPoint.Unsigned memory settlementPrice = liquidation.settlementPrice;\\r\\n        FixedPoint.Unsigned memory tokenRedemptionValue =\\r\\n            liquidation.tokensOutstanding.mul(settlementPrice).mul(feeAttenuation);\\r\\n        FixedPoint.Unsigned memory collateral = liquidation.lockedCollateral.mul(feeAttenuation);\\r\\n        FixedPoint.Unsigned memory disputerDisputeReward = disputerDisputeRewardPercentage.mul(tokenRedemptionValue);\\r\\n        FixedPoint.Unsigned memory sponsorDisputeReward = sponsorDisputeRewardPercentage.mul(tokenRedemptionValue);\\r\\n        FixedPoint.Unsigned memory disputeBondAmount = collateral.mul(disputeBondPercentage);\\r\\n        FixedPoint.Unsigned memory finalFee = liquidation.finalFee.mul(feeAttenuation);\\r\\n\\r\\n        // There are three main outcome states: either the dispute succeeded, failed or was not updated.\\r\\n        // Based on the state, different parties of a liquidation receive different amounts.\\r\\n        // After assigning rewards based on the liquidation status, decrease the total collateral held in this contract\\r\\n        // by the amount to pay each party. The actual amounts withdrawn might differ if _removeCollateral causes\\r\\n        // precision loss.\\r\\n        RewardsData memory rewards;\\r\\n        if (liquidation.state == Status.DisputeSucceeded) {\\r\\n            // If the dispute is successful then all three users should receive rewards:\\r\\n\\r\\n            // Pay DISPUTER: disputer reward + dispute bond + returned final fee\\r\\n            rewards.payToDisputer = disputerDisputeReward.add(disputeBondAmount).add(finalFee);\\r\\n\\r\\n            // Pay SPONSOR: remaining collateral (collateral - TRV) + sponsor reward\\r\\n            rewards.payToSponsor = sponsorDisputeReward.add(collateral.sub(tokenRedemptionValue));\\r\\n\\r\\n            // Pay LIQUIDATOR: TRV - dispute reward - sponsor reward\\r\\n            // If TRV > Collateral, then subtract rewards from collateral\\r\\n            // NOTE: This should never be below zero since we prevent (sponsorDisputePercentage+disputerDisputePercentage) >= 0 in\\r\\n            // the constructor when these params are set.\\r\\n            rewards.payToLiquidator = tokenRedemptionValue.sub(sponsorDisputeReward).sub(disputerDisputeReward);\\r\\n\\r\\n            // Transfer rewards and debit collateral\\r\\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\\r\\n            rewards.paidToSponsor = _removeCollateral(rawLiquidationCollateral, rewards.payToSponsor);\\r\\n            rewards.paidToDisputer = _removeCollateral(rawLiquidationCollateral, rewards.payToDisputer);\\r\\n\\r\\n            collateralCurrency.safeTransfer(liquidation.disputer, rewards.paidToDisputer.rawValue);\\r\\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\\r\\n            collateralCurrency.safeTransfer(liquidation.sponsor, rewards.paidToSponsor.rawValue);\\r\\n\\r\\n            // In the case of a failed dispute only the liquidator can withdraw.\\r\\n        } else if (liquidation.state == Status.DisputeFailed) {\\r\\n            // Pay LIQUIDATOR: collateral + dispute bond + returned final fee\\r\\n            rewards.payToLiquidator = collateral.add(disputeBondAmount).add(finalFee);\\r\\n\\r\\n            // Transfer rewards and debit collateral\\r\\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\\r\\n\\r\\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\\r\\n\\r\\n            // If the state is pre-dispute but time has passed liveness then there was no dispute. We represent this\\r\\n            // state as a dispute failed and the liquidator can withdraw.\\r\\n        } else if (liquidation.state == Status.NotDisputed) {\\r\\n            // Pay LIQUIDATOR: collateral + returned final fee\\r\\n            rewards.payToLiquidator = collateral.add(finalFee);\\r\\n\\r\\n            // Transfer rewards and debit collateral\\r\\n            rewards.paidToLiquidator = _removeCollateral(rawLiquidationCollateral, rewards.payToLiquidator);\\r\\n\\r\\n            collateralCurrency.safeTransfer(liquidation.liquidator, rewards.paidToLiquidator.rawValue);\\r\\n        }\\r\\n\\r\\n        emit LiquidationWithdrawn(\\r\\n            msg.sender,\\r\\n            rewards.paidToLiquidator.rawValue,\\r\\n            rewards.paidToDisputer.rawValue,\\r\\n            rewards.paidToSponsor.rawValue,\\r\\n            liquidation.state,\\r\\n            settlementPrice.rawValue\\r\\n        );\\r\\n\\r\\n        // Free up space after collateral is withdrawn by removing the liquidation object from the array.\\r\\n        delete liquidations[sponsor][liquidationId];\\r\\n\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets all liquidation information for a given sponsor address.\\r\\n     * @param sponsor address of the position sponsor.\\r\\n     * @return liquidationData array of all liquidation information for the given sponsor address.\\r\\n     */\\r\\n    function getLiquidations(address sponsor)\\r\\n        external\\r\\n        view\\r\\n        nonReentrantView()\\r\\n        returns (LiquidationData[] memory liquidationData)\\r\\n    {\\r\\n        return liquidations[sponsor];\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          INTERNAL FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    // This settles a liquidation if it is in the Disputed state. If not, it will immediately return.\\r\\n    // If the liquidation is in the Disputed state, but a price is not available, this will revert.\\r\\n    function _settle(uint256 liquidationId, address sponsor) internal {\\r\\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\\r\\n\\r\\n        // Settlement only happens when state == Disputed and will only happen once per liquidation.\\r\\n        // If this liquidation is not ready to be settled, this method should return immediately.\\r\\n        if (liquidation.state != Status.Disputed) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Get the returned price from the oracle. If this has not yet resolved will revert.\\r\\n        liquidation.settlementPrice = _getOraclePrice(liquidation.liquidationTime);\\r\\n\\r\\n        // Find the value of the tokens in the underlying collateral.\\r\\n        FixedPoint.Unsigned memory tokenRedemptionValue =\\r\\n            liquidation.tokensOutstanding.mul(liquidation.settlementPrice);\\r\\n\\r\\n        // The required collateral is the value of the tokens in underlying * required collateral ratio.\\r\\n        FixedPoint.Unsigned memory requiredCollateral = tokenRedemptionValue.mul(collateralRequirement);\\r\\n\\r\\n        // If the position has more than the required collateral it is solvent and the dispute is valid (liquidation is invalid)\\r\\n        // Note that this check uses the liquidatedCollateral not the lockedCollateral as this considers withdrawals.\\r\\n        bool disputeSucceeded = liquidation.liquidatedCollateral.isGreaterThanOrEqual(requiredCollateral);\\r\\n        liquidation.state = disputeSucceeded ? Status.DisputeSucceeded : Status.DisputeFailed;\\r\\n\\r\\n        emit DisputeSettled(\\r\\n            msg.sender,\\r\\n            sponsor,\\r\\n            liquidation.liquidator,\\r\\n            liquidation.disputer,\\r\\n            liquidationId,\\r\\n            disputeSucceeded\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _pfc() internal view override returns (FixedPoint.Unsigned memory) {\\r\\n        return super._pfc().add(_getFeeAdjustedCollateral(rawLiquidationCollateral));\\r\\n    }\\r\\n\\r\\n    function _getLiquidationData(address sponsor, uint256 liquidationId)\\r\\n        internal\\r\\n        view\\r\\n        returns (LiquidationData storage liquidation)\\r\\n    {\\r\\n        LiquidationData[] storage liquidationArray = liquidations[sponsor];\\r\\n\\r\\n        // Revert if the caller is attempting to access an invalid liquidation\\r\\n        // (one that has never been created or one has never been initialized).\\r\\n        require(\\r\\n            liquidationId < liquidationArray.length && liquidationArray[liquidationId].state != Status.Uninitialized\\r\\n        );\\r\\n        return liquidationArray[liquidationId];\\r\\n    }\\r\\n\\r\\n    function _getLiquidationExpiry(LiquidationData storage liquidation) internal view returns (uint256) {\\r\\n        return liquidation.liquidationTime.add(liquidationLiveness);\\r\\n    }\\r\\n\\r\\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\r\\n    // unnecessarily increase contract bytecode size.\\r\\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\\r\\n    function _disputable(uint256 liquidationId, address sponsor) internal view {\\r\\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\\r\\n        require((getCurrentTime() < _getLiquidationExpiry(liquidation)) && (liquidation.state == Status.NotDisputed));\\r\\n    }\\r\\n\\r\\n    function _withdrawable(uint256 liquidationId, address sponsor) internal view {\\r\\n        LiquidationData storage liquidation = _getLiquidationData(sponsor, liquidationId);\\r\\n        Status state = liquidation.state;\\r\\n\\r\\n        // Must be disputed or the liquidation has passed expiry.\\r\\n        require(\\r\\n            (state > Status.NotDisputed) ||\\r\\n                ((_getLiquidationExpiry(liquidation) <= getCurrentTime()) && (state == Status.NotDisputed))\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2ac2c9ce32ccbed685d4a0f750929eca8e39f49596ff95cca2684c4a08ce6a1c\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/perpetual-multiparty/PerpetualPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/interfaces/OracleInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\nimport \\\"../common/FundingRateApplier.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract with priceless position management.\\r\\n * @notice Handles positions for multiple sponsors in an optimistic (i.e., priceless) way without relying\\r\\n * on a price feed. On construction, deploys a new ERC20, managed by this contract, that is the synthetic token.\\r\\n */\\r\\n\\r\\ncontract PerpetualPositionManager is FundingRateApplier {\\r\\n    using SafeMath for uint256;\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using SafeERC20 for ExpandedIERC20;\\r\\n\\r\\n    /****************************************\\r\\n     *  PRICELESS POSITION DATA STRUCTURES  *\\r\\n     ****************************************/\\r\\n\\r\\n    // Represents a single sponsor's position. All collateral is held by this contract.\\r\\n    // This struct acts as bookkeeping for how much of that collateral is allocated to each sponsor.\\r\\n    struct PositionData {\\r\\n        FixedPoint.Unsigned tokensOutstanding;\\r\\n        // Tracks pending withdrawal requests. A withdrawal request is pending if `withdrawalRequestPassTimestamp != 0`.\\r\\n        uint256 withdrawalRequestPassTimestamp;\\r\\n        FixedPoint.Unsigned withdrawalRequestAmount;\\r\\n        // Raw collateral value. This value should never be accessed directly -- always use _getFeeAdjustedCollateral().\\r\\n        // To add or remove collateral, use _addCollateral() and _removeCollateral().\\r\\n        FixedPoint.Unsigned rawCollateral;\\r\\n    }\\r\\n\\r\\n    // Maps sponsor addresses to their positions. Each sponsor can have only one position.\\r\\n    mapping(address => PositionData) public positions;\\r\\n\\r\\n    // Keep track of the total collateral and tokens across all positions to enable calculating the\\r\\n    // global collateralization ratio without iterating over all positions.\\r\\n    FixedPoint.Unsigned public totalTokensOutstanding;\\r\\n\\r\\n    // Similar to the rawCollateral in PositionData, this value should not be used directly.\\r\\n    // _getFeeAdjustedCollateral(), _addCollateral() and _removeCollateral() must be used to access and adjust.\\r\\n    FixedPoint.Unsigned public rawTotalPositionCollateral;\\r\\n\\r\\n    // Synthetic token created by this contract.\\r\\n    ExpandedIERC20 public tokenCurrency;\\r\\n\\r\\n    // Unique identifier for DVM price feed ticker.\\r\\n    bytes32 public priceIdentifier;\\r\\n\\r\\n    // Time that has to elapse for a withdrawal request to be considered passed, if no liquidations occur.\\r\\n    // !!Note: The lower the withdrawal liveness value, the more risk incurred by the contract.\\r\\n    //       Extremely low liveness values increase the chance that opportunistic invalid withdrawal requests\\r\\n    //       expire without liquidation, thereby increasing the insolvency risk for the contract as a whole. An insolvent\\r\\n    //       contract is extremely risky for any sponsor or synthetic token holder for the contract.\\r\\n    uint256 public withdrawalLiveness;\\r\\n\\r\\n    // Minimum number of tokens in a sponsor's position.\\r\\n    FixedPoint.Unsigned public minSponsorTokens;\\r\\n\\r\\n    // Expiry price pulled from the DVM in the case of an emergency shutdown.\\r\\n    FixedPoint.Unsigned public emergencyShutdownPrice;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event Deposit(address indexed sponsor, uint256 indexed collateralAmount);\\r\\n    event Withdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\r\\n    event RequestWithdrawal(address indexed sponsor, uint256 indexed collateralAmount);\\r\\n    event RequestWithdrawalExecuted(address indexed sponsor, uint256 indexed collateralAmount);\\r\\n    event RequestWithdrawalCanceled(address indexed sponsor, uint256 indexed collateralAmount);\\r\\n    event PositionCreated(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\\r\\n    event NewSponsor(address indexed sponsor);\\r\\n    event EndedSponsorPosition(address indexed sponsor);\\r\\n    event Redeem(address indexed sponsor, uint256 indexed collateralAmount, uint256 indexed tokenAmount);\\r\\n    event Repay(address indexed sponsor, uint256 indexed numTokensRepaid, uint256 indexed newTokenCount);\\r\\n    event EmergencyShutdown(address indexed caller, uint256 shutdownTimestamp);\\r\\n    event SettleEmergencyShutdown(\\r\\n        address indexed caller,\\r\\n        uint256 indexed collateralReturned,\\r\\n        uint256 indexed tokensBurned\\r\\n    );\\r\\n\\r\\n    /****************************************\\r\\n     *               MODIFIERS              *\\r\\n     ****************************************/\\r\\n\\r\\n    modifier onlyCollateralizedPosition(address sponsor) {\\r\\n        _onlyCollateralizedPosition(sponsor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier noPendingWithdrawal(address sponsor) {\\r\\n        _positionHasNoPendingWithdrawal(sponsor);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the PerpetualPositionManager.\\r\\n     * @dev Deployer of this contract should consider carefully which parties have ability to mint and burn\\r\\n     * the synthetic tokens referenced by `_tokenAddress`. This contract's security assumes that no external accounts\\r\\n     * can mint new tokens, which could be used to steal all of this contract's locked collateral.\\r\\n     * We recommend to only use synthetic token contracts whose sole Owner role (the role capable of adding & removing roles)\\r\\n     * is assigned to this contract, whose sole Minter role is assigned to this contract, and whose\\r\\n     * total supply is 0 prior to construction of this contract.\\r\\n     * @param _withdrawalLiveness liveness delay, in seconds, for pending withdrawals.\\r\\n     * @param _collateralAddress ERC20 token used as collateral for all positions.\\r\\n     * @param _tokenAddress ERC20 token used as synthetic token.\\r\\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\r\\n     * @param _priceIdentifier registered in the DVM for the synthetic.\\r\\n     * @param _fundingRateIdentifier Unique identifier for DVM price feed ticker for child financial contract.\\r\\n     * @param _minSponsorTokens minimum number of tokens that must exist at any time in a position.\\r\\n     * @param _tokenScaling initial scaling to apply to the token value (i.e. scales the tracking index).\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment. Set to 0x0 for production.\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _withdrawalLiveness,\\r\\n        address _collateralAddress,\\r\\n        address _tokenAddress,\\r\\n        address _finderAddress,\\r\\n        bytes32 _priceIdentifier,\\r\\n        bytes32 _fundingRateIdentifier,\\r\\n        FixedPoint.Unsigned memory _minSponsorTokens,\\r\\n        address _configStoreAddress,\\r\\n        FixedPoint.Unsigned memory _tokenScaling,\\r\\n        address _timerAddress\\r\\n    )\\r\\n        FundingRateApplier(\\r\\n            _fundingRateIdentifier,\\r\\n            _collateralAddress,\\r\\n            _finderAddress,\\r\\n            _configStoreAddress,\\r\\n            _tokenScaling,\\r\\n            _timerAddress\\r\\n        )\\r\\n    {\\r\\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier));\\r\\n\\r\\n        withdrawalLiveness = _withdrawalLiveness;\\r\\n        tokenCurrency = ExpandedIERC20(_tokenAddress);\\r\\n        minSponsorTokens = _minSponsorTokens;\\r\\n        priceIdentifier = _priceIdentifier;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          POSITION FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the specified sponsor's position.\\r\\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\r\\n     * at least `collateralAmount` of `collateralCurrency`.\\r\\n     * @param sponsor the sponsor to credit the deposit to.\\r\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\r\\n     */\\r\\n    function depositTo(address sponsor, FixedPoint.Unsigned memory collateralAmount)\\r\\n        public\\r\\n        notEmergencyShutdown()\\r\\n        noPendingWithdrawal(sponsor)\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n    {\\r\\n        require(collateralAmount.isGreaterThan(0));\\r\\n        PositionData storage positionData = _getPositionData(sponsor);\\r\\n\\r\\n        // Increase the position and global collateral balance by collateral amount.\\r\\n        _incrementCollateralBalances(positionData, collateralAmount);\\r\\n\\r\\n        emit Deposit(sponsor, collateralAmount.rawValue);\\r\\n\\r\\n        // Move collateral currency from sender to contract.\\r\\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into the caller's position.\\r\\n     * @dev Increases the collateralization level of a position after creation. This contract must be approved to spend\\r\\n     * at least `collateralAmount` of `collateralCurrency`.\\r\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\r\\n     */\\r\\n    function deposit(FixedPoint.Unsigned memory collateralAmount) public {\\r\\n        // This is just a thin wrapper over depositTo that specified the sender as the sponsor.\\r\\n        depositTo(msg.sender, collateralAmount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` from the sponsor's position to the sponsor.\\r\\n     * @dev Reverts if the withdrawal puts this position's collateralization ratio below the global collateralization\\r\\n     * ratio. In that case, use `requestWithdrawal`. Might not withdraw the full requested amount to account for precision loss.\\r\\n     * @param collateralAmount is the amount of collateral to withdraw.\\r\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\r\\n     */\\r\\n    function withdraw(FixedPoint.Unsigned memory collateralAmount)\\r\\n        public\\r\\n        notEmergencyShutdown()\\r\\n        noPendingWithdrawal(msg.sender)\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\r\\n    {\\r\\n        require(collateralAmount.isGreaterThan(0));\\r\\n        PositionData storage positionData = _getPositionData(msg.sender);\\r\\n\\r\\n        // Decrement the sponsor's collateral and global collateral amounts. Check the GCR between decrement to ensure\\r\\n        // position remains above the GCR within the withdrawal. If this is not the case the caller must submit a request.\\r\\n        amountWithdrawn = _decrementCollateralBalancesCheckGCR(positionData, collateralAmount);\\r\\n\\r\\n        emit Withdrawal(msg.sender, amountWithdrawn.rawValue);\\r\\n\\r\\n        // Move collateral currency from contract to sender.\\r\\n        // Note: that we move the amount of collateral that is decreased from rawCollateral (inclusive of fees)\\r\\n        // instead of the user requested amount. This eliminates precision loss that could occur\\r\\n        // where the user withdraws more collateral than rawCollateral is decremented by.\\r\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Starts a withdrawal request that, if passed, allows the sponsor to withdraw from their position.\\r\\n     * @dev The request will be pending for `withdrawalLiveness`, during which the position can be liquidated.\\r\\n     * @param collateralAmount the amount of collateral requested to withdraw\\r\\n     */\\r\\n    function requestWithdrawal(FixedPoint.Unsigned memory collateralAmount)\\r\\n        public\\r\\n        notEmergencyShutdown()\\r\\n        noPendingWithdrawal(msg.sender)\\r\\n        nonReentrant()\\r\\n    {\\r\\n        PositionData storage positionData = _getPositionData(msg.sender);\\r\\n        require(\\r\\n            collateralAmount.isGreaterThan(0) &&\\r\\n                collateralAmount.isLessThanOrEqual(_getFeeAdjustedCollateral(positionData.rawCollateral))\\r\\n        );\\r\\n\\r\\n        // Update the position object for the user.\\r\\n        positionData.withdrawalRequestPassTimestamp = getCurrentTime().add(withdrawalLiveness);\\r\\n        positionData.withdrawalRequestAmount = collateralAmount;\\r\\n\\r\\n        emit RequestWithdrawal(msg.sender, collateralAmount.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice After a passed withdrawal request (i.e., by a call to `requestWithdrawal` and waiting\\r\\n     * `withdrawalLiveness`), withdraws `positionData.withdrawalRequestAmount` of collateral currency.\\r\\n     * @dev Might not withdraw the full requested amount in order to account for precision loss or if the full requested\\r\\n     * amount exceeds the collateral in the position (due to paying fees).\\r\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\r\\n     */\\r\\n    function withdrawPassedRequest()\\r\\n        external\\r\\n        notEmergencyShutdown()\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\r\\n    {\\r\\n        PositionData storage positionData = _getPositionData(msg.sender);\\r\\n        require(\\r\\n            positionData.withdrawalRequestPassTimestamp != 0 &&\\r\\n                positionData.withdrawalRequestPassTimestamp <= getCurrentTime()\\r\\n        );\\r\\n\\r\\n        // If withdrawal request amount is > position collateral, then withdraw the full collateral amount.\\r\\n        // This situation is possible due to fees charged since the withdrawal was originally requested.\\r\\n        FixedPoint.Unsigned memory amountToWithdraw = positionData.withdrawalRequestAmount;\\r\\n        if (positionData.withdrawalRequestAmount.isGreaterThan(_getFeeAdjustedCollateral(positionData.rawCollateral))) {\\r\\n            amountToWithdraw = _getFeeAdjustedCollateral(positionData.rawCollateral);\\r\\n        }\\r\\n\\r\\n        // Decrement the sponsor's collateral and global collateral amounts.\\r\\n        amountWithdrawn = _decrementCollateralBalances(positionData, amountToWithdraw);\\r\\n\\r\\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\r\\n        _resetWithdrawalRequest(positionData);\\r\\n\\r\\n        // Transfer approved withdrawal amount from the contract to the caller.\\r\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\r\\n\\r\\n        emit RequestWithdrawalExecuted(msg.sender, amountWithdrawn.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cancels a pending withdrawal request.\\r\\n     */\\r\\n    function cancelWithdrawal() external notEmergencyShutdown() nonReentrant() {\\r\\n        PositionData storage positionData = _getPositionData(msg.sender);\\r\\n        // No pending withdrawal require message removed to save bytecode.\\r\\n        require(positionData.withdrawalRequestPassTimestamp != 0);\\r\\n\\r\\n        emit RequestWithdrawalCanceled(msg.sender, positionData.withdrawalRequestAmount.rawValue);\\r\\n\\r\\n        // Reset withdrawal request by setting withdrawal amount and withdrawal timestamp to 0.\\r\\n        _resetWithdrawalRequest(positionData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates tokens by creating a new position or by augmenting an existing position. Pulls `collateralAmount\\r\\n     * ` into the sponsor's position and mints `numTokens` of `tokenCurrency`.\\r\\n     * @dev This contract must have the Minter role for the `tokenCurrency`.\\r\\n     * @dev Reverts if minting these tokens would put the position's collateralization ratio below the\\r\\n     * global collateralization ratio. This contract must be approved to spend at least `collateralAmount` of\\r\\n     * `collateralCurrency`.\\r\\n     * @param collateralAmount is the number of collateral tokens to collateralize the position with\\r\\n     * @param numTokens is the number of tokens to mint from the position.\\r\\n     */\\r\\n    function create(FixedPoint.Unsigned memory collateralAmount, FixedPoint.Unsigned memory numTokens)\\r\\n        public\\r\\n        notEmergencyShutdown()\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n    {\\r\\n        PositionData storage positionData = positions[msg.sender];\\r\\n\\r\\n        // Either the new create ratio or the resultant position CR must be above the current GCR.\\r\\n        require(\\r\\n            (_checkCollateralization(\\r\\n                _getFeeAdjustedCollateral(positionData.rawCollateral).add(collateralAmount),\\r\\n                positionData.tokensOutstanding.add(numTokens)\\r\\n            ) || _checkCollateralization(collateralAmount, numTokens))\\r\\n        );\\r\\n\\r\\n        require(positionData.withdrawalRequestPassTimestamp == 0);\\r\\n        if (positionData.tokensOutstanding.isEqual(0)) {\\r\\n            require(numTokens.isGreaterThanOrEqual(minSponsorTokens));\\r\\n            emit NewSponsor(msg.sender);\\r\\n        }\\r\\n\\r\\n        // Increase the position and global collateral balance by collateral amount.\\r\\n        _incrementCollateralBalances(positionData, collateralAmount);\\r\\n\\r\\n        // Add the number of tokens created to the position's outstanding tokens.\\r\\n        positionData.tokensOutstanding = positionData.tokensOutstanding.add(numTokens);\\r\\n\\r\\n        totalTokensOutstanding = totalTokensOutstanding.add(numTokens);\\r\\n\\r\\n        emit PositionCreated(msg.sender, collateralAmount.rawValue, numTokens.rawValue);\\r\\n\\r\\n        // Transfer tokens into the contract from caller and mint corresponding synthetic tokens to the caller's address.\\r\\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount.rawValue);\\r\\n\\r\\n        // Note: revert reason removed to save bytecode.\\r\\n        require(tokenCurrency.mint(msg.sender, numTokens.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burns `numTokens` of `tokenCurrency` and sends back the proportional amount of `collateralCurrency`.\\r\\n     * @dev Can only be called by a token sponsor. Might not redeem the full proportional amount of collateral\\r\\n     * in order to account for precision loss. This contract must be approved to spend at least `numTokens` of\\r\\n     * `tokenCurrency`.\\r\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\r\\n     * @param numTokens is the number of tokens to be burnt for a commensurate amount of collateral.\\r\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\r\\n     */\\r\\n    function redeem(FixedPoint.Unsigned memory numTokens)\\r\\n        public\\r\\n        notEmergencyShutdown()\\r\\n        noPendingWithdrawal(msg.sender)\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\r\\n    {\\r\\n        PositionData storage positionData = _getPositionData(msg.sender);\\r\\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\\r\\n\\r\\n        FixedPoint.Unsigned memory fractionRedeemed = numTokens.div(positionData.tokensOutstanding);\\r\\n        FixedPoint.Unsigned memory collateralRedeemed =\\r\\n            fractionRedeemed.mul(_getFeeAdjustedCollateral(positionData.rawCollateral));\\r\\n\\r\\n        // If redemption returns all tokens the sponsor has then we can delete their position. Else, downsize.\\r\\n        if (positionData.tokensOutstanding.isEqual(numTokens)) {\\r\\n            amountWithdrawn = _deleteSponsorPosition(msg.sender);\\r\\n        } else {\\r\\n            // Decrement the sponsor's collateral and global collateral amounts.\\r\\n            amountWithdrawn = _decrementCollateralBalances(positionData, collateralRedeemed);\\r\\n\\r\\n            // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\r\\n            FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\\r\\n            require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\\r\\n            positionData.tokensOutstanding = newTokenCount;\\r\\n\\r\\n            // Update the totalTokensOutstanding after redemption.\\r\\n            totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\\r\\n        }\\r\\n\\r\\n        emit Redeem(msg.sender, amountWithdrawn.rawValue, numTokens.rawValue);\\r\\n\\r\\n        // Transfer collateral from contract to caller and burn callers synthetic tokens.\\r\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\r\\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\\r\\n        tokenCurrency.burn(numTokens.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burns `numTokens` of `tokenCurrency` to decrease sponsors position size, without sending back `collateralCurrency`.\\r\\n     * This is done by a sponsor to increase position CR. Resulting size is bounded by minSponsorTokens.\\r\\n     * @dev Can only be called by token sponsor. This contract must be approved to spend `numTokens` of `tokenCurrency`.\\r\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\r\\n     * @param numTokens is the number of tokens to be burnt from the sponsor's debt position.\\r\\n     */\\r\\n    function repay(FixedPoint.Unsigned memory numTokens)\\r\\n        public\\r\\n        notEmergencyShutdown()\\r\\n        noPendingWithdrawal(msg.sender)\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n    {\\r\\n        PositionData storage positionData = _getPositionData(msg.sender);\\r\\n        require(numTokens.isLessThanOrEqual(positionData.tokensOutstanding));\\r\\n\\r\\n        // Decrease the sponsors position tokens size. Ensure it is above the min sponsor size.\\r\\n        FixedPoint.Unsigned memory newTokenCount = positionData.tokensOutstanding.sub(numTokens);\\r\\n        require(newTokenCount.isGreaterThanOrEqual(minSponsorTokens));\\r\\n        positionData.tokensOutstanding = newTokenCount;\\r\\n\\r\\n        // Update the totalTokensOutstanding after redemption.\\r\\n        totalTokensOutstanding = totalTokensOutstanding.sub(numTokens);\\r\\n\\r\\n        emit Repay(msg.sender, numTokens.rawValue, newTokenCount.rawValue);\\r\\n\\r\\n        // Transfer the tokens back from the sponsor and burn them.\\r\\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), numTokens.rawValue);\\r\\n        tokenCurrency.burn(numTokens.rawValue);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice If the contract is emergency shutdown then all token holders and sponsors can redeem their tokens or\\r\\n     * remaining collateral for underlying at the prevailing price defined by a DVM vote.\\r\\n     * @dev This burns all tokens from the caller of `tokenCurrency` and sends back the resolved settlement value of\\r\\n     * `collateralCurrency`. Might not redeem the full proportional amount of collateral in order to account for\\r\\n     * precision loss. This contract must be approved to spend `tokenCurrency` at least up to the caller's full balance.\\r\\n     * @dev This contract must have the Burner role for the `tokenCurrency`.\\r\\n     * @dev Note that this function does not call the updateFundingRate modifier to update the funding rate as this\\r\\n     * function is only called after an emergency shutdown & there should be no funding rate updates after the shutdown.\\r\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\r\\n     */\\r\\n    function settleEmergencyShutdown()\\r\\n        external\\r\\n        isEmergencyShutdown()\\r\\n        fees()\\r\\n        nonReentrant()\\r\\n        returns (FixedPoint.Unsigned memory amountWithdrawn)\\r\\n    {\\r\\n        // Set the emergency shutdown price as resolved from the DVM. If DVM has not resolved will revert.\\r\\n        if (emergencyShutdownPrice.isEqual(FixedPoint.fromUnscaledUint(0))) {\\r\\n            emergencyShutdownPrice = _getOracleEmergencyShutdownPrice();\\r\\n        }\\r\\n\\r\\n        // Get caller's tokens balance and calculate amount of underlying entitled to them.\\r\\n        FixedPoint.Unsigned memory tokensToRedeem = FixedPoint.Unsigned(tokenCurrency.balanceOf(msg.sender));\\r\\n        FixedPoint.Unsigned memory totalRedeemableCollateral =\\r\\n            _getFundingRateAppliedTokenDebt(tokensToRedeem).mul(emergencyShutdownPrice);\\r\\n\\r\\n        // If the caller is a sponsor with outstanding collateral they are also entitled to their excess collateral after their debt.\\r\\n        PositionData storage positionData = positions[msg.sender];\\r\\n        if (_getFeeAdjustedCollateral(positionData.rawCollateral).isGreaterThan(0)) {\\r\\n            // Calculate the underlying entitled to a token sponsor. This is collateral - debt in underlying with\\r\\n            // the funding rate applied to the outstanding token debt.\\r\\n\\r\\n            FixedPoint.Unsigned memory tokenDebtValueInCollateral =\\r\\n                _getFundingRateAppliedTokenDebt(positionData.tokensOutstanding).mul(emergencyShutdownPrice);\\r\\n            FixedPoint.Unsigned memory positionCollateral = _getFeeAdjustedCollateral(positionData.rawCollateral);\\r\\n\\r\\n            // If the debt is greater than the remaining collateral, they cannot redeem anything.\\r\\n            FixedPoint.Unsigned memory positionRedeemableCollateral =\\r\\n                tokenDebtValueInCollateral.isLessThan(positionCollateral)\\r\\n                    ? positionCollateral.sub(tokenDebtValueInCollateral)\\r\\n                    : FixedPoint.Unsigned(0);\\r\\n\\r\\n            // Add the number of redeemable tokens for the sponsor to their total redeemable collateral.\\r\\n            totalRedeemableCollateral = totalRedeemableCollateral.add(positionRedeemableCollateral);\\r\\n\\r\\n            // Reset the position state as all the value has been removed after settlement.\\r\\n            delete positions[msg.sender];\\r\\n            emit EndedSponsorPosition(msg.sender);\\r\\n        }\\r\\n\\r\\n        // Take the min of the remaining collateral and the collateral \\\"owed\\\". If the contract is undercapitalized,\\r\\n        // the caller will get as much collateral as the contract can pay out.\\r\\n        FixedPoint.Unsigned memory payout =\\r\\n            FixedPoint.min(_getFeeAdjustedCollateral(rawTotalPositionCollateral), totalRedeemableCollateral);\\r\\n\\r\\n        // Decrement total contract collateral and outstanding debt.\\r\\n        amountWithdrawn = _removeCollateral(rawTotalPositionCollateral, payout);\\r\\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRedeem);\\r\\n\\r\\n        emit SettleEmergencyShutdown(msg.sender, amountWithdrawn.rawValue, tokensToRedeem.rawValue);\\r\\n\\r\\n        // Transfer tokens & collateral and burn the redeemed tokens.\\r\\n        collateralCurrency.safeTransfer(msg.sender, amountWithdrawn.rawValue);\\r\\n        tokenCurrency.safeTransferFrom(msg.sender, address(this), tokensToRedeem.rawValue);\\r\\n        tokenCurrency.burn(tokensToRedeem.rawValue);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        GLOBAL STATE FUNCTIONS        *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Premature contract settlement under emergency circumstances.\\r\\n     * @dev Only the governor can call this function as they are permissioned within the `FinancialContractAdmin`.\\r\\n     * Upon emergency shutdown, the contract settlement time is set to the shutdown time. This enables withdrawal\\r\\n     * to occur via the `settleEmergencyShutdown` function.\\r\\n     */\\r\\n    function emergencyShutdown() external override notEmergencyShutdown() fees() nonReentrant() {\\r\\n        // Note: revert reason removed to save bytecode.\\r\\n        require(msg.sender == _getFinancialContractsAdminAddress());\\r\\n\\r\\n        emergencyShutdownTimestamp = getCurrentTime();\\r\\n        _requestOraclePrice(emergencyShutdownTimestamp);\\r\\n\\r\\n        emit EmergencyShutdown(msg.sender, emergencyShutdownTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Theoretically supposed to pay fees and move money between margin accounts to make sure they\\r\\n     * reflect the NAV of the contract. However, this functionality doesn't apply to this contract.\\r\\n     * @dev This is supposed to be implemented by any contract that inherits `AdministrateeInterface` and callable\\r\\n     * only by the Governor contract. This method is therefore minimally implemented in this contract and does nothing.\\r\\n     */\\r\\n    function remargin() external pure override {\\r\\n        return;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accessor method for a sponsor's collateral.\\r\\n     * @dev This is necessary because the struct returned by the positions() method shows\\r\\n     * rawCollateral, which isn't a user-readable value.\\r\\n     * @dev This method accounts for pending regular fees that have not yet been withdrawn from this contract, for\\r\\n     * example if the `lastPaymentTime != currentTime`.\\r\\n     * @param sponsor address whose collateral amount is retrieved.\\r\\n     * @return collateralAmount amount of collateral within a sponsors position.\\r\\n     */\\r\\n    function getCollateral(address sponsor)\\r\\n        external\\r\\n        view\\r\\n        nonReentrantView()\\r\\n        returns (FixedPoint.Unsigned memory collateralAmount)\\r\\n    {\\r\\n        // Note: do a direct access to avoid the validity check.\\r\\n        return _getPendingRegularFeeAdjustedCollateral(_getFeeAdjustedCollateral(positions[sponsor].rawCollateral));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accessor method for the total collateral stored within the PerpetualPositionManager.\\r\\n     * @return totalCollateral amount of all collateral within the position manager.\\r\\n     */\\r\\n    function totalPositionCollateral()\\r\\n        external\\r\\n        view\\r\\n        nonReentrantView()\\r\\n        returns (FixedPoint.Unsigned memory totalCollateral)\\r\\n    {\\r\\n        return _getPendingRegularFeeAdjustedCollateral(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\\r\\n    }\\r\\n\\r\\n    function getFundingRateAppliedTokenDebt(FixedPoint.Unsigned memory rawTokenDebt)\\r\\n        external\\r\\n        view\\r\\n        nonReentrantView()\\r\\n        returns (FixedPoint.Unsigned memory totalCollateral)\\r\\n    {\\r\\n        return _getFundingRateAppliedTokenDebt(rawTokenDebt);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          INTERNAL FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    // Reduces a sponsor's position and global counters by the specified parameters. Handles deleting the entire\\r\\n    // position if the entire position is being removed. Does not make any external transfers.\\r\\n    function _reduceSponsorPosition(\\r\\n        address sponsor,\\r\\n        FixedPoint.Unsigned memory tokensToRemove,\\r\\n        FixedPoint.Unsigned memory collateralToRemove,\\r\\n        FixedPoint.Unsigned memory withdrawalAmountToRemove\\r\\n    ) internal {\\r\\n        PositionData storage positionData = _getPositionData(sponsor);\\r\\n\\r\\n        // If the entire position is being removed, delete it instead.\\r\\n        if (\\r\\n            tokensToRemove.isEqual(positionData.tokensOutstanding) &&\\r\\n            _getFeeAdjustedCollateral(positionData.rawCollateral).isEqual(collateralToRemove)\\r\\n        ) {\\r\\n            _deleteSponsorPosition(sponsor);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Decrement the sponsor's collateral and global collateral amounts.\\r\\n        _decrementCollateralBalances(positionData, collateralToRemove);\\r\\n\\r\\n        // Ensure that the sponsor will meet the min position size after the reduction.\\r\\n        positionData.tokensOutstanding = positionData.tokensOutstanding.sub(tokensToRemove);\\r\\n        require(positionData.tokensOutstanding.isGreaterThanOrEqual(minSponsorTokens));\\r\\n\\r\\n        // Decrement the position's withdrawal amount.\\r\\n        positionData.withdrawalRequestAmount = positionData.withdrawalRequestAmount.sub(withdrawalAmountToRemove);\\r\\n\\r\\n        // Decrement the total outstanding tokens in the overall contract.\\r\\n        totalTokensOutstanding = totalTokensOutstanding.sub(tokensToRemove);\\r\\n    }\\r\\n\\r\\n    // Deletes a sponsor's position and updates global counters. Does not make any external transfers.\\r\\n    function _deleteSponsorPosition(address sponsor) internal returns (FixedPoint.Unsigned memory) {\\r\\n        PositionData storage positionToLiquidate = _getPositionData(sponsor);\\r\\n\\r\\n        FixedPoint.Unsigned memory startingGlobalCollateral = _getFeeAdjustedCollateral(rawTotalPositionCollateral);\\r\\n\\r\\n        // Remove the collateral and outstanding from the overall total position.\\r\\n        rawTotalPositionCollateral = rawTotalPositionCollateral.sub(positionToLiquidate.rawCollateral);\\r\\n        totalTokensOutstanding = totalTokensOutstanding.sub(positionToLiquidate.tokensOutstanding);\\r\\n\\r\\n        // Reset the sponsors position to have zero outstanding and collateral.\\r\\n        delete positions[sponsor];\\r\\n\\r\\n        emit EndedSponsorPosition(sponsor);\\r\\n\\r\\n        // Return fee-adjusted amount of collateral deleted from position.\\r\\n        return startingGlobalCollateral.sub(_getFeeAdjustedCollateral(rawTotalPositionCollateral));\\r\\n    }\\r\\n\\r\\n    function _pfc() internal view virtual override returns (FixedPoint.Unsigned memory) {\\r\\n        return _getFeeAdjustedCollateral(rawTotalPositionCollateral);\\r\\n    }\\r\\n\\r\\n    function _getPositionData(address sponsor)\\r\\n        internal\\r\\n        view\\r\\n        onlyCollateralizedPosition(sponsor)\\r\\n        returns (PositionData storage)\\r\\n    {\\r\\n        return positions[sponsor];\\r\\n    }\\r\\n\\r\\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n\\r\\n    function _getOracle() internal view returns (OracleInterface) {\\r\\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n\\r\\n    function _getFinancialContractsAdminAddress() internal view returns (address) {\\r\\n        return finder.getImplementationAddress(OracleInterfaces.FinancialContractsAdmin);\\r\\n    }\\r\\n\\r\\n    // Requests a price for `priceIdentifier` at `requestedTime` from the Oracle.\\r\\n    function _requestOraclePrice(uint256 requestedTime) internal {\\r\\n        _getOracle().requestPrice(priceIdentifier, requestedTime);\\r\\n    }\\r\\n\\r\\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\r\\n    function _getOraclePrice(uint256 requestedTime) internal view returns (FixedPoint.Unsigned memory price) {\\r\\n        // Create an instance of the oracle and get the price. If the price is not resolved revert.\\r\\n        int256 oraclePrice = _getOracle().getPrice(priceIdentifier, requestedTime);\\r\\n\\r\\n        // For now we don't want to deal with negative prices in positions.\\r\\n        if (oraclePrice < 0) {\\r\\n            oraclePrice = 0;\\r\\n        }\\r\\n        return FixedPoint.Unsigned(uint256(oraclePrice));\\r\\n    }\\r\\n\\r\\n    // Fetches a resolved Oracle price from the Oracle. Reverts if the Oracle hasn't resolved for this request.\\r\\n    function _getOracleEmergencyShutdownPrice() internal view returns (FixedPoint.Unsigned memory) {\\r\\n        return _getOraclePrice(emergencyShutdownTimestamp);\\r\\n    }\\r\\n\\r\\n    // Reset withdrawal request by setting the withdrawal request and withdrawal timestamp to 0.\\r\\n    function _resetWithdrawalRequest(PositionData storage positionData) internal {\\r\\n        positionData.withdrawalRequestAmount = FixedPoint.fromUnscaledUint(0);\\r\\n        positionData.withdrawalRequestPassTimestamp = 0;\\r\\n    }\\r\\n\\r\\n    // Ensure individual and global consistency when increasing collateral balances. Returns the change to the position.\\r\\n    function _incrementCollateralBalances(\\r\\n        PositionData storage positionData,\\r\\n        FixedPoint.Unsigned memory collateralAmount\\r\\n    ) internal returns (FixedPoint.Unsigned memory) {\\r\\n        _addCollateral(positionData.rawCollateral, collateralAmount);\\r\\n        return _addCollateral(rawTotalPositionCollateral, collateralAmount);\\r\\n    }\\r\\n\\r\\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the\\r\\n    // position. We elect to return the amount that the global collateral is decreased by, rather than the individual\\r\\n    // position's collateral, because we need to maintain the invariant that the global collateral is always\\r\\n    // <= the collateral owned by the contract to avoid reverts on withdrawals. The amount returned = amount withdrawn.\\r\\n    function _decrementCollateralBalances(\\r\\n        PositionData storage positionData,\\r\\n        FixedPoint.Unsigned memory collateralAmount\\r\\n    ) internal returns (FixedPoint.Unsigned memory) {\\r\\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\\r\\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\\r\\n    }\\r\\n\\r\\n    // Ensure individual and global consistency when decrementing collateral balances. Returns the change to the position.\\r\\n    // This function is similar to the _decrementCollateralBalances function except this function checks position GCR\\r\\n    // between the decrements. This ensures that collateral removal will not leave the position undercollateralized.\\r\\n    function _decrementCollateralBalancesCheckGCR(\\r\\n        PositionData storage positionData,\\r\\n        FixedPoint.Unsigned memory collateralAmount\\r\\n    ) internal returns (FixedPoint.Unsigned memory) {\\r\\n        _removeCollateral(positionData.rawCollateral, collateralAmount);\\r\\n        require(_checkPositionCollateralization(positionData));\\r\\n        return _removeCollateral(rawTotalPositionCollateral, collateralAmount);\\r\\n    }\\r\\n\\r\\n    // These internal functions are supposed to act identically to modifiers, but re-used modifiers\\r\\n    // unnecessarily increase contract bytecode size.\\r\\n    // source: https://blog.polymath.network/solidity-tips-and-tricks-to-save-gas-and-reduce-bytecode-size-c44580b218e6\\r\\n    function _onlyCollateralizedPosition(address sponsor) internal view {\\r\\n        require(_getFeeAdjustedCollateral(positions[sponsor].rawCollateral).isGreaterThan(0));\\r\\n    }\\r\\n\\r\\n    // Note: This checks whether an already existing position has a pending withdrawal. This cannot be used on the\\r\\n    // `create` method because it is possible that `create` is called on a new position (i.e. one without any collateral\\r\\n    // or tokens outstanding) which would fail the `onlyCollateralizedPosition` modifier on `_getPositionData`.\\r\\n    function _positionHasNoPendingWithdrawal(address sponsor) internal view {\\r\\n        require(_getPositionData(sponsor).withdrawalRequestPassTimestamp == 0);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          PRIVATE FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    function _checkPositionCollateralization(PositionData storage positionData) private view returns (bool) {\\r\\n        return\\r\\n            _checkCollateralization(\\r\\n                _getFeeAdjustedCollateral(positionData.rawCollateral),\\r\\n                positionData.tokensOutstanding\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Checks whether the provided `collateral` and `numTokens` have a collateralization ratio above the global\\r\\n    // collateralization ratio.\\r\\n    function _checkCollateralization(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\\r\\n        private\\r\\n        view\\r\\n        returns (bool)\\r\\n    {\\r\\n        FixedPoint.Unsigned memory global =\\r\\n            _getCollateralizationRatio(_getFeeAdjustedCollateral(rawTotalPositionCollateral), totalTokensOutstanding);\\r\\n        FixedPoint.Unsigned memory thisChange = _getCollateralizationRatio(collateral, numTokens);\\r\\n        return !global.isGreaterThan(thisChange);\\r\\n    }\\r\\n\\r\\n    function _getCollateralizationRatio(FixedPoint.Unsigned memory collateral, FixedPoint.Unsigned memory numTokens)\\r\\n        private\\r\\n        pure\\r\\n        returns (FixedPoint.Unsigned memory ratio)\\r\\n    {\\r\\n        return numTokens.isLessThanOrEqual(0) ? FixedPoint.fromUnscaledUint(0) : collateral.div(numTokens);\\r\\n    }\\r\\n\\r\\n    function _getTokenAddress() internal view override returns (address) {\\r\\n        return address(tokenCurrency);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd2649be9fd08788ef79e5d3b4fe37944ab50fa88fcf580aa394e95b34b12b56d\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/interfaces/OptimisticOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OptimisticOracleInterface {\\r\\n    event RequestPrice(\\r\\n        address indexed requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        address currency,\\r\\n        uint256 reward,\\r\\n        uint256 finalFee\\r\\n    );\\r\\n    event ProposePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice,\\r\\n        uint256 expirationTimestamp,\\r\\n        address currency\\r\\n    );\\r\\n    event DisputePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    );\\r\\n    event Settle(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 price,\\r\\n        uint256 payout\\r\\n    );\\r\\n\\r\\n    // Struct representing the state of a price request.\\r\\n    enum State {\\r\\n        Invalid, // Never requested.\\r\\n        Requested, // Requested, no other actions taken.\\r\\n        Proposed, // Proposed, but not expired or disputed yet.\\r\\n        Expired, // Proposed, not disputed, past liveness.\\r\\n        Disputed, // Disputed, but no DVM price returned yet.\\r\\n        Resolved, // Disputed and DVM price is available.\\r\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\r\\n    }\\r\\n\\r\\n    // Struct representing a price request.\\r\\n    struct Request {\\r\\n        address proposer; // Address of the proposer.\\r\\n        address disputer; // Address of the disputer.\\r\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\r\\n        bool settled; // True if the request is settled.\\r\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\r\\n        int256 proposedPrice; // Price that the proposer submitted.\\r\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\r\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\r\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\r\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\r\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\r\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    function defaultLiveness() external view virtual returns (uint256);\\r\\n\\r\\n    function finder() external view virtual returns (FinderInterface);\\r\\n\\r\\n    function getCurrentTime() external view virtual returns (uint256);\\r\\n\\r\\n    // Note: this is required so that typechain generates a return value with named fields.\\r\\n    mapping(bytes32 => Request) public requests;\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\r\\n     * This can be changed with a subsequent call to setBond().\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Set the proposal bond associated with a price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param bond custom bond amount to set.\\r\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\r\\n     * changed again with a subsequent call to setBond().\\r\\n     */\\r\\n    function setBond(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 bond\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\r\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\r\\n     * bond, so there is still profit to be made even if the reward is refunded.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setRefundOnDispute(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\r\\n     * being auto-resolved.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param customLiveness new custom liveness.\\r\\n     */\\r\\n    function setCustomLiveness(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 customLiveness\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address proposer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value for an existing price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        address disputer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\r\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\r\\n     * hasn't been settled.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return resolved price.\\r\\n     */\\r\\n    function settleAndGetPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (int256);\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 payout);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current data structure containing all information about a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the Request data structure.\\r\\n     */\\r\\n    function getRequest(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (Request memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state of a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the State enum value.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (State);\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return true if price has resolved or settled, false otherwise.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x2a984419bfbd2389a344141f5d08a46e8df8ad0605973f766cacd094c080ca6b\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001c576159e490816100228239308160250152f35b600080fdfe600436101561000d57600080fd5b60003560e01c634048d03b1461002257600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146102ca576101e03660031901126102ca576102606040526004356080526024356001600160a01b03811681036102ca5760a0526044356001600160a01b03811681036102ca5760c0526064356001600160a01b03811681036102ca5760e0526084356001600160a01b03811681036102ca576101005260a4356001600160a01b03811681036102ca576101205260c4356101405260e435610160526020366101031901126102ca576100f56102cf565b610104358152610180526020366101231901126102ca576101146102cf565b6101243581526101a052610144356101c0526020366101631901126102ca5761013b6102cf565b6101643581526101e0526020366101831901126102ca5761015a6102cf565b610184358152610200526020366101a31901126102ca576101796102cf565b6101a4358152610220526020366101c31901126102ca576101986102cf565b6101c43581526102405260405167ffffffffffffffff6156bf8201908111908211176102b4576156bf6102f08239608080516156bf830190815260a080516001600160a01b03908116602084015260c080518216604085015260e08051831660608601526101008051841696860196909652610120805190931693850193909352610140805191850191909152610160805193850193909352610180805151958501959095526101a0805151928501929092526101c08051918501919091526101e08051519385019390935261020051519484019490945261022051519083015261024051519282019290925282900301906000f080156102a8576040516001600160a01b039091168152602090f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604051906020820182811067ffffffffffffffff8211176102b45760405256fe6080604052346200041e57620056bf8038038091620000208260806200043f565b6080396101e0908181126200041e57604051918201906001600160401b0382118383101762000408578291604052608051825262000062602060800162000463565b60208301526200007360c062000463565b60408301526200008460e062000463565b60608301526200009661010062000463565b6080830152620000a861012062000463565b60a08301526101405160c08301526101605160e0830152610100620000d36080830161018062000478565b83820152610120620000eb608084016101a062000478565b818501526200015461014093846080015185870152620001148160800161016060800162000478565b6101608701526200012b6080820161020062000478565b610180870152620001426080820161022062000478565b6101a087015260800161024062000478565b6101c0850152835160018060a01b039081604087015116908260608801511692602460208260808b0151168a60c0810151998560a060e0840151928401519b8287860151169401519f0151169d60009e8f8055600160a01b9060018060a81b031960015416171760015560018060a01b03199889600254161760025583896003541617600355620001e4620004d5565b600455620001f1620004a8565b51600555620001ff620004d5565b80600955600a555160085560075586600c541617600c55604051928380926302abf57960e61b82527f4964656e74696669657257686974656c6973740000000000000000000000000060048301525afa8015620003fd578a90620003b7575b602091506024604051809481936390978d1b60e01b83528b6004840152165afa908115620003ac57899162000366575b5015620003625760125560105416176010555160135560115561016082015151620002b8620004a8565b5110156200034a576101a08201516101c08301519084604051620002dc8162000423565b5251905181018091116200034e5780604051620002f98162000423565b5262000304620004a8565b5111156200034a5781015160175561016081015151601855610180810151516019556101a081015151601a556101c0015151601b555060405161516390816200055c8239f35b8280fd5b634e487b7160e01b84526011600452602484fd5b8780fd5b90506020813d602011620003a3575b8162000384602093836200043f565b810103126200039f575180151581036200039f57386200028e565b8880fd5b3d915062000375565b6040513d8b823e3d90fd5b506020813d602011620003f4575b81620003d4602093836200043f565b81010312620003f057620003ea60209162000463565b6200025e565b8980fd5b3d9150620003c5565b6040513d8c823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b602081019081106001600160401b038211176200040857604052565b601f909101601f19168101906001600160401b038211908210176200040857604052565b51906001600160a01b03821682036200041e57565b91908260209103126200041e57604051602081016001600160401b03811182821017620004085760405291518252565b6000604051620004b88162000423565b52604051620004c78162000423565b670de0b6b3a7640000815290565b6001546001600160a01b0316801562000556576020600491604051928380926329cb924d60e01b82525afa9081156200054a5760009162000514575090565b906020823d821162000541575b8162000530602093836200043f565b810103126200053e57505190565b80fd5b3d915062000521565b6040513d6000823e3d90fd5b50429056fe608080604052600436101561001357600080fd5b60009081803560e01c918262b9add714612cd85750508063081b314e14612cba5780630c9229ca14612c9c5780630de15fd914612c7357806318928a0c14612b665780631c39c38d14612b3d5780632261128014612ab557806322f8e56614612a4657806325ed4dd81461239457806329cb924d146123715780632d5436cf146123535780632e154f2e1461233557806333a46ca2146121ab5780633403c2fc1461204557806334c4955614611c87578063360598e1146117c55780633cb6ce831461176f5780633ee7a5ce1461160e57806341d3c84c146115a857806343e4771b1461156457806348e30c3f146115465780634f8c48471461141a57806350f49846146113fc57806355f57510146113745780635aa266c9146111cc5780635f1af1ca14610f8b5780636ba2f99214610cd35780636cf1be2914610cb65780637048594b14610c8d57806371f3c1b714610c2c5780637b34ee7f14610c0e5780637e398c2214610bf057806381a10ae114610bc05780638bbd9fb914610b845780638c382eb214610b6657806392120aec14610b4857806394909e6214610a4b5780639752366114610a2d5780639b56d6c9146109bd5780639d69dc4e146109945780639e4efaa01461095f5780639ff4dea814610941578063a1c4d1e7146106e4578063a765fbea146104b5578063b9a3c84c1461048c578063bc12163014610390578063bda02e771461037a578063d1e92c111461025d5763dd0eef3d1461023d57600080fd5b3461025a578060031936011261025a576020600554604051908152f35b80fd5b503461025a57602036600319011261025a5761027836613154565b81546103765761028733615081565b8160405161029481613077565b5261029d613726565b6001805460ff60a01b1990811682559091906102b761322e565b508083541691600160a01b9283811785556102d0613726565b84556102da613d40565b8184541683811785556102eb613726565b8455805160006040516102fd81613077565b52600060405161030c81613077565b521561037257806103286103679261032333614dc5565b614f9a565b505180337fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c88604051a3600254309033906001600160a01b0316613b55565b825416179055604051f35b8480fd5b5080fd5b503461025a578060031936011261025a57604051f35b503461025a57602036600319011261025a576103ab36613154565b8154610376576103ba33615081565b6103c2613726565b60ff60a01b1980600154166001556103d933614dc5565b825160006040516103e981613077565b5260006040516103f881613077565b52151580610465575b156104615760029261041d6104146131b3565b601254906133e7565b600183015551928391015560405191337fd33b726e11d2c5d38e6702b16613df0160a07f7ba5185455ee3c45d0494fab118585a3600160a01b906001541617600155f35b8380fd5b5061048160405161047581613077565b6003830154815261467c565b835190511015610401565b503461025a578060031936011261025a576003546040516001600160a01b039091168152602090f35b503461025a57604036600319011261025a576004356104d2613061565b826040516104df81613077565b526104ea8282614b1c565b6104f26131b3565b6105036002830154601754906133e7565b1190816106b2575b50156106ae5760209260405161052081613077565b52610529613726565b6001805460ff60a01b19908116825590919061054361322e565b5061069f8184541692600160a01b93848117865561055f613726565b8555610569613d40565b82855416848117865561057a613726565b85556105868682614b1c565b956105d86105b760405161059981613077565b60048a01548152604051906105ad82613077565b60195482526139d2565b6105d26040516105c681613077565b60068b0154815261467c565b906139d2565b916105e2836146d0565b5087870180548616600160a11b1781556007890180546001600160a01b03191633179055600289015490929061061790614e22565b60018060a01b03809354169084516040519182528b8201527fcaca181ccad7979cf36ed4fc921e496001ab5264608f0fac7007ae1b43d3610260408533951692a461068f61067960096040519961066d8b613077565b0154988981528461395d565b976040519061068782613077565b81523361475e565b6002541690519030903390613b55565b82541617905560405190518152f35b8280fd5b60ff91506001015460a01c1660058110156106d0576001143861050b565b634e487b7160e01b84526021600452602484fd5b503461025a576020908160031936011261025a5761070061304b565b91610709613726565b6001600160a01b03928316825260158152604082208054909167ffffffffffffffff821161092d5792906040519060056107478683831b0184613112565b8183528583018095855286852085915b84831061081c5750505050506040519380850191818652518092526040850193925b8281106107865785850386f35b909192938261016060019287518a81511682528a8482015116848301526107b5604082015160408401906131a6565b60608181015190830152608080820151519083015260a080820151519083015260c080820151519083015260e0808201515190830152610100808201518c169083015261012080820151519083015261014090810151519082015201950193929101610779565b604098959698519061082d826130bd565b8a83541682526001830154908b82168884015260ff60a092831c1690868210156109175783600a938a93604060019701526002870154606083015260405161087481613077565b6003880154815260808301526040519061088d82613077565b600488015482528201526040516108a381613077565b88870154815260c08201526040516108ba81613077565b6006870154815260e08201528d6007870154166101008201526040516108df81613077565b600887015481526101208201526040516108f881613077565b6009870154815261014082015281520192019201919097959497610757565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b84526041600452602484fd5b503461025a578060031936011261025a576020601254604051908152f35b503461025a57602036600319011261025a57606061097e600435613799565b9060405192518352516020830152516040820152f35b503461025a578060031936011261025a57600c546040516001600160a01b039091168152602090f35b503461025a57602036600319011261025a57610a24610a1f600360406020946109e461304b565b8183516109f081613077565b526109f9613726565b6001600160a01b03168152600d8652206040519101610a1782613077565b54815261467c565b614b8f565b60405190518152f35b503461025a578060031936011261025a576020601154604051908152f35b503461025a578060031936011261025a57610a64613726565b6001805460ff60a01b191690819055610a7b614ad3565b6002546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610b3d578491610b07575b5060405190610ac382613077565b808252825110610ade575b5050600160a01b17600155604051f35b6105d2610afc9260405192610af284613077565b6005548452613a06565b516005553880610ace565b90506020813d8211610b35575b81610b2160209383613112565b81010312610b30575138610ab5565b600080fd5b3d9150610b14565b6040513d86823e3d90fd5b503461025a578060031936011261025a576020601354604051908152f35b503461025a578060031936011261025a576020600f54604051908152f35b503461025a57602036600319011261025a57610a24602091610ba536613154565b90604051610bb281613077565b52610bbb613726565b614734565b503461025a578060031936011261025a57604051610bdd81613077565b52610be6613726565b6020610a24614ad3565b503461025a578060031936011261025a576020601b54604051908152f35b503461025a578060031936011261025a576020601454604051908152f35b503461025a578060031936011261025a5780604051610c4a81613077565b52610c53613726565b6001805460ff60a01b199081168255610c6a61322e565b508082541690600160a01b918281178455610c83613726565b8355610367613d40565b503461025a578060031936011261025a576010546040516001600160a01b039091168152602090f35b503461025a578060031936011261025a5760209054604051908152f35b503461025a57604036600319011261025a57610cee36613154565b610cf736613134565b82546106ae5782604051610d0a81613077565b52610d13613726565b60ff60a01b1983600193828554168555610d2b61322e565b508285541693600160a01b948581178755610d44613726565b8655610d4e613d40565b838654168581178755610d5f613726565b8655338352600d60205260408320610d9183610d8c604051610d8081613077565b6003850154815261467c565b61395d565b610db660405191610da183613077565b610db08585549485815261395d565b90615094565b8015610f7b575b1561037257878201546103725780604051610dd781613077565b526000604051610de681613077565b526000604051610df581613077565b5215610f29575b908282610e0e602095610ec295614f9a565b50610e2883604051610e1f81613077565b8354815261395d565b519055610e4582604051610e3b81613077565b600e54815261395d565b51600e5551815181337f4b82aa16e071a61de1a6b9aeec9edab0356331f8122c78683b469ac8e685dabc88604051a46002546001600160a01b0391610e8f91309033908516613b55565b60105491516040516340c10f1960e01b815233600482015260248101919091529485939190921691839182906044820190565b03925af1908115610f1e578591610ee5575b501561046157825416179055604051f35b90506020813d8211610f16575b81610eff60209383613112565b8101031261037257610f10906134c1565b38610ed4565b3d9150610ef2565b6040513d87823e3d90fd5b90604051610f3681613077565b60135480915281511061046157602092610ec292337ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3787604051a29192509250610dfc565b50610f868385615094565b610dbd565b503461025a57602036600319011261025a57610fa636613154565b81604051610fb381613077565b52815461037657610fc333615081565b81604051610fd081613077565b52610fd9613726565b6001805460ff60a01b199081168255610ff061322e565b508082541690600160a01b918281178455611009613726565b8355611013613d40565b808354168281178455611024613726565b835561102f33614dc5565b8560405161103c81613077565b8254809152808751116103765761107f61106460405161105b81613077565b83815289613a06565b6105d260405161107381613077565b6003870154815261467c565b908060405161108d81613077565b52875103611165575090506110a133614cd4565b945b8551815181337fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92986604051a46002546001600160a01b03916110e8913390841661339d565b6110fc816010541683519030903390613b55565b60105416905190803b156106ae57602483926040519485938492630852cd8d60e31b845260048401525af1801561115a57611146575b506020945082541617905560405190518152f35b61115086916130a9565b6103725784611132565b6040513d88823e3d90fd5b611172908397929361505b565b9561118c8260405161118381613077565b8354815261398c565b906040519161119a83613077565b6013548093525191821061046157556111c3816040516111b981613077565b600e54815261398c565b51600e556110a3565b503461025a57602036600319011261025a576111e736613154565b8154610376576111f633615081565b8160405161120381613077565b5261120c613726565b6001805460ff60a01b19908116825590919061122661322e565b50838184541692600160a01b938481178655611240613726565b855561124a613d40565b82855416848117865561125b613726565b855561126633614dc5565b60405161127281613077565b8154809152808351116104615782611298916040519061129182613077565b815261398c565b90604051906112a682613077565b601354809252825191821061037257556112c6826040516111b981613077565b51600e558151905181337f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d086604051a46010546001600160a01b039161131191309033908516613b55565b601054169051813b156106ae578291602483926040519485938492630852cd8d60e31b845260048401525af1801561136957611355575b5050825416179055604051f35b61135e906130a9565b610461578338611348565b6040513d84823e3d90fd5b503461025a57602036600319011261025a576080906040906001600160a01b0361139c61304b565b168152600d60205220604051906113b282613077565b805482526001810154604051906113c882613077565b600283015482526003604051936113de85613077565b01548352604051935184526020840152516040830152516060820152f35b503461025a578060031936011261025a576020601654604051908152f35b503461025a57604036600319011261025a5761143461304b565b6001600160a01b0390811682526015602052604082208054602435939084101561025a57506101609261146691613174565b5081815416916001820154600283015460405161148281613077565b6003850154815260405161149581613077565b60048601548152604051916114a983613077565b60058701548352604051936114bd85613077565b600688015485526115138760078a01541696604051986114dc8a613077565b60088b01548a5260096040519b6114f28d613077565b01548b526040519b8c52811660208c015260ff60408c019160a01c166131a6565b60608901525160808801525160a08701525160c08601525160e08501526101008401525161012083015251610140820152f35b503461025a578060031936011261025a576020601854604051908152f35b503461025a578060031936011261025a5760405161158181613077565b5261158a613726565b6020610a24610a1f60405161159e81613077565b600f54815261467c565b503461025a578060031936011261025a5760c06040516115c781613077565b60065481526007546040516115db81613077565b6008548152600954600a5491600b54936040519551865260208601525160408501526060840152608083015260a0820152f35b503461025a57602036600319011261025a5761162936613154565b908060405161163781613077565b52805461025a5761164733615081565b8060405161165481613077565b5261165d613726565b6001805460ff60a01b19908116825561167461322e565b508082541690600160a01b91828117845561168d613726565b8355611697613d40565b8083541682811784556116a8613726565b8355845160006040516116ba81613077565b5260006040516116c981613077565b52156104615761171d6116db33614dc5565b856040516116e881613077565b52611708600382016116fa8982614984565b5060405190610a1782613077565b6040519161171583613077565b548252615094565b156104615761069f6117306020966148f6565b94855180917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653391604051a360025433906001600160a01b031661339d565b503461025a578060031936011261025a5760405161178c81613077565b52611795613726565b602060ff60a01b1980600154166001556117ad61322e565b90600160a01b90600154161760015560405190518152f35b503461025a57604036600319011261025a576117df613061565b6117e7614874565b506117f460043582614b1c565b60ff600182015460a01c1660058110156106d05760018111918215611c50575b505015610376578160405161182881613077565b52611831613726565b6001805460ff60a01b1916905561184661322e565b5060ff60a01b1960015416600160a01b8117600155611863613726565b60015561186e613d40565b60ff60a01b1960015416600160a01b811760015561188a613726565b60015561189960043582614b1c565b6118a5826004356149d2565b6118c06040516118b481613077565b6006830154815261467c565b91604051916118ce83613077565b600881015483526118fa846118f5856040516118e981613077565b600386015481526139d2565b6139d2565b6119168560405161190a81613077565b600485015481526139d2565b906119318160405161192781613077565b601b5481526139d2565b9061194c8160405161194281613077565b601a5481526139d2565b9061198361196a60405161195f81613077565b6019548152866139d2565b9860405161197781613077565b600988015481526139d2565b61198b614874565b9860ff600188015460a01c166005811015611c3c578a95949392919060038103611bb9575092826119e76119e18795611a769a60406119d76119ee98610d8c6119f39c6119fe9e61395d565b9b019a8b5261398c565b8361395d565b8c5261398c565b61398c565b80602089015261494d565b9060808701918252611a64611a24611a16895161494d565b9260608a019384525161494d565b60a08901819052600254600787015491516001600160a01b039592611a4e9290871690871661339d565b836002541690846001880154169051519161339d565b8160025416918454169051519161339d565b60808401918251519360a086019485515193606088019460ff600187515193015460a01c1693516005851015611ba55760408051948552602085019290925290830191909152606082015233907fb479588a37dc7f6bac1c91587fcfc539cac4949cf26bb536ad9c8d061f00f50d90608090a36001600160a01b03168552601560205260408520611b0a9060043590613174565b611b91576009818760c0986000945580600183015580600283015583600383015583600483015583600583015583600683015560078201558260088201550155600160a01b60ff60a01b19600154161760015560408051948051518652602081015151602087015201515160408501525151606084015251516080830152515160a0820152f35b634e487b7160e01b86526004869052602486fd5b634e487b7160e01b8b52602160045260248bfd5b9350935093505060048114600014611c145750611beb91610d8c611be092611c0f9561395d565b80602088015261494d565b6080860181905260025460018401549151916001600160a01b03908116911661339d565b611a76565b6001915014611c25575b5050611a76565b611be0611beb91611c359361395d565b3880611c1e565b634e487b7160e01b8c52602160045260248cfd5b611c6391925060020154601754906133e7565b611c6b6131b3565b10159081611c7c575b503880611814565b600191501438611c74565b503461025a573660031901604081126103765760201361025a5760405190611cae82613077565b600435825280604051611cc081613077565b5280604051611cce81613077565b52611cd7613726565b6001805460ff60a01b19169055611cec61322e565b5060ff60a01b1960015416600160a01b8117600155611d09613726565b600155611d14613d40565b60ff60a01b1960015416600160a01b8117600155611d30613726565b600155600b5461025a576060611d44613c01565b01518251905112158061202d575b1561025a57611d5f6131b3565b60095460243511908161200b575b501561025a57602435600b55611d81613bae565b9060075491611d8e6143cf565b6002546040516311df92f160e01b815260048101869052602480359082015260a0604482015290602090829081906001600160a01b0316611dd260a48301876136d1565b6064830191909152608482018890520381876001600160a01b0388165af18015610b3d57611fe0575b50611e19611e07614ad3565b6040611e11613c01565b0151906139d2565b519460206040518080986356ad3aad60e11b8252886004830152602435602483015260806044830152611e4f60848301876136d1565b60648301919091520381876001600160a01b0388165af1958615610b3d578496611fa4575b5091611ef1918460209460405198611e8b8a613077565b808a526000604051611e9c81613077565b526000604051611eab81613077565b52611f69575b519660405197889586948593637c82288f60e01b85523360048601523060248601526044850152602435606485015260c0608485015260c48401906136d1565b60a483019190915203926001600160a01b03165af1908115611f5d5750611f32575b6001805460ff60a01b1916600160a01b17905560405182518152602090f35b602090813d8311611f56575b611f488183613112565b81010312610b305738611f13565b503d611f3e565b604051903d90823e3d90fd5b6002548951611f8491309033906001600160a01b0316613b55565b6002548951611f9f916001600160a01b03878116911661340a565b611eb1565b91929095506020823d602011611fd8575b81611fc260209383613112565b81010312610b3057905194909190611ef1611e74565b3d9150611fb5565b602090813d8311612004575b611ff68183613112565b81010312610b305738611dfb565b503d611fec565b612022915060a061201a613c01565b0151906139a5565b602435101538611d6d565b506080612038613c01565b0151825190511315611d52565b503461025a578060031936011261025a57805461025a578060405161206981613077565b52612072613726565b6001805460ff60a01b19908116825561208961322e565b508082541690600160a01b9182811784556120a2613726565b83556120ac613d40565b8083541682811784556120bd613726565b83556003546040516302abf57960e61b81527f46696e616e6369616c436f6e74726163747341646d696e00000000000000000060048201526001600160a01b03916020908290602490829086165afa90811561115a57869161216e575b501633036104615761213561212d6131b3565b808655614e22565b83546040519081527f077382e0341a6d8666d1f8ed15b8c933a01f5c1a3e6c5229e2db8c5dc1c06ae160203392a2825416179055604051f35b90506020813d82116121a3575b8161218860209383613112565b8101031261219f5761219990613a2b565b3861211a565b8580fd5b3d915061217b565b503461025a578060031936011261025a57806040516121c981613077565b52805461025a57806040516121dd81613077565b526121e6613726565b6001805460ff60a01b19908116825590919061220061322e565b508083541692600160a01b938481178255612219613726565b8155612223613d40565b818154168481178255612234613726565b815561223f33614dc5565b93818501548015159081612323575b5015610461576020946122b56122af60405161226981613077565b60028401548082526040519061227e82613077565b81526040519061228d82613077565b61229e60038701549283815261467c565b9051905110612304575b508361505b565b91614f6f565b60025481516122ce9133906001600160a01b031661339d565b519283604051957fc86c3298cb79f486674dca87d9247e88b76146160e7d412cc59b26b14c358a68339188a38254161790558152f35b61231d91506040519061231682613077565b815261467c565b386122a8565b905061232d6131b3565b10153861224e565b503461025a578060031936011261025a576020601954604051908152f35b503461025a578060031936011261025a576020601754604051908152f35b503461025a578060031936011261025a57602061238c6131b3565b604051908152f35b503461025a5760a036600319011261025a576123ae61304b565b602036602319011261037657602036604319011261037657602036606319011261037657816040516123df81613077565b52816040516123ed81613077565b528154610376578160405161240181613077565b5261240a613726565b6001805460ff60a01b1916905561241f61322e565b5060ff60a01b1960015416600160a01b811760015561243c613726565b600155612447613d40565b60ff60a01b1960015416600160a01b8117600155612463613726565b6001556084356124716131b3565b116103765761247f81614dc5565b906040519061248d82613077565b60643582526124ac6040516124a181613077565b84549384825261393a565b90815160006040516124bd81613077565b5260006040516124cc81613077565b5215610372576124ed6040516124e181613077565b6003860154815261467c565b856040516124fa81613077565b5260405161250781613077565b868152906040519061251882613077565b60028701548092528051821115612a26575b60405161253681613077565b8681526125538160405161254981613077565b60443581526139d2565b51845111612a2257612568906118f536613134565b51835110612a1e578760405161257d81613077565b526001600160a01b0361258e613a3f565b1695602060018060a01b03600254166024604051809a8193635b97aadd60e01b835260048301525afa968715612a135789976129b8575b506126116126176126349361260861262c948d6040516125e481613077565b528d6040516125f281613077565b526040519061260082613077565b81528a613a06565b928380926139d2565b966139d2565b936040519061262582613077565b81526139d2565b838686614bfd565b612646612641868461395d565b6146d0565b506001600160a01b0383168752601560205260408720805496906126686131b3565b9061267287614734565b8a60405161267f81613077565b5261269f60405161268f81613077565b670de0b6b3a764000081526146a6565b8b6040516126ac81613077565b52604051916126ba83613077565b8c8352604051946126ca866130bd565b60018060a01b038a16865233602087015260016040870152606086015260808501528660a08501528560c085015260e08401528a61010084015261012083015287610140830152805490680100000000000000008210156129a4579061273591600182018155613174565b91909161299057805182546001600160a01b039182166001600160a01b0319918216178455602083015160018501805491909316911617905560408101516005811015611ba5579160096101407f39b4371645b4132767fd76a1aad3108ff95c20d7b687b24d171555f5459a759795936127b68d9a99989660018601614658565b60608101516002850155608081015151600385015560a081015151600485015560c081015151600585015560e08101515160068501556007840160018060a01b03610100830151166bffffffffffffffffffffffff60a01b82541617905561012081015151600885015501515191015560016040519161283583613077565b60135483520190815490811515918261297d575b508161296f575b5061295c575b5061286086614734565b5192519051906128a26128716131b3565b60408051968752602087019390935291850192909252606084015233936001600160a01b0316929081906080820190565b0390a460105481516128c091309033906001600160a01b0316613b55565b601054815185916001600160a01b0316803b156106ae57602483926040519485938492630852cd8d60e31b845260048401525af18015610f1e57612948575b5060025482516060955061291f91309033906001600160a01b0316613b55565b6001805460ff60a01b1916600160a01b1790556040805193845290516020840152905190820152f35b61295285916130a9565b61046157836128ff565b6129676104146131b3565b905538612856565b905087519051111538612850565b9091506129886131b3565b109038612849565b634e487b7160e01b8a5260048a905260248afd5b634e487b7160e01b8b52604160045260248bfd5b919096506020913d602011612a0b575b6129d28382613112565b6020818481010312612a075761261761262c926126086129fb846126349761261196019061377b565b9a9450509350506125c5565b8980fd5b3d92506129c8565b6040513d8b823e3d90fd5b8780fd5b8880fd5b9150612a40604051612a3781613077565b8281528361398c565b9161252a565b503461025a57602036600319011261025a5760015481906001600160a01b03168015612ab257803b15612ab257819060246040518094819363117c72b360e11b835260043560048401525af1801561136957612aa3575b50604051f35b612aac906130a9565b38612a9d565b50fd5b503461025a578060031936011261025a57805461025a57612ad4613726565b60ff60a01b198060015416600155612aeb33614dc5565b6001810154156106ae57806002612b2a920154337f74d8a3658feb89d1a5c335229bbbfc3bbcfaf492769feb7aa4cd2d92efeaf69186604051a3614f6f565b600160a01b906001541617600155604051f35b503461025a578060031936011261025a576001546040516001600160a01b039091168152602090f35b503461025a57604036600319011261025a57612b8061304b565b612b8936613134565b9082546106ae57612b9981615081565b82604051612ba681613077565b52612baf613726565b6001805460ff60a01b1990811682559092612bc861322e565b508184541692600160a01b938481178655612be1613726565b8555612beb613d40565b828554168481178655612bfc613726565b8555815186604051612c0d81613077565b5286604051612c1b81613077565b521561219f5781612c326103679361032384614dc5565b5051908160018060a01b038092167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c89604051a36002541630903390613b55565b503461025a578060031936011261025a576002546040516001600160a01b039091168152602090f35b503461025a578060031936011261025a576020600e54604051908152f35b503461025a578060031936011261025a576020601a54604051908152f35b819034612ab25781600319360112612ab257612cf381613077565b5280541561025a5780604051612d0881613077565b52612d11613726565b6001805460ff60a01b19908116825590612d2961322e565b508054600160a01b9083168181178355612d41613726565b8255612d4b613d40565b828254168181178355612d5c613726565b8255604051612d6a81613077565b601454815284604051612d7c81613077565b5284604051612d8a81613077565b52511561302a575b6010546040516370a0823160e01b81523360048201526020956001600160a01b0395929091908790829060249082908a165afa908115611369578291612ffd575b5060405190612de182613077565b8152612e75612e70612df283614734565b612e0d604051612e0181613077565b601454928382526139d2565b338652600d8b526040862060405190612e2582613077565b612e3660038201549283815261467c565b5188604051612e4481613077565b5288604051612e5281613077565b52612f30575b50509050612e6b60405161159e81613077565b61393a565b6148f6565b95612e86826040516111b981613077565b51600e55612ec48751835181337f129c54fc6fd4bd937e4a04ede027ac4ad3f9397cd943d6d354649d9d968dacbe88604051a433836002541661339d565b612ed8816010541683519030903390613b55565b601054169051813b156106ae578291602483926040519586938492630852cd8d60e31b845260048401525af1908115611f5d5750612f21575b5082541617905560405190518152f35b612f2a906130a9565b85612f11565b612f67612f9194612f53612f759360405190612f4b82613077565b548152614734565b60405191612f6083613077565b82526139d2565b916040519061231682613077565b908051825111600014612fe657612f8b9161398c565b9061395d565b338552600d8a52612fb76040862060036000918281558260018201558260028201550155565b337fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28286604051a2808b80612e58565b5050604051612ff481613077565b8681529061395d565b90508681813d8311613023575b6130148183613112565b81010312610376575187612dd3565b503d61300a565b8360405161303781613077565b526130428454614eb9565b51601455612d92565b600435906001600160a01b0382168203610b3057565b602435906001600160a01b0382168203610b3057565b6020810190811067ffffffffffffffff82111761309357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161309357604052565b610160810190811067ffffffffffffffff82111761309357604052565b60c0810190811067ffffffffffffffff82111761309357604052565b6040810190811067ffffffffffffffff82111761309357604052565b90601f8019910116810190811067ffffffffffffffff82111761309357604052565b6020906023190112610b30576040519061314d82613077565b6024358252565b6020906003190112610b30576040519061316d82613077565b6004358252565b805482101561319057600052600a602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9060058210156109175752565b6001546001600160a01b03168015613229576020600491604051928380926329cb924d60e01b82525afa90811561321d576000916131ef575090565b906020823d8211613215575b8161320860209383613112565b8101031261025a57505190565b3d91506131fb565b6040513d6000823e3d90fd5b504290565b6132366131b3565b61323e614ad3565b9061324881613799565b9391909260045583519060409283519261326184613077565b600080945283855161327281613077565b5215613395576132ac9082518651907f19b92e73d08d517d71ec46136266e4f5d526a8cd4f8501d73713cebfe4f335ef868851a386613abe565b80518284516132ba81613077565b528284516132c781613077565b5261330d575b508251918181516132dd81613077565b52516132e881613077565b526132f1575090565b600254905161330a9133906001600160a01b031661339d565b90565b613315613a3f565b60025482516001600160a01b03928316929161333591908490841661340a565b60025416813b1561046157845163432ce91960e11b81526001600160a01b039190911660048201529151602483015282908290604490829084905af1801561338b57156132cd57613385906130a9565b386132cd565b83513d84823e3d90fd5b505050505090565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526133e5916133e082606481015b03601f198101845283613112565b6134ce565b565b919082018092116133f457565b634e487b7160e01b600052601160045260246000fd5b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301529394936020908290604490829086165afa90811561321d5760009161348e575b5061345f6133e594956133e0926133e7565b60405163095ea7b360e01b60208201526001600160a01b039094166024850152604484015282606481016133d2565b906020823d82116134b9575b816134a760209383613112565b8101031261025a57505161345f61344d565b3d915061349a565b51908115158203610b3057565b60018060a01b0316906040516134e3816130f6565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d15613607573d9167ffffffffffffffff83116135f3579061355e9392916040519261355188601f19601f8401160185613112565b83523d868885013e613611565b908151908382159283156135d1575b50505090501561357a5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b84809293945001031261025a5750816135ea91016134c1565b8038838161356d565b634e487b7160e01b85526041600452602485fd5b9061355e92916060915b919290156136735750815115613625575090565b3b1561362e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156136865750805190602001fd5b60405162461bcd60e51b8152602060048201529081906136aa9060248301906136d1565b0390fd5b60005b8381106136c15750506000910152565b81810151838201526020016136b1565b906020916136ea815180928185528580860191016136ae565b601f01601f1916010190565b670de0b6b3a76400009080600019048211811515166133f4570290565b80600019048211811515166133f4570290565b60ff60015460a01c161561373657565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9190826020910312610b305760405161379381613077565b91518252565b6040918251906137a882613077565b6000918281528451936137ba85613077565b8385528551946137c986613077565b8486526137d4613a3f565b956137dd614ad3565b938451878a516137ec81613077565b52878a516137f981613077565b5215801561392f575b6139245750506004805488516374201feb60e01b81529182015260248101929092525081516044820152938590859060649082906001600160a01b03165afa801561391a57839484916138d5575b508094809661385f838361395d565b9586519181815161386f81613077565b525161387a81613077565b52156138ce575050825181511061388e5750565b936138c46138be6138a3876138ca959661398c565b956138b86138b1888361393a565b809261398c565b9661398c565b8261393a565b9061398c565b9290565b9550935050565b945050843d8611613913575b6138eb8186613112565b840185858203126104615780602061390661390d938861377b565b960161377b565b38613850565b503d6138e1565b85513d85823e3d90fd5b975090955093505050565b508360045414613802565b90600060405161394981613077565b52815181511115613958575090565b905090565b9061397a91600060405161397081613077565b52519051906133e7565b6040519061398782613077565b815290565b9061397a91600060405161399f81613077565b52519051905b919082039182116133f457565b81156139bc570490565b634e487b7160e01b600052601260045260246000fd5b670de0b6b3a7640000916139f89160006040516139ee81613077565b5251905190613713565b046040519061398782613077565b90613a2361397a926000604051613a1c81613077565b52516136f6565b9051906139b2565b51906001600160a01b0382168203610b3057565b6003546040516302abf57960e61b81526453746f726560d81b60048201526001600160a01b03916020908290602490829086165afa90811561321d57600091613a8757501690565b906020823d8211613ab6575b81613aa060209383613112565b8101031261025a5750613ab290613a2b565b1690565b3d9150613a93565b613b0b91613acb91613b11565b6105d260405191613adb83613077565b60055483526000604051613aee81613077565b52604051613afb81613077565b670de0b6b3a7640000815261398c565b51600555565b613b23906000604051613a1c81613077565b613b2e8251826139b2565b91519081156139bc57061561397a57600181018091116133f4576040519061398782613077565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117613093576133e5926040526134ce565b6003546040516302abf57960e61b81526f4f7074696d69737469634f7261636c6560801b60048201526001600160a01b03916020908290602490829086165afa90811561321d57600091613a8757501690565b60a060408051613c10816130da565b60009281848093528351613c2381613077565b83815260208201528351613c3681613077565b838152848201528351613c4881613077565b83815260608201528351613c5b81613077565b83815260808201520152600c54815163028ae03f60e31b81529060c0908290600490829087906001600160a01b03165af1928315613d35578093613ca0575b50505090565b9091925060c03d8111613d2e575b613cb88184613112565b82019060c08383031261025a575090613d1a60a092845194613cd9866130da565b83518652613cea826020860161377b565b6020870152613cfb8282860161377b565b90860152613d0c816060850161377b565b60608601526080830161377b565b6080840152015160a0820152388080613c9a565b503d613cae565b8251903d90823e3d90fd5b600080546142d257613d506131b3565b90613d5d600a54836139a5565b600b5480613fbc575b506040918251613d7581613077565b6006548152835192613d8684613077565b6008548452828551613d9781613077565b52828551613da481613077565b52845190613db182613077565b670de0b6b3a764000082526001600160ff1b0392838211613f6757848751613dd881613077565b52519284821385851391838104861182841616613f3f57600160ff1b9287851292908316878505861216613f5357848888129405871290841616613f3f578390058512911616613f2b57855192613e2e84613077565b028252828551613e3d81613077565b5251905190828282019283129112908015821691151617613f1757835190613e6482613077565b8152818451613e7281613077565b528351613e7e81613077565b828152828551613e8d81613077565b52815181511215613f0f5750905b808451613ea781613077565b52815112613ecb5790613ec2929151915191612f6083613077565b51600855600a55565b825162461bcd60e51b815260206004820152601760248201527f4e656761746976652076616c75652070726f76696465640000000000000000006044820152606490fd5b905090613e9b565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b88526011600452602488fd5b865162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608490fd5b613fc4613bae565b60075490613fd06143cf565b604080516353b5923960e01b81526004810185905260248101869052606060448201529490936001600160a01b039360209390851684888061401560648201866136d1565b03818d855af18a988161429f575b506140d35786614051959697985051808096819463a9904f9b60e01b835261018097889730600486016143a4565b03915afa9485156140ca57508694614097575b50508201518116158015929061408b575b5050614082575b38613d66565b81600b5561407c565b51161590503880614075565b8392945090816140bb92903d106140c3575b6140b38183613112565b8101906142d5565b929038614064565b503d6140a9565b513d88823e3d90fd5b9594929660099291925491828910156140f9575b50505050505050505081600b5561407c565b88938261415093895161410b81613077565b52600655846009558b885161411f81613077565b52875161412b81613077565b8c8152988851808095819463a9904f9b60e01b83526101809e8f9730600486016143a4565b03915afa978815614295578a98614276575b5050828488015116156141b8575b5050507fee568d08fdf25d8d2f01948f7ba3dc157176924ef7312d148584409333f0d8cd929350600654906009549451908351928352820152a23880808080808080806140e7565b7fee568d08fdf25d8d2f01948f7ba3dc157176924ef7312d148584409333f0d8cd9550906141fd614211926141f76141ee614ad3565b87611e11613c01565b926139a5565b9089865161420a81613077565b5251613713565b94835161421d81613077565b868152809689865161422e81613077565b5289865161423b81613077565b52614249575b869550614170565b61426e9261425e614258614ad3565b83613abe565b806002541692511690519161339d565b388080614241565b61428d929850803d106140c3576140b38183613112565b953880614162565b86513d8c823e3d90fd5b9098508581813d83116142cb575b6142b78183613112565b810103126142c757519738614023565b8a80fd5b503d6142ad565b50565b80916101809283910312610b305760405191820182811067ffffffffffffffff8211176130935760405261430881613a2b565b825261431660208201613a2b565b602083015260408101516001600160a01b0381168103610b30576040830152614341606082016134c1565b6060830152614352608082016134c1565b608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408082015190830152610160809101519082015290565b909260809261330a959460018060a01b031683526020830152604082015281606082015201906136d1565b6010546040516143de81613077565b600081526040516143ee816130f6565b600c81526144126020916b746f6b656e4164647265737360a01b83820152836145d9565b926144306fffffffffffffffffffffffffffffffff82841c166144d1565b906001600160c01b0319906144569060601b6bffffffffffffffffffffffff19166144d1565b169060405191838301918252604083015260288252606082019482861067ffffffffffffffff8711176130935761330a948660405261449e81518092876080880191016136ae565b83016144b382518093876080850191016136ae565b016144c58351809360808401906136ae565b01038084520182613112565b7f30303030303030303030303030303030303030303030303030303030303030309067ffffffffffffffff8060801b8260401b169116178060201b1779ffff000000000000ffff000000000000ffff000000000000ffff7dffff000000000000ffff000000000000ffff000000000000ffff000000008260101b169116178060081b177e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f7f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f008260041b1691161760277f0101010101010101010101010101010101010101010101010101010101010101808360011c16818460021c16178360031c161602010190565b51156146215761330a60226040518093600b60fa1b60208301526146078151809260206021860191016136ae565b8101601d60f91b6021820152036002810184520182613112565b61330a60216040518361463e8295518092602080860191016136ae565b8101601d60f91b6020820152036001810184520182613112565b90600581101561091757815460ff60a01b191660a09190911b60ff60a01b16179055565b61330a90600060405161468e81613077565b526040519061469c82613077565b60055482526139d2565b61330a9060006040516146b881613077565b52604051906146c682613077565b6005548252613a06565b61330a9060006040516146e281613077565b526119ee6147226040516146f581613077565b61470d6147076016549283815261467c565b946146a6565b906040519061471b82613077565b815261395d565b51806016556040519061231682613077565b61330a90600060405161474681613077565b526040519061475482613077565b60085482526139d2565b9190918251906040519161477183613077565b60008093528260405161478381613077565b521561486e576001600160a01b0390808216301461484c576147ae9082600254168651913091613b55565b83517f4f9bf7e8cd0f2456f9c43d2597bedcf1446c9c64544053f1ece6423ae9a07e5283604051a26147de613a3f565b906147f48180600254169316928387519161340a565b60025416813b156106ae5760405163432ce91960e11b81526001600160a01b039190911660048201529351602485015291929181908390604490829084905af1908115611f5d57506148435750565b6133e5906130a9565b50614855614ad3565b8051855110156106ae576148699085613abe565b6147ae565b50509050565b604090815191614883836130da565b60a08382519261489284613077565b600093848152825280516148a581613077565b848152602083015280516148b881613077565b8481528183015280516148ca81613077565b848152606083015280516148dd81613077565b848152608083015251926148f084613077565b83520152565b61330a90600060405161490881613077565b526138c461493b60405161491b81613077565b61492d614707600f549283815261467c565b906040519061129182613077565b5180600f556040519061231682613077565b61330a90600060405161495f81613077565b526138c461472260405161497281613077565b61492d6147076016549283815261467c565b906138c461330a92600060405161499a81613077565b526149c16040516149aa81613077565b61492d6149bb84549283815261467c565b956146a6565b518091556040519061231682613077565b6149dc8183614b1c565b91600183019060ff825460a01c16600581101561091757600203614acd57600791614a0a6002860154614eb9565b51806008870155614a4e614a386040928351614a2581613077565b60038a01548152845191612f6083613077565b825190614a4482613077565b60185482526139d2565b815190614a5a82613077565b60058801548092525111159182600014614ac357614a7a60035b82614658565b60018060a01b0394858092541697015416948151958652602086015284015216907f6c5582199868fabbe697f9ea10abe481bacf53ac78c02a965b34dff82fd20e3b60603392a4565b614a7a6004614a74565b50505050565b6000604051614ae181613077565b526000604051614af081613077565b5261330a614b0360405161159e81613077565b612f8b604051614b1281613077565b601654815261467c565b6001600160a01b03166000908152601560205260408120805491939291821080614b55575b1561046157614b51929350613174565b5090565b5060ff6001614b648484613174565b50015460a01c166005811015614b7b571515614b41565b634e487b7160e01b85526021600452602485fd5b6000604051614b9d81613077565b52614bae614ba96131b3565b613799565b9150506000604051614bbf81613077565b526000604051614bce81613077565b52805115614b5157906105d2614bef61330a93614be9614ad3565b90613b11565b6000604051613aee81613077565b909192614c0982614dc5565b936040928351614c1881613077565b865480915285511480614cb0575b614ca15750614c35908561505b565b50614c4e838351614c4581613077565b8654815261398c565b51808555825190614c5e82613077565b8152825190614c6c82613077565b6013548092525110610b3057614c8e6002614c9b950191835161118381613077565b519055516111b981613077565b51600e55565b93505050506142d29150614cd4565b50614ccb8451614cbf81613077565b6003880154815261467c565b51825114614c26565b61330a906138c4604060008151614cea81613077565b52614cf483614dc5565b92614d65825194614d0486613077565b614d3d614d16600f549788815261467c565b96855190614d2382613077565b8152855190614d3182613077565b6003840154825261398c565b51600f558351614d4c81613077565b600e548152845191614d5d83613077565b54825261398c565b51600e556001600160a01b03166000818152600d6020528281208181556001810182905560028101829055600301559051907fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc282600083a261159e81613077565b6001600160a01b03166000818152600d60205260408082209051919291614df291600301610a1782613077565b5182604051614e0081613077565b5282604051614e0e81613077565b5215610376578152600d6020526040902090565b6001600160a01b03614e32614e70565b169060115490823b15610b305760446000928360405195869485936368ad8ae360e01b8552600485015260248401525af1801561321d576148435750565b6003546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa90811561321d57600091613a8757501690565b604051614ec581613077565b60009081905260206001600160a01b03614edd614e70565b169260446011546040519586938492636494078360e11b8452600484015260248301525afa918215614f62578192614f2f575b50808212614f27575b506040519061398782613077565b905038614f19565b9091506020813d8211614f5a575b81614f4a60209383613112565b8101031261037657519038614f10565b3d9150614f3d565b50604051903d90823e3d90fd5b600160009182604051614f8181613077565b5282604051614f8f81613077565b528260028201550155565b906119ee61330a9261500e600360409260008451614fb781613077565b520160008351614fc681613077565b526119ee835191614fd683613077565b614ffe614fe782549485815261467c565b93614ff1896146a6565b9087519061471b82613077565b5180915584519061231682613077565b506000815161501c81613077565b5261504a815161502b81613077565b61503d6149bb600f549283815261467c565b9083519061471b82613077565b519081600f55519061231682613077565b9061507b81600361330a94600060405161507481613077565b5201614984565b506148f6565b61508c600191614dc5565b0154610b3057565b906150c8906150c26150ab60405161159e81613077565b604051906150b882613077565b600e5482526150d1565b926150d1565b90519051101590565b90604051916150df83613077565b60008093528151836040516150f381613077565b528360405161510181613077565b526151235750508060405161511581613077565b526040519061398782613077565b61330a9250613a0656fea2646970667358221220818716c8d9f53d25a6e2485c83ec768f2c60af0899c92475ed73707c4c5da1ff64736f6c63430008100033a26469706673582212206a141c43e550e3b8b25ed3e5f9ac815a69f6b4c54f2b832f01f18629d66e958764736f6c63430008100033",
  "deployedBytecode": "0x600436101561000d57600080fd5b60003560e01c634048d03b1461002257600080fd5b307f0000000000000000000000000000000000000000000000000000000000000000146102ca576101e03660031901126102ca576102606040526004356080526024356001600160a01b03811681036102ca5760a0526044356001600160a01b03811681036102ca5760c0526064356001600160a01b03811681036102ca5760e0526084356001600160a01b03811681036102ca576101005260a4356001600160a01b03811681036102ca576101205260c4356101405260e435610160526020366101031901126102ca576100f56102cf565b610104358152610180526020366101231901126102ca576101146102cf565b6101243581526101a052610144356101c0526020366101631901126102ca5761013b6102cf565b6101643581526101e0526020366101831901126102ca5761015a6102cf565b610184358152610200526020366101a31901126102ca576101796102cf565b6101a4358152610220526020366101c31901126102ca576101986102cf565b6101c43581526102405260405167ffffffffffffffff6156bf8201908111908211176102b4576156bf6102f08239608080516156bf830190815260a080516001600160a01b03908116602084015260c080518216604085015260e08051831660608601526101008051841696860196909652610120805190931693850193909352610140805191850191909152610160805193850193909352610180805151958501959095526101a0805151928501929092526101c08051918501919091526101e08051519385019390935261020051519484019490945261022051519083015261024051519282019290925282900301906000f080156102a8576040516001600160a01b039091168152602090f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b604051906020820182811067ffffffffffffffff8211176102b45760405256fe6080604052346200041e57620056bf8038038091620000208260806200043f565b6080396101e0908181126200041e57604051918201906001600160401b0382118383101762000408578291604052608051825262000062602060800162000463565b60208301526200007360c062000463565b60408301526200008460e062000463565b60608301526200009661010062000463565b6080830152620000a861012062000463565b60a08301526101405160c08301526101605160e0830152610100620000d36080830161018062000478565b83820152610120620000eb608084016101a062000478565b818501526200015461014093846080015185870152620001148160800161016060800162000478565b6101608701526200012b6080820161020062000478565b610180870152620001426080820161022062000478565b6101a087015260800161024062000478565b6101c0850152835160018060a01b039081604087015116908260608801511692602460208260808b0151168a60c0810151998560a060e0840151928401519b8287860151169401519f0151169d60009e8f8055600160a01b9060018060a81b031960015416171760015560018060a01b03199889600254161760025583896003541617600355620001e4620004d5565b600455620001f1620004a8565b51600555620001ff620004d5565b80600955600a555160085560075586600c541617600c55604051928380926302abf57960e61b82527f4964656e74696669657257686974656c6973740000000000000000000000000060048301525afa8015620003fd578a90620003b7575b602091506024604051809481936390978d1b60e01b83528b6004840152165afa908115620003ac57899162000366575b5015620003625760125560105416176010555160135560115561016082015151620002b8620004a8565b5110156200034a576101a08201516101c08301519084604051620002dc8162000423565b5251905181018091116200034e5780604051620002f98162000423565b5262000304620004a8565b5111156200034a5781015160175561016081015151601855610180810151516019556101a081015151601a556101c0015151601b555060405161516390816200055c8239f35b8280fd5b634e487b7160e01b84526011600452602484fd5b8780fd5b90506020813d602011620003a3575b8162000384602093836200043f565b810103126200039f575180151581036200039f57386200028e565b8880fd5b3d915062000375565b6040513d8b823e3d90fd5b506020813d602011620003f4575b81620003d4602093836200043f565b81010312620003f057620003ea60209162000463565b6200025e565b8980fd5b3d9150620003c5565b6040513d8c823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fd5b602081019081106001600160401b038211176200040857604052565b601f909101601f19168101906001600160401b038211908210176200040857604052565b51906001600160a01b03821682036200041e57565b91908260209103126200041e57604051602081016001600160401b03811182821017620004085760405291518252565b6000604051620004b88162000423565b52604051620004c78162000423565b670de0b6b3a7640000815290565b6001546001600160a01b0316801562000556576020600491604051928380926329cb924d60e01b82525afa9081156200054a5760009162000514575090565b906020823d821162000541575b8162000530602093836200043f565b810103126200053e57505190565b80fd5b3d915062000521565b6040513d6000823e3d90fd5b50429056fe608080604052600436101561001357600080fd5b60009081803560e01c918262b9add714612cd85750508063081b314e14612cba5780630c9229ca14612c9c5780630de15fd914612c7357806318928a0c14612b665780631c39c38d14612b3d5780632261128014612ab557806322f8e56614612a4657806325ed4dd81461239457806329cb924d146123715780632d5436cf146123535780632e154f2e1461233557806333a46ca2146121ab5780633403c2fc1461204557806334c4955614611c87578063360598e1146117c55780633cb6ce831461176f5780633ee7a5ce1461160e57806341d3c84c146115a857806343e4771b1461156457806348e30c3f146115465780634f8c48471461141a57806350f49846146113fc57806355f57510146113745780635aa266c9146111cc5780635f1af1ca14610f8b5780636ba2f99214610cd35780636cf1be2914610cb65780637048594b14610c8d57806371f3c1b714610c2c5780637b34ee7f14610c0e5780637e398c2214610bf057806381a10ae114610bc05780638bbd9fb914610b845780638c382eb214610b6657806392120aec14610b4857806394909e6214610a4b5780639752366114610a2d5780639b56d6c9146109bd5780639d69dc4e146109945780639e4efaa01461095f5780639ff4dea814610941578063a1c4d1e7146106e4578063a765fbea146104b5578063b9a3c84c1461048c578063bc12163014610390578063bda02e771461037a578063d1e92c111461025d5763dd0eef3d1461023d57600080fd5b3461025a578060031936011261025a576020600554604051908152f35b80fd5b503461025a57602036600319011261025a5761027836613154565b81546103765761028733615081565b8160405161029481613077565b5261029d613726565b6001805460ff60a01b1990811682559091906102b761322e565b508083541691600160a01b9283811785556102d0613726565b84556102da613d40565b8184541683811785556102eb613726565b8455805160006040516102fd81613077565b52600060405161030c81613077565b521561037257806103286103679261032333614dc5565b614f9a565b505180337fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c88604051a3600254309033906001600160a01b0316613b55565b825416179055604051f35b8480fd5b5080fd5b503461025a578060031936011261025a57604051f35b503461025a57602036600319011261025a576103ab36613154565b8154610376576103ba33615081565b6103c2613726565b60ff60a01b1980600154166001556103d933614dc5565b825160006040516103e981613077565b5260006040516103f881613077565b52151580610465575b156104615760029261041d6104146131b3565b601254906133e7565b600183015551928391015560405191337fd33b726e11d2c5d38e6702b16613df0160a07f7ba5185455ee3c45d0494fab118585a3600160a01b906001541617600155f35b8380fd5b5061048160405161047581613077565b6003830154815261467c565b835190511015610401565b503461025a578060031936011261025a576003546040516001600160a01b039091168152602090f35b503461025a57604036600319011261025a576004356104d2613061565b826040516104df81613077565b526104ea8282614b1c565b6104f26131b3565b6105036002830154601754906133e7565b1190816106b2575b50156106ae5760209260405161052081613077565b52610529613726565b6001805460ff60a01b19908116825590919061054361322e565b5061069f8184541692600160a01b93848117865561055f613726565b8555610569613d40565b82855416848117865561057a613726565b85556105868682614b1c565b956105d86105b760405161059981613077565b60048a01548152604051906105ad82613077565b60195482526139d2565b6105d26040516105c681613077565b60068b0154815261467c565b906139d2565b916105e2836146d0565b5087870180548616600160a11b1781556007890180546001600160a01b03191633179055600289015490929061061790614e22565b60018060a01b03809354169084516040519182528b8201527fcaca181ccad7979cf36ed4fc921e496001ab5264608f0fac7007ae1b43d3610260408533951692a461068f61067960096040519961066d8b613077565b0154988981528461395d565b976040519061068782613077565b81523361475e565b6002541690519030903390613b55565b82541617905560405190518152f35b8280fd5b60ff91506001015460a01c1660058110156106d0576001143861050b565b634e487b7160e01b84526021600452602484fd5b503461025a576020908160031936011261025a5761070061304b565b91610709613726565b6001600160a01b03928316825260158152604082208054909167ffffffffffffffff821161092d5792906040519060056107478683831b0184613112565b8183528583018095855286852085915b84831061081c5750505050506040519380850191818652518092526040850193925b8281106107865785850386f35b909192938261016060019287518a81511682528a8482015116848301526107b5604082015160408401906131a6565b60608181015190830152608080820151519083015260a080820151519083015260c080820151519083015260e0808201515190830152610100808201518c169083015261012080820151519083015261014090810151519082015201950193929101610779565b604098959698519061082d826130bd565b8a83541682526001830154908b82168884015260ff60a092831c1690868210156109175783600a938a93604060019701526002870154606083015260405161087481613077565b6003880154815260808301526040519061088d82613077565b600488015482528201526040516108a381613077565b88870154815260c08201526040516108ba81613077565b6006870154815260e08201528d6007870154166101008201526040516108df81613077565b600887015481526101208201526040516108f881613077565b6009870154815261014082015281520192019201919097959497610757565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b84526041600452602484fd5b503461025a578060031936011261025a576020601254604051908152f35b503461025a57602036600319011261025a57606061097e600435613799565b9060405192518352516020830152516040820152f35b503461025a578060031936011261025a57600c546040516001600160a01b039091168152602090f35b503461025a57602036600319011261025a57610a24610a1f600360406020946109e461304b565b8183516109f081613077565b526109f9613726565b6001600160a01b03168152600d8652206040519101610a1782613077565b54815261467c565b614b8f565b60405190518152f35b503461025a578060031936011261025a576020601154604051908152f35b503461025a578060031936011261025a57610a64613726565b6001805460ff60a01b191690819055610a7b614ad3565b6002546040516370a0823160e01b815230600482015290602090829060249082906001600160a01b03165afa908115610b3d578491610b07575b5060405190610ac382613077565b808252825110610ade575b5050600160a01b17600155604051f35b6105d2610afc9260405192610af284613077565b6005548452613a06565b516005553880610ace565b90506020813d8211610b35575b81610b2160209383613112565b81010312610b30575138610ab5565b600080fd5b3d9150610b14565b6040513d86823e3d90fd5b503461025a578060031936011261025a576020601354604051908152f35b503461025a578060031936011261025a576020600f54604051908152f35b503461025a57602036600319011261025a57610a24602091610ba536613154565b90604051610bb281613077565b52610bbb613726565b614734565b503461025a578060031936011261025a57604051610bdd81613077565b52610be6613726565b6020610a24614ad3565b503461025a578060031936011261025a576020601b54604051908152f35b503461025a578060031936011261025a576020601454604051908152f35b503461025a578060031936011261025a5780604051610c4a81613077565b52610c53613726565b6001805460ff60a01b199081168255610c6a61322e565b508082541690600160a01b918281178455610c83613726565b8355610367613d40565b503461025a578060031936011261025a576010546040516001600160a01b039091168152602090f35b503461025a578060031936011261025a5760209054604051908152f35b503461025a57604036600319011261025a57610cee36613154565b610cf736613134565b82546106ae5782604051610d0a81613077565b52610d13613726565b60ff60a01b1983600193828554168555610d2b61322e565b508285541693600160a01b948581178755610d44613726565b8655610d4e613d40565b838654168581178755610d5f613726565b8655338352600d60205260408320610d9183610d8c604051610d8081613077565b6003850154815261467c565b61395d565b610db660405191610da183613077565b610db08585549485815261395d565b90615094565b8015610f7b575b1561037257878201546103725780604051610dd781613077565b526000604051610de681613077565b526000604051610df581613077565b5215610f29575b908282610e0e602095610ec295614f9a565b50610e2883604051610e1f81613077565b8354815261395d565b519055610e4582604051610e3b81613077565b600e54815261395d565b51600e5551815181337f4b82aa16e071a61de1a6b9aeec9edab0356331f8122c78683b469ac8e685dabc88604051a46002546001600160a01b0391610e8f91309033908516613b55565b60105491516040516340c10f1960e01b815233600482015260248101919091529485939190921691839182906044820190565b03925af1908115610f1e578591610ee5575b501561046157825416179055604051f35b90506020813d8211610f16575b81610eff60209383613112565b8101031261037257610f10906134c1565b38610ed4565b3d9150610ef2565b6040513d87823e3d90fd5b90604051610f3681613077565b60135480915281511061046157602092610ec292337ff60993fa76f94c9e0a803526ee6e1314814ed4d2b0d223febf1436b36897fb3787604051a29192509250610dfc565b50610f868385615094565b610dbd565b503461025a57602036600319011261025a57610fa636613154565b81604051610fb381613077565b52815461037657610fc333615081565b81604051610fd081613077565b52610fd9613726565b6001805460ff60a01b199081168255610ff061322e565b508082541690600160a01b918281178455611009613726565b8355611013613d40565b808354168281178455611024613726565b835561102f33614dc5565b8560405161103c81613077565b8254809152808751116103765761107f61106460405161105b81613077565b83815289613a06565b6105d260405161107381613077565b6003870154815261467c565b908060405161108d81613077565b52875103611165575090506110a133614cd4565b945b8551815181337fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a92986604051a46002546001600160a01b03916110e8913390841661339d565b6110fc816010541683519030903390613b55565b60105416905190803b156106ae57602483926040519485938492630852cd8d60e31b845260048401525af1801561115a57611146575b506020945082541617905560405190518152f35b61115086916130a9565b6103725784611132565b6040513d88823e3d90fd5b611172908397929361505b565b9561118c8260405161118381613077565b8354815261398c565b906040519161119a83613077565b6013548093525191821061046157556111c3816040516111b981613077565b600e54815261398c565b51600e556110a3565b503461025a57602036600319011261025a576111e736613154565b8154610376576111f633615081565b8160405161120381613077565b5261120c613726565b6001805460ff60a01b19908116825590919061122661322e565b50838184541692600160a01b938481178655611240613726565b855561124a613d40565b82855416848117865561125b613726565b855561126633614dc5565b60405161127281613077565b8154809152808351116104615782611298916040519061129182613077565b815261398c565b90604051906112a682613077565b601354809252825191821061037257556112c6826040516111b981613077565b51600e558151905181337f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d086604051a46010546001600160a01b039161131191309033908516613b55565b601054169051813b156106ae578291602483926040519485938492630852cd8d60e31b845260048401525af1801561136957611355575b5050825416179055604051f35b61135e906130a9565b610461578338611348565b6040513d84823e3d90fd5b503461025a57602036600319011261025a576080906040906001600160a01b0361139c61304b565b168152600d60205220604051906113b282613077565b805482526001810154604051906113c882613077565b600283015482526003604051936113de85613077565b01548352604051935184526020840152516040830152516060820152f35b503461025a578060031936011261025a576020601654604051908152f35b503461025a57604036600319011261025a5761143461304b565b6001600160a01b0390811682526015602052604082208054602435939084101561025a57506101609261146691613174565b5081815416916001820154600283015460405161148281613077565b6003850154815260405161149581613077565b60048601548152604051916114a983613077565b60058701548352604051936114bd85613077565b600688015485526115138760078a01541696604051986114dc8a613077565b60088b01548a5260096040519b6114f28d613077565b01548b526040519b8c52811660208c015260ff60408c019160a01c166131a6565b60608901525160808801525160a08701525160c08601525160e08501526101008401525161012083015251610140820152f35b503461025a578060031936011261025a576020601854604051908152f35b503461025a578060031936011261025a5760405161158181613077565b5261158a613726565b6020610a24610a1f60405161159e81613077565b600f54815261467c565b503461025a578060031936011261025a5760c06040516115c781613077565b60065481526007546040516115db81613077565b6008548152600954600a5491600b54936040519551865260208601525160408501526060840152608083015260a0820152f35b503461025a57602036600319011261025a5761162936613154565b908060405161163781613077565b52805461025a5761164733615081565b8060405161165481613077565b5261165d613726565b6001805460ff60a01b19908116825561167461322e565b508082541690600160a01b91828117845561168d613726565b8355611697613d40565b8083541682811784556116a8613726565b8355845160006040516116ba81613077565b5260006040516116c981613077565b52156104615761171d6116db33614dc5565b856040516116e881613077565b52611708600382016116fa8982614984565b5060405190610a1782613077565b6040519161171583613077565b548252615094565b156104615761069f6117306020966148f6565b94855180917f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b653391604051a360025433906001600160a01b031661339d565b503461025a578060031936011261025a5760405161178c81613077565b52611795613726565b602060ff60a01b1980600154166001556117ad61322e565b90600160a01b90600154161760015560405190518152f35b503461025a57604036600319011261025a576117df613061565b6117e7614874565b506117f460043582614b1c565b60ff600182015460a01c1660058110156106d05760018111918215611c50575b505015610376578160405161182881613077565b52611831613726565b6001805460ff60a01b1916905561184661322e565b5060ff60a01b1960015416600160a01b8117600155611863613726565b60015561186e613d40565b60ff60a01b1960015416600160a01b811760015561188a613726565b60015561189960043582614b1c565b6118a5826004356149d2565b6118c06040516118b481613077565b6006830154815261467c565b91604051916118ce83613077565b600881015483526118fa846118f5856040516118e981613077565b600386015481526139d2565b6139d2565b6119168560405161190a81613077565b600485015481526139d2565b906119318160405161192781613077565b601b5481526139d2565b9061194c8160405161194281613077565b601a5481526139d2565b9061198361196a60405161195f81613077565b6019548152866139d2565b9860405161197781613077565b600988015481526139d2565b61198b614874565b9860ff600188015460a01c166005811015611c3c578a95949392919060038103611bb9575092826119e76119e18795611a769a60406119d76119ee98610d8c6119f39c6119fe9e61395d565b9b019a8b5261398c565b8361395d565b8c5261398c565b61398c565b80602089015261494d565b9060808701918252611a64611a24611a16895161494d565b9260608a019384525161494d565b60a08901819052600254600787015491516001600160a01b039592611a4e9290871690871661339d565b836002541690846001880154169051519161339d565b8160025416918454169051519161339d565b60808401918251519360a086019485515193606088019460ff600187515193015460a01c1693516005851015611ba55760408051948552602085019290925290830191909152606082015233907fb479588a37dc7f6bac1c91587fcfc539cac4949cf26bb536ad9c8d061f00f50d90608090a36001600160a01b03168552601560205260408520611b0a9060043590613174565b611b91576009818760c0986000945580600183015580600283015583600383015583600483015583600583015583600683015560078201558260088201550155600160a01b60ff60a01b19600154161760015560408051948051518652602081015151602087015201515160408501525151606084015251516080830152515160a0820152f35b634e487b7160e01b86526004869052602486fd5b634e487b7160e01b8b52602160045260248bfd5b9350935093505060048114600014611c145750611beb91610d8c611be092611c0f9561395d565b80602088015261494d565b6080860181905260025460018401549151916001600160a01b03908116911661339d565b611a76565b6001915014611c25575b5050611a76565b611be0611beb91611c359361395d565b3880611c1e565b634e487b7160e01b8c52602160045260248cfd5b611c6391925060020154601754906133e7565b611c6b6131b3565b10159081611c7c575b503880611814565b600191501438611c74565b503461025a573660031901604081126103765760201361025a5760405190611cae82613077565b600435825280604051611cc081613077565b5280604051611cce81613077565b52611cd7613726565b6001805460ff60a01b19169055611cec61322e565b5060ff60a01b1960015416600160a01b8117600155611d09613726565b600155611d14613d40565b60ff60a01b1960015416600160a01b8117600155611d30613726565b600155600b5461025a576060611d44613c01565b01518251905112158061202d575b1561025a57611d5f6131b3565b60095460243511908161200b575b501561025a57602435600b55611d81613bae565b9060075491611d8e6143cf565b6002546040516311df92f160e01b815260048101869052602480359082015260a0604482015290602090829081906001600160a01b0316611dd260a48301876136d1565b6064830191909152608482018890520381876001600160a01b0388165af18015610b3d57611fe0575b50611e19611e07614ad3565b6040611e11613c01565b0151906139d2565b519460206040518080986356ad3aad60e11b8252886004830152602435602483015260806044830152611e4f60848301876136d1565b60648301919091520381876001600160a01b0388165af1958615610b3d578496611fa4575b5091611ef1918460209460405198611e8b8a613077565b808a526000604051611e9c81613077565b526000604051611eab81613077565b52611f69575b519660405197889586948593637c82288f60e01b85523360048601523060248601526044850152602435606485015260c0608485015260c48401906136d1565b60a483019190915203926001600160a01b03165af1908115611f5d5750611f32575b6001805460ff60a01b1916600160a01b17905560405182518152602090f35b602090813d8311611f56575b611f488183613112565b81010312610b305738611f13565b503d611f3e565b604051903d90823e3d90fd5b6002548951611f8491309033906001600160a01b0316613b55565b6002548951611f9f916001600160a01b03878116911661340a565b611eb1565b91929095506020823d602011611fd8575b81611fc260209383613112565b81010312610b3057905194909190611ef1611e74565b3d9150611fb5565b602090813d8311612004575b611ff68183613112565b81010312610b305738611dfb565b503d611fec565b612022915060a061201a613c01565b0151906139a5565b602435101538611d6d565b506080612038613c01565b0151825190511315611d52565b503461025a578060031936011261025a57805461025a578060405161206981613077565b52612072613726565b6001805460ff60a01b19908116825561208961322e565b508082541690600160a01b9182811784556120a2613726565b83556120ac613d40565b8083541682811784556120bd613726565b83556003546040516302abf57960e61b81527f46696e616e6369616c436f6e74726163747341646d696e00000000000000000060048201526001600160a01b03916020908290602490829086165afa90811561115a57869161216e575b501633036104615761213561212d6131b3565b808655614e22565b83546040519081527f077382e0341a6d8666d1f8ed15b8c933a01f5c1a3e6c5229e2db8c5dc1c06ae160203392a2825416179055604051f35b90506020813d82116121a3575b8161218860209383613112565b8101031261219f5761219990613a2b565b3861211a565b8580fd5b3d915061217b565b503461025a578060031936011261025a57806040516121c981613077565b52805461025a57806040516121dd81613077565b526121e6613726565b6001805460ff60a01b19908116825590919061220061322e565b508083541692600160a01b938481178255612219613726565b8155612223613d40565b818154168481178255612234613726565b815561223f33614dc5565b93818501548015159081612323575b5015610461576020946122b56122af60405161226981613077565b60028401548082526040519061227e82613077565b81526040519061228d82613077565b61229e60038701549283815261467c565b9051905110612304575b508361505b565b91614f6f565b60025481516122ce9133906001600160a01b031661339d565b519283604051957fc86c3298cb79f486674dca87d9247e88b76146160e7d412cc59b26b14c358a68339188a38254161790558152f35b61231d91506040519061231682613077565b815261467c565b386122a8565b905061232d6131b3565b10153861224e565b503461025a578060031936011261025a576020601954604051908152f35b503461025a578060031936011261025a576020601754604051908152f35b503461025a578060031936011261025a57602061238c6131b3565b604051908152f35b503461025a5760a036600319011261025a576123ae61304b565b602036602319011261037657602036604319011261037657602036606319011261037657816040516123df81613077565b52816040516123ed81613077565b528154610376578160405161240181613077565b5261240a613726565b6001805460ff60a01b1916905561241f61322e565b5060ff60a01b1960015416600160a01b811760015561243c613726565b600155612447613d40565b60ff60a01b1960015416600160a01b8117600155612463613726565b6001556084356124716131b3565b116103765761247f81614dc5565b906040519061248d82613077565b60643582526124ac6040516124a181613077565b84549384825261393a565b90815160006040516124bd81613077565b5260006040516124cc81613077565b5215610372576124ed6040516124e181613077565b6003860154815261467c565b856040516124fa81613077565b5260405161250781613077565b868152906040519061251882613077565b60028701548092528051821115612a26575b60405161253681613077565b8681526125538160405161254981613077565b60443581526139d2565b51845111612a2257612568906118f536613134565b51835110612a1e578760405161257d81613077565b526001600160a01b0361258e613a3f565b1695602060018060a01b03600254166024604051809a8193635b97aadd60e01b835260048301525afa968715612a135789976129b8575b506126116126176126349361260861262c948d6040516125e481613077565b528d6040516125f281613077565b526040519061260082613077565b81528a613a06565b928380926139d2565b966139d2565b936040519061262582613077565b81526139d2565b838686614bfd565b612646612641868461395d565b6146d0565b506001600160a01b0383168752601560205260408720805496906126686131b3565b9061267287614734565b8a60405161267f81613077565b5261269f60405161268f81613077565b670de0b6b3a764000081526146a6565b8b6040516126ac81613077565b52604051916126ba83613077565b8c8352604051946126ca866130bd565b60018060a01b038a16865233602087015260016040870152606086015260808501528660a08501528560c085015260e08401528a61010084015261012083015287610140830152805490680100000000000000008210156129a4579061273591600182018155613174565b91909161299057805182546001600160a01b039182166001600160a01b0319918216178455602083015160018501805491909316911617905560408101516005811015611ba5579160096101407f39b4371645b4132767fd76a1aad3108ff95c20d7b687b24d171555f5459a759795936127b68d9a99989660018601614658565b60608101516002850155608081015151600385015560a081015151600485015560c081015151600585015560e08101515160068501556007840160018060a01b03610100830151166bffffffffffffffffffffffff60a01b82541617905561012081015151600885015501515191015560016040519161283583613077565b60135483520190815490811515918261297d575b508161296f575b5061295c575b5061286086614734565b5192519051906128a26128716131b3565b60408051968752602087019390935291850192909252606084015233936001600160a01b0316929081906080820190565b0390a460105481516128c091309033906001600160a01b0316613b55565b601054815185916001600160a01b0316803b156106ae57602483926040519485938492630852cd8d60e31b845260048401525af18015610f1e57612948575b5060025482516060955061291f91309033906001600160a01b0316613b55565b6001805460ff60a01b1916600160a01b1790556040805193845290516020840152905190820152f35b61295285916130a9565b61046157836128ff565b6129676104146131b3565b905538612856565b905087519051111538612850565b9091506129886131b3565b109038612849565b634e487b7160e01b8a5260048a905260248afd5b634e487b7160e01b8b52604160045260248bfd5b919096506020913d602011612a0b575b6129d28382613112565b6020818481010312612a075761261761262c926126086129fb846126349761261196019061377b565b9a9450509350506125c5565b8980fd5b3d92506129c8565b6040513d8b823e3d90fd5b8780fd5b8880fd5b9150612a40604051612a3781613077565b8281528361398c565b9161252a565b503461025a57602036600319011261025a5760015481906001600160a01b03168015612ab257803b15612ab257819060246040518094819363117c72b360e11b835260043560048401525af1801561136957612aa3575b50604051f35b612aac906130a9565b38612a9d565b50fd5b503461025a578060031936011261025a57805461025a57612ad4613726565b60ff60a01b198060015416600155612aeb33614dc5565b6001810154156106ae57806002612b2a920154337f74d8a3658feb89d1a5c335229bbbfc3bbcfaf492769feb7aa4cd2d92efeaf69186604051a3614f6f565b600160a01b906001541617600155604051f35b503461025a578060031936011261025a576001546040516001600160a01b039091168152602090f35b503461025a57604036600319011261025a57612b8061304b565b612b8936613134565b9082546106ae57612b9981615081565b82604051612ba681613077565b52612baf613726565b6001805460ff60a01b1990811682559092612bc861322e565b508184541692600160a01b938481178655612be1613726565b8555612beb613d40565b828554168481178655612bfc613726565b8555815186604051612c0d81613077565b5286604051612c1b81613077565b521561219f5781612c326103679361032384614dc5565b5051908160018060a01b038092167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c89604051a36002541630903390613b55565b503461025a578060031936011261025a576002546040516001600160a01b039091168152602090f35b503461025a578060031936011261025a576020600e54604051908152f35b503461025a578060031936011261025a576020601a54604051908152f35b819034612ab25781600319360112612ab257612cf381613077565b5280541561025a5780604051612d0881613077565b52612d11613726565b6001805460ff60a01b19908116825590612d2961322e565b508054600160a01b9083168181178355612d41613726565b8255612d4b613d40565b828254168181178355612d5c613726565b8255604051612d6a81613077565b601454815284604051612d7c81613077565b5284604051612d8a81613077565b52511561302a575b6010546040516370a0823160e01b81523360048201526020956001600160a01b0395929091908790829060249082908a165afa908115611369578291612ffd575b5060405190612de182613077565b8152612e75612e70612df283614734565b612e0d604051612e0181613077565b601454928382526139d2565b338652600d8b526040862060405190612e2582613077565b612e3660038201549283815261467c565b5188604051612e4481613077565b5288604051612e5281613077565b52612f30575b50509050612e6b60405161159e81613077565b61393a565b6148f6565b95612e86826040516111b981613077565b51600e55612ec48751835181337f129c54fc6fd4bd937e4a04ede027ac4ad3f9397cd943d6d354649d9d968dacbe88604051a433836002541661339d565b612ed8816010541683519030903390613b55565b601054169051813b156106ae578291602483926040519586938492630852cd8d60e31b845260048401525af1908115611f5d5750612f21575b5082541617905560405190518152f35b612f2a906130a9565b85612f11565b612f67612f9194612f53612f759360405190612f4b82613077565b548152614734565b60405191612f6083613077565b82526139d2565b916040519061231682613077565b908051825111600014612fe657612f8b9161398c565b9061395d565b338552600d8a52612fb76040862060036000918281558260018201558260028201550155565b337fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc28286604051a2808b80612e58565b5050604051612ff481613077565b8681529061395d565b90508681813d8311613023575b6130148183613112565b81010312610376575187612dd3565b503d61300a565b8360405161303781613077565b526130428454614eb9565b51601455612d92565b600435906001600160a01b0382168203610b3057565b602435906001600160a01b0382168203610b3057565b6020810190811067ffffffffffffffff82111761309357604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161309357604052565b610160810190811067ffffffffffffffff82111761309357604052565b60c0810190811067ffffffffffffffff82111761309357604052565b6040810190811067ffffffffffffffff82111761309357604052565b90601f8019910116810190811067ffffffffffffffff82111761309357604052565b6020906023190112610b30576040519061314d82613077565b6024358252565b6020906003190112610b30576040519061316d82613077565b6004358252565b805482101561319057600052600a602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b9060058210156109175752565b6001546001600160a01b03168015613229576020600491604051928380926329cb924d60e01b82525afa90811561321d576000916131ef575090565b906020823d8211613215575b8161320860209383613112565b8101031261025a57505190565b3d91506131fb565b6040513d6000823e3d90fd5b504290565b6132366131b3565b61323e614ad3565b9061324881613799565b9391909260045583519060409283519261326184613077565b600080945283855161327281613077565b5215613395576132ac9082518651907f19b92e73d08d517d71ec46136266e4f5d526a8cd4f8501d73713cebfe4f335ef868851a386613abe565b80518284516132ba81613077565b528284516132c781613077565b5261330d575b508251918181516132dd81613077565b52516132e881613077565b526132f1575090565b600254905161330a9133906001600160a01b031661339d565b90565b613315613a3f565b60025482516001600160a01b03928316929161333591908490841661340a565b60025416813b1561046157845163432ce91960e11b81526001600160a01b039190911660048201529151602483015282908290604490829084905af1801561338b57156132cd57613385906130a9565b386132cd565b83513d84823e3d90fd5b505050505090565b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526133e5916133e082606481015b03601f198101845283613112565b6134ce565b565b919082018092116133f457565b634e487b7160e01b600052601160045260246000fd5b604051636eb1769f60e11b81523060048201526001600160a01b0383811660248301529394936020908290604490829086165afa90811561321d5760009161348e575b5061345f6133e594956133e0926133e7565b60405163095ea7b360e01b60208201526001600160a01b039094166024850152604484015282606481016133d2565b906020823d82116134b9575b816134a760209383613112565b8101031261025a57505161345f61344d565b3d915061349a565b51908115158203610b3057565b60018060a01b0316906040516134e3816130f6565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d15613607573d9167ffffffffffffffff83116135f3579061355e9392916040519261355188601f19601f8401160185613112565b83523d868885013e613611565b908151908382159283156135d1575b50505090501561357a5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b84809293945001031261025a5750816135ea91016134c1565b8038838161356d565b634e487b7160e01b85526041600452602485fd5b9061355e92916060915b919290156136735750815115613625575090565b3b1561362e5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156136865750805190602001fd5b60405162461bcd60e51b8152602060048201529081906136aa9060248301906136d1565b0390fd5b60005b8381106136c15750506000910152565b81810151838201526020016136b1565b906020916136ea815180928185528580860191016136ae565b601f01601f1916010190565b670de0b6b3a76400009080600019048211811515166133f4570290565b80600019048211811515166133f4570290565b60ff60015460a01c161561373657565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9190826020910312610b305760405161379381613077565b91518252565b6040918251906137a882613077565b6000918281528451936137ba85613077565b8385528551946137c986613077565b8486526137d4613a3f565b956137dd614ad3565b938451878a516137ec81613077565b52878a516137f981613077565b5215801561392f575b6139245750506004805488516374201feb60e01b81529182015260248101929092525081516044820152938590859060649082906001600160a01b03165afa801561391a57839484916138d5575b508094809661385f838361395d565b9586519181815161386f81613077565b525161387a81613077565b52156138ce575050825181511061388e5750565b936138c46138be6138a3876138ca959661398c565b956138b86138b1888361393a565b809261398c565b9661398c565b8261393a565b9061398c565b9290565b9550935050565b945050843d8611613913575b6138eb8186613112565b840185858203126104615780602061390661390d938861377b565b960161377b565b38613850565b503d6138e1565b85513d85823e3d90fd5b975090955093505050565b508360045414613802565b90600060405161394981613077565b52815181511115613958575090565b905090565b9061397a91600060405161397081613077565b52519051906133e7565b6040519061398782613077565b815290565b9061397a91600060405161399f81613077565b52519051905b919082039182116133f457565b81156139bc570490565b634e487b7160e01b600052601260045260246000fd5b670de0b6b3a7640000916139f89160006040516139ee81613077565b5251905190613713565b046040519061398782613077565b90613a2361397a926000604051613a1c81613077565b52516136f6565b9051906139b2565b51906001600160a01b0382168203610b3057565b6003546040516302abf57960e61b81526453746f726560d81b60048201526001600160a01b03916020908290602490829086165afa90811561321d57600091613a8757501690565b906020823d8211613ab6575b81613aa060209383613112565b8101031261025a5750613ab290613a2b565b1690565b3d9150613a93565b613b0b91613acb91613b11565b6105d260405191613adb83613077565b60055483526000604051613aee81613077565b52604051613afb81613077565b670de0b6b3a7640000815261398c565b51600555565b613b23906000604051613a1c81613077565b613b2e8251826139b2565b91519081156139bc57061561397a57600181018091116133f4576040519061398782613077565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a081019181831067ffffffffffffffff841117613093576133e5926040526134ce565b6003546040516302abf57960e61b81526f4f7074696d69737469634f7261636c6560801b60048201526001600160a01b03916020908290602490829086165afa90811561321d57600091613a8757501690565b60a060408051613c10816130da565b60009281848093528351613c2381613077565b83815260208201528351613c3681613077565b838152848201528351613c4881613077565b83815260608201528351613c5b81613077565b83815260808201520152600c54815163028ae03f60e31b81529060c0908290600490829087906001600160a01b03165af1928315613d35578093613ca0575b50505090565b9091925060c03d8111613d2e575b613cb88184613112565b82019060c08383031261025a575090613d1a60a092845194613cd9866130da565b83518652613cea826020860161377b565b6020870152613cfb8282860161377b565b90860152613d0c816060850161377b565b60608601526080830161377b565b6080840152015160a0820152388080613c9a565b503d613cae565b8251903d90823e3d90fd5b600080546142d257613d506131b3565b90613d5d600a54836139a5565b600b5480613fbc575b506040918251613d7581613077565b6006548152835192613d8684613077565b6008548452828551613d9781613077565b52828551613da481613077565b52845190613db182613077565b670de0b6b3a764000082526001600160ff1b0392838211613f6757848751613dd881613077565b52519284821385851391838104861182841616613f3f57600160ff1b9287851292908316878505861216613f5357848888129405871290841616613f3f578390058512911616613f2b57855192613e2e84613077565b028252828551613e3d81613077565b5251905190828282019283129112908015821691151617613f1757835190613e6482613077565b8152818451613e7281613077565b528351613e7e81613077565b828152828551613e8d81613077565b52815181511215613f0f5750905b808451613ea781613077565b52815112613ecb5790613ec2929151915191612f6083613077565b51600855600a55565b825162461bcd60e51b815260206004820152601760248201527f4e656761746976652076616c75652070726f76696465640000000000000000006044820152606490fd5b905090613e9b565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b84526011600452602484fd5b634e487b7160e01b87526011600452602487fd5b634e487b7160e01b88526011600452602488fd5b865162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b6064820152608490fd5b613fc4613bae565b60075490613fd06143cf565b604080516353b5923960e01b81526004810185905260248101869052606060448201529490936001600160a01b039360209390851684888061401560648201866136d1565b03818d855af18a988161429f575b506140d35786614051959697985051808096819463a9904f9b60e01b835261018097889730600486016143a4565b03915afa9485156140ca57508694614097575b50508201518116158015929061408b575b5050614082575b38613d66565b81600b5561407c565b51161590503880614075565b8392945090816140bb92903d106140c3575b6140b38183613112565b8101906142d5565b929038614064565b503d6140a9565b513d88823e3d90fd5b9594929660099291925491828910156140f9575b50505050505050505081600b5561407c565b88938261415093895161410b81613077565b52600655846009558b885161411f81613077565b52875161412b81613077565b8c8152988851808095819463a9904f9b60e01b83526101809e8f9730600486016143a4565b03915afa978815614295578a98614276575b5050828488015116156141b8575b5050507fee568d08fdf25d8d2f01948f7ba3dc157176924ef7312d148584409333f0d8cd929350600654906009549451908351928352820152a23880808080808080806140e7565b7fee568d08fdf25d8d2f01948f7ba3dc157176924ef7312d148584409333f0d8cd9550906141fd614211926141f76141ee614ad3565b87611e11613c01565b926139a5565b9089865161420a81613077565b5251613713565b94835161421d81613077565b868152809689865161422e81613077565b5289865161423b81613077565b52614249575b869550614170565b61426e9261425e614258614ad3565b83613abe565b806002541692511690519161339d565b388080614241565b61428d929850803d106140c3576140b38183613112565b953880614162565b86513d8c823e3d90fd5b9098508581813d83116142cb575b6142b78183613112565b810103126142c757519738614023565b8a80fd5b503d6142ad565b50565b80916101809283910312610b305760405191820182811067ffffffffffffffff8211176130935760405261430881613a2b565b825261431660208201613a2b565b602083015260408101516001600160a01b0381168103610b30576040830152614341606082016134c1565b6060830152614352608082016134c1565b608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408082015190830152610160809101519082015290565b909260809261330a959460018060a01b031683526020830152604082015281606082015201906136d1565b6010546040516143de81613077565b600081526040516143ee816130f6565b600c81526144126020916b746f6b656e4164647265737360a01b83820152836145d9565b926144306fffffffffffffffffffffffffffffffff82841c166144d1565b906001600160c01b0319906144569060601b6bffffffffffffffffffffffff19166144d1565b169060405191838301918252604083015260288252606082019482861067ffffffffffffffff8711176130935761330a948660405261449e81518092876080880191016136ae565b83016144b382518093876080850191016136ae565b016144c58351809360808401906136ae565b01038084520182613112565b7f30303030303030303030303030303030303030303030303030303030303030309067ffffffffffffffff8060801b8260401b169116178060201b1779ffff000000000000ffff000000000000ffff000000000000ffff7dffff000000000000ffff000000000000ffff000000000000ffff000000008260101b169116178060081b177e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f7f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f008260041b1691161760277f0101010101010101010101010101010101010101010101010101010101010101808360011c16818460021c16178360031c161602010190565b51156146215761330a60226040518093600b60fa1b60208301526146078151809260206021860191016136ae565b8101601d60f91b6021820152036002810184520182613112565b61330a60216040518361463e8295518092602080860191016136ae565b8101601d60f91b6020820152036001810184520182613112565b90600581101561091757815460ff60a01b191660a09190911b60ff60a01b16179055565b61330a90600060405161468e81613077565b526040519061469c82613077565b60055482526139d2565b61330a9060006040516146b881613077565b52604051906146c682613077565b6005548252613a06565b61330a9060006040516146e281613077565b526119ee6147226040516146f581613077565b61470d6147076016549283815261467c565b946146a6565b906040519061471b82613077565b815261395d565b51806016556040519061231682613077565b61330a90600060405161474681613077565b526040519061475482613077565b60085482526139d2565b9190918251906040519161477183613077565b60008093528260405161478381613077565b521561486e576001600160a01b0390808216301461484c576147ae9082600254168651913091613b55565b83517f4f9bf7e8cd0f2456f9c43d2597bedcf1446c9c64544053f1ece6423ae9a07e5283604051a26147de613a3f565b906147f48180600254169316928387519161340a565b60025416813b156106ae5760405163432ce91960e11b81526001600160a01b039190911660048201529351602485015291929181908390604490829084905af1908115611f5d57506148435750565b6133e5906130a9565b50614855614ad3565b8051855110156106ae576148699085613abe565b6147ae565b50509050565b604090815191614883836130da565b60a08382519261489284613077565b600093848152825280516148a581613077565b848152602083015280516148b881613077565b8481528183015280516148ca81613077565b848152606083015280516148dd81613077565b848152608083015251926148f084613077565b83520152565b61330a90600060405161490881613077565b526138c461493b60405161491b81613077565b61492d614707600f549283815261467c565b906040519061129182613077565b5180600f556040519061231682613077565b61330a90600060405161495f81613077565b526138c461472260405161497281613077565b61492d6147076016549283815261467c565b906138c461330a92600060405161499a81613077565b526149c16040516149aa81613077565b61492d6149bb84549283815261467c565b956146a6565b518091556040519061231682613077565b6149dc8183614b1c565b91600183019060ff825460a01c16600581101561091757600203614acd57600791614a0a6002860154614eb9565b51806008870155614a4e614a386040928351614a2581613077565b60038a01548152845191612f6083613077565b825190614a4482613077565b60185482526139d2565b815190614a5a82613077565b60058801548092525111159182600014614ac357614a7a60035b82614658565b60018060a01b0394858092541697015416948151958652602086015284015216907f6c5582199868fabbe697f9ea10abe481bacf53ac78c02a965b34dff82fd20e3b60603392a4565b614a7a6004614a74565b50505050565b6000604051614ae181613077565b526000604051614af081613077565b5261330a614b0360405161159e81613077565b612f8b604051614b1281613077565b601654815261467c565b6001600160a01b03166000908152601560205260408120805491939291821080614b55575b1561046157614b51929350613174565b5090565b5060ff6001614b648484613174565b50015460a01c166005811015614b7b571515614b41565b634e487b7160e01b85526021600452602485fd5b6000604051614b9d81613077565b52614bae614ba96131b3565b613799565b9150506000604051614bbf81613077565b526000604051614bce81613077565b52805115614b5157906105d2614bef61330a93614be9614ad3565b90613b11565b6000604051613aee81613077565b909192614c0982614dc5565b936040928351614c1881613077565b865480915285511480614cb0575b614ca15750614c35908561505b565b50614c4e838351614c4581613077565b8654815261398c565b51808555825190614c5e82613077565b8152825190614c6c82613077565b6013548092525110610b3057614c8e6002614c9b950191835161118381613077565b519055516111b981613077565b51600e55565b93505050506142d29150614cd4565b50614ccb8451614cbf81613077565b6003880154815261467c565b51825114614c26565b61330a906138c4604060008151614cea81613077565b52614cf483614dc5565b92614d65825194614d0486613077565b614d3d614d16600f549788815261467c565b96855190614d2382613077565b8152855190614d3182613077565b6003840154825261398c565b51600f558351614d4c81613077565b600e548152845191614d5d83613077565b54825261398c565b51600e556001600160a01b03166000818152600d6020528281208181556001810182905560028101829055600301559051907fcad20625296d189a6fc6e5b39d0d544e5bd99dbda0c8f2f0ecffef3e0fbcc282600083a261159e81613077565b6001600160a01b03166000818152600d60205260408082209051919291614df291600301610a1782613077565b5182604051614e0081613077565b5282604051614e0e81613077565b5215610376578152600d6020526040902090565b6001600160a01b03614e32614e70565b169060115490823b15610b305760446000928360405195869485936368ad8ae360e01b8552600485015260248401525af1801561321d576148435750565b6003546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa90811561321d57600091613a8757501690565b604051614ec581613077565b60009081905260206001600160a01b03614edd614e70565b169260446011546040519586938492636494078360e11b8452600484015260248301525afa918215614f62578192614f2f575b50808212614f27575b506040519061398782613077565b905038614f19565b9091506020813d8211614f5a575b81614f4a60209383613112565b8101031261037657519038614f10565b3d9150614f3d565b50604051903d90823e3d90fd5b600160009182604051614f8181613077565b5282604051614f8f81613077565b528260028201550155565b906119ee61330a9261500e600360409260008451614fb781613077565b520160008351614fc681613077565b526119ee835191614fd683613077565b614ffe614fe782549485815261467c565b93614ff1896146a6565b9087519061471b82613077565b5180915584519061231682613077565b506000815161501c81613077565b5261504a815161502b81613077565b61503d6149bb600f549283815261467c565b9083519061471b82613077565b519081600f55519061231682613077565b9061507b81600361330a94600060405161507481613077565b5201614984565b506148f6565b61508c600191614dc5565b0154610b3057565b906150c8906150c26150ab60405161159e81613077565b604051906150b882613077565b600e5482526150d1565b926150d1565b90519051101590565b90604051916150df83613077565b60008093528151836040516150f381613077565b528360405161510181613077565b526151235750508060405161511581613077565b526040519061398782613077565b61330a9250613a0656fea2646970667358221220818716c8d9f53d25a6e2485c83ec768f2c60af0899c92475ed73707c4c5da1ff64736f6c63430008100033a26469706673582212206a141c43e550e3b8b25ed3e5f9ac815a69f6b4c54f2b832f01f18629d66e958764736f6c63430008100033",
  "devdoc": {
    "details": "Using this library to deploy Perpetuals allows calling contracts to avoid importing the full bytecode.",
    "kind": "dev",
    "methods": {
      "deploy(PerpetualLiquidatable.ConstructorParams)": {
        "details": "Caller will need to register new Perpetual with the Registry to begin requesting prices. Caller is also responsible for enforcing constraints on `params`.",
        "params": {
          "params": "is a `ConstructorParams` object from Perpetual."
        },
        "returns": {
          "_0": "address of the deployed Perpetual contract"
        }
      }
    },
    "title": "Provides convenient Perpetual Multi Party contract utilities.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(PerpetualLiquidatable.ConstructorParams)": {
        "notice": "Returns address of new Perpetual deployed with given `params` configuration."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}