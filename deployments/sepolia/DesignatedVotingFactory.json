{
  "address": "0x9bfa3265fD4084ce1b7a2d505C24Ac1453B9Fd2b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "finderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "AddedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "RemovedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ResetExclusiveMember",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "designatedVotingContracts",
      "outputs": [
        {
          "internalType": "contract DesignatedVoting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToCheck",
          "type": "address"
        }
      ],
      "name": "holdsRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        }
      ],
      "name": "newDesignatedVoting",
      "outputs": [
        {
          "internalType": "contract DesignatedVoting",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToRemove",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "renounceMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "resetMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "designatedVotingAddress",
          "type": "address"
        }
      ],
      "name": "setDesignatedVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20Address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawErc20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xedb7937ad1d780184544dbf63e64fce9b6f5aaaf4c2e9c3db82ab0a33e14db75",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x9bfa3265fD4084ce1b7a2d505C24Ac1453B9Fd2b",
    "transactionIndex": 48,
    "gasUsed": "2151026",
    "logsBloom": "0x
    "blockHash": "0xc182fcfdffad0b038fa8bc9bd862432e604275e53471b6ab1fccae724709049f",
    "transactionHash": "0xedb7937ad1d780184544dbf63e64fce9b6f5aaaf4c2e9c3db82ab0a33e14db75",
    "logs": [],
    "blockNumber": 6153666,
    "cumulativeGasUsed": "9734619",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"finderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AddedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RemovedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ResetExclusiveMember\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"designatedVotingContracts\",\"outputs\":[{\"internalType\":\"contract DesignatedVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToCheck\",\"type\":\"address\"}],\"name\":\"holdsRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"}],\"name\":\"newDesignatedVoting\",\"outputs\":[{\"internalType\":\"contract DesignatedVoting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToRemove\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"renounceMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"resetMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"designatedVotingAddress\",\"type\":\"address\"}],\"name\":\"setDesignatedVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawErc20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.\",\"kind\":\"dev\",\"methods\":{\"addMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"newMember\":\"the new SharedRole member.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"constructor\":{\"params\":{\"finderAddress\":\"keeps track of all contracts within the system based on their interfaceName.\"}},\"getMember(uint256)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, exclusive role.\",\"params\":{\"roleId\":\"the ExclusiveRole membership to check.\"},\"returns\":{\"_0\":\"the address of the current ExclusiveRole member.\"}},\"holdsRole(uint256,address)\":{\"details\":\"Reverts if roleId does not correspond to an initialized role.\",\"params\":{\"memberToCheck\":\"the address to check.\",\"roleId\":\"the Role to check.\"},\"returns\":{\"_0\":\"True if `memberToCheck` is a member of `roleId`.\"}},\"newDesignatedVoting(address)\":{\"params\":{\"ownerAddress\":\"defines who will own the deployed instance of the designatedVoting contract.\"},\"returns\":{\"_0\":\"designatedVoting a new DesignatedVoting contract.\"}},\"removeMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"memberToRemove\":\"the current SharedRole member to remove.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"renounceMembership(uint256)\":{\"details\":\"Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.\",\"params\":{\"roleId\":\"the SharedRole membership to modify.\"}},\"resetMember(uint256,address)\":{\"details\":\"Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.\",\"params\":{\"newMember\":\"the new ExclusiveRole member.\",\"roleId\":\"the ExclusiveRole membership to modify.\"}},\"setDesignatedVoting(address)\":{\"details\":\"This is generally only used if the owner of a `DesignatedVoting` contract changes their `voter` address and wants that reflected here.\",\"params\":{\"designatedVotingAddress\":\"address to designate voting to.\"}},\"withdrawErc20(address,uint256)\":{\"params\":{\"amount\":\"amount of tokens to withdraw.\",\"erc20Address\":\"ERC20 token to withdraw.\"}}},\"title\":\"Factory to deploy new instances of DesignatedVoting and look up previously deployed instances.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(uint256,address)\":{\"notice\":\"Adds `newMember` to the shared role, `roleId`.\"},\"constructor\":{\"notice\":\"Construct the DesignatedVotingFactory contract.\"},\"getMember(uint256)\":{\"notice\":\"Gets the current holder of the exclusive role, `roleId`.\"},\"holdsRole(uint256,address)\":{\"notice\":\"Whether `memberToCheck` is a member of roleId.\"},\"newDesignatedVoting(address)\":{\"notice\":\"Deploys a new `DesignatedVoting` contract.\"},\"removeMember(uint256,address)\":{\"notice\":\"Removes `memberToRemove` from the shared role, `roleId`.\"},\"renounceMembership(uint256)\":{\"notice\":\"Removes caller from the role, `roleId`.\"},\"resetMember(uint256,address)\":{\"notice\":\"Changes the exclusive role holder of `roleId` to `newMember`.\"},\"setDesignatedVoting(address)\":{\"notice\":\"Associates a `DesignatedVoting` instance with `msg.sender`.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws ETH from the contract.\"},\"withdrawErc20(address,uint256)\":{\"notice\":\"Withdraws ERC20 tokens from the contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol\":\"DesignatedVotingFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Withdrawable.sol\":{\"content\":\"/**\\r\\n * Withdrawable contract.\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./MultiRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base contract that allows a specific role to withdraw any ETH and/or ERC20 tokens that the contract holds.\\r\\n */\\r\\nabstract contract Withdrawable is MultiRole {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 private roleId;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws ETH from the contract.\\r\\n     */\\r\\n    function withdraw(uint256 amount) external onlyRoleHolder(roleId) {\\r\\n        Address.sendValue(payable(msg.sender), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws ERC20 tokens from the contract.\\r\\n     * @param erc20Address ERC20 token to withdraw.\\r\\n     * @param amount amount of tokens to withdraw.\\r\\n     */\\r\\n    function withdrawErc20(address erc20Address, uint256 amount) external onlyRoleHolder(roleId) {\\r\\n        IERC20 erc20 = IERC20(erc20Address);\\r\\n        erc20.safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method that allows derived contracts to create a role for withdrawal.\\r\\n     * @dev Either this method or `_setWithdrawRole` must be called by the derived class for this contract to function\\r\\n     * properly.\\r\\n     * @param newRoleId ID corresponding to role whose members can withdraw.\\r\\n     * @param managingRoleId ID corresponding to managing role who can modify the withdrawable role's membership.\\r\\n     * @param withdrawerAddress new manager of withdrawable role.\\r\\n     */\\r\\n    function _createWithdrawRole(\\r\\n        uint256 newRoleId,\\r\\n        uint256 managingRoleId,\\r\\n        address withdrawerAddress\\r\\n    ) internal {\\r\\n        roleId = newRoleId;\\r\\n        _createExclusiveRole(newRoleId, managingRoleId, withdrawerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method that allows derived contracts to choose the role for withdrawal.\\r\\n     * @dev The role `setRoleId` must exist. Either this method or `_createWithdrawRole` must be\\r\\n     * called by the derived class for this contract to function properly.\\r\\n     * @param setRoleId ID corresponding to role whose members can withdraw.\\r\\n     */\\r\\n    function _setWithdrawRole(uint256 setRoleId) internal onlyValidRole(setRoleId) {\\r\\n        roleId = setRoleId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8fd5e22e1e27af63211d4d066df68d7a91b3a25a9a2908f5587ca6130bb4f831\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/DesignatedVoting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\r\\nimport \\\"../../common/implementation/Withdrawable.sol\\\";\\r\\nimport \\\"../interfaces/VotingAncillaryInterface.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Proxy to allow voting from another address.\\r\\n * @dev Allows a UMA token holder to designate another address to vote on their behalf.\\r\\n * Each voter must deploy their own instance of this contract.\\r\\n */\\r\\ncontract DesignatedVoting is Withdrawable {\\r\\n    /****************************************\\r\\n     *    INTERNAL VARIABLES AND STORAGE    *\\r\\n     ****************************************/\\r\\n\\r\\n    enum Roles {\\r\\n        Owner, // Can set the Voter role. Is also permanently permissioned as the minter role.\\r\\n        Voter // Can vote through this contract.\\r\\n    }\\r\\n\\r\\n    // Reference to the UMA Finder contract, allowing Voting upgrades to be performed\\r\\n    // without requiring any calls to this contract.\\r\\n    FinderInterface private finder;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the DesignatedVoting contract.\\r\\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\\r\\n     * @param ownerAddress address of the owner of the DesignatedVoting contract.\\r\\n     * @param voterAddress address to which the owner has delegated their voting power.\\r\\n     */\\r\\n    constructor(\\r\\n        address finderAddress,\\r\\n        address ownerAddress,\\r\\n        address voterAddress\\r\\n    ) {\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), ownerAddress);\\r\\n        _createExclusiveRole(uint256(Roles.Voter), uint256(Roles.Owner), voterAddress);\\r\\n        _setWithdrawRole(uint256(Roles.Owner));\\r\\n\\r\\n        finder = FinderInterface(finderAddress);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *   VOTING AND REWARD FUNCTIONALITY    *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards a commit to Voting.\\r\\n     * @param identifier uniquely identifies the feed for this vote. EG BTC/USD price pair.\\r\\n     * @param time specifies the unix timestamp of the price being voted on.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param hash the keccak256 hash of the price you want to vote for and a random integer salt value.\\r\\n     */\\r\\n    function commitVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash\\r\\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\\r\\n        _getVotingAddress().commitVote(identifier, time, ancillaryData, hash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards a batch commit to Voting.\\r\\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\r\\n     */\\r\\n    function batchCommit(VotingAncillaryInterface.CommitmentAncillary[] calldata commits)\\r\\n        external\\r\\n        onlyRoleHolder(uint256(Roles.Voter))\\r\\n    {\\r\\n        _getVotingAddress().batchCommit(commits);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards a reveal to Voting.\\r\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\r\\n     * @param time specifies the unix timestamp of the price being voted on.\\r\\n     * @param price used along with the `salt` to produce the `hash` during the commit phase.\\r\\n     * @param salt used along with the `price` to produce the `hash` during the commit phase.\\r\\n     */\\r\\n    function revealVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 salt\\r\\n    ) external onlyRoleHolder(uint256(Roles.Voter)) {\\r\\n        _getVotingAddress().revealVote(identifier, time, price, ancillaryData, salt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards a batch reveal to Voting.\\r\\n     * @param reveals is an array of the Reveal struct which contains an identifier, time, price and salt.\\r\\n     */\\r\\n    function batchReveal(VotingAncillaryInterface.RevealAncillary[] calldata reveals)\\r\\n        external\\r\\n        onlyRoleHolder(uint256(Roles.Voter))\\r\\n    {\\r\\n        _getVotingAddress().batchReveal(reveals);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Forwards a reward retrieval to Voting.\\r\\n     * @dev Rewards are added to the tokens already held by this contract.\\r\\n     * @param roundId defines the round from which voting rewards will be retrieved from.\\r\\n     * @param toRetrieve an array of PendingRequests which rewards are retrieved from.\\r\\n     * @return amount of rewards that the user should receive.\\r\\n     */\\r\\n    function retrieveRewards(uint256 roundId, VotingAncillaryInterface.PendingRequestAncillary[] memory toRetrieve)\\r\\n        public\\r\\n        onlyRoleHolder(uint256(Roles.Voter))\\r\\n        returns (FixedPoint.Unsigned memory)\\r\\n    {\\r\\n        return _getVotingAddress().retrieveRewards(address(this), roundId, toRetrieve);\\r\\n    }\\r\\n\\r\\n    function _getVotingAddress() private view returns (VotingAncillaryInterface) {\\r\\n        return VotingAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8487d5f739768c1db3566f887aab66c7a3a3532f2b31302945958efb9a396dcb\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/Withdrawable.sol\\\";\\r\\nimport \\\"./DesignatedVoting.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Factory to deploy new instances of DesignatedVoting and look up previously deployed instances.\\r\\n * @dev Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.\\r\\n */\\r\\ncontract DesignatedVotingFactory is Withdrawable {\\r\\n    /****************************************\\r\\n     *    INTERNAL VARIABLES AND STORAGE    *\\r\\n     ****************************************/\\r\\n\\r\\n    enum Roles {\\r\\n        Withdrawer // Can withdraw any ETH or ERC20 sent accidentally to this contract.\\r\\n    }\\r\\n\\r\\n    address private finder;\\r\\n    mapping(address => DesignatedVoting) public designatedVotingContracts;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the DesignatedVotingFactory contract.\\r\\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\\r\\n     */\\r\\n    constructor(address finderAddress) {\\r\\n        finder = finderAddress;\\r\\n\\r\\n        _createWithdrawRole(uint256(Roles.Withdrawer), uint256(Roles.Withdrawer), msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deploys a new `DesignatedVoting` contract.\\r\\n     * @param ownerAddress defines who will own the deployed instance of the designatedVoting contract.\\r\\n     * @return designatedVoting a new DesignatedVoting contract.\\r\\n     */\\r\\n    function newDesignatedVoting(address ownerAddress) external returns (DesignatedVoting) {\\r\\n        DesignatedVoting designatedVoting = new DesignatedVoting(finder, ownerAddress, msg.sender);\\r\\n        designatedVotingContracts[msg.sender] = designatedVoting;\\r\\n        return designatedVoting;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Associates a `DesignatedVoting` instance with `msg.sender`.\\r\\n     * @param designatedVotingAddress address to designate voting to.\\r\\n     * @dev This is generally only used if the owner of a `DesignatedVoting` contract changes their `voter`\\r\\n     * address and wants that reflected here.\\r\\n     */\\r\\n    function setDesignatedVoting(address designatedVotingAddress) external {\\r\\n        designatedVotingContracts[msg.sender] = DesignatedVoting(designatedVotingAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xe71bd079351b0e07e67696a947c2655eb474a5e6f020cbd88d05d2e5f4577d3a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/VotingAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that voters must use to Vote on price request resolutions.\\r\\n */\\r\\nabstract contract VotingAncillaryInterface {\\r\\n    struct PendingRequestAncillary {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        bytes ancillaryData;\\r\\n    }\\r\\n\\r\\n    // Captures the necessary data for making a commitment.\\r\\n    // Used as a parameter when making batch commitments.\\r\\n    // Not used as a data structure for storage.\\r\\n    struct CommitmentAncillary {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        bytes ancillaryData;\\r\\n        bytes32 hash;\\r\\n        bytes encryptedVote;\\r\\n    }\\r\\n\\r\\n    // Captures the necessary data for revealing a vote.\\r\\n    // Used as a parameter when making batch reveals.\\r\\n    // Not used as a data structure for storage.\\r\\n    struct RevealAncillary {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        int256 price;\\r\\n        bytes ancillaryData;\\r\\n        int256 salt;\\r\\n    }\\r\\n\\r\\n    // Note: the phases must be in order. Meaning the first enum value must be the first phase, etc.\\r\\n    // `NUM_PHASES` is to get the number of phases. It isn't an actual phase, and it should always be last.\\r\\n    enum Phase { Commit, Reveal, NUM_PHASES }\\r\\n\\r\\n    /**\\r\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\r\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\r\\n     * Commits can be changed.\\r\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\\u2019s expected behavior,\\r\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\r\\n     * they can determine the vote pre-reveal.\\r\\n     * @param identifier uniquely identifies the committed vote. E.G. BTC/USD price pair.\\r\\n     * @param time unix timestamp of the price being voted on.\\r\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\r\\n     */\\r\\n    function commitVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Submit a batch of commits in a single transaction.\\r\\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\r\\n     * commitments that can fit in one transaction.\\r\\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\r\\n     */\\r\\n    function batchCommit(CommitmentAncillary[] memory commits) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\r\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\r\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\r\\n     * @param identifier unique price pair identifier. E.g. BTC/USD price pair.\\r\\n     * @param time unix timestamp of for the price request.\\r\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\r\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\r\\n     */\\r\\n    function commitAndEmitEncryptedVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash,\\r\\n        bytes memory encryptedVote\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\\r\\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\\r\\n     * time of calling `_freezeRoundVariables`.\\r\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\r\\n     * snapshot.\\r\\n     */\\r\\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\r\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\r\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\r\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\r\\n     * @param time specifies the unix timestamp of the price is being voted on.\\r\\n     * @param price voted on during the commit phase.\\r\\n     * @param salt value used to hide the commitment price during the commit phase.\\r\\n     */\\r\\n    function revealVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 salt\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal multiple votes in a single transaction.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\r\\n     * that can fit in one transaction.\\r\\n     * @dev For more information on reveals, review the comment for `revealVote`.\\r\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\r\\n     */\\r\\n    function batchReveal(RevealAncillary[] memory reveals) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the queries that are being voted on this round.\\r\\n     * @return pendingRequests `PendingRequest` array containing identifiers\\r\\n     * and timestamps for all pending requests.\\r\\n     */\\r\\n    function getPendingRequests() external view virtual returns (PendingRequestAncillary[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current voting phase, as a function of the current time.\\r\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES }.\\r\\n     */\\r\\n    function getVotePhase() external view virtual returns (Phase);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current round ID, as a function of the current time.\\r\\n     * @return uint256 representing the unique round ID.\\r\\n     */\\r\\n    function getCurrentRoundId() external view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\r\\n     * @dev Can only retrieve rewards if calling for a valid round and if the\\r\\n     * call is done within the timeout threshold (not expired).\\r\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\r\\n     * @param roundId the round from which voting rewards will be retrieved from.\\r\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\r\\n     * @return total amount of rewards returned to the voter.\\r\\n     */\\r\\n    function retrieveRewards(\\r\\n        address voterAddress,\\r\\n        uint256 roundId,\\r\\n        PendingRequestAncillary[] memory toRetrieve\\r\\n    ) public virtual returns (FixedPoint.Unsigned memory);\\r\\n\\r\\n    // Voting Owner functions.\\r\\n\\r\\n    /**\\r\\n     * @notice Disables this Voting contract in favor of the migrated one.\\r\\n     * @dev Can only be called by the contract owner.\\r\\n     * @param newVotingAddress the newly migrated contract address.\\r\\n     */\\r\\n    function setMigrated(address newVotingAddress) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newInflationRate sets the next round's inflation rate.\\r\\n     */\\r\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newGatPercentage sets the next round's Gat percentage.\\r\\n     */\\r\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the rewards expiration timeout.\\r\\n     * @dev This change only applies to rounds that have not yet begun.\\r\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\r\\n     */\\r\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x975892765f628db8ba5904ec9f02ae98ea9d3e01258122d0014e36e8dfa843d1\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60803461020a57601f6126a438819003918201601f1916830192916001600160401b0384118385101761020f578083926040958652833960209283918101031261020a57516001600160a01b0381169081900361020a5760018060a01b0319908160025416176002556000908160015581805281835260ff600185842001541660038110156101f6576101b257818052818352600284832060018101600160ff198254161790558381550190331561016257815416331790558080528082528281206001015460ff1690600382101561014e5750156100e657505161247e90816102268239f35b608491519062461bcd60e51b82526004820152603c60248201527f417474656d7074656420746f2075736520616e20696e76616c696420726f6c6560448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b634e487b7160e01b81526021600452602490fd5b845162461bcd60e51b815260048101859052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b835162461bcd60e51b815260048101849052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b83526021600452602483fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004803610156200001557600080fd5b600091823560e01c80632e1a7d4d14620007e457806349ed510f14620007a55780635e07dd5b14620006e95780636be7658b146200060a57806374d0a67614620005065780637cbf876b14620004b55780637cdc1cb9146200047e578063aaa14ca314620003c9578063ab3545e51462000352578063bd1f4b5214620001cd5763d97c05be14620000a557600080fd5b34620001c95780600319360112620001c957813590620000c4620008fc565b8285528460205260ff60018387200154166003811015620001b6576001620000ed9114620009c3565b828552846020526200010e6200010883872054339062000913565b62000a28565b828552846020526002828620019060018060a01b031693841562000167575080546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b608490602084519162461bcd60e51b8352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152fd5b634e487b7160e01b865260218552602486fd5b8280fd5b509034620001c95781600319360112620001c957620001eb620008e0565b62000204620001fe600154339062000913565b62000ae3565b60018060a01b03168251906020820163a9059cbb60e01b8152336024840152602435604484015260448352608083019267ffffffffffffffff818510818611176200033f5760c08201908111858210176200033f578652602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015251620002a69392918791829182855af16200029f62000b3b565b9162000b9f565b805190811591821562000315575b505015620002c0575051f35b6020608492519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b81925090602091810103126200033b576020015180151581036200033b573880620002b4565b8380fd5b634e487b7160e01b885260418652602488fd5b508234620003c6576020366003190112620003c65782358082528160205260ff60018484200154166003811015620003b357602094506001620003969114620009c3565b81528083528190206002015490516001600160a01b039091168152f35b634e487b7160e01b835260218552602483fd5b80fd5b5034620001c9576020366003190112620001c9578135918284528360205260ff60018386200154169060038210156200046b575060026200040b911462000a81565b6200041b620001fe338462000913565b8183526020838152818420336000818152600390920190925260409020805460ff1916905590519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b855260219052602484fd5b508234620003c65781600319360112620003c65750620004ac602092620004a4620008fc565b903562000913565b90519015158152f35b8382346200050257602036600319011262000502576001600160a01b03620004dc620008e0565b163383526003602052818320906bffffffffffffffffffffffff60a01b82541617905551f35b5080fd5b5034620001c95780600319360112620001c95781359062000526620008fc565b8285528460205260ff60018387200154166003811015620001b65760026200054f911462000a81565b828552846020526200056a6200010883872054339062000913565b828552846020526003828620019060018060a01b0316938415620005c75750838552602052808420805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b606490602084519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b509034620001c95781600319360112620001c9578035916200062b620008fc565b918385528460205260ff6001838720015416906003821015620006d65750600262000657911462000a81565b82845283602052620006726200010882862054339062000913565b82845283602052620006a2826003838720019060018060a01b0316600052602052604060002060ff198154169055565b519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b865260219052602485fd5b5034620001c9576020366003190112620001c95762000707620008e0565b60018060a01b03928360025416918351926117cf8085019385851067ffffffffffffffff861117620007925750849260609492889262000c7a86398352166020820152338582015203019084f09182156200078857816020943381526003865220921691826bffffffffffffffffffffffff60a01b82541617905551908152f35b81513d85823e3d90fd5b634e487b7160e01b895260419052602488fd5b8382346200050257602036600319011262000502576020916001600160a01b0390829082620007d3620008e0565b168152600385522054169051908152f35b509034620001c9576020366003190112620001c95780356200080e620001fe600154339062000913565b8047106200089d5783808092855190335af16200082a62000b3b565b501562000835575051f35b6020608492519162461bcd60e51b8352820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b506020606492519162461bcd60e51b8352820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b600435906001600160a01b0382168203620008f757565b600080fd5b602435906001600160a01b0382168203620008f757565b600090815280602052604081209060ff6001830154166003811015620009af576001810362000953575050600201546001600160a01b0391821691161490565b600214620009915760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b6001600160a01b039092168252600301602052604090205460ff1690565b634e487b7160e01b82526021600452602482fd5b15620009cb57565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1562000a3057565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b1562000a8957565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1562000aeb57565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b3d1562000b9a5767ffffffffffffffff903d82811162000b845760405192601f8201601f19908116603f011684019081118482101762000b845760405282523d6000602084013e565b634e487b7160e01b600052604160045260246000fd5b606090565b9192901562000c04575081511562000bb5575090565b3b1562000bbf5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501562000c185750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851062000c5f575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000c3b56fe608034620003b757601f620017cf38819003918201601f191683019291906001600160401b03841183851017620003bc578160609284926040968752833981010312620003b7576200005181620003d2565b906020916200006f8462000067858501620003d2565b9301620003d2565b9260009081805281815260019060ff828885200154166003811015620001d9576200037457828052828152868320828101805460ff1990811685179091558482556001600160a01b0396871697916002018815620003355780546001600160a01b0319908116909917905584805284835288852084015460ff166003811015620002c85715620002dc5783855284835260ff848a87200154166003811015620002c8576200028457600287918587528685528a8720908680830191825416179055868155019116801562000245578782541617905582805282815260ff828885200154166003811015620001d95715620001ed5782805282815260ff828885200154166003811015620001d957156200019c57505516906002541617600255516113a79081620003e88239f35b60849087519062461bcd60e51b8252600482015260226024820152600080516020620017af833981519152604482015261125960f21b6064820152fd5b634e487b7160e01b84526021600452602484fd5b60849087519062461bcd60e51b82526004820152603c6024820152600080516020620017af83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b885162461bcd60e51b815260048101849052602360248201526000805160206200178f83398151915260448201526203078360ec1b6064820152608490fd5b885162461bcd60e51b815260048101849052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b86526021600452602486fd5b885162461bcd60e51b815260048101849052603c6024820152600080516020620017af83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b895162461bcd60e51b815260048101859052602360248201526000805160206200178f83398151915260448201526203078360ec1b6064820152608490fd5b60649087519062461bcd60e51b82526004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003b75756fe6040608081526004908136101561001557600080fd5b600090813560e01c80632e1a7d4d14610cce5780636be7658b14610bfa5780636ec1fd5d14610ab057806374d0a676146109b35780637cdc1cb914610982578063894fcecc146108d6578063a65d1591146107aa578063aaa14ca3146106fb578063ab3545e51461068c578063add2ccb4146105bb578063bd1f4b5214610443578063d97c05be146103245763ef8d6014146100b057600080fd5b34610320578060031936011261032057602467ffffffffffffffff813581811161031c573660238201121561031c57808601359582871161030a578660051b918551936020986101028a860187610e4e565b85528885019086829584010192368411610306579189939183898d99979a989501925b84841061026757505050505081875161013d81610e32565b5261014f61014a33610ed3565b611119565b6001600160a01b0361015f6112e4565b1692875196879563017e4c0360e01b875260648701913081890152359087015260609182604488015251809152608486019160848260051b880101939285915b8b84841061021a575050505050509083809203925af192831561020f5780936101cc575b50505190518152f35b909192508382813d8311610208575b6101e58183610e4e565b8101031261020557508151906101fa82610e32565b5181529038806101c3565b80fd5b503d6101db565b8251903d90823e3d90fd5b8a93975081600195999b939761025293979b60831990820301895281838d51805184528781015188850152015193820152019061123d565b970193019301938a96948a948997949361019f565b919395509180949799969850358381116103025782016060908160231982360301126102fe578b51918201828110868211176102ea578c52808b0135825260448101358e83015260648101358581116102e657916102cd8f94928d869536920101610e8c565b8d820152815201930190918a94928c9896999794610125565b8d80fd5b8b60418a634e487b7160e01b600052526000fd5b8c80fd5b8b80fd5b8980fd5b634e487b7160e01b8652604190528285fd5b8480fd5b5080fd5b5082903461043f578060031936011261043f57813590610342610dc1565b8285528460205260ff6001838720015416600381101561042c5760016103689114610ffc565b82855284602052610385610380838720543390610fbe565b611060565b828552846020526002828620019060018060a01b03169384156103dd575080546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b608490602084519162461bcd60e51b8352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152fd5b634e487b7160e01b865260218552602486fd5b8280fd5b50823461043f578160031936011261043f5780356001600160a01b038116908190036105b65761047961014a6001543390610fbe565b8251906020820163a9059cbb60e01b8152336024840152602435604484015260448352608083019267ffffffffffffffff818510818611176105a15760c08201908111858210176105a1578652602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a08201525161050d9392918791829182855af1610507611170565b916111a0565b805190811591821561057a575b505015610525575051f35b6020608492519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b819250906020918101031261059d5760200151801515810361059d57848061051a565b8380fd5b604186634e487b7160e01b6000525260246000fd5b600080fd5b508183346103205760a03660031901126103205760643567ffffffffffffffff811161043f576105ee9036908301610e8c565b906105fb61014a33610ed3565b6001600160a01b0361060b6112e4565b1691823b1561059d57610654928492838751809681958294632b74b32d60e21b84528035908401526024356024840152604435604484015260a0606484015260a483019061123d565b608435608483015203925af1801561067f5761066f57505051f35b61067890610e08565b6103205751f35b50505051903d90823e3d90fd5b5090346102055760203660031901126102055782358082528160205260ff600184842001541660038110156106e8576020945060016106cb9114610ffc565b81528083528190206002015490516001600160a01b039091168152f35b634e487b7160e01b835260218552602483fd5b5082903461043f57602036600319011261043f578135918284528360205260ff60018386200154169060038210156107975750600261073a91146110b8565b61074761014a3384610fbe565b8183526020838152818420336000818152600390920190925260409020805460ff1916905590519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b855260219052602484fd5b50823461043f5760208060031936011261059d57813567ffffffffffffffff811161031c576107dc9036908401610dd7565b6107e861014a33610ed3565b6001600160a01b036107f86112e4565b1692833b156108d25781879594939287519563a65d159160e01b875283602488019188015252604485019160448260051b87010193809388915b848310610859575050505050508391838381809403925af1801561067f5761066f57505051f35b91939583809698999a5060019294916043198c820301865261087b8a866112d0565b8035825282810135838301528d8101358e830152906108b260606108a18185018561127d565b909160a080918601528401916112af565b9160808091013591015298019301930190928a9897969593949294610832565b8680fd5b508183346103205760803660031901126103205760443567ffffffffffffffff811161043f576109099036908301610e8c565b9061091661014a33610ed3565b6001600160a01b036109266112e4565b1691823b1561059d57610967928492838751809681958294632253f3b360e21b8452803590840152602435602484015260806044840152608483019061123d565b606435606483015203925af1801561067f5761066f57505051f35b509034610205578160031936011261020557506109aa6020926109a3610dc1565b9035610fbe565b90519015158152f35b5082903461043f578060031936011261043f578135906109d1610dc1565b8285528460205260ff6001838720015416600381101561042c5760026109f791146110b8565b82855284602052610a0f610380838720543390610fbe565b828552846020526003828620019060018060a01b0316938415610a6d57508360005260205280600020600160ff19825416179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b606490602084519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b5091346103205760208060031936011261043f57813567ffffffffffffffff811161059d57610ae29036908401610dd7565b610aee61014a33610ed3565b6001600160a01b03610afe6112e4565b1692833b15610bf6578651636ec1fd5d60e01b8152948501819052602485018290528593859390926044600582901b86018101939087908701845b8c858410610b7657505050505050508383809203925af18015610b6c57610b5f57509051f35b610b6890610e08565b9051f35b83513d84823e3d90fd5b8497859396999b5090610be291600195989b604397949719908203018852610bba610ba18d896112d0565b928335835285840135868401526108a18185018561127d565b9160608082013590830152610bd46080918281019061127d565b9290918185039101526112af565b980193019301899795929389979592610b39565b8580fd5b50823461043f578160031936011261043f57803591610c17610dc1565b918385528460205260ff6001838720015416906003821015610cbb57506002610c4091146110b8565b82845283602052610c58610380828620543390610fbe565b82845283602052610c87826003838720019060018060a01b0316600052602052604060002060ff198154169055565b519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b865260219052602485fd5b50823461043f57602036600319011261043f578035610cf361014a6001543390610fbe565b804710610d7e5783808092855190335af1610d0c611170565b5015610d16575051f35b6020608492519162461bcd60e51b8352820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b506020606492519162461bcd60e51b8352820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b602435906001600160a01b03821682036105b657565b9181601f840112156105b65782359167ffffffffffffffff83116105b6576020808501948460051b0101116105b657565b67ffffffffffffffff8111610e1c57604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff821117610e1c57604052565b90601f8019910116810190811067ffffffffffffffff821117610e1c57604052565b67ffffffffffffffff8111610e1c57601f01601f191660200190565b81601f820112156105b657803590610ea382610e70565b92610eb16040519485610e4e565b828452602083830101116105b657816000926020809301838601378301015290565b6001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d919060ff166003811015610faa5760018103610f4f575050600201546001600160a01b0391821691161490565b600214610f8c5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b6001600160a01b039092168252600301602052604090205460ff1690565b634e487b7160e01b82526021600452602482fd5b600090815280602052604081209060ff6001830154166003811015610faa5760018103610f4f575050600201546001600160a01b0391821691161490565b1561100357565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1561106757565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b156110bf57565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1561112057565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b3d1561119b573d9061118182610e70565b9161118f6040519384610e4e565b82523d6000602084013e565b606090565b9192901561120257508151156111b4575090565b3b156111bd5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156112155750805190602001fd5b60405162461bcd60e51b81526020600482015290819061123990602483019061123d565b0390fd5b919082519283825260005b848110611269575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611248565b9035601e19823603018112156105b657016020813591019167ffffffffffffffff82116105b65781360383136105b657565b908060209392818452848401376000828201840152601f01601f1916010190565b9035609e19823603018112156105b6570190565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa9081156113655760009161132d57501690565b6020813d821161135d575b8161134560209383610e4e565b81010312610320575190828216820361020557501690565b3d9150611338565b6040513d6000823e3d90fdfea2646970667358221220366ea43e5263fc93a0529d8418cc9145be8e11b6dbe93f377fd3e91e67accb2564736f6c6343000810003343616e6e6f742073657420616e206578636c757369766520726f6c6520746f20417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a264697066735822122038826781126e843d0e50f628338ce15978208850d63a8fc19cff1be70dabaa9b64736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004803610156200001557600080fd5b600091823560e01c80632e1a7d4d14620007e457806349ed510f14620007a55780635e07dd5b14620006e95780636be7658b146200060a57806374d0a67614620005065780637cbf876b14620004b55780637cdc1cb9146200047e578063aaa14ca314620003c9578063ab3545e51462000352578063bd1f4b5214620001cd5763d97c05be14620000a557600080fd5b34620001c95780600319360112620001c957813590620000c4620008fc565b8285528460205260ff60018387200154166003811015620001b6576001620000ed9114620009c3565b828552846020526200010e6200010883872054339062000913565b62000a28565b828552846020526002828620019060018060a01b031693841562000167575080546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b608490602084519162461bcd60e51b8352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152fd5b634e487b7160e01b865260218552602486fd5b8280fd5b509034620001c95781600319360112620001c957620001eb620008e0565b62000204620001fe600154339062000913565b62000ae3565b60018060a01b03168251906020820163a9059cbb60e01b8152336024840152602435604484015260448352608083019267ffffffffffffffff818510818611176200033f5760c08201908111858210176200033f578652602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a082015251620002a69392918791829182855af16200029f62000b3b565b9162000b9f565b805190811591821562000315575b505015620002c0575051f35b6020608492519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b81925090602091810103126200033b576020015180151581036200033b573880620002b4565b8380fd5b634e487b7160e01b885260418652602488fd5b508234620003c6576020366003190112620003c65782358082528160205260ff60018484200154166003811015620003b357602094506001620003969114620009c3565b81528083528190206002015490516001600160a01b039091168152f35b634e487b7160e01b835260218552602483fd5b80fd5b5034620001c9576020366003190112620001c9578135918284528360205260ff60018386200154169060038210156200046b575060026200040b911462000a81565b6200041b620001fe338462000913565b8183526020838152818420336000818152600390920190925260409020805460ff1916905590519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b855260219052602484fd5b508234620003c65781600319360112620003c65750620004ac602092620004a4620008fc565b903562000913565b90519015158152f35b8382346200050257602036600319011262000502576001600160a01b03620004dc620008e0565b163383526003602052818320906bffffffffffffffffffffffff60a01b82541617905551f35b5080fd5b5034620001c95780600319360112620001c95781359062000526620008fc565b8285528460205260ff60018387200154166003811015620001b65760026200054f911462000a81565b828552846020526200056a6200010883872054339062000913565b828552846020526003828620019060018060a01b0316938415620005c75750838552602052808420805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b606490602084519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b509034620001c95781600319360112620001c9578035916200062b620008fc565b918385528460205260ff6001838720015416906003821015620006d65750600262000657911462000a81565b82845283602052620006726200010882862054339062000913565b82845283602052620006a2826003838720019060018060a01b0316600052602052604060002060ff198154169055565b519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b865260219052602485fd5b5034620001c9576020366003190112620001c95762000707620008e0565b60018060a01b03928360025416918351926117cf8085019385851067ffffffffffffffff861117620007925750849260609492889262000c7a86398352166020820152338582015203019084f09182156200078857816020943381526003865220921691826bffffffffffffffffffffffff60a01b82541617905551908152f35b81513d85823e3d90fd5b634e487b7160e01b895260419052602488fd5b8382346200050257602036600319011262000502576020916001600160a01b0390829082620007d3620008e0565b168152600385522054169051908152f35b509034620001c9576020366003190112620001c95780356200080e620001fe600154339062000913565b8047106200089d5783808092855190335af16200082a62000b3b565b501562000835575051f35b6020608492519162461bcd60e51b8352820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b506020606492519162461bcd60e51b8352820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b600435906001600160a01b0382168203620008f757565b600080fd5b602435906001600160a01b0382168203620008f757565b600090815280602052604081209060ff6001830154166003811015620009af576001810362000953575050600201546001600160a01b0391821691161490565b600214620009915760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b6001600160a01b039092168252600301602052604090205460ff1690565b634e487b7160e01b82526021600452602482fd5b15620009cb57565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1562000a3057565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b1562000a8957565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1562000aeb57565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b3d1562000b9a5767ffffffffffffffff903d82811162000b845760405192601f8201601f19908116603f011684019081118482101762000b845760405282523d6000602084013e565b634e487b7160e01b600052604160045260246000fd5b606090565b9192901562000c04575081511562000bb5575090565b3b1562000bbf5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b82519091501562000c185750805190602001fd5b6040519062461bcd60e51b82528160208060048301528251908160248401526000935b82851062000c5f575050604492506000838284010152601f80199101168101030190fd5b848101820151868601604401529381019385935062000c3b56fe608034620003b757601f620017cf38819003918201601f191683019291906001600160401b03841183851017620003bc578160609284926040968752833981010312620003b7576200005181620003d2565b906020916200006f8462000067858501620003d2565b9301620003d2565b9260009081805281815260019060ff828885200154166003811015620001d9576200037457828052828152868320828101805460ff1990811685179091558482556001600160a01b0396871697916002018815620003355780546001600160a01b0319908116909917905584805284835288852084015460ff166003811015620002c85715620002dc5783855284835260ff848a87200154166003811015620002c8576200028457600287918587528685528a8720908680830191825416179055868155019116801562000245578782541617905582805282815260ff828885200154166003811015620001d95715620001ed5782805282815260ff828885200154166003811015620001d957156200019c57505516906002541617600255516113a79081620003e88239f35b60849087519062461bcd60e51b8252600482015260226024820152600080516020620017af833981519152604482015261125960f21b6064820152fd5b634e487b7160e01b84526021600452602484fd5b60849087519062461bcd60e51b82526004820152603c6024820152600080516020620017af83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b885162461bcd60e51b815260048101849052602360248201526000805160206200178f83398151915260448201526203078360ec1b6064820152608490fd5b885162461bcd60e51b815260048101849052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b86526021600452602486fd5b885162461bcd60e51b815260048101849052603c6024820152600080516020620017af83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b895162461bcd60e51b815260048101859052602360248201526000805160206200178f83398151915260448201526203078360ec1b6064820152608490fd5b60649087519062461bcd60e51b82526004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003b75756fe6040608081526004908136101561001557600080fd5b600090813560e01c80632e1a7d4d14610cce5780636be7658b14610bfa5780636ec1fd5d14610ab057806374d0a676146109b35780637cdc1cb914610982578063894fcecc146108d6578063a65d1591146107aa578063aaa14ca3146106fb578063ab3545e51461068c578063add2ccb4146105bb578063bd1f4b5214610443578063d97c05be146103245763ef8d6014146100b057600080fd5b34610320578060031936011261032057602467ffffffffffffffff813581811161031c573660238201121561031c57808601359582871161030a578660051b918551936020986101028a860187610e4e565b85528885019086829584010192368411610306579189939183898d99979a989501925b84841061026757505050505081875161013d81610e32565b5261014f61014a33610ed3565b611119565b6001600160a01b0361015f6112e4565b1692875196879563017e4c0360e01b875260648701913081890152359087015260609182604488015251809152608486019160848260051b880101939285915b8b84841061021a575050505050509083809203925af192831561020f5780936101cc575b50505190518152f35b909192508382813d8311610208575b6101e58183610e4e565b8101031261020557508151906101fa82610e32565b5181529038806101c3565b80fd5b503d6101db565b8251903d90823e3d90fd5b8a93975081600195999b939761025293979b60831990820301895281838d51805184528781015188850152015193820152019061123d565b970193019301938a96948a948997949361019f565b919395509180949799969850358381116103025782016060908160231982360301126102fe578b51918201828110868211176102ea578c52808b0135825260448101358e83015260648101358581116102e657916102cd8f94928d869536920101610e8c565b8d820152815201930190918a94928c9896999794610125565b8d80fd5b8b60418a634e487b7160e01b600052526000fd5b8c80fd5b8b80fd5b8980fd5b634e487b7160e01b8652604190528285fd5b8480fd5b5080fd5b5082903461043f578060031936011261043f57813590610342610dc1565b8285528460205260ff6001838720015416600381101561042c5760016103689114610ffc565b82855284602052610385610380838720543390610fbe565b611060565b828552846020526002828620019060018060a01b03169384156103dd575080546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b608490602084519162461bcd60e51b8352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152fd5b634e487b7160e01b865260218552602486fd5b8280fd5b50823461043f578160031936011261043f5780356001600160a01b038116908190036105b65761047961014a6001543390610fbe565b8251906020820163a9059cbb60e01b8152336024840152602435604484015260448352608083019267ffffffffffffffff818510818611176105a15760c08201908111858210176105a1578652602084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a08201525161050d9392918791829182855af1610507611170565b916111a0565b805190811591821561057a575b505015610525575051f35b6020608492519162461bcd60e51b8352820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b819250906020918101031261059d5760200151801515810361059d57848061051a565b8380fd5b604186634e487b7160e01b6000525260246000fd5b600080fd5b508183346103205760a03660031901126103205760643567ffffffffffffffff811161043f576105ee9036908301610e8c565b906105fb61014a33610ed3565b6001600160a01b0361060b6112e4565b1691823b1561059d57610654928492838751809681958294632b74b32d60e21b84528035908401526024356024840152604435604484015260a0606484015260a483019061123d565b608435608483015203925af1801561067f5761066f57505051f35b61067890610e08565b6103205751f35b50505051903d90823e3d90fd5b5090346102055760203660031901126102055782358082528160205260ff600184842001541660038110156106e8576020945060016106cb9114610ffc565b81528083528190206002015490516001600160a01b039091168152f35b634e487b7160e01b835260218552602483fd5b5082903461043f57602036600319011261043f578135918284528360205260ff60018386200154169060038210156107975750600261073a91146110b8565b61074761014a3384610fbe565b8183526020838152818420336000818152600390920190925260409020805460ff1916905590519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b855260219052602484fd5b50823461043f5760208060031936011261059d57813567ffffffffffffffff811161031c576107dc9036908401610dd7565b6107e861014a33610ed3565b6001600160a01b036107f86112e4565b1692833b156108d25781879594939287519563a65d159160e01b875283602488019188015252604485019160448260051b87010193809388915b848310610859575050505050508391838381809403925af1801561067f5761066f57505051f35b91939583809698999a5060019294916043198c820301865261087b8a866112d0565b8035825282810135838301528d8101358e830152906108b260606108a18185018561127d565b909160a080918601528401916112af565b9160808091013591015298019301930190928a9897969593949294610832565b8680fd5b508183346103205760803660031901126103205760443567ffffffffffffffff811161043f576109099036908301610e8c565b9061091661014a33610ed3565b6001600160a01b036109266112e4565b1691823b1561059d57610967928492838751809681958294632253f3b360e21b8452803590840152602435602484015260806044840152608483019061123d565b606435606483015203925af1801561067f5761066f57505051f35b509034610205578160031936011261020557506109aa6020926109a3610dc1565b9035610fbe565b90519015158152f35b5082903461043f578060031936011261043f578135906109d1610dc1565b8285528460205260ff6001838720015416600381101561042c5760026109f791146110b8565b82855284602052610a0f610380838720543390610fbe565b828552846020526003828620019060018060a01b0316938415610a6d57508360005260205280600020600160ff19825416179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b606490602084519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b5091346103205760208060031936011261043f57813567ffffffffffffffff811161059d57610ae29036908401610dd7565b610aee61014a33610ed3565b6001600160a01b03610afe6112e4565b1692833b15610bf6578651636ec1fd5d60e01b8152948501819052602485018290528593859390926044600582901b86018101939087908701845b8c858410610b7657505050505050508383809203925af18015610b6c57610b5f57509051f35b610b6890610e08565b9051f35b83513d84823e3d90fd5b8497859396999b5090610be291600195989b604397949719908203018852610bba610ba18d896112d0565b928335835285840135868401526108a18185018561127d565b9160608082013590830152610bd46080918281019061127d565b9290918185039101526112af565b980193019301899795929389979592610b39565b8580fd5b50823461043f578160031936011261043f57803591610c17610dc1565b918385528460205260ff6001838720015416906003821015610cbb57506002610c4091146110b8565b82845283602052610c58610380828620543390610fbe565b82845283602052610c87826003838720019060018060a01b0316600052602052604060002060ff198154169055565b519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b634e487b7160e01b865260219052602485fd5b50823461043f57602036600319011261043f578035610cf361014a6001543390610fbe565b804710610d7e5783808092855190335af1610d0c611170565b5015610d16575051f35b6020608492519162461bcd60e51b8352820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152fd5b506020606492519162461bcd60e51b8352820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152fd5b602435906001600160a01b03821682036105b657565b9181601f840112156105b65782359167ffffffffffffffff83116105b6576020808501948460051b0101116105b657565b67ffffffffffffffff8111610e1c57604052565b634e487b7160e01b600052604160045260246000fd5b6020810190811067ffffffffffffffff821117610e1c57604052565b90601f8019910116810190811067ffffffffffffffff821117610e1c57604052565b67ffffffffffffffff8111610e1c57601f01601f191660200190565b81601f820112156105b657803590610ea382610e70565b92610eb16040519485610e4e565b828452602083830101116105b657816000926020809301838601378301015290565b6001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d919060ff166003811015610faa5760018103610f4f575050600201546001600160a01b0391821691161490565b600214610f8c5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b6001600160a01b039092168252600301602052604090205460ff1690565b634e487b7160e01b82526021600452602482fd5b600090815280602052604081209060ff6001830154166003811015610faa5760018103610f4f575050600201546001600160a01b0391821691161490565b1561100357565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1561106757565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b156110bf57565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1561112057565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b3d1561119b573d9061118182610e70565b9161118f6040519384610e4e565b82523d6000602084013e565b606090565b9192901561120257508151156111b4575090565b3b156111bd5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156112155750805190602001fd5b60405162461bcd60e51b81526020600482015290819061123990602483019061123d565b0390fd5b919082519283825260005b848110611269575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611248565b9035601e19823603018112156105b657016020813591019167ffffffffffffffff82116105b65781360383136105b657565b908060209392818452848401376000828201840152601f01601f1916010190565b9035609e19823603018112156105b6570190565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa9081156113655760009161132d57501690565b6020813d821161135d575b8161134560209383610e4e565b81010312610320575190828216820361020557501690565b3d9150611338565b6040513d6000823e3d90fdfea2646970667358221220366ea43e5263fc93a0529d8418cc9145be8e11b6dbe93f377fd3e91e67accb2564736f6c6343000810003343616e6e6f742073657420616e206578636c757369766520726f6c6520746f20417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a264697066735822122038826781126e843d0e50f628338ce15978208850d63a8fc19cff1be70dabaa9b64736f6c63430008100033",
  "devdoc": {
    "details": "Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.",
    "kind": "dev",
    "methods": {
      "addMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "newMember": "the new SharedRole member.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "constructor": {
        "params": {
          "finderAddress": "keeps track of all contracts within the system based on their interfaceName."
        }
      },
      "getMember(uint256)": {
        "details": "Reverts if `roleId` does not represent an initialized, exclusive role.",
        "params": {
          "roleId": "the ExclusiveRole membership to check."
        },
        "returns": {
          "_0": "the address of the current ExclusiveRole member."
        }
      },
      "holdsRole(uint256,address)": {
        "details": "Reverts if roleId does not correspond to an initialized role.",
        "params": {
          "memberToCheck": "the address to check.",
          "roleId": "the Role to check."
        },
        "returns": {
          "_0": "True if `memberToCheck` is a member of `roleId`."
        }
      },
      "newDesignatedVoting(address)": {
        "params": {
          "ownerAddress": "defines who will own the deployed instance of the designatedVoting contract."
        },
        "returns": {
          "_0": "designatedVoting a new DesignatedVoting contract."
        }
      },
      "removeMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "memberToRemove": "the current SharedRole member to remove.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "renounceMembership(uint256)": {
        "details": "Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.",
        "params": {
          "roleId": "the SharedRole membership to modify."
        }
      },
      "resetMember(uint256,address)": {
        "details": "Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.",
        "params": {
          "newMember": "the new ExclusiveRole member.",
          "roleId": "the ExclusiveRole membership to modify."
        }
      },
      "setDesignatedVoting(address)": {
        "details": "This is generally only used if the owner of a `DesignatedVoting` contract changes their `voter` address and wants that reflected here.",
        "params": {
          "designatedVotingAddress": "address to designate voting to."
        }
      },
      "withdrawErc20(address,uint256)": {
        "params": {
          "amount": "amount of tokens to withdraw.",
          "erc20Address": "ERC20 token to withdraw."
        }
      }
    },
    "title": "Factory to deploy new instances of DesignatedVoting and look up previously deployed instances.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(uint256,address)": {
        "notice": "Adds `newMember` to the shared role, `roleId`."
      },
      "constructor": {
        "notice": "Construct the DesignatedVotingFactory contract."
      },
      "getMember(uint256)": {
        "notice": "Gets the current holder of the exclusive role, `roleId`."
      },
      "holdsRole(uint256,address)": {
        "notice": "Whether `memberToCheck` is a member of roleId."
      },
      "newDesignatedVoting(address)": {
        "notice": "Deploys a new `DesignatedVoting` contract."
      },
      "removeMember(uint256,address)": {
        "notice": "Removes `memberToRemove` from the shared role, `roleId`."
      },
      "renounceMembership(uint256)": {
        "notice": "Removes caller from the role, `roleId`."
      },
      "resetMember(uint256,address)": {
        "notice": "Changes the exclusive role holder of `roleId` to `newMember`."
      },
      "setDesignatedVoting(address)": {
        "notice": "Associates a `DesignatedVoting` instance with `msg.sender`."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws ETH from the contract."
      },
      "withdrawErc20(address,uint256)": {
        "notice": "Withdraws ERC20 tokens from the contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16654,
        "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Role)16649_storage)"
      },
      {
        "astId": 17920,
        "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
        "label": "roleId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 25305,
        "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
        "label": "finder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 25310,
        "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
        "label": "designatedVotingContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_contract(DesignatedVoting)25294)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(DesignatedVoting)25294": {
        "encoding": "inplace",
        "label": "contract DesignatedVoting",
        "numberOfBytes": "20"
      },
      "t_enum(RoleType)16637": {
        "encoding": "inplace",
        "label": "enum MultiRole.RoleType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_contract(DesignatedVoting)25294)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract DesignatedVoting)",
        "numberOfBytes": "32",
        "value": "t_contract(DesignatedVoting)25294"
      },
      "t_mapping(t_uint256,t_struct(Role)16649_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiRole.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)16649_storage"
      },
      "t_struct(Role)16649_storage": {
        "encoding": "inplace",
        "label": "struct MultiRole.Role",
        "members": [
          {
            "astId": 16639,
            "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
            "label": "managingRole",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16642,
            "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
            "label": "roleType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(RoleType)16637"
          },
          {
            "astId": 16645,
            "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
            "label": "exclusiveRoleMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(RoleMembership)16460_storage"
          },
          {
            "astId": 16648,
            "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
            "label": "sharedRoleMembership",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RoleMembership)16533_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleMembership)16460_storage": {
        "encoding": "inplace",
        "label": "struct Exclusive.RoleMembership",
        "members": [
          {
            "astId": 16459,
            "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
            "label": "member",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleMembership)16533_storage": {
        "encoding": "inplace",
        "label": "struct Shared.RoleMembership",
        "members": [
          {
            "astId": 16532,
            "contract": "contracts/data-verification-mechanism/implementation/DesignatedVotingFactory.sol:DesignatedVotingFactory",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}