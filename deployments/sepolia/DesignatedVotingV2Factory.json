{
  "address": "0x0F53e00Ece44667705cad0bAd5d14248eB8285AA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_finder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "designatedVoting",
          "type": "address"
        }
      ],
      "name": "NewDesignatedVoting",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "newDesignatedVoting",
      "outputs": [
        {
          "internalType": "contract DesignatedVotingV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe81c18a52ca5a3c719afea903c0bbda312107025e135593e3ca3f7936e1ddcb0",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x0F53e00Ece44667705cad0bAd5d14248eB8285AA",
    "transactionIndex": 33,
    "gasUsed": "1749517",
    "logsBloom": "0x
    "blockHash": "0x5f23a59f12e308a53400d49157aa471e8701442604414767fd508eb5ad983db3",
    "transactionHash": "0xe81c18a52ca5a3c719afea903c0bbda312107025e135593e3ca3f7936e1ddcb0",
    "logs": [],
    "blockNumber": 6161815,
    "cumulativeGasUsed": "8624289",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"designatedVoting\",\"type\":\"address\"}],\"name\":\"NewDesignatedVoting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"newDesignatedVoting\",\"outputs\":[{\"internalType\":\"contract DesignatedVotingV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_finder\":\"keeps track of all contracts within the system based on their interfaceName.\"}},\"newDesignatedVoting(address,address)\":{\"params\":{\"owner\":\"defines who will own the deployed instance of the designatedVoting contract.\",\"voter\":\"defines who will be able to vote on behalf of the owner, using the designatedVoting contract.\"},\"returns\":{\"_0\":\"designatedVoting a new DesignatedVoting contract.\"}}},\"title\":\"Factory to deploy new instances of DesignatedVotingV2 and look up previously deployed instances.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Construct the DesignatedVotingFactory contract.\"},\"newDesignatedVoting(address,address)\":{\"notice\":\"Deploys a new `DesignatedVoting` contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data-verification-mechanism/implementation/DesignatedVotingV2Factory.sol\":\"DesignatedVotingV2Factory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3718ef8e5a9d4b3a165319d86e75c4c197a5433dfd7c308393e659e8590c56d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StorageSlot.sol\\\";\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n}\\n\",\"keccak256\":\"0x104a08fc99d01f2229044fe3db7b3e0375b5d93cd7203f11db6ecdc9c8c8b0b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/common/implementation/ExpandedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\r\\n * be the owner who is capable of adding new roles.\\r\\n */\\r\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\r\\n    enum Roles {\\r\\n        // Can set the minter and burner.\\r\\n        Owner,\\r\\n        // Addresses that can mint new tokens.\\r\\n        Minter,\\r\\n        // Addresses that can burn tokens that address owns.\\r\\n        Burner\\r\\n    }\\r\\n\\r\\n    uint8 _decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the ExpandedERC20.\\r\\n     * @param _tokenName The name which describes the new token.\\r\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param _tokenDecimals The number of decimals to define token precision.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol,\\r\\n        uint8 _tokenDecimals\\r\\n    ) ERC20(_tokenName, _tokenSymbol) {\\r\\n        _decimals = _tokenDecimals;\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\r\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\r\\n     * @param recipient address to mint to.\\r\\n     * @param value amount of tokens to mint.\\r\\n     * @return True if the mint succeeded, or False.\\r\\n     */\\r\\n    function mint(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Minter))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _mint(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     * @return True if the burn succeeded, or False.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Burner))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _burn(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Minter role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Minter role is added.\\r\\n     */\\r\\n    function addMinter(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Burner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Burner role is added.\\r\\n     */\\r\\n    function addBurner(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset Owner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The new holder of the Owner role.\\r\\n     */\\r\\n    function resetOwner(address account) external virtual override {\\r\\n        resetMember(uint256(Roles.Owner), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5ad65b24455d06323ae045e0998a08a36d52bc12644cf667ad3a0e8d92ef734\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// This contract is taken from Uniswap's multi call implementation (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol)\\r\\n// and was modified to be solidity 0.8 compatible. Additionally, the method was restricted to only work with msg.value\\r\\n// set to 0 to avoid any nasty attack vectors on function calls that use value sent with deposits.\\r\\n\\r\\n/// @title MultiCaller\\r\\n/// @notice Enables calling multiple methods in a single call to the contract\\r\\ncontract MultiCaller {\\r\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\r\\n        results = new bytes[](data.length);\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\r\\n\\r\\n            if (!success) {\\r\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\r\\n                if (result.length < 68) revert();\\r\\n                assembly {\\r\\n                    result := add(result, 0x04)\\r\\n                }\\r\\n                revert(abi.decode(result, (string)));\\r\\n            }\\r\\n\\r\\n            results[i] = result;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb65e9816df65a8c97c2db52e067dd39d5b959dc7524a7f518ff13567cb967bb\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Stakeable.sol\":{\"content\":\"/**\\r\\n * Stakeable contract.\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/interfaces/StakerInterface.sol\\\";\\r\\nimport \\\"./Withdrawable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base contract that extends the Withdrawable contract enabling a specific role to stake ERC20 tokens against the\\r\\n * Voting contract. Voting contract is fed in as a param rather than fetched from the finder to enable upgradability.\\r\\n */\\r\\nabstract contract Stakeable is Withdrawable {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 private roleId;\\r\\n\\r\\n    /**\\r\\n     * @notice Stake ERC20 tokens from this contract to the votingContract.\\r\\n     * @param amount amount of tokens to stake.\\r\\n     * @param votingContract Address of the voting contract to stake into.\\r\\n     */\\r\\n    function stake(uint128 amount, address votingContract) external onlyRoleHolder(roleId) {\\r\\n        StakerInterface voting = StakerInterface(votingContract);\\r\\n        IERC20 votingToken = IERC20(voting.votingToken());\\r\\n        votingToken.approve(votingContract, amount);\\r\\n        voting.stake(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Request unstaking of ERC20 tokens from this contract to the votingContract.\\r\\n     * @param amount amount of tokens to unstake.\\r\\n     * @param votingContract Address of the voting contract to unstake from.\\r\\n     */\\r\\n    function requestUnstake(uint128 amount, address votingContract) external onlyRoleHolder(roleId) {\\r\\n        StakerInterface voting = StakerInterface(votingContract);\\r\\n        voting.requestUnstake(amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Execute an unstake request that has passed liveness on the voting contract.\\r\\n     * @param votingContract Address of the voting contract to execute the unstake from.\\r\\n     */\\r\\n    function executeUnstake(address votingContract) external onlyRoleHolder(roleId) {\\r\\n        StakerInterface voting = StakerInterface(votingContract);\\r\\n        voting.executeUnstake();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method that allows derived contracts to choose the role for stakeable.\\r\\n     * @dev The role `setRoleId` must exist. Either this method or `_setStakeRole` must be\\r\\n     * called by the derived class for this contract to function properly.\\r\\n     * @param setRoleId ID corresponding to role whose members can stakeable.\\r\\n     */\\r\\n    function _setStakeRole(uint256 setRoleId) internal onlyValidRole(setRoleId) {\\r\\n        roleId = setRoleId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce6683640e7156f749fddd0175b7353809cc38219b372bd5bf4de46cbcb80356\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Withdrawable.sol\":{\"content\":\"/**\\r\\n * Withdrawable contract.\\r\\n */\\r\\n\\r\\n// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./MultiRole.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base contract that allows a specific role to withdraw any ETH and/or ERC20 tokens that the contract holds.\\r\\n */\\r\\nabstract contract Withdrawable is MultiRole {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 private roleId;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws ETH from the contract.\\r\\n     */\\r\\n    function withdraw(uint256 amount) external onlyRoleHolder(roleId) {\\r\\n        Address.sendValue(payable(msg.sender), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraws ERC20 tokens from the contract.\\r\\n     * @param erc20Address ERC20 token to withdraw.\\r\\n     * @param amount amount of tokens to withdraw.\\r\\n     */\\r\\n    function withdrawErc20(address erc20Address, uint256 amount) external onlyRoleHolder(roleId) {\\r\\n        IERC20 erc20 = IERC20(erc20Address);\\r\\n        erc20.safeTransfer(msg.sender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method that allows derived contracts to create a role for withdrawal.\\r\\n     * @dev Either this method or `_setWithdrawRole` must be called by the derived class for this contract to function\\r\\n     * properly.\\r\\n     * @param newRoleId ID corresponding to role whose members can withdraw.\\r\\n     * @param managingRoleId ID corresponding to managing role who can modify the withdrawable role's membership.\\r\\n     * @param withdrawerAddress new manager of withdrawable role.\\r\\n     */\\r\\n    function _createWithdrawRole(\\r\\n        uint256 newRoleId,\\r\\n        uint256 managingRoleId,\\r\\n        address withdrawerAddress\\r\\n    ) internal {\\r\\n        roleId = newRoleId;\\r\\n        _createExclusiveRole(newRoleId, managingRoleId, withdrawerAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method that allows derived contracts to choose the role for withdrawal.\\r\\n     * @dev The role `setRoleId` must exist. Either this method or `_createWithdrawRole` must be\\r\\n     * called by the derived class for this contract to function properly.\\r\\n     * @param setRoleId ID corresponding to role whose members can withdraw.\\r\\n     */\\r\\n    function _setWithdrawRole(uint256 setRoleId) internal onlyValidRole(setRoleId) {\\r\\n        roleId = setRoleId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8fd5e22e1e27af63211d4d066df68d7a91b3a25a9a2908f5587ca6130bb4f831\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface that includes burn and mint methods.\\r\\n */\\r\\nabstract contract ExpandedIERC20 is IERC20 {\\r\\n    /**\\r\\n     * @notice Burns a specific amount of the caller's tokens.\\r\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\r\\n     */\\r\\n    function burn(uint256 value) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\r\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\r\\n     */\\r\\n    function mint(address to, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    function addMinter(address account) external virtual;\\r\\n\\r\\n    function addBurner(address account) external virtual;\\r\\n\\r\\n    function resetOwner(address account) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3e81268dc3417f29f6047fab4fa03d5b1fc23f280485ba81b90769c971293fc\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/DesignatedVotingV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"../../common/implementation/MultiCaller.sol\\\";\\r\\nimport \\\"../../common/implementation/Stakeable.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Proxy to allow voting from another address.\\r\\n * @dev Allows a UMA token holder to designate another address to vote on their behalf.\\r\\n * Each voter must deploy their own instance of this contract.\\r\\n */\\r\\ncontract DesignatedVotingV2 is Stakeable, MultiCaller {\\r\\n    /****************************************\\r\\n     *    INTERNAL VARIABLES AND STORAGE    *\\r\\n     ****************************************/\\r\\n\\r\\n    enum Roles {\\r\\n        Owner, // Can set the Voter role.\\r\\n        Voter // Can vote through this contract.\\r\\n    }\\r\\n\\r\\n    // Reference to UMA Finder contract, allowing Voting upgrades to be without requiring any calls to this contract.\\r\\n    FinderInterface public immutable finder;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the DesignatedVotingV2 contract.\\r\\n     * @param finderAddress keeps track of all contracts within the system based on their interfaceName.\\r\\n     * @param ownerAddress address of the owner of the DesignatedVotingV2 contract.\\r\\n     * @param voterAddress address to which the owner has delegated their voting power.\\r\\n     */\\r\\n    constructor(\\r\\n        address finderAddress,\\r\\n        address ownerAddress,\\r\\n        address voterAddress\\r\\n    ) {\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), ownerAddress);\\r\\n        _createExclusiveRole(uint256(Roles.Voter), uint256(Roles.Owner), voterAddress);\\r\\n        _setWithdrawRole(uint256(Roles.Owner));\\r\\n        _setStakeRole(uint256(Roles.Owner));\\r\\n\\r\\n        finder = FinderInterface(finderAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This method essentially syncs the voter role with the current voting delegate.\\r\\n     * @dev Because this is essentially a state sync method, there is no reason to restrict its permissioning.\\r\\n     */\\r\\n    function delegateToVoter() public {\\r\\n        address voter = getMember(uint256(Roles.Voter));\\r\\n        _getVotingContract().setDelegate(voter);\\r\\n    }\\r\\n\\r\\n    // Returns the Voting contract address, named \\\"Oracle\\\" in the finder.\\r\\n    function _getVotingContract() private view returns (StakerInterface) {\\r\\n        return StakerInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeda9a4f5748ff290a60708974634608f1e4732efa21e47f34eee11612fbb7660\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/DesignatedVotingV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./DesignatedVotingV2.sol\\\";\\r\\nimport \\\"../../common/implementation/MultiCaller.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Factory to deploy new instances of DesignatedVotingV2 and look up previously deployed instances.\\r\\n * @dev Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.\\r\\n */\\r\\ncontract DesignatedVotingV2Factory is MultiCaller {\\r\\n    address public immutable finder; // Finder contract that stores addresses of UMA system contracts.\\r\\n\\r\\n    event NewDesignatedVoting(address indexed voter, address indexed owner, address indexed designatedVoting);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the DesignatedVotingFactory contract.\\r\\n     * @param _finder keeps track of all contracts within the system based on their interfaceName.\\r\\n     */\\r\\n    constructor(address _finder) {\\r\\n        finder = _finder;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Deploys a new `DesignatedVoting` contract.\\r\\n     * @param owner defines who will own the deployed instance of the designatedVoting contract.\\r\\n     * @param voter defines who will be able to vote on behalf of the owner, using the designatedVoting contract.\\r\\n     * @return designatedVoting a new DesignatedVoting contract.\\r\\n     */\\r\\n    function newDesignatedVoting(address owner, address voter) external returns (DesignatedVotingV2) {\\r\\n        DesignatedVotingV2 designatedVoting = new DesignatedVotingV2(finder, owner, voter);\\r\\n\\r\\n        emit NewDesignatedVoting(voter, owner, address(designatedVoting));\\r\\n\\r\\n        return designatedVoting;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xfa18acf5666ba605d66903bcf4bab084335c0425c3e7725f77d27ea486652ee3\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/VotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/ExpandedERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownership of this token allows a voter to respond to price requests.\\r\\n * @dev Supports snapshotting and allows the Oracle to mint new tokens as rewards.\\r\\n */\\r\\ncontract VotingToken is ExpandedERC20, ERC20Snapshot {\\r\\n    /**\\r\\n     * @notice Constructs the VotingToken.\\r\\n     */\\r\\n    constructor() ExpandedERC20(\\\"UMA Voting Token v1\\\", \\\"UMA\\\", 18) ERC20Snapshot() {}\\r\\n\\r\\n    function decimals() public view virtual override(ERC20, ExpandedERC20) returns (uint8) {\\r\\n        return super.decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new snapshot ID.\\r\\n     * @return uint256 Thew new snapshot ID.\\r\\n     */\\r\\n    function snapshot() external returns (uint256) {\\r\\n        return _snapshot();\\r\\n    }\\r\\n\\r\\n    // _transfer, _mint and _burn are ERC20 internal methods that are overridden by ERC20Snapshot,\\r\\n    // therefore the compiler will complain that VotingToken must override these methods\\r\\n    // because the two base classes (ERC20 and ERC20Snapshot) both define the same functions\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal override(ERC20) {\\r\\n        super._transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 value) internal virtual override(ERC20) {\\r\\n        super._mint(account, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal virtual override(ERC20) {\\r\\n        super._burn(account, value);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override(ERC20, ERC20Snapshot) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4707515b6e776a1a31b8b38c0e3d15d7337da7f2cc80b34b984aa8252690e95c\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/StakerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"../implementation/VotingToken.sol\\\";\\r\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\r\\n\\r\\ninterface StakerInterface {\\r\\n    function votingToken() external returns (ExpandedIERC20);\\r\\n\\r\\n    function stake(uint128 amount) external;\\r\\n\\r\\n    function requestUnstake(uint128 amount) external;\\r\\n\\r\\n    function executeUnstake() external;\\r\\n\\r\\n    function withdrawRewards() external returns (uint128);\\r\\n\\r\\n    function withdrawAndRestake() external returns (uint128);\\r\\n\\r\\n    function setEmissionRate(uint128 newEmissionRate) external;\\r\\n\\r\\n    function setUnstakeCoolDown(uint64 newUnstakeCoolDown) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the delegate of a voter. This delegate can vote on behalf of the staker. The staker will still own\\r\\n     * all staked balances, receive rewards and be slashed based on the actions of the delegate. Intended use is using a\\r\\n     * low-security available wallet for voting while keeping access to staked amounts secure by a more secure wallet.\\r\\n     * @param delegate the address of the delegate.\\r\\n     */\\r\\n    function setDelegate(address delegate) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the delegator of a voter. Acts to accept a delegation. The delegate can only vote for the delegator\\r\\n     * if the delegator also selected the delegate to do so (two-way relationship needed).\\r\\n     * @param delegator the address of the delegator.\\r\\n     */\\r\\n    function setDelegator(address delegator) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x0cb756d20c7b613c249887853d6e43b7543de650dc7306579505e906088c051b\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a03461007057601f611f3e38819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b038116810361007057608052604051611eb2908161008c823960805181818160db01526102d00152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101562000014575b600080fd5b6000803560e01c90816315e71b70146200005a57508063ac9650d8146200004f5763b9a3c84c146200004557600080fd5b6200000f620002b7565b506200000f62000246565b346200016357604036600319011262000163577f359c94b0273cb41a8004732e9c3a4de1e7cf8edc42cc22df2e9fbd25a617f1c1906200013f6200009d62000166565b91620000a86200017d565b90611848916060836080016080811067ffffffffffffffff82111762000153575b84620006356080396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690915295861660a0850181905291861660c085018190529301608083f092831562000143575b60405196879685169387a46001600160a01b031682526020820190565b0390f35b6200014d62000627565b62000122565b6200015d620002ff565b620000c9565b80fd5b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b60005b838110620001a85750506000910152565b818101518382015260200162000197565b90602091620001d48151809281855285808601910162000194565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310620002155750505050505090565b909192939495848062000235600193603f198682030187528a51620001b9565b980193019301919493929062000204565b50346200000f5760203660031901126200000f5767ffffffffffffffff6004358181116200000f57366023820112156200000f5780600401359182116200000f573660248360051b830101116200000f576200013f916024620002aa920162000559565b60405191829182620001e0565b50346200000f5760003660031901126200000f576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176200033d57604052565b62000347620002ff565b604052565b60209067ffffffffffffffff811162000367575b60051b0190565b62000371620002ff565b62000360565b906200038d62000387836200034c565b62000316565b8281528092620003a0601f19916200034c565b019060005b828110620003b257505050565b806060602080938501015201620003a5565b6000198114620003d45760010190565b634e487b7160e01b600052601160045260246000fd5b50634e487b7160e01b600052603260045260246000fd5b919081101562000448575b60051b81013590601e19813603018212156200000f57019081359167ffffffffffffffff83116200000f5760200182360381136200000f579190565b62000452620003ea565b6200040c565b908092918237016000815290565b60209067ffffffffffffffff811162000485575b601f01601f19160190565b6200048f620002ff565b6200047a565b3d15620004ba573d90620004ad620003878362000466565b9182523d6000602084013e565b606090565b6020818303126200000f5780519067ffffffffffffffff82116200000f570181601f820112156200000f578051620004fb620003878262000466565b92818452602082840101116200000f576200051d916020808501910162000194565b90565b9060206200051d928181520190620001b9565b602091815181101562000549575b60051b010190565b62000553620003ea565b62000541565b919091620005678362000377565b9260005b8181106200057857505050565b6000806200058883858762000401565b604093916200059c85518093819362000458565b0390305af490620005ac62000495565b91829015620005e357505090620005dd91620005c9828862000533565b52620005d6818762000533565b50620003c4565b6200056b565b604483929351106200000f576200060d6200062391600480940160248091518301019101620004bf565b925162461bcd60e51b8152928392830162000520565b0390fd5b506040513d6000823e3d90fdfe60a034620003d357601f6200184838819003918201601f191683019291906001600160401b03841183851017620003d8578160609284926040968752833981010312620003d3576200005181620003ee565b60206200006d8462000065838601620003ee565b9401620003ee565b60009182805282815260ff9060019082828987200154169360039485811015620003bf576200037b57858052858252888620838101805460ff1990811686179091558782556001600160a01b03998a169160020182156200033c5780546001600160a01b031990811690931790558780528784528a8820850154861687811015620002cf5715620002e35784885287845285858c8a2001541687811015620002cf576200028b5760028a91868a528986528c8a209087808301918254161790558981550192169081156200024c57825416179055848052848152828289872001541684811015620001e05715620001f457848052848152828289872001541684811015620001e05790620001848692151562000403565b8183558180525286842001541690811015620001cc57620001a790151562000403565b60025516608052516113bd90816200044b8239608051818181610a09015261130b0152f35b634e487b7160e01b82526021600452602482fd5b634e487b7160e01b86526021600452602486fd5b60849088519062461bcd60e51b82526004820152603c60248201526000805160206200182883398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b8a5162461bcd60e51b815260048101859052602360248201526000805160206200180883398151915260448201526203078360ec1b6064820152608490fd5b8a5162461bcd60e51b815260048101859052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b89526021600452602489fd5b8a5162461bcd60e51b815260048101859052603c60248201526000805160206200182883398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b8b5162461bcd60e51b815260048101869052602360248201526000805160206200180883398151915260448201526203078360ec1b6064820152608490fd5b885162461bcd60e51b815260048101839052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b87526021600452602487fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003d357565b156200040b57565b60405162461bcd60e51b8152602060048201526022602482015260008051602062001828833981519152604482015261125960f21b6064820152608490fdfe60806040526004361015610013575b600080fd5b60003560e01c806302b999d61461012b5780630c556621146101225780632e1a7d4d146101195780633dfbe378146101105780636be7658b1461010757806374d0a676146100fe5780637cdc1cb9146100f5578063aaa14ca3146100ec578063ab3545e5146100e3578063ac9650d8146100da578063b166dfdd146100d1578063b9a3c84c146100c8578063bd1f4b52146100bf5763d97c05be146100b757600080fd5b61000e610b1f565b5061000e610a38565b5061000e6109f2565b5061000e610893565b5061000e610828565b5061000e610723565b5061000e610688565b5061000e610653565b5061000e61053e565b5061000e61045c565b5061000e610378565b5061000e610275565b5061000e610205565b5061000e610145565b6001600160a01b0381160361000e57565b503461000e57600060203660031901126101d3578060043561016681610134565b61017b6101766002543390610f97565b61115d565b6001600160a01b0316803b156101d057819060046040518094819363067515ed60e11b83525af180156101c3575b6101b4575b50604051f35b6101bd90610c41565b386101ae565b6101cb6111c9565b6101a9565b50fd5b80fd5b604090600319011261000e576004356001600160801b038116810361000e579060243561020281610134565b90565b503461000e57610176610217366101d6565b6002549061022a60009485933390610f97565b6001600160a01b031691823b156102715760246001600160801b039183604051958694859363866be1e160e01b85521660048401525af180156101c3576101b45750604051f35b5080fd5b503461000e57602036600319011261000e5760043561029a6101766001543390610f97565b80471061032857600080809260405190335af16102b5610df2565b50156102bd57005b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b600091031261000e57565b503461000e576000806003193601126101d35760018152806020526103b2600160ff8160408520015416600381101561044f575b14611040565b600181526020819052604081206002015481906001600160a01b03166103e56103d96112de565b6001600160a01b031690565b90813b1561044b5760405163ca5eb5e160e01b81526001600160a01b03909116600482015291908290818381602481015b03925af1801561043e575b61042b5750604051f35b806104386101bd92610c41565b8061036d565b6104466111c9565b610421565b5050fd5b610457610f6c565b6103ac565b503461000e57604036600319011261000e5760243560043561047d82610134565b600091818352826020526104a7600260ff6001604087200154166003811015610531575b146110fc565b818352826020526104c56104c060408520543390610f97565b6110a4565b818352826020526104fb81600360408620016001600160a01b03909116600090815260209190915260409020805460ff19169055565b6040519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b610539610f6c565b6104a1565b503461000e5760408060031936011261000e5760243560043561056082610134565b60009281845283602052610588600260ff6001848820015416600381101561053157146110fc565b818452836020526105a06104c0828620543390610f97565b81845260208490528084206001600160a01b0384169390600301841561060f576001600160a01b03909116600090815260209190915260409020805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b825162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b503461000e57604036600319011261000e57602061067e60243561067681610134565b600435610f97565b6040519015158152f35b503461000e57602036600319011261000e57600435600090808252816020526106c6600260ff600160408620015416600381101561053157146110fc565b6106d36101763383610f97565b808252602082815260408084203360008181526003909201909352819020805460ff19169055519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e57602036600319011261000e576020600435600090808252818352610761600160ff8160408620015416600381101561044f5714611040565b81528082526002604060018060a01b039220015416604051908152f35b60005b8381106107915750506000910152565b8181015183820152602001610781565b906020916107ba8151809281855285808601910161077e565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106107fa5750505050505090565b9091929394958480610818600193603f198682030187528a516107a1565b98019301930191949392906107ea565b503461000e57602036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e5761088f9160246108839201610eb4565b604051918291826107c6565b0390f35b503461000e5760046109346108a7366101d6565b91906108b96101766002543390610f97565b60018060a01b0380841692839183604051809763b034012360e01b82526020958694858460009d8e9d8e80965af19384156109e5575b82946109b6575b5060405163095ea7b360e01b81526001600160a01b0390931660048401526001600160801b0390941660248301529094859384929183906044820190565b0393165af180156109a9575b61097b575b5050813b1561044b5760405163111fc57d60e31b81526001600160801b0390911660048201529190829081838160248101610416565b8161099a92903d106109a2575b6109928183610c9a565b8101906111d6565b503880610945565b503d610988565b6109b16111c9565b610940565b6109d7919450863d88116109de575b6109cf8183610c9a565b8101906111b4565b92386108f6565b503d6109c5565b6109ed6111c9565b6108ef565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57604036600319011261000e57610b03610aef600435610a5c81610134565b610a6c6101766001543390610f97565b60018060a01b0316604051906000806020840163a9059cbb60e01b8152336024860152602435604486015260448552610aa485610c62565b60405194610ab186610c7e565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020870152519082855af1610ae9610df2565b9161124d565b8051908115918215610b05575b50506111ee565b005b610b1892506020809183010191016111d6565b3880610afc565b503461000e5760408060031936011261000e57602435600435610b4182610134565b60009281845283602052610b68600160ff81848820015416600381101561044f5714611040565b81845283602052610b806104c0828620543390610f97565b81845260208490528084206001600160a01b03909316926002018315610bda5780546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b815162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610c5557604052565b610c5d610c2a565b604052565b6080810190811067ffffffffffffffff821117610c5557604052565b6040810190811067ffffffffffffffff821117610c5557604052565b90601f8019910116810190811067ffffffffffffffff821117610c5557604052565b60209067ffffffffffffffff8111610cd6575b60051b0190565b610cde610c2a565b610ccf565b90610ced82610cbc565b610cfa6040519182610c9a565b8281528092610d0b601f1991610cbc565b019060005b828110610d1c57505050565b806060602080938501015201610d10565b6000198114610d3c5760010190565b634e487b7160e01b600052601160045260246000fd5b50634e487b7160e01b600052603260045260246000fd5b9190811015610dac575b60051b81013590601e198136030182121561000e57019081359167ffffffffffffffff831161000e57602001823603811361000e579190565b610db4610d52565b610d73565b908092918237016000815290565b60209067ffffffffffffffff8111610de5575b601f01601f19160190565b610ded610c2a565b610dda565b3d15610e1d573d90610e0382610dc7565b91610e116040519384610c9a565b82523d6000602084013e565b606090565b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e578051610e5581610dc7565b92610e636040519485610c9a565b8184526020828401011161000e57610202916020808501910161077e565b9060206102029281815201906107a1565b6020918151811015610ea7575b60051b010190565b610eaf610d52565b610e9f565b919091610ec083610ce3565b9260005b818110610ed057505050565b600080610ede838587610d69565b60409391610ef0855180938193610db9565b0390305af490610efe610df2565b91829015610f2d57505090610f2891610f178288610e92565b52610f228187610e92565b50610d2d565b610ec4565b6044839293511061000e57610f53610f6891600480940160248091518301019101610e22565b925162461bcd60e51b81529283928301610e81565b0390fd5b50634e487b7160e01b600052602160045260246000fd5b60031115610f8d57565b610f95610f6c565b565b6000526000602052604060002060ff600182015416610fb581610f83565b60018103610fd35750600201546001600160a01b0391821691161490565b80610fdf600292610f83565b1461101a5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60ff91600361103b92019060018060a01b0316600052602052604060002090565b541690565b1561104757565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b156110ab57565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b1561110357565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1561116457565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b9081602091031261000e575161020281610134565b506040513d6000823e3d90fd5b9081602091031261000e5751801515810361000e5790565b156111f557565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b919290156112af5750815115611261575090565b3b1561126a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156112c25750805190602001fd5b60405162461bcd60e51b8152908190610f689060048301610e81565b6040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03906020816024817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561137a575b60009161134257501690565b906020823d8211611372575b8161135b60209383610c9a565b810103126101d357505161136e81610134565b1690565b3d915061134e565b6113826111c9565b61133656fea2646970667358221220bff26a8beb0eea9e540689f5b8cde0fac9532409b0023680aad090633d60fae064736f6c6343000810003343616e6e6f742073657420616e206578636c757369766520726f6c6520746f20417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a26469706673582212202de83c407d1f3e46fa10ac960692238886cd7436250953a94cd97278f7d2225964736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101562000014575b600080fd5b6000803560e01c90816315e71b70146200005a57508063ac9650d8146200004f5763b9a3c84c146200004557600080fd5b6200000f620002b7565b506200000f62000246565b346200016357604036600319011262000163577f359c94b0273cb41a8004732e9c3a4de1e7cf8edc42cc22df2e9fbd25a617f1c1906200013f6200009d62000166565b91620000a86200017d565b90611848916060836080016080811067ffffffffffffffff82111762000153575b84620006356080396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690915295861660a0850181905291861660c085018190529301608083f092831562000143575b60405196879685169387a46001600160a01b031682526020820190565b0390f35b6200014d62000627565b62000122565b6200015d620002ff565b620000c9565b80fd5b600435906001600160a01b03821682036200000f57565b602435906001600160a01b03821682036200000f57565b60005b838110620001a85750506000910152565b818101518382015260200162000197565b90602091620001d48151809281855285808601910162000194565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310620002155750505050505090565b909192939495848062000235600193603f198682030187528a51620001b9565b980193019301919493929062000204565b50346200000f5760203660031901126200000f5767ffffffffffffffff6004358181116200000f57366023820112156200000f5780600401359182116200000f573660248360051b830101116200000f576200013f916024620002aa920162000559565b60405191829182620001e0565b50346200000f5760003660031901126200000f576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176200033d57604052565b62000347620002ff565b604052565b60209067ffffffffffffffff811162000367575b60051b0190565b62000371620002ff565b62000360565b906200038d62000387836200034c565b62000316565b8281528092620003a0601f19916200034c565b019060005b828110620003b257505050565b806060602080938501015201620003a5565b6000198114620003d45760010190565b634e487b7160e01b600052601160045260246000fd5b50634e487b7160e01b600052603260045260246000fd5b919081101562000448575b60051b81013590601e19813603018212156200000f57019081359167ffffffffffffffff83116200000f5760200182360381136200000f579190565b62000452620003ea565b6200040c565b908092918237016000815290565b60209067ffffffffffffffff811162000485575b601f01601f19160190565b6200048f620002ff565b6200047a565b3d15620004ba573d90620004ad620003878362000466565b9182523d6000602084013e565b606090565b6020818303126200000f5780519067ffffffffffffffff82116200000f570181601f820112156200000f578051620004fb620003878262000466565b92818452602082840101116200000f576200051d916020808501910162000194565b90565b9060206200051d928181520190620001b9565b602091815181101562000549575b60051b010190565b62000553620003ea565b62000541565b919091620005678362000377565b9260005b8181106200057857505050565b6000806200058883858762000401565b604093916200059c85518093819362000458565b0390305af490620005ac62000495565b91829015620005e357505090620005dd91620005c9828862000533565b52620005d6818762000533565b50620003c4565b6200056b565b604483929351106200000f576200060d6200062391600480940160248091518301019101620004bf565b925162461bcd60e51b8152928392830162000520565b0390fd5b506040513d6000823e3d90fdfe60a034620003d357601f6200184838819003918201601f191683019291906001600160401b03841183851017620003d8578160609284926040968752833981010312620003d3576200005181620003ee565b60206200006d8462000065838601620003ee565b9401620003ee565b60009182805282815260ff9060019082828987200154169360039485811015620003bf576200037b57858052858252888620838101805460ff1990811686179091558782556001600160a01b03998a169160020182156200033c5780546001600160a01b031990811690931790558780528784528a8820850154861687811015620002cf5715620002e35784885287845285858c8a2001541687811015620002cf576200028b5760028a91868a528986528c8a209087808301918254161790558981550192169081156200024c57825416179055848052848152828289872001541684811015620001e05715620001f457848052848152828289872001541684811015620001e05790620001848692151562000403565b8183558180525286842001541690811015620001cc57620001a790151562000403565b60025516608052516113bd90816200044b8239608051818181610a09015261130b0152f35b634e487b7160e01b82526021600452602482fd5b634e487b7160e01b86526021600452602486fd5b60849088519062461bcd60e51b82526004820152603c60248201526000805160206200182883398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b8a5162461bcd60e51b815260048101859052602360248201526000805160206200180883398151915260448201526203078360ec1b6064820152608490fd5b8a5162461bcd60e51b815260048101859052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b89526021600452602489fd5b8a5162461bcd60e51b815260048101859052603c60248201526000805160206200182883398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b8b5162461bcd60e51b815260048101869052602360248201526000805160206200180883398151915260448201526203078360ec1b6064820152608490fd5b885162461bcd60e51b815260048101839052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b87526021600452602487fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003d357565b156200040b57565b60405162461bcd60e51b8152602060048201526022602482015260008051602062001828833981519152604482015261125960f21b6064820152608490fdfe60806040526004361015610013575b600080fd5b60003560e01c806302b999d61461012b5780630c556621146101225780632e1a7d4d146101195780633dfbe378146101105780636be7658b1461010757806374d0a676146100fe5780637cdc1cb9146100f5578063aaa14ca3146100ec578063ab3545e5146100e3578063ac9650d8146100da578063b166dfdd146100d1578063b9a3c84c146100c8578063bd1f4b52146100bf5763d97c05be146100b757600080fd5b61000e610b1f565b5061000e610a38565b5061000e6109f2565b5061000e610893565b5061000e610828565b5061000e610723565b5061000e610688565b5061000e610653565b5061000e61053e565b5061000e61045c565b5061000e610378565b5061000e610275565b5061000e610205565b5061000e610145565b6001600160a01b0381160361000e57565b503461000e57600060203660031901126101d3578060043561016681610134565b61017b6101766002543390610f97565b61115d565b6001600160a01b0316803b156101d057819060046040518094819363067515ed60e11b83525af180156101c3575b6101b4575b50604051f35b6101bd90610c41565b386101ae565b6101cb6111c9565b6101a9565b50fd5b80fd5b604090600319011261000e576004356001600160801b038116810361000e579060243561020281610134565b90565b503461000e57610176610217366101d6565b6002549061022a60009485933390610f97565b6001600160a01b031691823b156102715760246001600160801b039183604051958694859363866be1e160e01b85521660048401525af180156101c3576101b45750604051f35b5080fd5b503461000e57602036600319011261000e5760043561029a6101766001543390610f97565b80471061032857600080809260405190335af16102b5610df2565b50156102bd57005b60405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608490fd5b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606490fd5b600091031261000e57565b503461000e576000806003193601126101d35760018152806020526103b2600160ff8160408520015416600381101561044f575b14611040565b600181526020819052604081206002015481906001600160a01b03166103e56103d96112de565b6001600160a01b031690565b90813b1561044b5760405163ca5eb5e160e01b81526001600160a01b03909116600482015291908290818381602481015b03925af1801561043e575b61042b5750604051f35b806104386101bd92610c41565b8061036d565b6104466111c9565b610421565b5050fd5b610457610f6c565b6103ac565b503461000e57604036600319011261000e5760243560043561047d82610134565b600091818352826020526104a7600260ff6001604087200154166003811015610531575b146110fc565b818352826020526104c56104c060408520543390610f97565b6110a4565b818352826020526104fb81600360408620016001600160a01b03909116600090815260209190915260409020805460ff19169055565b6040519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b610539610f6c565b6104a1565b503461000e5760408060031936011261000e5760243560043561056082610134565b60009281845283602052610588600260ff6001848820015416600381101561053157146110fc565b818452836020526105a06104c0828620543390610f97565b81845260208490528084206001600160a01b0384169390600301841561060f576001600160a01b03909116600090815260209190915260409020805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b825162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b503461000e57604036600319011261000e57602061067e60243561067681610134565b600435610f97565b6040519015158152f35b503461000e57602036600319011261000e57600435600090808252816020526106c6600260ff600160408620015416600381101561053157146110fc565b6106d36101763383610f97565b808252602082815260408084203360008181526003909201909352819020805460ff19169055519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e57602036600319011261000e576020600435600090808252818352610761600160ff8160408620015416600381101561044f5714611040565b81528082526002604060018060a01b039220015416604051908152f35b60005b8381106107915750506000910152565b8181015183820152602001610781565b906020916107ba8151809281855285808601910161077e565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106107fa5750505050505090565b9091929394958480610818600193603f198682030187528a516107a1565b98019301930191949392906107ea565b503461000e57602036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e5761088f9160246108839201610eb4565b604051918291826107c6565b0390f35b503461000e5760046109346108a7366101d6565b91906108b96101766002543390610f97565b60018060a01b0380841692839183604051809763b034012360e01b82526020958694858460009d8e9d8e80965af19384156109e5575b82946109b6575b5060405163095ea7b360e01b81526001600160a01b0390931660048401526001600160801b0390941660248301529094859384929183906044820190565b0393165af180156109a9575b61097b575b5050813b1561044b5760405163111fc57d60e31b81526001600160801b0390911660048201529190829081838160248101610416565b8161099a92903d106109a2575b6109928183610c9a565b8101906111d6565b503880610945565b503d610988565b6109b16111c9565b610940565b6109d7919450863d88116109de575b6109cf8183610c9a565b8101906111b4565b92386108f6565b503d6109c5565b6109ed6111c9565b6108ef565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57604036600319011261000e57610b03610aef600435610a5c81610134565b610a6c6101766001543390610f97565b60018060a01b0316604051906000806020840163a9059cbb60e01b8152336024860152602435604486015260448552610aa485610c62565b60405194610ab186610c7e565b602086527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646020870152519082855af1610ae9610df2565b9161124d565b8051908115918215610b05575b50506111ee565b005b610b1892506020809183010191016111d6565b3880610afc565b503461000e5760408060031936011261000e57602435600435610b4182610134565b60009281845283602052610b68600160ff81848820015416600381101561044f5714611040565b81845283602052610b806104c0828620543390610f97565b81845260208490528084206001600160a01b03909316926002018315610bda5780546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b815162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff8111610c5557604052565b610c5d610c2a565b604052565b6080810190811067ffffffffffffffff821117610c5557604052565b6040810190811067ffffffffffffffff821117610c5557604052565b90601f8019910116810190811067ffffffffffffffff821117610c5557604052565b60209067ffffffffffffffff8111610cd6575b60051b0190565b610cde610c2a565b610ccf565b90610ced82610cbc565b610cfa6040519182610c9a565b8281528092610d0b601f1991610cbc565b019060005b828110610d1c57505050565b806060602080938501015201610d10565b6000198114610d3c5760010190565b634e487b7160e01b600052601160045260246000fd5b50634e487b7160e01b600052603260045260246000fd5b9190811015610dac575b60051b81013590601e198136030182121561000e57019081359167ffffffffffffffff831161000e57602001823603811361000e579190565b610db4610d52565b610d73565b908092918237016000815290565b60209067ffffffffffffffff8111610de5575b601f01601f19160190565b610ded610c2a565b610dda565b3d15610e1d573d90610e0382610dc7565b91610e116040519384610c9a565b82523d6000602084013e565b606090565b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e578051610e5581610dc7565b92610e636040519485610c9a565b8184526020828401011161000e57610202916020808501910161077e565b9060206102029281815201906107a1565b6020918151811015610ea7575b60051b010190565b610eaf610d52565b610e9f565b919091610ec083610ce3565b9260005b818110610ed057505050565b600080610ede838587610d69565b60409391610ef0855180938193610db9565b0390305af490610efe610df2565b91829015610f2d57505090610f2891610f178288610e92565b52610f228187610e92565b50610d2d565b610ec4565b6044839293511061000e57610f53610f6891600480940160248091518301019101610e22565b925162461bcd60e51b81529283928301610e81565b0390fd5b50634e487b7160e01b600052602160045260246000fd5b60031115610f8d57565b610f95610f6c565b565b6000526000602052604060002060ff600182015416610fb581610f83565b60018103610fd35750600201546001600160a01b0391821691161490565b80610fdf600292610f83565b1461101a5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60ff91600361103b92019060018060a01b0316600052602052604060002090565b541690565b1561104757565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b156110ab57565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b1561110357565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1561116457565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b9081602091031261000e575161020281610134565b506040513d6000823e3d90fd5b9081602091031261000e5751801515810361000e5790565b156111f557565b60405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608490fd5b919290156112af5750815115611261575090565b3b1561126a5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156112c25750805190602001fd5b60405162461bcd60e51b8152908190610f689060048301610e81565b6040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03906020816024817f000000000000000000000000000000000000000000000000000000000000000086165afa90811561137a575b60009161134257501690565b906020823d8211611372575b8161135b60209383610c9a565b810103126101d357505161136e81610134565b1690565b3d915061134e565b6113826111c9565b61133656fea2646970667358221220bff26a8beb0eea9e540689f5b8cde0fac9532409b0023680aad090633d60fae064736f6c6343000810003343616e6e6f742073657420616e206578636c757369766520726f6c6520746f20417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a26469706673582212202de83c407d1f3e46fa10ac960692238886cd7436250953a94cd97278f7d2225964736f6c63430008100033",
  "devdoc": {
    "details": "Allows off-chain infrastructure to look up a hot wallet's deployed DesignatedVoting contract.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_finder": "keeps track of all contracts within the system based on their interfaceName."
        }
      },
      "newDesignatedVoting(address,address)": {
        "params": {
          "owner": "defines who will own the deployed instance of the designatedVoting contract.",
          "voter": "defines who will be able to vote on behalf of the owner, using the designatedVoting contract."
        },
        "returns": {
          "_0": "designatedVoting a new DesignatedVoting contract."
        }
      }
    },
    "title": "Factory to deploy new instances of DesignatedVotingV2 and look up previously deployed instances.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Construct the DesignatedVotingFactory contract."
      },
      "newDesignatedVoting(address,address)": {
        "notice": "Deploys a new `DesignatedVoting` contract."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}