{
  "address": "0xBaF49aB29D61F6A58dfC76D249aD3c20bc8F5487",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "AddedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Governor.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        }
      ],
      "name": "NewProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionIndex",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "RemovedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ResetExclusiveMember",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transactionIndex",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct Governor.Transaction[]",
              "name": "transactions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "requestTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Governor.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToCheck",
          "type": "address"
        }
      ],
      "name": "holdsRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Governor.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToRemove",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "renounceMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "resetMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x011399fd59c23fdebb506b15f6e6c6a0e21c9a6adb75f41db97f011d9701a088",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0xBaF49aB29D61F6A58dfC76D249aD3c20bc8F5487",
    "transactionIndex": 46,
    "gasUsed": "1625148",
    "logsBloom": "0x
    "blockHash": "0xb1d7506c1c6650334b0214fc9ab09dc1835100a8eab02d0bfc5d3c62879ac71c",
    "transactionHash": "0x011399fd59c23fdebb506b15f6e6c6a0e21c9a6adb75f41db97f011d9701a088",
    "logs": [],
    "blockNumber": 6153665,
    "cumulativeGasUsed": "6779066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e",
    0,
    "0xf8815ce169E5450aa6908e76E1B970dBcEC11550"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AddedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Governor.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionIndex\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RemovedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ResetExclusiveMember\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionIndex\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Governor.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Governor.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToCheck\",\"type\":\"address\"}],\"name\":\"holdsRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Governor.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToRemove\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"renounceMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"resetMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"newMember\":\"the new SharedRole member.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"constructor\":{\"params\":{\"_finderAddress\":\"keeps track of all contracts within the system based on their interfaceName.\",\"_startingId\":\"the initial proposal id that the contract will begin incrementing from.\",\"_timerAddress\":\"Contract that stores the current time in a testing environment. Must be set to 0x0 for production environments that use live time.\"}},\"executeProposal(uint256,uint256)\":{\"details\":\"This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\",\"params\":{\"id\":\"unique id for the executed proposal.\",\"transactionIndex\":\"unique transaction index for the executed proposal.\"}},\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"getMember(uint256)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, exclusive role.\",\"params\":{\"roleId\":\"the ExclusiveRole membership to check.\"},\"returns\":{\"_0\":\"the address of the current ExclusiveRole member.\"}},\"getProposal(uint256)\":{\"details\":\"after a proposal is executed, its data will be zeroed out, except for the request time.\",\"params\":{\"id\":\"uniquely identify the identity of the proposal.\"},\"returns\":{\"_0\":\"proposal struct containing transactions[] and requestTime.\"}},\"holdsRole(uint256,address)\":{\"details\":\"Reverts if roleId does not correspond to an initialized role.\",\"params\":{\"memberToCheck\":\"the address to check.\",\"roleId\":\"the Role to check.\"},\"returns\":{\"_0\":\"True if `memberToCheck` is a member of `roleId`.\"}},\"numProposals()\":{\"returns\":{\"_0\":\"uint256 representing the current number of proposals.\"}},\"propose((address,uint256,bytes)[])\":{\"details\":\"You can create the data portion of each transaction by doing the following: ``` const truffleContractInstance = await TruffleContract.deployed() const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI() ``` Note: this method must be public because of a solidity limitation that disallows structs arrays to be passed to external functions.\",\"params\":{\"transactions\":\"list of transactions that are being proposed.\"}},\"removeMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"memberToRemove\":\"the current SharedRole member to remove.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"renounceMembership(uint256)\":{\"details\":\"Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.\",\"params\":{\"roleId\":\"the SharedRole membership to modify.\"}},\"resetMember(uint256,address)\":{\"details\":\"Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.\",\"params\":{\"newMember\":\"the new ExclusiveRole member.\",\"roleId\":\"the ExclusiveRole membership to modify.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}}},\"title\":\"Takes proposals for certain governance actions and allows UMA token holders to vote on them.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(uint256,address)\":{\"notice\":\"Adds `newMember` to the shared role, `roleId`.\"},\"constructor\":{\"notice\":\"Construct the Governor contract.\"},\"executeProposal(uint256,uint256)\":{\"notice\":\"Executes a proposed governance action that has been approved by voters.\"},\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"getMember(uint256)\":{\"notice\":\"Gets the current holder of the exclusive role, `roleId`.\"},\"getProposal(uint256)\":{\"notice\":\"Gets the proposal data for a particular id.\"},\"holdsRole(uint256,address)\":{\"notice\":\"Whether `memberToCheck` is a member of roleId.\"},\"numProposals()\":{\"notice\":\"Gets the total number of proposals (includes executed and non-executed).\"},\"propose((address,uint256,bytes)[])\":{\"notice\":\"Proposes a new governance action. Can only be called by the holder of the Proposer role.\"},\"removeMember(uint256,address)\":{\"notice\":\"Removes `memberToRemove` from the shared role, `roleId`.\"},\"renounceMembership(uint256)\":{\"notice\":\"Removes caller from the role, `roleId`.\"},\"resetMember(uint256,address)\":{\"notice\":\"Changes the exclusive role holder of `roleId` to `newMember`.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data-verification-mechanism/implementation/Governor.sol\":\"Governor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/AdminIdentifierLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @title Library to construct admin identifiers.\\r\\n */\\r\\nlibrary AdminIdentifierLib {\\r\\n    // Returns a UTF-8 identifier representing a particular admin proposal.\\r\\n    // The identifier is of the form \\\"Admin n\\\", where n is the proposal id provided.\\r\\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\\r\\n        bytes32 bytesId = _uintToUtf8(id);\\r\\n        return _addPrefix(bytesId, \\\"Admin \\\", 6);\\r\\n    }\\r\\n\\r\\n    // This method converts the integer `v` into a base-10, UTF-8 representation stored in a `bytes32` type.\\r\\n    // If the input cannot be represented by 32 base-10 digits, it returns only the highest 32 digits.\\r\\n    // This method is based off of this code: https://ethereum.stackexchange.com/a/6613/47801.\\r\\n    function _uintToUtf8(uint256 v) internal pure returns (bytes32) {\\r\\n        bytes32 ret;\\r\\n        if (v == 0) {\\r\\n            // Handle 0 case explicitly.\\r\\n            ret = \\\"0\\\";\\r\\n        } else {\\r\\n            // Constants.\\r\\n            uint256 bitsPerByte = 8;\\r\\n            uint256 base = 10; // Note: the output should be base-10. The below implementation will not work for bases > 10.\\r\\n            uint256 utf8NumberOffset = 48;\\r\\n            while (v > 0) {\\r\\n                // Downshift the entire bytes32 to allow the new digit to be added at the \\\"front\\\" of the bytes32, which\\r\\n                // translates to the beginning of the UTF-8 representation.\\r\\n                ret = ret >> bitsPerByte;\\r\\n\\r\\n                // Separate the last digit that remains in v by modding by the base of desired output representation.\\r\\n                uint256 leastSignificantDigit = v % base;\\r\\n\\r\\n                // Digits 0-9 are represented by 48-57 in UTF-8, so an offset must be added to create the character.\\r\\n                bytes32 utf8Digit = bytes32(leastSignificantDigit + utf8NumberOffset);\\r\\n\\r\\n                // The top byte of ret has already been cleared to make room for the new digit.\\r\\n                // Upshift by 31 bytes to put it in position, and OR it with ret to leave the other characters untouched.\\r\\n                ret |= utf8Digit << (31 * bitsPerByte);\\r\\n\\r\\n                // Divide v by the base to remove the digit that was just added.\\r\\n                v /= base;\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // This method takes two UTF-8 strings represented as bytes32 and outputs one as a prefixed by the other.\\r\\n    // `input` is the UTF-8 that should have the prefix prepended.\\r\\n    // `prefix` is the UTF-8 that should be prepended onto input.\\r\\n    // `prefixLength` is number of UTF-8 characters represented by `prefix`.\\r\\n    // Notes:\\r\\n    // 1. If the resulting UTF-8 is larger than 32 characters, then only the first 32 characters will be represented\\r\\n    //    by the bytes32 output.\\r\\n    // 2. If `prefix` has more characters than `prefixLength`, the function will produce an invalid result.\\r\\n    function _addPrefix(\\r\\n        bytes32 input,\\r\\n        bytes32 prefix,\\r\\n        uint256 prefixLength\\r\\n    ) internal pure returns (bytes32) {\\r\\n        // Downshift `input` to open space at the \\\"front\\\" of the bytes32\\r\\n        bytes32 shiftedInput = input >> (prefixLength * 8);\\r\\n        return shiftedInput | prefix;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5dab9093cc4ffca70452f79f867fa9b29110210508f81a2ebcb872952009b59\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Governor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./AdminIdentifierLib.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\\r\\n */\\r\\ncontract Governor is MultiRole, Testable {\\r\\n    using SafeMath for uint256;\\r\\n    using Address for address;\\r\\n\\r\\n    /****************************************\\r\\n     *     INTERNAL VARIABLES AND STORAGE   *\\r\\n     ****************************************/\\r\\n\\r\\n    enum Roles {\\r\\n        Owner, // Can set the proposer.\\r\\n        Proposer // Address that can make proposals.\\r\\n    }\\r\\n\\r\\n    struct Transaction {\\r\\n        address to;\\r\\n        uint256 value;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    struct Proposal {\\r\\n        Transaction[] transactions;\\r\\n        uint256 requestTime;\\r\\n    }\\r\\n\\r\\n    FinderInterface private finder;\\r\\n    Proposal[] public proposals;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    // Emitted when a new proposal is created.\\r\\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\\r\\n\\r\\n    // Emitted when an existing proposal is executed.\\r\\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Governor contract.\\r\\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\\r\\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(\\r\\n        address _finderAddress,\\r\\n        uint256 _startingId,\\r\\n        address _timerAddress\\r\\n    ) Testable(_timerAddress) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\\r\\n\\r\\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\\r\\n        // other storage slots in the contract.\\r\\n        uint256 maxStartingId = 10**18;\\r\\n        require(_startingId <= maxStartingId, \\\"Cannot set startingId larger than 10^18\\\");\\r\\n\\r\\n        // This just sets the initial length of the array to the startingId since modifying length directly has been\\r\\n        // disallowed in solidity 0.6.\\r\\n        assembly {\\r\\n            sstore(proposals.slot, _startingId)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          PROPOSAL ACTIONS            *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\\r\\n     * @param transactions list of transactions that are being proposed.\\r\\n     * @dev You can create the data portion of each transaction by doing the following:\\r\\n     * ```\\r\\n     * const truffleContractInstance = await TruffleContract.deployed()\\r\\n     * const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI()\\r\\n     * ```\\r\\n     * Note: this method must be public because of a solidity limitation that\\r\\n     * disallows structs arrays to be passed to external functions.\\r\\n     */\\r\\n    function propose(Transaction[] memory transactions) public onlyRoleHolder(uint256(Roles.Proposer)) {\\r\\n        uint256 id = proposals.length;\\r\\n        uint256 time = getCurrentTime();\\r\\n\\r\\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\\r\\n        // structs in storage to an an array of structs in memory is currently not implemented in solidity :/.\\r\\n\\r\\n        // Add a zero-initialized element to the proposals array.\\r\\n        proposals.push();\\r\\n\\r\\n        // Initialize the new proposal.\\r\\n        Proposal storage proposal = proposals[id];\\r\\n        proposal.requestTime = time;\\r\\n\\r\\n        // Initialize the transaction array.\\r\\n        for (uint256 i = 0; i < transactions.length; i++) {\\r\\n            require(transactions[i].to != address(0), \\\"The `to` address cannot be 0x0\\\");\\r\\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\\r\\n            if (transactions[i].data.length > 0) {\\r\\n                require(transactions[i].to.isContract(), \\\"EOA can't accept tx with data\\\");\\r\\n            }\\r\\n            proposal.transactions.push(transactions[i]);\\r\\n        }\\r\\n\\r\\n        bytes32 identifier = AdminIdentifierLib._constructIdentifier(id);\\r\\n\\r\\n        // Request a vote on this proposal in the DVM.\\r\\n        OracleInterface oracle = _getOracle();\\r\\n        IdentifierWhitelistInterface supportedIdentifiers = _getIdentifierWhitelist();\\r\\n        supportedIdentifiers.addSupportedIdentifier(identifier);\\r\\n\\r\\n        oracle.requestPrice(identifier, time);\\r\\n        supportedIdentifiers.removeSupportedIdentifier(identifier);\\r\\n\\r\\n        emit NewProposal(id, transactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a proposed governance action that has been approved by voters.\\r\\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\\r\\n     * @param id unique id for the executed proposal.\\r\\n     * @param transactionIndex unique transaction index for the executed proposal.\\r\\n     */\\r\\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable {\\r\\n        Proposal storage proposal = proposals[id];\\r\\n        int256 price = _getOracle().getPrice(AdminIdentifierLib._constructIdentifier(id), proposal.requestTime);\\r\\n\\r\\n        Transaction memory transaction = proposal.transactions[transactionIndex];\\r\\n\\r\\n        require(\\r\\n            transactionIndex == 0 || proposal.transactions[transactionIndex.sub(1)].to == address(0),\\r\\n            \\\"Previous tx not yet executed\\\"\\r\\n        );\\r\\n        require(transaction.to != address(0), \\\"Tx already executed\\\");\\r\\n        require(price != 0, \\\"Proposal was rejected\\\");\\r\\n        require(msg.value == transaction.value, \\\"Must send exact amount of ETH\\\");\\r\\n\\r\\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\\r\\n        delete proposal.transactions[transactionIndex];\\r\\n\\r\\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \\\"Tx execution failed\\\");\\r\\n\\r\\n        emit ProposalExecuted(id, transactionIndex);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *       GOVERNOR STATE GETTERS         *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the total number of proposals (includes executed and non-executed).\\r\\n     * @return uint256 representing the current number of proposals.\\r\\n     */\\r\\n    function numProposals() external view returns (uint256) {\\r\\n        return proposals.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the proposal data for a particular id.\\r\\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time.\\r\\n     * @param id uniquely identify the identity of the proposal.\\r\\n     * @return proposal struct containing transactions[] and requestTime.\\r\\n     */\\r\\n    function getProposal(uint256 id) external view returns (Proposal memory) {\\r\\n        return proposals[id];\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *      PRIVATE GETTERS AND FUNCTIONS   *\\r\\n     ****************************************/\\r\\n\\r\\n    function _executeCall(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        // Mostly copied from:\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            let inputData := add(data, 0x20)\\r\\n            let inputDataSize := mload(data)\\r\\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\\r\\n        }\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function _getOracle() private view returns (OracleInterface) {\\r\\n        return OracleInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n\\r\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc58a4a5ed94fc5d9288754312b4e5cc8d2b4dcba0b7234a7674eb17900309dc5\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestPrice(bytes32 identifier, uint256 time) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(bytes32 identifier, uint256 time) external view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(bytes32 identifier, uint256 time) external view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa135756eabf06899395052031d8a2f617ef504477dc3037585f2b4ce0e3da22a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346200039a57601f62001d8238819003918201601f191683019291906001600160401b038411838510176200039f5781606092849260409687528339810103126200039a576200005181620003b5565b602082810151929091906001600160a01b0390819062000073908701620003b5565b169060018060a01b031992600192848454161783551682600254161760025560009182805282845260ff8287852001541660038110156200038657620003425782805282845285832060028382019160ff19928584825416179055858155013315620002f257338382541617905583805283855260ff838886200154166003811015620002855715620002995782845283855260ff8388862001541660038110156200028557620002415782845283855286842080840180549092168417909155838155600201805490911633179055818052848220015460ff169060038210156200022d575015620001d557670de0b6b3a76400008211620001825750600355516119979081620003cb8239f35b60849083519062461bcd60e51b82526004820152602760248201527f43616e6e6f7420736574207374617274696e674964206c6172676572207468616044820152660dc406260bc62760cb1b6064820152fd5b60849083519062461bcd60e51b82526004820152603c602482015260008051602062001d6283398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b634e487b7160e01b81526021600452602490fd5b865162461bcd60e51b815260048101869052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b85526021600452602485fd5b865162461bcd60e51b815260048101869052603c602482015260008051602062001d6283398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b875162461bcd60e51b815260048101879052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b855162461bcd60e51b815260048101859052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b634e487b7160e01b84526021600452602484fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200039a5756fe60806040526004361015610013575b600080fd5b60003560e01c8063013cf08b1461012b5780631ab76712146101225780631c39c38d1461011957806322f8e5661461011057806329cb924d14610107578063400e3949146100fe5780636be7658b146100f557806374d0a676146100ec5780637cdc1cb9146100e3578063aaa14ca3146100da578063ab3545e5146100d1578063c62fdef7146100c8578063c7f758a8146100bf5763d97c05be146100b757600080fd5b61000e610b57565b5061000e610aa9565b5061000e610890565b5061000e61076e565b5061000e6106ce565b5061000e610699565b5061000e610584565b5061000e6104a2565b5061000e610472565b5061000e61044e565b5061000e6103cc565b5061000e6103a2565b5061000e6101e8565b5061000e610193565b50634e487b7160e01b600052603260045260246000fd5b600354811015610186575b600360005260011b7fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b61018e610134565b610156565b503461000e57602036600319011261000e5760043560035481101561000e577fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c602091600360005260011b0154604051908152f35b50604036600319011261000e576004357ff758fc91e01b00ea6b4a6138756f7f28e021f9bf21db6dbf8c36c88eb737257a61032e60243561031e61031961022e8661014b565b50610282602061024b61023f611888565b6001600160a01b031690565b6102548a61154b565b6001850154604051636494078360e11b81526004810192909252602482015292839190829081906044820190565b03915afa90811561038a575b60009161035c575b506102dd6102ad6102a7878561131d565b506115a9565b9186158015610333575b6102c09061167f565b82516102d6906001600160a01b031615156116cb565b151561170d565b6103006102fa8660208401946102f586513414611751565b61131d565b9061179d565b80516040906001600160a01b0316925191015191611861565b611808565b6040519081529081906020820190565b0390a2005b506102c06103496103438961184a565b8661131d565b50546001600160a01b03161590506102b7565b61037d915060203d8111610383575b6103758183610847565b810190610f1e565b38610296565b503d61036b565b610392610f11565b61028e565b600091031261000e57565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e576000602036600319011261044b5760015481906001600160a01b0316801561044857803b1561044857819060246040518094819363117c72b360e11b835260043560048401525af1801561043b575b61042c575b50604051f35b610435906107ee565b38610426565b610443610f11565b610421565b50fd5b80fd5b503461000e57600036600319011261000e57602061046a610f2d565b604051908152f35b503461000e57600036600319011261000e576020600354604051908152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e576024356004356104c382610491565b600091818352826020526104ed600260ff6001604087200154166003811015610577575b14610e59565b8183528260205261050b61050660408520543390610d7f565b610e01565b8183528260205261054181600360408620016001600160a01b03909116600090815260209190915260409020805460ff19169055565b6040519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b61057f610c6f565b6104e7565b503461000e5760408060031936011261000e576024356004356105a682610491565b600092818452836020526105ce600260ff600184882001541660038110156105775714610e59565b818452836020526105e6610506828620543390610d7f565b81845260208490528084206001600160a01b03841693906003018415610655576001600160a01b03909116600090815260209190915260409020805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b825162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b503461000e57604036600319011261000e5760206106c46024356106bc81610491565b600435610d7f565b6040519015158152f35b503461000e57602036600319011261000e576004356000908082528160205261070c600260ff60016040862001541660038110156105775714610e59565b61071e6107193383610d7f565b610eba565b808252602082815260408084203360008181526003909201909352819020805460ff19169055519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e57602036600319011261000e5760206004356000908082528183526107ad600160ff816040862001541660038110156107ca575b14610d9d565b81528082526002604060018060a01b039220015416604051908152f35b6107d2610c6f565b6107a7565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161080257604052565b61080a6107d7565b604052565b6060810190811067ffffffffffffffff82111761080257604052565b6040810190811067ffffffffffffffff82111761080257604052565b90601f8019910116810190811067ffffffffffffffff82111761080257604052565b60209067ffffffffffffffff8111610883575b60051b0190565b61088b6107d7565b61087c565b503461000e5760208060031936011261000e576004359067ffffffffffffffff9081831161000e573660238401121561000e578260040135906108d282610869565b916040936108e285519485610847565b8184528284016024809360051b8801019236841161000e57808801915b8483106109155760008861091289610f97565b51f35b823584811161000e578901906060602319833603011261000e5788519061093b8261080f565b8383013561094881610491565b8252604492838101358984015260648101359087821161000e5701913660438401121561000e5784830135928784116109c2575b8b5190610992601f8601601f19168c0183610847565b8482523686868301011161000e578a8581979682976000940183860137830101528b8201528152019201916108ff565b6109ca6107d7565b61097c565b908082519081815260208091019281808460051b830101950193600080925b8584106109ff575050505050505090565b9091929394959685601f19918284820301865289519260018060a01b03845116825282840151838301526040809401516060809584015280518095840152865b858110610a6f575050928291600194601f60809389858286010152011601019901940194019295949391906109ee565b818101850151848201608001528a9401610a3f565b6020815260406020610aa08451838386015260608501906109cf565b93015191015290565b503461000e5760208060031936011261000e57600081604051610acb8161082b565b606081520152610adc60043561014b565b509060405190610aeb8261082b565b825492610af784610869565b610b046040519182610847565b848152600082815283812095908483015b828210610b3a5783875260018501548688015260405180610b368982610a84565b0390f35b600386600192610b498b6115a9565b815201980191019096610b15565b503461000e5760408060031936011261000e57602435600435610b7982610491565b60009281845283602052610ba0600160ff8184882001541660038110156107ca5714610d9d565b81845283602052610bb8610506828620543390610d7f565b81845260208490528084206001600160a01b03841693906002018415610c1f5780546001600160a01b0319166001600160a01b03909216919091179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b825162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b50634e487b7160e01b600052602160045260246000fd5b60031115610c9057565b610c98610c6f565b565b600160009081526020527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d9060ff16610cf481610c86565b60018103610d125750600201546001600160a01b0391821691161490565b80610d1e600292610c86565b14610d595760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60ff916003610d7a92019060018060a01b0316600052602052604060002090565b541690565b6000526000602052604060002060ff600182015416610cf481610c86565b15610da457565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b15610e0857565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b15610e6057565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b15610ec157565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b506040513d6000823e3d90fd5b9081602091031261000e575190565b6001546001600160a01b03168015610f92576020600491604051928380926329cb924d60e01b82525afa908115610f85575b600091610f6a575090565b610f82915060203d8111610383576103758183610847565b90565b610f8d610f11565b610f5f565b504290565b610fa361071933610c9a565b60035490610faf610f2d565b610fb76111d4565b5050610fc28361014b565b5060018281830155806000905b611143575b505050610fe08361154b565b91610fe9611888565b91610ff561023f61190b565b92833b1561000e576040516310a7e20160e01b81526004810186905260008160248183895af18015611136575b611123575b506001600160a01b0316803b1561000e576040516368ad8ae360e01b81526004810186905260248101929092526000908290604490829084905af18015611116575b611103575b50813b1561000e57604051638e0d3ca760e01b815260048101939093527f082d2a29e61e3d0508e5617570bed4c7c58ae73d4719b31052d8638812bc4c0c926110d8926000908290602490829084905af180156110f6575b6110dd575b506040519182918261153a565b0390a2565b806110ea6110f0926107ee565b80610397565b386110cb565b6110fe610f11565b6110c6565b806110ea611110926107ee565b3861106e565b61111e610f11565b611069565b806110ea611130926107ee565b38611027565b61113e610f11565b611022565b84518110156111cf578061117861117161023f6111636111a6958a611263565b51516001600160a01b031690565b1515611285565b60406111848288611263565b510151516111ac575b6111a161119a8288611263565b51856113f4565b611247565b81610fcf565b6111ca6111c56111bf611163848a611263565b3b151590565b6112d1565b61118d565b610fd4565b600354600160401b811015611223575b600181018060035581101561018657600360005260011b7fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b61122b6107d7565b6111e4565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114611257570190565b61125f611230565b0190565b6020918151811015611278575b60051b010190565b611280610134565b611270565b1561128c57565b60405162461bcd60e51b815260206004820152601e60248201527f5468652060746f6020616464726573732063616e6e6f742062652030783000006044820152606490fd5b156112d857565b60405162461bcd60e51b815260206004820152601d60248201527f454f412063616e277420616363657074207478207769746820646174610000006044820152606490fd5b805482101561133a575b6000526003602060002091020190600090565b611342610134565b611327565b50634e487b7160e01b600052600060045260246000fd5b90600182811c9216801561138e575b602083101461137857565b634e487b7160e01b600052602260045260246000fd5b91607f169161136d565b8181106113a3575050565b60008155600101611398565b9190601f81116113be57505050565b610c98926000526020600020906020601f840160051c830193106113ea575b601f0160051c0190611398565b90915081906113dd565b6114138154600160401b81101561152d575b600192838201815561131d565b611520575b825181546001600160a01b0319166001600160a01b0391909116178155604060026020928386015185820155019301519081519167ffffffffffffffff8311611513575b6114708361146a875461135e565b876113af565b81601f84116001146114a9575092829391839260009461149e575b50501b916000199060031b1c1916179055565b01519250388061148b565b919083601f1981166114c088600052602060002090565b946000905b888383106114f957505050106114e0575b505050811b019055565b015160001960f88460031b161c191690553880806114d6565b8587015188559096019594850194879350908101906114c5565b61151b6107d7565b61145c565b611528611347565b611418565b6115356107d7565b611406565b906020610f829281815201906109cf565b6000908061156d5750600360fc1b90505b60301c65020b236b4b7160d51b1790565b805b611579575061155c565b90600a908183066030810180911161159c575b60f81b9060081c1791048061156f565b6115a4611230565b61158c565b90604051916115b78361080f565b8260018060a01b0382541681526001600281840154936020948585015201906040519384926000928154916115eb8361135e565b8087529282811690811561165e5750600114611619575b5050505060409291611615910384610847565b0152565b60009081528381209695945091905b81831061164657509394509192509082010181611615604038611602565b86548884018501529586019587945091830191611628565b60ff191685880152505050151560051b830101905081611615604038611602565b1561168657565b60405162461bcd60e51b815260206004820152601c60248201527f50726576696f7573207478206e6f7420796574206578656375746564000000006044820152606490fd5b156116d257565b60405162461bcd60e51b8152602060048201526013602482015272151e08185b1c9958591e48195e1958dd5d1959606a1b6044820152606490fd5b1561171457565b60405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081dd85cc81c995a9958dd1959605a1b6044820152606490fd5b1561175857565b60405162461bcd60e51b815260206004820152601d60248201527f4d7573742073656e6420657861637420616d6f756e74206f66204554480000006044820152606490fd5b906117fb575b6002600091828155826001820155016117bc815461135e565b806117c657505050565b601f81116001146117d5575055565b818352602083206117f191601f0160051c810190600101611398565b8160208120915555565b611803611347565b6117a3565b1561180f57565b60405162461bcd60e51b8152602060048201526013602482015272151e08195e1958dd5d1a5bdb8819985a5b1959606a1b6044820152606490fd5b60001981019190821161185957565b610c98611230565b916000928392602083519301915af190565b9081602091031261000e5751610f8281610491565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa9081156118fe575b6000916118d257501690565b6118f3915060203d81116118f7575b6118eb8183610847565b810190611873565b1690565b503d6118e1565b611906610f11565b6118c6565b6002546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526001600160a01b03916020908290602490829086165afa9081156118fe576000916118d25750169056fea2646970667358221220fbcbb1cc69220b783860f89a2d306aedd4b63710eb0c3a1513d79e098635085164736f6c63430008100033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063013cf08b1461012b5780631ab76712146101225780631c39c38d1461011957806322f8e5661461011057806329cb924d14610107578063400e3949146100fe5780636be7658b146100f557806374d0a676146100ec5780637cdc1cb9146100e3578063aaa14ca3146100da578063ab3545e5146100d1578063c62fdef7146100c8578063c7f758a8146100bf5763d97c05be146100b757600080fd5b61000e610b57565b5061000e610aa9565b5061000e610890565b5061000e61076e565b5061000e6106ce565b5061000e610699565b5061000e610584565b5061000e6104a2565b5061000e610472565b5061000e61044e565b5061000e6103cc565b5061000e6103a2565b5061000e6101e8565b5061000e610193565b50634e487b7160e01b600052603260045260246000fd5b600354811015610186575b600360005260011b7fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b61018e610134565b610156565b503461000e57602036600319011261000e5760043560035481101561000e577fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c602091600360005260011b0154604051908152f35b50604036600319011261000e576004357ff758fc91e01b00ea6b4a6138756f7f28e021f9bf21db6dbf8c36c88eb737257a61032e60243561031e61031961022e8661014b565b50610282602061024b61023f611888565b6001600160a01b031690565b6102548a61154b565b6001850154604051636494078360e11b81526004810192909252602482015292839190829081906044820190565b03915afa90811561038a575b60009161035c575b506102dd6102ad6102a7878561131d565b506115a9565b9186158015610333575b6102c09061167f565b82516102d6906001600160a01b031615156116cb565b151561170d565b6103006102fa8660208401946102f586513414611751565b61131d565b9061179d565b80516040906001600160a01b0316925191015191611861565b611808565b6040519081529081906020820190565b0390a2005b506102c06103496103438961184a565b8661131d565b50546001600160a01b03161590506102b7565b61037d915060203d8111610383575b6103758183610847565b810190610f1e565b38610296565b503d61036b565b610392610f11565b61028e565b600091031261000e57565b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e576000602036600319011261044b5760015481906001600160a01b0316801561044857803b1561044857819060246040518094819363117c72b360e11b835260043560048401525af1801561043b575b61042c575b50604051f35b610435906107ee565b38610426565b610443610f11565b610421565b50fd5b80fd5b503461000e57600036600319011261000e57602061046a610f2d565b604051908152f35b503461000e57600036600319011261000e576020600354604051908152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e576024356004356104c382610491565b600091818352826020526104ed600260ff6001604087200154166003811015610577575b14610e59565b8183528260205261050b61050660408520543390610d7f565b610e01565b8183528260205261054181600360408620016001600160a01b03909116600090815260209190915260409020805460ff19169055565b6040519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b61057f610c6f565b6104e7565b503461000e5760408060031936011261000e576024356004356105a682610491565b600092818452836020526105ce600260ff600184882001541660038110156105775714610e59565b818452836020526105e6610506828620543390610d7f565b81845260208490528084206001600160a01b03841693906003018415610655576001600160a01b03909116600090815260209190915260409020805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b825162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b503461000e57604036600319011261000e5760206106c46024356106bc81610491565b600435610d7f565b6040519015158152f35b503461000e57602036600319011261000e576004356000908082528160205261070c600260ff60016040862001541660038110156105775714610e59565b61071e6107193383610d7f565b610eba565b808252602082815260408084203360008181526003909201909352819020805460ff19169055519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e57602036600319011261000e5760206004356000908082528183526107ad600160ff816040862001541660038110156107ca575b14610d9d565b81528082526002604060018060a01b039220015416604051908152f35b6107d2610c6f565b6107a7565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161080257604052565b61080a6107d7565b604052565b6060810190811067ffffffffffffffff82111761080257604052565b6040810190811067ffffffffffffffff82111761080257604052565b90601f8019910116810190811067ffffffffffffffff82111761080257604052565b60209067ffffffffffffffff8111610883575b60051b0190565b61088b6107d7565b61087c565b503461000e5760208060031936011261000e576004359067ffffffffffffffff9081831161000e573660238401121561000e578260040135906108d282610869565b916040936108e285519485610847565b8184528284016024809360051b8801019236841161000e57808801915b8483106109155760008861091289610f97565b51f35b823584811161000e578901906060602319833603011261000e5788519061093b8261080f565b8383013561094881610491565b8252604492838101358984015260648101359087821161000e5701913660438401121561000e5784830135928784116109c2575b8b5190610992601f8601601f19168c0183610847565b8482523686868301011161000e578a8581979682976000940183860137830101528b8201528152019201916108ff565b6109ca6107d7565b61097c565b908082519081815260208091019281808460051b830101950193600080925b8584106109ff575050505050505090565b9091929394959685601f19918284820301865289519260018060a01b03845116825282840151838301526040809401516060809584015280518095840152865b858110610a6f575050928291600194601f60809389858286010152011601019901940194019295949391906109ee565b818101850151848201608001528a9401610a3f565b6020815260406020610aa08451838386015260608501906109cf565b93015191015290565b503461000e5760208060031936011261000e57600081604051610acb8161082b565b606081520152610adc60043561014b565b509060405190610aeb8261082b565b825492610af784610869565b610b046040519182610847565b848152600082815283812095908483015b828210610b3a5783875260018501548688015260405180610b368982610a84565b0390f35b600386600192610b498b6115a9565b815201980191019096610b15565b503461000e5760408060031936011261000e57602435600435610b7982610491565b60009281845283602052610ba0600160ff8184882001541660038110156107ca5714610d9d565b81845283602052610bb8610506828620543390610d7f565b81845260208490528084206001600160a01b03841693906002018415610c1f5780546001600160a01b0319166001600160a01b03909216919091179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b825162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b50634e487b7160e01b600052602160045260246000fd5b60031115610c9057565b610c98610c6f565b565b600160009081526020527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d9060ff16610cf481610c86565b60018103610d125750600201546001600160a01b0391821691161490565b80610d1e600292610c86565b14610d595760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60ff916003610d7a92019060018060a01b0316600052602052604060002090565b541690565b6000526000602052604060002060ff600182015416610cf481610c86565b15610da457565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b15610e0857565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b15610e6057565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b15610ec157565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b506040513d6000823e3d90fd5b9081602091031261000e575190565b6001546001600160a01b03168015610f92576020600491604051928380926329cb924d60e01b82525afa908115610f85575b600091610f6a575090565b610f82915060203d8111610383576103758183610847565b90565b610f8d610f11565b610f5f565b504290565b610fa361071933610c9a565b60035490610faf610f2d565b610fb76111d4565b5050610fc28361014b565b5060018281830155806000905b611143575b505050610fe08361154b565b91610fe9611888565b91610ff561023f61190b565b92833b1561000e576040516310a7e20160e01b81526004810186905260008160248183895af18015611136575b611123575b506001600160a01b0316803b1561000e576040516368ad8ae360e01b81526004810186905260248101929092526000908290604490829084905af18015611116575b611103575b50813b1561000e57604051638e0d3ca760e01b815260048101939093527f082d2a29e61e3d0508e5617570bed4c7c58ae73d4719b31052d8638812bc4c0c926110d8926000908290602490829084905af180156110f6575b6110dd575b506040519182918261153a565b0390a2565b806110ea6110f0926107ee565b80610397565b386110cb565b6110fe610f11565b6110c6565b806110ea611110926107ee565b3861106e565b61111e610f11565b611069565b806110ea611130926107ee565b38611027565b61113e610f11565b611022565b84518110156111cf578061117861117161023f6111636111a6958a611263565b51516001600160a01b031690565b1515611285565b60406111848288611263565b510151516111ac575b6111a161119a8288611263565b51856113f4565b611247565b81610fcf565b6111ca6111c56111bf611163848a611263565b3b151590565b6112d1565b61118d565b610fd4565b600354600160401b811015611223575b600181018060035581101561018657600360005260011b7fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0190600090565b61122b6107d7565b6111e4565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114611257570190565b61125f611230565b0190565b6020918151811015611278575b60051b010190565b611280610134565b611270565b1561128c57565b60405162461bcd60e51b815260206004820152601e60248201527f5468652060746f6020616464726573732063616e6e6f742062652030783000006044820152606490fd5b156112d857565b60405162461bcd60e51b815260206004820152601d60248201527f454f412063616e277420616363657074207478207769746820646174610000006044820152606490fd5b805482101561133a575b6000526003602060002091020190600090565b611342610134565b611327565b50634e487b7160e01b600052600060045260246000fd5b90600182811c9216801561138e575b602083101461137857565b634e487b7160e01b600052602260045260246000fd5b91607f169161136d565b8181106113a3575050565b60008155600101611398565b9190601f81116113be57505050565b610c98926000526020600020906020601f840160051c830193106113ea575b601f0160051c0190611398565b90915081906113dd565b6114138154600160401b81101561152d575b600192838201815561131d565b611520575b825181546001600160a01b0319166001600160a01b0391909116178155604060026020928386015185820155019301519081519167ffffffffffffffff8311611513575b6114708361146a875461135e565b876113af565b81601f84116001146114a9575092829391839260009461149e575b50501b916000199060031b1c1916179055565b01519250388061148b565b919083601f1981166114c088600052602060002090565b946000905b888383106114f957505050106114e0575b505050811b019055565b015160001960f88460031b161c191690553880806114d6565b8587015188559096019594850194879350908101906114c5565b61151b6107d7565b61145c565b611528611347565b611418565b6115356107d7565b611406565b906020610f829281815201906109cf565b6000908061156d5750600360fc1b90505b60301c65020b236b4b7160d51b1790565b805b611579575061155c565b90600a908183066030810180911161159c575b60f81b9060081c1791048061156f565b6115a4611230565b61158c565b90604051916115b78361080f565b8260018060a01b0382541681526001600281840154936020948585015201906040519384926000928154916115eb8361135e565b8087529282811690811561165e5750600114611619575b5050505060409291611615910384610847565b0152565b60009081528381209695945091905b81831061164657509394509192509082010181611615604038611602565b86548884018501529586019587945091830191611628565b60ff191685880152505050151560051b830101905081611615604038611602565b1561168657565b60405162461bcd60e51b815260206004820152601c60248201527f50726576696f7573207478206e6f7420796574206578656375746564000000006044820152606490fd5b156116d257565b60405162461bcd60e51b8152602060048201526013602482015272151e08185b1c9958591e48195e1958dd5d1959606a1b6044820152606490fd5b1561171457565b60405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081dd85cc81c995a9958dd1959605a1b6044820152606490fd5b1561175857565b60405162461bcd60e51b815260206004820152601d60248201527f4d7573742073656e6420657861637420616d6f756e74206f66204554480000006044820152606490fd5b906117fb575b6002600091828155826001820155016117bc815461135e565b806117c657505050565b601f81116001146117d5575055565b818352602083206117f191601f0160051c810190600101611398565b8160208120915555565b611803611347565b6117a3565b1561180f57565b60405162461bcd60e51b8152602060048201526013602482015272151e08195e1958dd5d1a5bdb8819985a5b1959606a1b6044820152606490fd5b60001981019190821161185957565b610c98611230565b916000928392602083519301915af190565b9081602091031261000e5751610f8281610491565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa9081156118fe575b6000916118d257501690565b6118f3915060203d81116118f7575b6118eb8183610847565b810190611873565b1690565b503d6118e1565b611906610f11565b6118c6565b6002546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526001600160a01b03916020908290602490829086165afa9081156118fe576000916118d25750169056fea2646970667358221220fbcbb1cc69220b783860f89a2d306aedd4b63710eb0c3a1513d79e098635085164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "newMember": "the new SharedRole member.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "constructor": {
        "params": {
          "_finderAddress": "keeps track of all contracts within the system based on their interfaceName.",
          "_startingId": "the initial proposal id that the contract will begin incrementing from.",
          "_timerAddress": "Contract that stores the current time in a testing environment. Must be set to 0x0 for production environments that use live time."
        }
      },
      "executeProposal(uint256,uint256)": {
        "details": "This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.",
        "params": {
          "id": "unique id for the executed proposal.",
          "transactionIndex": "unique transaction index for the executed proposal."
        }
      },
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "getMember(uint256)": {
        "details": "Reverts if `roleId` does not represent an initialized, exclusive role.",
        "params": {
          "roleId": "the ExclusiveRole membership to check."
        },
        "returns": {
          "_0": "the address of the current ExclusiveRole member."
        }
      },
      "getProposal(uint256)": {
        "details": "after a proposal is executed, its data will be zeroed out, except for the request time.",
        "params": {
          "id": "uniquely identify the identity of the proposal."
        },
        "returns": {
          "_0": "proposal struct containing transactions[] and requestTime."
        }
      },
      "holdsRole(uint256,address)": {
        "details": "Reverts if roleId does not correspond to an initialized role.",
        "params": {
          "memberToCheck": "the address to check.",
          "roleId": "the Role to check."
        },
        "returns": {
          "_0": "True if `memberToCheck` is a member of `roleId`."
        }
      },
      "numProposals()": {
        "returns": {
          "_0": "uint256 representing the current number of proposals."
        }
      },
      "propose((address,uint256,bytes)[])": {
        "details": "You can create the data portion of each transaction by doing the following: ``` const truffleContractInstance = await TruffleContract.deployed() const data = truffleContractInstance.methods.methodToCall(arg1, arg2).encodeABI() ``` Note: this method must be public because of a solidity limitation that disallows structs arrays to be passed to external functions.",
        "params": {
          "transactions": "list of transactions that are being proposed."
        }
      },
      "removeMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "memberToRemove": "the current SharedRole member to remove.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "renounceMembership(uint256)": {
        "details": "Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.",
        "params": {
          "roleId": "the SharedRole membership to modify."
        }
      },
      "resetMember(uint256,address)": {
        "details": "Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.",
        "params": {
          "newMember": "the new ExclusiveRole member.",
          "roleId": "the ExclusiveRole membership to modify."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      }
    },
    "title": "Takes proposals for certain governance actions and allows UMA token holders to vote on them.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(uint256,address)": {
        "notice": "Adds `newMember` to the shared role, `roleId`."
      },
      "constructor": {
        "notice": "Construct the Governor contract."
      },
      "executeProposal(uint256,uint256)": {
        "notice": "Executes a proposed governance action that has been approved by voters."
      },
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "getMember(uint256)": {
        "notice": "Gets the current holder of the exclusive role, `roleId`."
      },
      "getProposal(uint256)": {
        "notice": "Gets the proposal data for a particular id."
      },
      "holdsRole(uint256,address)": {
        "notice": "Whether `memberToCheck` is a member of roleId."
      },
      "numProposals()": {
        "notice": "Gets the total number of proposals (includes executed and non-executed)."
      },
      "propose((address,uint256,bytes)[])": {
        "notice": "Proposes a new governance action. Can only be called by the holder of the Proposer role."
      },
      "removeMember(uint256,address)": {
        "notice": "Removes `memberToRemove` from the shared role, `roleId`."
      },
      "renounceMembership(uint256)": {
        "notice": "Removes caller from the role, `roleId`."
      },
      "resetMember(uint256,address)": {
        "notice": "Changes the exclusive role holder of `roleId` to `newMember`."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16654,
        "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Role)16649_storage)"
      },
      {
        "astId": 17751,
        "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
        "label": "timerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 26469,
        "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
        "label": "finder",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FinderInterface)36753"
      },
      {
        "astId": 26473,
        "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
        "label": "proposals",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(Proposal)26466_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)26466_storage)dyn_storage": {
        "base": "t_struct(Proposal)26466_storage",
        "encoding": "dynamic_array",
        "label": "struct Governor.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transaction)26459_storage)dyn_storage": {
        "base": "t_struct(Transaction)26459_storage",
        "encoding": "dynamic_array",
        "label": "struct Governor.Transaction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_enum(RoleType)16637": {
        "encoding": "inplace",
        "label": "enum MultiRole.RoleType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Role)16649_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiRole.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)16649_storage"
      },
      "t_struct(Proposal)26466_storage": {
        "encoding": "inplace",
        "label": "struct Governor.Proposal",
        "members": [
          {
            "astId": 26463,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "transactions",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transaction)26459_storage)dyn_storage"
          },
          {
            "astId": 26465,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "requestTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Role)16649_storage": {
        "encoding": "inplace",
        "label": "struct MultiRole.Role",
        "members": [
          {
            "astId": 16639,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "managingRole",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16642,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "roleType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(RoleType)16637"
          },
          {
            "astId": 16645,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "exclusiveRoleMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(RoleMembership)16460_storage"
          },
          {
            "astId": 16648,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "sharedRoleMembership",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RoleMembership)16533_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleMembership)16460_storage": {
        "encoding": "inplace",
        "label": "struct Exclusive.RoleMembership",
        "members": [
          {
            "astId": 16459,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "member",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleMembership)16533_storage": {
        "encoding": "inplace",
        "label": "struct Shared.RoleMembership",
        "members": [
          {
            "astId": 16532,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)26459_storage": {
        "encoding": "inplace",
        "label": "struct Governor.Transaction",
        "members": [
          {
            "astId": 26454,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "to",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26456,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26458,
            "contract": "contracts/data-verification-mechanism/implementation/Governor.sol:Governor",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}