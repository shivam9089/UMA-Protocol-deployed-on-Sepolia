{
  "address": "0x0894A36fde2B7C0b840d5282bBB566635dd79e8c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "DisputePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "ProposePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "RequestPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "Settle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ancillaryBytesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLiveness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "disputePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "disputePriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum OptimisticOracleInterface.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "hasPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        }
      ],
      "name": "proposePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        }
      ],
      "name": "proposePriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "callbackOnPriceProposed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceDisputed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceSettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "customLiveness",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
          "name": "requestSettings",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        }
      ],
      "name": "requestAndProposePriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "callbackOnPriceProposed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceDisputed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceSettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "customLiveness",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
          "name": "requestSettings",
          "type": "tuple"
        }
      ],
      "name": "requestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SkinnyOptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct SkinnyOptimisticOracleV2Interface.Request",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "resolvedPrice",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "stampAncillaryData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x485a06d37782b1907699a61dd97e22b5162d87a2507f68c67d9d2b9027c0e17e",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x0894A36fde2B7C0b840d5282bBB566635dd79e8c",
    "transactionIndex": 80,
    "gasUsed": "2411880",
    "logsBloom": "0x
    "blockHash": "0x6169a29fa1202dbe9bfd8f927e3048ac8d47c03a014284db552150232def5038",
    "transactionHash": "0x485a06d37782b1907699a61dd97e22b5162d87a2507f68c67d9d2b9027c0e17e",
    "logs": [],
    "blockNumber": 6161835,
    "cumulativeGasUsed": "21592963",
    "status": 1,
    "byzantium": true
  },
  "args": [
    7200,
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e",
    "0xf8815ce169E5450aa6908e76E1B970dBcEC11550"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"DisputePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"ProposePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"RequestPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLiveness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"disputePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"disputePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum OptimisticOracleInterface.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"requestAndProposePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"}],\"name\":\"requestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct SkinnyOptimisticOracleV2Interface.Request\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"stampAncillaryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_finderAddress\":\"finder to use to get addresses of DVM contracts.\",\"_liveness\":\"default liveness applied to each price request.\",\"_timerAddress\":\"address of the timer contract. Should be 0x0 in prod.\"}},\"disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"request\":\"price request parameters whose hash must match the request that the caller wants to             dispute.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).\"}},\"disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,address)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"disputer\":\"address to set as the disputer.\",\"identifier\":\"price identifier to identify the existing request.\",\"request\":\"price request parameters whose hash must match the request that the caller wants to              dispute.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).\"}},\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"getState(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"request\":\"price request parameters.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"the State.\"}},\"hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"request\":\"price request parameters. The hash of these parameters must match with the request hash that is associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method will revert.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"boolean indicating true if price exists and false if not.\"}},\"proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"request\":\"price request parameters whose hash must match the request that the caller wants to propose a price for.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"proposer\":\"address to set as the proposer.\",\"request\":\"price request parameters whose hash must match the request that the caller wants to propose a price for.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256),address,int256)\":{\"details\":\"The caller is the requester, but the proposer can be customized.\",\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"currency\":\"ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"proposer\":\"address to set as the proposer.\",\"requestSettings\":\"settings for the request.\",\"reward\":\"reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"requestPrice(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256))\":{\"params\":{\"ancillaryData\":\"ancillary data representing additional args being passed with the price request.\",\"currency\":\"ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\",\"identifier\":\"price identifier being requested.\",\"requestSettings\":\"settings for the request.\",\"reward\":\"reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.\",\"timestamp\":\"timestamp of the price being requested.\"},\"returns\":{\"totalBond\":\"default bond + final fee that the proposer and disputer will be required to pay.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}},\"settle(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"request\":\"price request parameters whose hash must match the request that the caller wants to              settle.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"payout\":\"the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.\",\"resolvedPrice\":\"the price that the request settled to.\"}},\"stampAncillaryData(bytes,address)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"requester\":\"sender of the initial price request.\"},\"returns\":{\"_0\":\"the stamped ancillary bytes.\"}}},\"title\":\"Optimistic Oracle with a different interface and fewer features that emphasizes gas cost reductions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"notice\":\"Disputes a price request with an active proposal where caller is the disputer.\"},\"disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,address)\":{\"notice\":\"Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\"},\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"getState(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"notice\":\"Computes the current state of a price request. See the State enum for more details.\"},\"hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"notice\":\"Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\"},\"proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),int256)\":{\"notice\":\"Proposes a price value where caller is the proposer.\"},\"proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,int256)\":{\"notice\":\"Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\"},\"requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256),address,int256)\":{\"notice\":\"Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\"},\"requestPrice(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256))\":{\"notice\":\"Requests a new price.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"},\"settle(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))\":{\"notice\":\"Attempts to settle an outstanding price request. Will revert if it isn't settleable.\"},\"stampAncillaryData(bytes,address)\":{\"notice\":\"Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\"}},\"notice\":\"Pre-DVM escalation contract that allows faster settlement.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol\":\"SkinnyOptimisticOracleV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/AddressWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/AddressWhitelistInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title A contract to track a whitelist of addresses.\\r\\n */\\r\\ncontract AddressWhitelist is AddressWhitelistInterface, Ownable, Lockable {\\r\\n    enum Status { None, In, Out }\\r\\n    mapping(address => Status) public whitelist;\\r\\n\\r\\n    address[] public whitelistIndices;\\r\\n\\r\\n    event AddedToWhitelist(address indexed addedAddress);\\r\\n    event RemovedFromWhitelist(address indexed removedAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an address to the whitelist.\\r\\n     * @param newElement the new address to add.\\r\\n     */\\r\\n    function addToWhitelist(address newElement) external override nonReentrant() onlyOwner {\\r\\n        // Ignore if address is already included\\r\\n        if (whitelist[newElement] == Status.In) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Only append new addresses to the array, never a duplicate\\r\\n        if (whitelist[newElement] == Status.None) {\\r\\n            whitelistIndices.push(newElement);\\r\\n        }\\r\\n\\r\\n        whitelist[newElement] = Status.In;\\r\\n\\r\\n        emit AddedToWhitelist(newElement);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes an address from the whitelist.\\r\\n     * @param elementToRemove the existing address to remove.\\r\\n     */\\r\\n    function removeFromWhitelist(address elementToRemove) external override nonReentrant() onlyOwner {\\r\\n        if (whitelist[elementToRemove] != Status.Out) {\\r\\n            whitelist[elementToRemove] = Status.Out;\\r\\n            emit RemovedFromWhitelist(elementToRemove);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an address is on the whitelist.\\r\\n     * @param elementToCheck the address to check.\\r\\n     * @return True if `elementToCheck` is on the whitelist, or False.\\r\\n     */\\r\\n    function isOnWhitelist(address elementToCheck) external view override nonReentrantView() returns (bool) {\\r\\n        return whitelist[elementToCheck] == Status.In;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets all addresses that are currently included in the whitelist.\\r\\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\\r\\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\\r\\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\\r\\n     * the empty index.\\r\\n     * @return activeWhitelist the list of addresses on the whitelist.\\r\\n     */\\r\\n    function getWhitelist() external view override nonReentrantView() returns (address[] memory activeWhitelist) {\\r\\n        // Determine size of whitelist first\\r\\n        uint256 activeCount = 0;\\r\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\r\\n            if (whitelist[whitelistIndices[i]] == Status.In) {\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Populate whitelist\\r\\n        activeWhitelist = new address[](activeCount);\\r\\n        activeCount = 0;\\r\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\r\\n            address addr = whitelistIndices[i];\\r\\n            if (whitelist[addr] == Status.In) {\\r\\n                activeWhitelist[activeCount] = addr;\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47dce8af3cc6ffa2b7432cb97246e8c5841d3261572d4af3f120d7bee0fa896a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/AncillaryData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Library for encoding and decoding ancillary data for DVM price requests.\\r\\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\\r\\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\\r\\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\\r\\n * smart contracts. More details on UMA's ancillary data guidelines below:\\r\\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\\r\\n */\\r\\nlibrary AncillaryData {\\r\\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\\r\\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\\r\\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\\r\\n        unchecked {\\r\\n            uint256 x = uint256(bytesIn);\\r\\n\\r\\n            // Nibble interleave\\r\\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\r\\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\r\\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\r\\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\r\\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\r\\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\r\\n\\r\\n            // Hex encode\\r\\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\\r\\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\\r\\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\\r\\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\\r\\n\\r\\n            // Return the result.\\r\\n            return bytes32(x);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\\r\\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\\r\\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\\r\\n     * @param bytesIn bytes32 to encode.\\r\\n     * @return utf8 encoded bytes32.\\r\\n     */\\r\\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\\r\\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\\r\\n     * @dev Will return address in all lower case characters and without the leading 0x.\\r\\n     * @param x address to encode.\\r\\n     * @return utf8 encoded address bytes.\\r\\n     */\\r\\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\\r\\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\\r\\n     */\\r\\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\\r\\n        if (x == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = x;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (x != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            x /= 10;\\r\\n        }\\r\\n        return bstr;\\r\\n    }\\r\\n\\r\\n    function appendKeyValueBytes32(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        bytes32 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is an address that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueAddress(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        address value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueUint(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        uint256 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper method that returns the left hand side of a \\\"key:value\\\" pair plus the colon \\\":\\\" and a leading\\r\\n     * comma \\\",\\\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\\r\\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\\r\\n     */\\r\\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\\r\\n        if (currentAncillaryData.length > 0) {\\r\\n            return abi.encodePacked(\\\",\\\", key, \\\":\\\");\\r\\n        } else {\\r\\n            return abi.encodePacked(key, \\\":\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe2300c69cbaca3ca305dc9445e6f791ef26315d1af9cf4f8021757fd1e2fd07\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AddressWhitelistInterface {\\r\\n    function addToWhitelist(address newElement) external;\\r\\n\\r\\n    function removeFromWhitelist(address newElement) external;\\r\\n\\r\\n    function isOnWhitelist(address newElement) external view returns (bool);\\r\\n\\r\\n    function getWhitelist() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x72c9c89bc8aa33b9bb4b5ce8d4fe365f60b08cb5179f240545b8b3f9ff1f61a5\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/StoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\\r\\n */\\r\\ninterface StoreInterface {\\r\\n    /**\\r\\n     * @notice Pays Oracle fees in ETH to the store.\\r\\n     * @dev To be used by contracts whose margin currency is ETH.\\r\\n     */\\r\\n    function payOracleFees() external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\\r\\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\\r\\n     * @param erc20Address address of the ERC20 token used to pay the fee.\\r\\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\\r\\n     */\\r\\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\\r\\n     * @param startTime defines the beginning time from which the fee is paid.\\r\\n     * @param endTime end time until which the fee is paid.\\r\\n     * @param pfc \\\"profit from corruption\\\", or the maximum amount of margin currency that a\\r\\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\\r\\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\\r\\n     * @return latePenalty for paying the fee after the deadline.\\r\\n     */\\r\\n    function computeRegularFee(\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        FixedPoint.Unsigned calldata pfc\\r\\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\\r\\n     * @param currency token used to pay the final fee.\\r\\n     * @return finalFee amount due.\\r\\n     */\\r\\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe3b9671f228acd1025324f8460a7e007cc364f2d5896112b1c264aacfc2368b4\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/interfaces/StoreInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\\\";\\r\\nimport \\\"../interfaces/OptimisticOracleInterface.sol\\\";\\r\\nimport \\\"../interfaces/SkinnyOptimisticOracleV2Interface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/implementation/AncillaryData.sol\\\";\\r\\nimport \\\"../../common/implementation/AddressWhitelist.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Optimistic Requester.\\r\\n * @notice Optional interface that requesters can implement to receive callbacks.\\r\\n * @dev This contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\r\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\r\\n * money themselves).\\r\\n */\\r\\ninterface OptimisticRequesterV2 {\\r\\n    /**\\r\\n     * @notice Callback for proposals.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request request params after proposal.\\r\\n     */\\r\\n    function priceProposed(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        SkinnyOptimisticOracleV2Interface.Request memory request\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for disputes.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request request params after dispute.\\r\\n     */\\r\\n    function priceDisputed(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        SkinnyOptimisticOracleV2Interface.Request memory request\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for settlement.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request request params after settlement.\\r\\n     */\\r\\n    function priceSettled(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        SkinnyOptimisticOracleV2Interface.Request memory request\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Optimistic Oracle with a different interface and fewer features that emphasizes gas cost reductions.\\r\\n * @notice Pre-DVM escalation contract that allows faster settlement.\\r\\n */\\r\\ncontract SkinnyOptimisticOracleV2 is SkinnyOptimisticOracleV2Interface, Testable, Lockable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    event RequestPrice(\\r\\n        address indexed requester,\\r\\n        bytes32 indexed identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        Request request\\r\\n    );\\r\\n    event ProposePrice(\\r\\n        address indexed requester,\\r\\n        bytes32 indexed identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        Request request\\r\\n    );\\r\\n    event DisputePrice(\\r\\n        address indexed requester,\\r\\n        bytes32 indexed identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        Request request\\r\\n    );\\r\\n    event Settle(\\r\\n        address indexed requester,\\r\\n        bytes32 indexed identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        Request request\\r\\n    );\\r\\n\\r\\n    // Maps hash of unique request params {identifier, timestamp, ancillary data} to customizable variables such as\\r\\n    // reward and bond amounts.\\r\\n    mapping(bytes32 => bytes32) public requests;\\r\\n\\r\\n    // Finder to provide addresses for DVM contracts.\\r\\n    FinderInterface public finder;\\r\\n\\r\\n    // Default liveness value for all price requests.\\r\\n    uint256 public defaultLiveness;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     * @param _liveness default liveness applied to each price request.\\r\\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\\r\\n     * @param _timerAddress address of the timer contract. Should be 0x0 in prod.\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _liveness,\\r\\n        address _finderAddress,\\r\\n        address _timerAddress\\r\\n    ) Testable(_timerAddress) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n        _validateLiveness(_liveness);\\r\\n        defaultLiveness = _liveness;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @param requestSettings settings for the request.\\r\\n     * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward,\\r\\n        RequestSettings memory requestSettings\\r\\n    ) external override nonReentrant() returns (uint256 totalBond) {\\r\\n        bytes32 requestId = _getId(msg.sender, identifier, timestamp, ancillaryData);\\r\\n        require(requests[requestId] == bytes32(0), \\\"Request already initialized\\\");\\r\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \\\"Unsupported identifier\\\");\\r\\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \\\"Unsupported currency\\\");\\r\\n        require(timestamp <= getCurrentTime(), \\\"Timestamp in future\\\");\\r\\n        require(\\r\\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\\r\\n            \\\"Ancillary Data too long\\\"\\r\\n        );\\r\\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\\r\\n\\r\\n        // Associate new request with ID\\r\\n        Request memory request;\\r\\n        request.currency = currency;\\r\\n        request.reward = reward;\\r\\n        request.finalFee = finalFee;\\r\\n        request.requestSettings = requestSettings;\\r\\n        request.requestSettings.bond = requestSettings.bond != 0 ? requestSettings.bond : finalFee;\\r\\n        _storeRequestHash(requestId, request);\\r\\n\\r\\n        if (reward > 0) currency.safeTransferFrom(msg.sender, address(this), reward);\\r\\n\\r\\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, request);\\r\\n\\r\\n        return request.requestSettings.bond.add(finalFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * propose a price for.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request,\\r\\n        address proposer,\\r\\n        int256 proposedPrice\\r\\n    ) public override nonReentrant() returns (uint256 totalBond) {\\r\\n        require(proposer != address(0), \\\"Proposer address must be non 0\\\");\\r\\n        require(\\r\\n            _getState(requester, identifier, timestamp, ancillaryData, request) ==\\r\\n                OptimisticOracleInterface.State.Requested,\\r\\n            \\\"Must be requested\\\"\\r\\n        );\\r\\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\\r\\n        _validateRequestHash(requestId, request);\\r\\n\\r\\n        // Associate newly proposed request params with ID\\r\\n        Request memory proposedRequest =\\r\\n            Request({\\r\\n                proposer: proposer, // Modified\\r\\n                disputer: request.disputer,\\r\\n                currency: request.currency,\\r\\n                settled: request.settled,\\r\\n                proposedPrice: proposedPrice, // Modified\\r\\n                resolvedPrice: request.resolvedPrice,\\r\\n                expirationTime: getCurrentTime().add(\\r\\n                    request.requestSettings.customLiveness != 0\\r\\n                        ? request.requestSettings.customLiveness\\r\\n                        : defaultLiveness\\r\\n                ), // Modified\\r\\n                reward: request.reward,\\r\\n                finalFee: request.finalFee,\\r\\n                requestSettings: request.requestSettings\\r\\n            });\\r\\n        _storeRequestHash(requestId, proposedRequest);\\r\\n\\r\\n        totalBond = request.requestSettings.bond.add(request.finalFee);\\r\\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\\r\\n\\r\\n        emit ProposePrice(requester, identifier, timestamp, ancillaryData, proposedRequest);\\r\\n\\r\\n        // Callback.\\r\\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceProposed)\\r\\n            OptimisticRequesterV2(requester).priceProposed(identifier, timestamp, ancillaryData, proposedRequest);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value where caller is the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * propose a price for.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request,\\r\\n        int256 proposedPrice\\r\\n    ) external override returns (uint256 totalBond) {\\r\\n        // Note: re-entrancy guard is done in the inner call.\\r\\n        return proposePriceFor(requester, identifier, timestamp, ancillaryData, request, msg.sender, proposedPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\\r\\n     * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\\r\\n     * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @dev The caller is the requester, but the proposer can be customized.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @param requestSettings settings for the request.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function requestAndProposePriceFor(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward,\\r\\n        RequestSettings memory requestSettings,\\r\\n        address proposer,\\r\\n        int256 proposedPrice\\r\\n    ) external override nonReentrant() returns (uint256 totalBond) {\\r\\n        bytes32 requestId = _getId(msg.sender, identifier, timestamp, ancillaryData);\\r\\n        require(requests[requestId] == bytes32(0), \\\"Request already initialized\\\");\\r\\n        require(proposer != address(0), \\\"proposer address must be non 0\\\");\\r\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \\\"Unsupported identifier\\\");\\r\\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \\\"Unsupported currency\\\");\\r\\n        require(timestamp <= getCurrentTime(), \\\"Timestamp in future\\\");\\r\\n        require(\\r\\n            _stampAncillaryData(ancillaryData, msg.sender).length <= ancillaryBytesLimit,\\r\\n            \\\"Ancillary Data too long\\\"\\r\\n        );\\r\\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\\r\\n\\r\\n        // Associate new request with ID\\r\\n        Request memory request;\\r\\n        request.currency = currency;\\r\\n        request.reward = reward;\\r\\n        request.finalFee = finalFee;\\r\\n        request.requestSettings = requestSettings;\\r\\n        request.requestSettings.bond = requestSettings.bond != 0 ? requestSettings.bond : finalFee;\\r\\n        request.proposer = proposer;\\r\\n        request.proposedPrice = proposedPrice;\\r\\n        request.expirationTime = getCurrentTime().add(\\r\\n            requestSettings.customLiveness != 0 ? requestSettings.customLiveness : defaultLiveness\\r\\n        );\\r\\n        _storeRequestHash(requestId, request);\\r\\n\\r\\n        // Pull reward from requester, who is the caller.\\r\\n        if (reward > 0) currency.safeTransferFrom(msg.sender, address(this), reward);\\r\\n        // Pull proposal bond from caller.\\r\\n        totalBond = request.requestSettings.bond.add(request.finalFee);\\r\\n        if (totalBond > 0) currency.safeTransferFrom(msg.sender, address(this), totalBond);\\r\\n\\r\\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, request);\\r\\n        emit ProposePrice(msg.sender, identifier, timestamp, ancillaryData, request);\\r\\n\\r\\n        // Callback.\\r\\n        if (address(msg.sender).isContract() && requestSettings.callbackOnPriceProposed)\\r\\n            OptimisticRequesterV2(msg.sender).priceProposed(identifier, timestamp, ancillaryData, request);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     *              dispute.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request,\\r\\n        address disputer,\\r\\n        address requester\\r\\n    ) public override nonReentrant() returns (uint256 totalBond) {\\r\\n        require(disputer != address(0), \\\"disputer address must be non 0\\\");\\r\\n        require(\\r\\n            _getState(requester, identifier, timestamp, ancillaryData, request) ==\\r\\n                OptimisticOracleInterface.State.Proposed,\\r\\n            \\\"Must be proposed\\\"\\r\\n        );\\r\\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\\r\\n        _validateRequestHash(requestId, request);\\r\\n\\r\\n        // Associate newly disputed request params with ID\\r\\n        Request memory disputedRequest =\\r\\n            Request({\\r\\n                proposer: request.proposer,\\r\\n                disputer: disputer, // Modified\\r\\n                currency: request.currency,\\r\\n                settled: request.settled,\\r\\n                proposedPrice: request.proposedPrice,\\r\\n                resolvedPrice: request.resolvedPrice,\\r\\n                expirationTime: request.expirationTime,\\r\\n                reward: request.reward,\\r\\n                finalFee: request.finalFee,\\r\\n                requestSettings: request.requestSettings\\r\\n            });\\r\\n        _storeRequestHash(requestId, disputedRequest);\\r\\n\\r\\n        totalBond = request.requestSettings.bond.add(request.finalFee);\\r\\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\\r\\n\\r\\n        StoreInterface store = _getStore();\\r\\n\\r\\n        // Avoids stack too deep compilation error.\\r\\n        {\\r\\n            // Along with the final fee, \\\"burn\\\" part of the loser's bond to ensure that a larger bond always makes it\\r\\n            // proportionally more expensive to delay the resolution even if the proposer and disputer are the same\\r\\n            // party.\\r\\n            uint256 burnedBond = _computeBurnedBond(disputedRequest);\\r\\n\\r\\n            // The total fee is the burned bond and the final fee added together.\\r\\n            uint256 totalFee = request.finalFee.add(burnedBond);\\r\\n\\r\\n            if (totalFee > 0) {\\r\\n                request.currency.safeIncreaseAllowance(address(store), totalFee);\\r\\n                _getStore().payOracleFeesErc20(address(request.currency), FixedPoint.Unsigned(totalFee));\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _getOracle().requestPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\\r\\n\\r\\n        emit DisputePrice(requester, identifier, timestamp, ancillaryData, disputedRequest);\\r\\n\\r\\n        // Callback.\\r\\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceDisputed)\\r\\n            OptimisticRequesterV2(requester).priceDisputed(identifier, timestamp, ancillaryData, disputedRequest);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal where caller is the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     *             dispute.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) external override returns (uint256 totalBond) {\\r\\n        // Note: re-entrancy guard is done in the inner call.\\r\\n        return disputePriceFor(identifier, timestamp, ancillaryData, request, msg.sender, requester);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     *              settle.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     * @return resolvedPrice the price that the request settled to.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) external override nonReentrant() returns (uint256 payout, int256 resolvedPrice) {\\r\\n        return _settle(requester, identifier, timestamp, ancillaryData, request);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the current state of a price request. See the State enum for more details.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters.\\r\\n     * @return the State.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) external override nonReentrant() returns (OptimisticOracleInterface.State) {\\r\\n        return _getState(requester, identifier, timestamp, ancillaryData, request);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters. The hash of these parameters must match with the request hash that is\\r\\n     * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\\r\\n     * will revert.\\r\\n     * @return boolean indicating true if price exists and false if not.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) public override nonReentrant() returns (bool) {\\r\\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\\r\\n        _validateRequestHash(requestId, request);\\r\\n        OptimisticOracleInterface.State state = _getState(requester, identifier, timestamp, ancillaryData, request);\\r\\n        return\\r\\n            state == OptimisticOracleInterface.State.Settled ||\\r\\n            state == OptimisticOracleInterface.State.Resolved ||\\r\\n            state == OptimisticOracleInterface.State.Expired;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @return the stamped ancillary bytes.\\r\\n     */\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        pure\\r\\n        override\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return _stampAncillaryData(ancillaryData, requester);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\\r\\n     ****************************************/\\r\\n    // Returns hash of unique request identifiers. This contract maps request ID hashes to hashes of the request's\\r\\n    // parameters.\\r\\n    function _getId(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(requester, identifier, timestamp, ancillaryData));\\r\\n    }\\r\\n\\r\\n    // Returns hash of request parameters. These are mapped to the unique request ID to track a request's lifecycle.\\r\\n    function _getRequestHash(Request memory request) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(request));\\r\\n    }\\r\\n\\r\\n    // Resolves a price request that has expired or been disputed and a price is available from the DVM. This will\\r\\n    // revert if the unique request ID does not match the hashed request parameters. This also marks the request\\r\\n    // as settled, therefore this method can only be triggered once per eligible request.\\r\\n    function _settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) private returns (uint256 payout, int256 resolvedPrice) {\\r\\n        bytes32 requestId = _getId(requester, identifier, timestamp, ancillaryData);\\r\\n        _validateRequestHash(requestId, request);\\r\\n\\r\\n        // Associate settled request params with ID.\\r\\n        Request memory settledRequest =\\r\\n            Request({\\r\\n                proposer: request.proposer,\\r\\n                disputer: request.disputer,\\r\\n                currency: request.currency,\\r\\n                settled: true, // Modified\\r\\n                proposedPrice: request.proposedPrice,\\r\\n                resolvedPrice: request.resolvedPrice,\\r\\n                expirationTime: request.expirationTime,\\r\\n                reward: request.reward,\\r\\n                finalFee: request.finalFee,\\r\\n                requestSettings: request.requestSettings\\r\\n            });\\r\\n\\r\\n        OptimisticOracleInterface.State state = _getState(requester, identifier, timestamp, ancillaryData, request);\\r\\n        if (state == OptimisticOracleInterface.State.Expired) {\\r\\n            // In the expiry case, just pay back the proposer's bond and final fee along with the reward.\\r\\n            resolvedPrice = request.proposedPrice;\\r\\n            settledRequest.resolvedPrice = resolvedPrice;\\r\\n            payout = request.requestSettings.bond.add(request.finalFee).add(request.reward);\\r\\n            request.currency.safeTransfer(request.proposer, payout);\\r\\n        } else if (state == OptimisticOracleInterface.State.Resolved) {\\r\\n            // In the Resolved case, pay either the disputer or the proposer the entire payout (+ bond and reward).\\r\\n            resolvedPrice = _getOracle().getPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester));\\r\\n            settledRequest.resolvedPrice = resolvedPrice;\\r\\n            bool disputeSuccess = settledRequest.resolvedPrice != request.proposedPrice;\\r\\n\\r\\n            // Winner gets:\\r\\n            // - Their bond back.\\r\\n            // - The unburned portion of the loser's bond: proposal bond (not including final fee) - burned bond.\\r\\n            // - Their final fee back.\\r\\n            // - The request reward (if not already refunded -- if refunded, it will be set to 0).\\r\\n            payout = request\\r\\n                .requestSettings\\r\\n                .bond\\r\\n                .add(request.requestSettings.bond.sub(_computeBurnedBond(settledRequest)))\\r\\n                .add(request.finalFee)\\r\\n                .add(request.reward);\\r\\n            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);\\r\\n        } else {\\r\\n            revert(\\\"Already settled or not settleable\\\");\\r\\n        }\\r\\n\\r\\n        _storeRequestHash(requestId, settledRequest);\\r\\n        emit Settle(requester, identifier, timestamp, ancillaryData, settledRequest);\\r\\n\\r\\n        // Callback.\\r\\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceSettled)\\r\\n            OptimisticRequesterV2(requester).priceSettled(identifier, timestamp, ancillaryData, settledRequest);\\r\\n    }\\r\\n\\r\\n    function _computeBurnedBond(Request memory request) private pure returns (uint256) {\\r\\n        // burnedBond = floor(bond / 2)\\r\\n        return request.requestSettings.bond.div(2);\\r\\n    }\\r\\n\\r\\n    function _validateLiveness(uint256 liveness) private pure {\\r\\n        require(liveness < 5200 weeks, \\\"Liveness too large\\\");\\r\\n        require(liveness > 0, \\\"Liveness cannot be 0\\\");\\r\\n    }\\r\\n\\r\\n    function _validateRequestHash(bytes32 requestId, Request memory request) private view {\\r\\n        require(\\r\\n            requests[requestId] == _getRequestHash(request),\\r\\n            \\\"Hashed request params do not match existing request hash\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _storeRequestHash(bytes32 requestId, Request memory request) internal {\\r\\n        requests[requestId] = _getRequestHash(request);\\r\\n    }\\r\\n\\r\\n    function _getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) internal view returns (OptimisticOracleInterface.State) {\\r\\n        // Note: This function does not check whether all of the _request parameter values are correct. For example,\\r\\n        // the request.reward could be any value and it would not impact this function's return value. Therefore, it\\r\\n        // is the caller's responsibility to check that _request matches with the expected ID corresponding to\\r\\n        // {requester, identifier, timestamp, ancillaryData} via _validateRequestHash().\\r\\n        if (address(request.currency) == address(0)) return OptimisticOracleInterface.State.Invalid;\\r\\n\\r\\n        if (request.proposer == address(0)) return OptimisticOracleInterface.State.Requested;\\r\\n\\r\\n        if (request.settled) return OptimisticOracleInterface.State.Settled;\\r\\n\\r\\n        if (request.disputer == address(0))\\r\\n            return\\r\\n                request.expirationTime <= getCurrentTime()\\r\\n                    ? OptimisticOracleInterface.State.Expired\\r\\n                    : OptimisticOracleInterface.State.Proposed;\\r\\n\\r\\n        return\\r\\n            _getOracle().hasPrice(identifier, timestamp, _stampAncillaryData(ancillaryData, requester))\\r\\n                ? OptimisticOracleInterface.State.Resolved\\r\\n                : OptimisticOracleInterface.State.Disputed;\\r\\n    }\\r\\n\\r\\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\\r\\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n\\r\\n    function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\\r\\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\\r\\n    }\\r\\n\\r\\n    function _getStore() internal view returns (StoreInterface) {\\r\\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\\r\\n    }\\r\\n\\r\\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translateable in utf8.\\r\\n     * For those cases, we assume that the client will be able to strip out the utf8-translateable part of the\\r\\n     * ancillary data that this contract stamps.\\r\\n     */\\r\\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal pure returns (bytes memory) {\\r\\n        // Since this contract will be the one to formally submit DVM price requests, its useful for voters to know who\\r\\n        // the original requester was.\\r\\n        return AncillaryData.appendKeyValueAddress(ancillaryData, \\\"ooRequester\\\", requester);\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice This is the SkinnyOptimisticOracle contract that should be deployed on live networks. It is exactly the same\\r\\n * as the regular SkinnyOptimisticOracle contract, but it overrides getCurrentTime to make the call a simply return\\r\\n * block.timestamp with no branching or storage queries.\\r\\n */\\r\\ncontract SkinnyOptimisticOracleV2Prod is SkinnyOptimisticOracleV2 {\\r\\n    constructor(\\r\\n        uint256 _liveness,\\r\\n        address _finderAddress,\\r\\n        address _timerAddress\\r\\n    ) SkinnyOptimisticOracleV2(_liveness, _finderAddress, _timerAddress) {}\\r\\n\\r\\n    function getCurrentTime() public view virtual override returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8d77e9bfb4eeed325595f310159ad012b56d1711c5eeacecf6fe29281ad5319a\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/interfaces/OptimisticOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OptimisticOracleInterface {\\r\\n    event RequestPrice(\\r\\n        address indexed requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        address currency,\\r\\n        uint256 reward,\\r\\n        uint256 finalFee\\r\\n    );\\r\\n    event ProposePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice,\\r\\n        uint256 expirationTimestamp,\\r\\n        address currency\\r\\n    );\\r\\n    event DisputePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    );\\r\\n    event Settle(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 price,\\r\\n        uint256 payout\\r\\n    );\\r\\n\\r\\n    // Struct representing the state of a price request.\\r\\n    enum State {\\r\\n        Invalid, // Never requested.\\r\\n        Requested, // Requested, no other actions taken.\\r\\n        Proposed, // Proposed, but not expired or disputed yet.\\r\\n        Expired, // Proposed, not disputed, past liveness.\\r\\n        Disputed, // Disputed, but no DVM price returned yet.\\r\\n        Resolved, // Disputed and DVM price is available.\\r\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\r\\n    }\\r\\n\\r\\n    // Struct representing a price request.\\r\\n    struct Request {\\r\\n        address proposer; // Address of the proposer.\\r\\n        address disputer; // Address of the disputer.\\r\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\r\\n        bool settled; // True if the request is settled.\\r\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\r\\n        int256 proposedPrice; // Price that the proposer submitted.\\r\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\r\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\r\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\r\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\r\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\r\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    function defaultLiveness() external view virtual returns (uint256);\\r\\n\\r\\n    function finder() external view virtual returns (FinderInterface);\\r\\n\\r\\n    function getCurrentTime() external view virtual returns (uint256);\\r\\n\\r\\n    // Note: this is required so that typechain generates a return value with named fields.\\r\\n    mapping(bytes32 => Request) public requests;\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\r\\n     * This can be changed with a subsequent call to setBond().\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Set the proposal bond associated with a price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param bond custom bond amount to set.\\r\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\r\\n     * changed again with a subsequent call to setBond().\\r\\n     */\\r\\n    function setBond(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 bond\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\r\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\r\\n     * bond, so there is still profit to be made even if the reward is refunded.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setRefundOnDispute(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\r\\n     * being auto-resolved.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param customLiveness new custom liveness.\\r\\n     */\\r\\n    function setCustomLiveness(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 customLiveness\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address proposer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value for an existing price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        address disputer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\r\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\r\\n     * hasn't been settled.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return resolved price.\\r\\n     */\\r\\n    function settleAndGetPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (int256);\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 payout);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current data structure containing all information about a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the Request data structure.\\r\\n     */\\r\\n    function getRequest(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (Request memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state of a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the State enum value.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (State);\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return true if price has resolved or settled, false otherwise.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x2a984419bfbd2389a344141f5d08a46e8df8ad0605973f766cacd094c080ca6b\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/interfaces/SkinnyOptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../interfaces/OptimisticOracleInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface for the gas-cost-reduced version of the OptimisticOracle.\\r\\n * @notice Differences from normal OptimisticOracle:\\r\\n * - refundOnDispute: flag is removed, by default there are no refunds on disputes.\\r\\n * - customizing request parameters: In the OptimisticOracle, parameters like `bond` and `customLiveness` can be reset\\r\\n *   after a request is already made via `requestPrice`. In the SkinnyOptimisticOracle, these parameters can only be\\r\\n *   set in `requestPrice`, which has an expanded input set.\\r\\n * - settleAndGetPrice: Replaced by `settle`, which can only be called once per settleable request. The resolved price\\r\\n *   can be fetched via the `Settle` event or the return value of `settle`.\\r\\n * - general changes to interface: Functions that interact with existing requests all require the parameters of the\\r\\n *   request to modify to be passed as input. These parameters must match with the existing request parameters or the\\r\\n *   function will revert. This change reflects the internal refactor to store hashed request parameters instead of the\\r\\n *   full request struct.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract SkinnyOptimisticOracleV2Interface {\\r\\n    struct RequestSettings {\\r\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\r\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\r\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\r\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\r\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\r\\n    }\\r\\n\\r\\n    // Struct representing a price request. Note that this differs from the OptimisticOracleInterface's Request struct\\r\\n    // in that refundOnDispute is removed.\\r\\n    struct Request {\\r\\n        address proposer; // Address of the proposer.\\r\\n        address disputer; // Address of the disputer.\\r\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\r\\n        bool settled; // True if the request is settled.\\r\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\r\\n        int256 proposedPrice; // Price that the proposer submitted.\\r\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\r\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\r\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\r\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @param requestSettings settings for the request.\\r\\n     * @return totalBond default bond + final fee that the proposer and disputer will be required to pay.\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward,\\r\\n        RequestSettings memory requestSettings\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * propose a price for.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request,\\r\\n        address proposer,\\r\\n        int256 proposedPrice\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value where caller is the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * propose a price for.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request,\\r\\n        int256 proposedPrice\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to\\r\\n     * overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer\\r\\n     * will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @dev The caller is the requester, but the proposer can be customized.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @param requestSettings settings for the request.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function requestAndProposePriceFor(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward,\\r\\n        RequestSettings memory requestSettings,\\r\\n        address proposer,\\r\\n        int256 proposedPrice\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * dispute.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request,\\r\\n        address disputer,\\r\\n        address requester\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal where caller is the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * dispute.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters whose hash must match the request that the caller wants to\\r\\n     * settle.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     * @return resolvedPrice the price that the request settled to.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) external virtual returns (uint256 payout, int256 resolvedPrice);\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the current state of a price request. See the State enum for more details.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters.\\r\\n     * @return the State.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) external virtual returns (OptimisticOracleInterface.State);\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param request price request parameters. The hash of these parameters must match with the request hash that is\\r\\n     * associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method\\r\\n     * will revert.\\r\\n     * @return boolean indicating true if price exists and false if not.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint32 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        Request memory request\\r\\n    ) public virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @return the stamped ancillary bytes.\\r\\n     */\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        pure\\r\\n        virtual\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xace5ed82772a4173ad5da6d7ad5c3a31a19a6e97051bcdc5a32236ee9f0ac30d\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346200013b57601f62002ac038819003918201601f19168301916001600160401b0383118484101762000140578084926060946040528339810103126200013b57805190620000536020820162000156565b6001600160a01b0391600160a01b908390620000729060400162000156565b1660018060a81b03196000541617176000551660018060a01b0319600254161760025563bb74480081101562000101578015620000bc5760035560405161295490816200016c8239f35b60405162461bcd60e51b815260206004820152601460248201527f4c6976656e6573732063616e6e6f7420626520300000000000000000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152714c6976656e65737320746f6f206c6172676560701b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200013b5756fe60a0604052600436101561001257600080fd5b6000803560e01c8063137cee7614610cd95780631c39c38d14610cb257806322f8e56614610c3957806329cb924d14610c1e578063432bcbb914610835578063640f9d941461055157806367831110146105355780636c534fbb146104cb5780637c4b089e1461045f5780639d86698514610435578063af5d2f39146103be578063af8475d314610304578063b9a3c84c146102db578063bc5013bb14610277578063c371dda71461025a578063dc5e0225146100f85763fe4e1983146100d857600080fd5b346100f557806003193601126100f5576020600354604051908152f35b80fd5b50346100f5576102603660031901126100f5576101136110b7565b90604435906001600160401b0382116100f557506101359036906004016111af565b6101c0366063190112610255576040519161014f83611106565b6001600160a01b036064358181168103610255578452608435818116810361025557602085015260a435818116810361025557604085015260c435801515810361025557606085015260a03660e3190112610255576040516101b081611122565b60e435801515810361025557815261010435801515810361025557602082015261012435801515810361025557604082015261014435606082015261016435608082015260808501526101843560a08501526101a43560c08501526101c43560e08501526101e435610100850152610204356101208501526102243590811681036102555760209361024d93610244611280565b93600435611de7565b604051908152f35b600080fd5b50346100f557806003193601126100f55760206040516120008152f35b50346100f5576102603660031901126100f55761029261126a565b61029a6110ca565b91606435906001600160401b0382116100f557602061024d85856102c136600488016111af565b6102ca36611297565b906102443593339360243590611b13565b50346100f557806003193601126100f5576002546040516001600160a01b039091168152602090f35b50346100f5576103509061031736611392565b92610326969496929192611abe565b6000805460ff60a01b1916908190559661034b85610346868686866122bd565b612348565b612422565b916007831015918261039d57600684149283156103b1575b8315610386575b600160a01b83176000556040518415158152602090f35b9091925061039d575060036020921490388061036f565b634e487b7160e01b81526021600452602490fd5b5060058414925080610368565b50346100f55760403660031901126100f5576004356001600160401b038111610431576103ef9036906004016111af565b602435906001600160a01b03821682036102555761042d91610419916104136126a4565b906126cb565b6040519182916020835260208301906114fd565b0390f35b5080fd5b50346100f55760203660031901126100f55760406020916004358152600183522054604051908152f35b50346100f5576102803660031901126100f55761047a61126a565b906104836110ca565b90606435906001600160401b0382116100f557602061024d85856104aa36600488016111af565b6104b336611297565b906104bc611280565b92610264359460243590611b13565b50346100f5576105016104dd36611392565b926104ec959495929192611abe565b6000805460ff60a01b19169081905595612422565b600160a01b90911760005560405190600781101561052157602092508152f35b634e487b7160e01b83526021600452602483fd5b50346100f557602061024d61054936611392565b913393611de7565b50346100f5576101403660031901126100f55761056c6110b7565b6044356001600160401b0381116108315761058b9036906004016111af565b6105936111f6565b90608435926105a13661120c565b926105aa611abe565b6000805460ff60a01b191690556105c58383600435336122bd565b9485875260016020526105dc60408820541561159d565b6001600160a01b0360246020826105f161264e565b16604051928380926390978d1b60e01b825260043560048301525afa80156107d857610624918a91610812575b50611601565b60246020826106316125b0565b1660405192838092631d1d5b3960e11b825286891660048301525afa80156107d857610664918a916107e3575b50611646565b61067d61066f611522565b63ffffffff86161115611689565b61069d6120006106953361068f6126a4565b896126cb565b5111156116cb565b60246020826106aa612606565b1660405192838092635b97aadd60e01b825286891660048301525afa9081156107d85798606096946107739998969461074e7f192e8f0cfffe62f0d9a7860dd72713d2e571aac42d020883efbb1248e9f02afe956107689560209e86916107aa575b50519b610717611735565b9185166040830152610100820184905261012082018d9052608082018b81529a8c018051929650869280156107a257905b52612407565b8061078e575b505060405191829160043596339684611871565b0390a3510151611a9b565b6000805460ff60a01b1916600160a01b179055604051908152f35b61079b91309033906118a1565b3880610754565b508d90610748565b8f6107cb92503d6020116107d1575b6107c38183611173565b810190611717565b3861070c565b503d6107b9565b6040513d8b823e3d90fd5b610805915060203d60201161080b575b6107fd8183611173565b8101906115e9565b3861065e565b503d6107f3565b61082b915060203d60201161080b576107fd8183611173565b3861061e565b8280fd5b50346100f5576108c861084736611392565b939091610855959395611abe565b6000805460ff60a01b1916905561086e838288856122bd565b956108798688612348565b8551602087015160408089015160a08a015160c08b015160e08c01516101008d01516101208e015160808f015196519d90989197929693956001600160a01b039081169381169216908e611106565b8d5260208d015260408c0152600160608c015260808b015260a08a015260c089015260e08801526101008701526101208601526109088685848487612422565b6007811015610c0a5760038103610a66575060a0860151958660c08701526109788661095161094560606080860151015161012086015190611a9b565b61010085015190611a9b565b60408401518451919b91610973918d916001600160a01b03908116911661230f565b612407565b60018060a01b0384169382857f43f50314b00d371b4350379432da938cbb5263cfc9e1c48131e2811a6ca7c657604051806109b58c8c8b84611871565b0390a33b15159081610a54575b506109eb575b6000805460ff60a01b1916600160a01b1790556040805188815260208101889052f35b9082918894933b15610a50578490610a196040519788968795869463e4c311f160e01b865260048601611dbb565b03925af18015610a4557610a31575b808080806109c8565b610a3b84916110dd565b6108315782610a28565b6040513d86823e3d90fd5b8480fd5b604091506080015101511515386109c2565b969796600503610bbb57610ab19560206001600160a01b03610a8661253b565b16610a938661068f6126a4565b9060405180809b81946338ce36ab60e11b8352898960048501612298565b03915afa968715610bb0578897610b78575b50868060c088015260a082015114159860606080830151015160606080890151015160011c810390808211610b6457916109738b9c610b24610b18610b0c8d9661097898611a9b565b61012089015190611a9b565b61010088015190611a9b565b6040870151909d508d916001600160a01b039091169015610b535760208701516001600160a01b03169061230f565b86516001600160a01b03169061230f565b634e487b7160e01b8b52601160045260248bfd5b9096506020813d602011610ba8575b81610b9460209383611173565b81010312610ba457519538610ac3565b8780fd5b3d9150610b87565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152602160248201527f416c726561647920736574746c6564206f72206e6f7420736574746c6561626c6044820152606560f81b6064820152608490fd5b634e487b7160e01b89526021600452602489fd5b50346100f557806003193601126100f557602061024d611522565b50346100f55760203660031901126100f557805481906001600160a01b03168015610caf57803b15610caf57819060246040518094819363117c72b360e11b835260043560048401525af18015610ca457610c95575b50604051f35b610c9e906110dd565b38610c8f565b6040513d84823e3d90fd5b50fd5b50346100f557806003193601126100f557546040516001600160a01b039091168152602090f35b50346100f5576101803660031901126100f557610cf46110b7565b6044356001600160401b03811161083157610d139036906004016111af565b91610d1c6111f6565b91610d263661120c565b61014435906001600160a01b03908183168303610a5057610d45611abe565b845460ff60a01b1916855560043592610d60888686336122bd565b908187526001602052610d7760408820541561159d565b83811615611072576024602085610d8c61264e565b16604051928380926390978d1b60e01b82528a60048301525afa908115610bb05790610dbe9189916108125750611601565b83610dc76125b0565b1660208560248b6040519485938492631d1d5b3960e11b84521660048301525afa908115610bb05790610e009189916107e35750611646565b610e19610e0b611522565b63ffffffff88161115611689565b610e3161200061069533610e2b6126a4565b8d6126cb565b83610e3a612606565b1660208560248b6040519485938492635b97aadd60e01b84521660048301525afa908115610bb057610f069392610ef48b6060948c948591611053575b50519589610e83611735565b9a8b931660408401526084359485610100850152610120840198808a5260808501978c8952898d01918251915081151560001461104b5750905b521682526101643560a0830152610eea8d610ed6611522565b60808c015190915080156110415790611a9b565b60e0830152612407565b8061102f575b50510151905190611a9b565b95868061101b575b5050826040517f192e8f0cfffe62f0d9a7860dd72713d2e571aac42d020883efbb1248e9f02afe339180610f44878d8b84611871565b0390a3826040517f6b4607a9e123267af7874ba0937d994b2a8c72b78028529d7cf15c08889c6396339180610f7b878d8b84611871565b0390a3333b15159081611010575b50610fab575b835460ff60a01b1916600160a01b178455604051858152602090f35b333b1561100c5790610fd4849392604051978894859463191b130b60e31b865260048601611dbb565b038183335af1928315610fff57602093610ff0575b8080610f8f565b610ff9906110dd565b38610fe9565b50604051903d90823e3d90fd5b8380fd5b905051151538610f89565b61102891309033906118a1565b3886610f0e565b61103b9030338d6118a1565b38610efa565b5060035490611a9b565b905090610ebd565b61106c915060203d6020116107d1576107c38183611173565b38610e77565b60405162461bcd60e51b815260206004820152601e60248201527f70726f706f7365722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b6024359063ffffffff8216820361025557565b6044359063ffffffff8216820361025557565b6001600160401b0381116110f057604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b038211176110f057604052565b60a081019081106001600160401b038211176110f057604052565b602081019081106001600160401b038211176110f057604052565b604081019081106001600160401b038211176110f057604052565b90601f801991011681019081106001600160401b038211176110f057604052565b6001600160401b0381116110f057601f01601f191660200190565b81601f82011215610255578035906111c682611194565b926111d46040519485611173565b8284526020838301011161025557816000926020809301838601378301015290565b606435906001600160a01b038216820361025557565b60a09060a3190112610255576040519061122582611122565b8160a435801515810361025557815260c435801515810361025557602082015260e4358015158103610255576040820152610104356060820152608061012435910152565b600435906001600160a01b038216820361025557565b61024435906001600160a01b038216820361025557565b906101c0608319830112610255576040516112b181611106565b9182906001600160a01b03608435818116810361025557835260a435818116810361025557602084015260c435908116810361025557604083015260e4359081151582036102555760a09160608401526101031901126102555760405161131781611122565b61010435801515810361025557815261012435801515810361025557602082015261014435801515810361025557604082015261016435606082015261018435608082015260808201526101a43560a08201526101c43560c08201526101e43560e08201526102043561010082015261012061022435910152565b90610240600319830112610255576001600160a01b03600435818116810361025557926024359260443563ffffffff8116810361025557926064356001600160401b03811161025557836113e8916004016111af565b926101c0608319820112610255576040519161140383611106565b608435818116810361025557835260a435818116810361025557602084015260c435908116810361025557604083015260e4359081151582036102555760a09160608401526101031901126102555760405161145e81611122565b61010435801515810361025557815261012435801515810361025557602082015261014435801515810361025557604082015261016435606082015261018435608082015260808201526101a43560a08201526101c43560c08201526101e43560e0820152610204356101008201526102243561012082015290565b60005b8381106114ed5750506000910152565b81810151838201526020016114dd565b90602091611516815180928185528580860191016114da565b601f01601f1916010190565b6000546001600160a01b03168015611598576020600491604051928380926329cb924d60e01b82525afa90811561158c5760009161155e575090565b906020823d8211611584575b8161157760209383611173565b810103126100f557505190565b3d915061156a565b6040513d6000823e3d90fd5b504290565b156115a457565b60405162461bcd60e51b815260206004820152601b60248201527f5265717565737420616c726561647920696e697469616c697a656400000000006044820152606490fd5b90816020910312610255575180151581036102555790565b1561160857565b60405162461bcd60e51b81526020600482015260166024820152752ab739bab83837b93a32b21034b232b73a34b334b2b960511b6044820152606490fd5b1561164d57565b60405162461bcd60e51b8152602060048201526014602482015273556e737570706f727465642063757272656e637960601b6044820152606490fd5b1561169057565b60405162461bcd60e51b815260206004820152601360248201527254696d657374616d7020696e2066757475726560681b6044820152606490fd5b156116d257565b60405162461bcd60e51b815260206004820152601760248201527f416e63696c6c617279204461746120746f6f206c6f6e670000000000000000006044820152606490fd5b90816020910312610255576040519061172f8261113d565b51815290565b6040519061174282611106565b8160009081815281602082015281604082015281606082015260405160a081018181106001600160401b038211176117ba5790610120929160405283815283602082015283604082015283606082015283608082015260808201528260a08201528260c08201528260e0820152826101008201520152565b634e487b7160e01b84526041600452602484fd5b6101a09060018060a01b03808251168452806020830151166020850152604082015116604084015260608101511515606084015260808082015180511515828601526020810151151560a08601526040810151151560c0860152606081015160e0860152015190610100918285015260a081015191610120928386015260c082015161014086015260e08201516101608601528101516101808501520151910152565b93929061189761189f9363ffffffff6040931687526102008060208901528701906114fd565b9401906117ce565b565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176110f05761189f926040525b604051611972916001600160a01b031661190e82611158565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d156119fa573d9161195683611194565b926119646040519485611173565b83523d60008785013e6119fe565b8051908282159283156119e2575b5050501561198b5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6119f293508201810191016115e9565b388281611980565b6060915b91929015611a605750815115611a12575090565b3b15611a1b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611a735750805190602001fd5b60405162461bcd60e51b815260206004820152908190611a979060248301906114fd565b0390fd5b91908201809211611aa857565b634e487b7160e01b600052601160045260246000fd5b60ff60005460a01c1615611ace57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9695949196929092611b23611abe565b6000805460ff60a01b1990811682559890966001600160a01b03948516908115611d7657611b548886858a88612422565b6007811015611d6257600103611d2957611b70858489876122bd565b95611b7b8988612348565b8060208a0151166040978b898c019b848d51168b606083015115159160c0840151611ba4611522565b9960809b8c95611bca8789019d8e9a898c51015190508015156000146110415790611a9b565b9461010096878a015198610120809b019d8e519c51958351808452611bee90611106565b8251528151602001525101528d51606001528c805101528b5160a001528a5160c00152895160e0015288510152865101528451611c2a91612407565b8251606001519051611c3b91611a9b565b98898281611d12575b50505084169387857f6b4607a9e123267af7874ba0937d994b2a8c72b78028529d7cf15c08889c6396895180611c7d88518c8b84611871565b0390a33b15159081611d06575b50611ca5575b50505050505092600160a01b90825416179055565b823b15610ba457908780949392611cd387519889968795869463191b130b60e31b8652519260048601611dbb565b03925af1908115611cfd5750611cee575b8080808080611c90565b611cf7906110dd565b38611ce4565b513d85823e3d90fd5b90505151151538611c8a565b611d21925116309033906118a1565b388982611c44565b60405162461bcd60e51b8152602060048201526011602482015270135d5cdd081899481c995c5d595cdd1959607a1b6044820152606490fd5b634e487b7160e01b8a52602160045260248afd5b60405162461bcd60e51b815260206004820152601e60248201527f50726f706f7365722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b94939161189f9363ffffffff6118979260609489521660208801526102208060408901528701906114fd565b95949391909293600093611df9611abe565b845460ff60a01b199081168655976001600160a01b0385161561225357611e238785848487612422565b600781101561223f5760020361220757611e3f848383866122bd565b96611e4a8189612348565b600160a01b6001900381511697600160a01b60019003604083015116986060830151151560a084015160c085015160e086015190610100870151926101208801519460808901519f6040519e8f98611ea18a611106565b89526001600160a01b0316602089015260408801526060870152608086019e8f5260a086015260c085015260e0840152610100830152610120820152611ee691612407565b608081015160600151610120820151611efe91611a9b565b97886121e5575b611f246060611f12612606565b9251015160011c610120840151611a9b565b9081612083575b506001600160a01b039050611f3e61253b565b16611f5185611f4b6126a4565b886126cb565b813b1561207f57611f7d8992839260405194858094819363085999a960e21b83528b8b60048501612298565b03925af18015610bb057908891612067575b505060018060a01b0384169382857fda5b062985693ef810f4e00ffa659095b4d7d5c9b3c5b6dd33a3979e12deffaa60405180611fce8c8c8b84611871565b0390a33b15159081612055575b50611ff8575b50505050505091600160a01b906000541617600055565b823b15612051579085809493926120256040519788968795869463613f703960e11b865260048601611dbb565b03925af18015610ca45761203d575b80808080611fe1565b61204782916110dd565b6100f55780612034565b8580fd5b60209150608001510151151538611fdb565b612070906110dd565b61207b578638611f8f565b8680fd5b8880fd5b6040838101519051636eb1769f60e11b81523060048201526001600160a01b03928316602482018190529290911690602081604481855afa9081156121da579084918c9161219f575b506120df61211d94939261211892611a9b565b60405163095ea7b360e01b60208201526001600160a01b039094166024850152604484015282606481015b03601f198101845283611173565b6118f5565b6001600160a01b0361212d612606565b169060018060a01b03604084015116604051916121498361113d565b8252823b1561219b579060448a9283604051958694859363432ce91960e11b855260048501525160248401525af18015610bb057612188575b80611f2b565b612194909791976110dd565b9538612182565b8980fd5b9150506020813d6020116121d2575b816121bb60209383611173565b810103126121ce575183906120df6120cc565b8a80fd5b3d91506121ae565b6040513d8d823e3d90fd5b6040820151612202908a90309033906001600160a01b03166118a1565b611f05565b60405162461bcd60e51b815260206004820152601060248201526f135d5cdd081899481c1c9bdc1bdcd95960821b6044820152606490fd5b634e487b7160e01b87526021600452602487fd5b60405162461bcd60e51b815260206004820152601e60248201527f64697370757465722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b63ffffffff6122ba9493606093835216602082015281604082015201906114fd565b90565b92906122fb6123099263ffffffff604051958694602086019860018060a01b03168952604086015216606084015260808084015260a08301906114fd565b03601f198101835282611173565b51902090565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604482019290925261189f91612118826064810161210a565b600052600160205261235f604060002054916123d1565b0361236657565b60405162461bcd60e51b815260206004820152603860248201527f486173686564207265717565737420706172616d7320646f206e6f74206d617460448201527f6368206578697374696e672072657175657374206861736800000000000000006064820152608490fd5b6040516123e26020820180936117ce565b6101c081526101e081018181106001600160401b038211176110f05760405251902090565b90612411906123d1565b906000526001602052604060002055565b6040850151919490916001600160a01b0391908216156125115781815116156125065760608101516124fb5781602082015116156124d957509161247a60209492612498969461247061253b565b16936104136126a4565b604051630b551cd560e41b8152958694859384939160048501612298565b03915afa90811561158c576000916124bb575b50156124b657600590565b600490565b6124d3915060203d811161080b576107fd8183611173565b386124ab565b935050505060e0915001516124ec611522565b106124f657600390565b600290565b505050505050600690565b505050505050600190565b505050505050600090565b9081602091031261025557516001600160a01b03811681036102555790565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b6125a5915060203d81116125a9575b61259d8183611173565b81019061251c565b1690565b503d612593565b6002546040516302abf57960e61b81527210dbdb1b185d195c985b15da1a5d195b1a5cdd606a1b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b6002546040516302abf57960e61b81526453746f726560d81b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b6002546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b604051906126b182611158565b600b82526a37b7a932b8bab2b9ba32b960a91b6020830152565b906126d6908261289f565b906126f56fffffffffffffffffffffffffffffffff8460201c16612798565b926001600160c01b03199061271b9060601b6bffffffffffffffffffffffff1916612798565b16604051906020820194855260408201526028815260608101938185106001600160401b038611176110f0576122ba936020938660405261276581518092876080880191016114da565b830161277a82518093876080850191016114da565b0161278c8351809360808401906114da565b01038084520182611173565b7f3030303030303030303030303030303030303030303030303030303030303030906001600160401b038060801b8260401b169116178060201b1779ffff000000000000ffff000000000000ffff000000000000ffff7dffff000000000000ffff000000000000ffff000000000000ffff000000008260101b169116178060081b177e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f7f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f008260041b1691161760277f0101010101010101010101010101010101010101010101010101010101010101808360011c16818460021c16178360031c161602010190565b51156128e7576122ba60226040518093600b60fa1b60208301526128cd8151809260206021860191016114da565b8101601d60f91b6021820152036002810184520182611173565b6122ba6021604051836129048295518092602080860191016114da565b8101601d60f91b602082015203600181018452018261117356fea2646970667358221220977f2ec65b4916e4cf5bffa7726d5aecf86966a0f955d9e67d36f1664487e22364736f6c63430008100033",
  "deployedBytecode": "0x60a0604052600436101561001257600080fd5b6000803560e01c8063137cee7614610cd95780631c39c38d14610cb257806322f8e56614610c3957806329cb924d14610c1e578063432bcbb914610835578063640f9d941461055157806367831110146105355780636c534fbb146104cb5780637c4b089e1461045f5780639d86698514610435578063af5d2f39146103be578063af8475d314610304578063b9a3c84c146102db578063bc5013bb14610277578063c371dda71461025a578063dc5e0225146100f85763fe4e1983146100d857600080fd5b346100f557806003193601126100f5576020600354604051908152f35b80fd5b50346100f5576102603660031901126100f5576101136110b7565b90604435906001600160401b0382116100f557506101359036906004016111af565b6101c0366063190112610255576040519161014f83611106565b6001600160a01b036064358181168103610255578452608435818116810361025557602085015260a435818116810361025557604085015260c435801515810361025557606085015260a03660e3190112610255576040516101b081611122565b60e435801515810361025557815261010435801515810361025557602082015261012435801515810361025557604082015261014435606082015261016435608082015260808501526101843560a08501526101a43560c08501526101c43560e08501526101e435610100850152610204356101208501526102243590811681036102555760209361024d93610244611280565b93600435611de7565b604051908152f35b600080fd5b50346100f557806003193601126100f55760206040516120008152f35b50346100f5576102603660031901126100f55761029261126a565b61029a6110ca565b91606435906001600160401b0382116100f557602061024d85856102c136600488016111af565b6102ca36611297565b906102443593339360243590611b13565b50346100f557806003193601126100f5576002546040516001600160a01b039091168152602090f35b50346100f5576103509061031736611392565b92610326969496929192611abe565b6000805460ff60a01b1916908190559661034b85610346868686866122bd565b612348565b612422565b916007831015918261039d57600684149283156103b1575b8315610386575b600160a01b83176000556040518415158152602090f35b9091925061039d575060036020921490388061036f565b634e487b7160e01b81526021600452602490fd5b5060058414925080610368565b50346100f55760403660031901126100f5576004356001600160401b038111610431576103ef9036906004016111af565b602435906001600160a01b03821682036102555761042d91610419916104136126a4565b906126cb565b6040519182916020835260208301906114fd565b0390f35b5080fd5b50346100f55760203660031901126100f55760406020916004358152600183522054604051908152f35b50346100f5576102803660031901126100f55761047a61126a565b906104836110ca565b90606435906001600160401b0382116100f557602061024d85856104aa36600488016111af565b6104b336611297565b906104bc611280565b92610264359460243590611b13565b50346100f5576105016104dd36611392565b926104ec959495929192611abe565b6000805460ff60a01b19169081905595612422565b600160a01b90911760005560405190600781101561052157602092508152f35b634e487b7160e01b83526021600452602483fd5b50346100f557602061024d61054936611392565b913393611de7565b50346100f5576101403660031901126100f55761056c6110b7565b6044356001600160401b0381116108315761058b9036906004016111af565b6105936111f6565b90608435926105a13661120c565b926105aa611abe565b6000805460ff60a01b191690556105c58383600435336122bd565b9485875260016020526105dc60408820541561159d565b6001600160a01b0360246020826105f161264e565b16604051928380926390978d1b60e01b825260043560048301525afa80156107d857610624918a91610812575b50611601565b60246020826106316125b0565b1660405192838092631d1d5b3960e11b825286891660048301525afa80156107d857610664918a916107e3575b50611646565b61067d61066f611522565b63ffffffff86161115611689565b61069d6120006106953361068f6126a4565b896126cb565b5111156116cb565b60246020826106aa612606565b1660405192838092635b97aadd60e01b825286891660048301525afa9081156107d85798606096946107739998969461074e7f192e8f0cfffe62f0d9a7860dd72713d2e571aac42d020883efbb1248e9f02afe956107689560209e86916107aa575b50519b610717611735565b9185166040830152610100820184905261012082018d9052608082018b81529a8c018051929650869280156107a257905b52612407565b8061078e575b505060405191829160043596339684611871565b0390a3510151611a9b565b6000805460ff60a01b1916600160a01b179055604051908152f35b61079b91309033906118a1565b3880610754565b508d90610748565b8f6107cb92503d6020116107d1575b6107c38183611173565b810190611717565b3861070c565b503d6107b9565b6040513d8b823e3d90fd5b610805915060203d60201161080b575b6107fd8183611173565b8101906115e9565b3861065e565b503d6107f3565b61082b915060203d60201161080b576107fd8183611173565b3861061e565b8280fd5b50346100f5576108c861084736611392565b939091610855959395611abe565b6000805460ff60a01b1916905561086e838288856122bd565b956108798688612348565b8551602087015160408089015160a08a015160c08b015160e08c01516101008d01516101208e015160808f015196519d90989197929693956001600160a01b039081169381169216908e611106565b8d5260208d015260408c0152600160608c015260808b015260a08a015260c089015260e08801526101008701526101208601526109088685848487612422565b6007811015610c0a5760038103610a66575060a0860151958660c08701526109788661095161094560606080860151015161012086015190611a9b565b61010085015190611a9b565b60408401518451919b91610973918d916001600160a01b03908116911661230f565b612407565b60018060a01b0384169382857f43f50314b00d371b4350379432da938cbb5263cfc9e1c48131e2811a6ca7c657604051806109b58c8c8b84611871565b0390a33b15159081610a54575b506109eb575b6000805460ff60a01b1916600160a01b1790556040805188815260208101889052f35b9082918894933b15610a50578490610a196040519788968795869463e4c311f160e01b865260048601611dbb565b03925af18015610a4557610a31575b808080806109c8565b610a3b84916110dd565b6108315782610a28565b6040513d86823e3d90fd5b8480fd5b604091506080015101511515386109c2565b969796600503610bbb57610ab19560206001600160a01b03610a8661253b565b16610a938661068f6126a4565b9060405180809b81946338ce36ab60e11b8352898960048501612298565b03915afa968715610bb0578897610b78575b50868060c088015260a082015114159860606080830151015160606080890151015160011c810390808211610b6457916109738b9c610b24610b18610b0c8d9661097898611a9b565b61012089015190611a9b565b61010088015190611a9b565b6040870151909d508d916001600160a01b039091169015610b535760208701516001600160a01b03169061230f565b86516001600160a01b03169061230f565b634e487b7160e01b8b52601160045260248bfd5b9096506020813d602011610ba8575b81610b9460209383611173565b81010312610ba457519538610ac3565b8780fd5b3d9150610b87565b6040513d8a823e3d90fd5b60405162461bcd60e51b815260206004820152602160248201527f416c726561647920736574746c6564206f72206e6f7420736574746c6561626c6044820152606560f81b6064820152608490fd5b634e487b7160e01b89526021600452602489fd5b50346100f557806003193601126100f557602061024d611522565b50346100f55760203660031901126100f557805481906001600160a01b03168015610caf57803b15610caf57819060246040518094819363117c72b360e11b835260043560048401525af18015610ca457610c95575b50604051f35b610c9e906110dd565b38610c8f565b6040513d84823e3d90fd5b50fd5b50346100f557806003193601126100f557546040516001600160a01b039091168152602090f35b50346100f5576101803660031901126100f557610cf46110b7565b6044356001600160401b03811161083157610d139036906004016111af565b91610d1c6111f6565b91610d263661120c565b61014435906001600160a01b03908183168303610a5057610d45611abe565b845460ff60a01b1916855560043592610d60888686336122bd565b908187526001602052610d7760408820541561159d565b83811615611072576024602085610d8c61264e565b16604051928380926390978d1b60e01b82528a60048301525afa908115610bb05790610dbe9189916108125750611601565b83610dc76125b0565b1660208560248b6040519485938492631d1d5b3960e11b84521660048301525afa908115610bb05790610e009189916107e35750611646565b610e19610e0b611522565b63ffffffff88161115611689565b610e3161200061069533610e2b6126a4565b8d6126cb565b83610e3a612606565b1660208560248b6040519485938492635b97aadd60e01b84521660048301525afa908115610bb057610f069392610ef48b6060948c948591611053575b50519589610e83611735565b9a8b931660408401526084359485610100850152610120840198808a5260808501978c8952898d01918251915081151560001461104b5750905b521682526101643560a0830152610eea8d610ed6611522565b60808c015190915080156110415790611a9b565b60e0830152612407565b8061102f575b50510151905190611a9b565b95868061101b575b5050826040517f192e8f0cfffe62f0d9a7860dd72713d2e571aac42d020883efbb1248e9f02afe339180610f44878d8b84611871565b0390a3826040517f6b4607a9e123267af7874ba0937d994b2a8c72b78028529d7cf15c08889c6396339180610f7b878d8b84611871565b0390a3333b15159081611010575b50610fab575b835460ff60a01b1916600160a01b178455604051858152602090f35b333b1561100c5790610fd4849392604051978894859463191b130b60e31b865260048601611dbb565b038183335af1928315610fff57602093610ff0575b8080610f8f565b610ff9906110dd565b38610fe9565b50604051903d90823e3d90fd5b8380fd5b905051151538610f89565b61102891309033906118a1565b3886610f0e565b61103b9030338d6118a1565b38610efa565b5060035490611a9b565b905090610ebd565b61106c915060203d6020116107d1576107c38183611173565b38610e77565b60405162461bcd60e51b815260206004820152601e60248201527f70726f706f7365722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b6024359063ffffffff8216820361025557565b6044359063ffffffff8216820361025557565b6001600160401b0381116110f057604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b038211176110f057604052565b60a081019081106001600160401b038211176110f057604052565b602081019081106001600160401b038211176110f057604052565b604081019081106001600160401b038211176110f057604052565b90601f801991011681019081106001600160401b038211176110f057604052565b6001600160401b0381116110f057601f01601f191660200190565b81601f82011215610255578035906111c682611194565b926111d46040519485611173565b8284526020838301011161025557816000926020809301838601378301015290565b606435906001600160a01b038216820361025557565b60a09060a3190112610255576040519061122582611122565b8160a435801515810361025557815260c435801515810361025557602082015260e4358015158103610255576040820152610104356060820152608061012435910152565b600435906001600160a01b038216820361025557565b61024435906001600160a01b038216820361025557565b906101c0608319830112610255576040516112b181611106565b9182906001600160a01b03608435818116810361025557835260a435818116810361025557602084015260c435908116810361025557604083015260e4359081151582036102555760a09160608401526101031901126102555760405161131781611122565b61010435801515810361025557815261012435801515810361025557602082015261014435801515810361025557604082015261016435606082015261018435608082015260808201526101a43560a08201526101c43560c08201526101e43560e08201526102043561010082015261012061022435910152565b90610240600319830112610255576001600160a01b03600435818116810361025557926024359260443563ffffffff8116810361025557926064356001600160401b03811161025557836113e8916004016111af565b926101c0608319820112610255576040519161140383611106565b608435818116810361025557835260a435818116810361025557602084015260c435908116810361025557604083015260e4359081151582036102555760a09160608401526101031901126102555760405161145e81611122565b61010435801515810361025557815261012435801515810361025557602082015261014435801515810361025557604082015261016435606082015261018435608082015260808201526101a43560a08201526101c43560c08201526101e43560e0820152610204356101008201526102243561012082015290565b60005b8381106114ed5750506000910152565b81810151838201526020016114dd565b90602091611516815180928185528580860191016114da565b601f01601f1916010190565b6000546001600160a01b03168015611598576020600491604051928380926329cb924d60e01b82525afa90811561158c5760009161155e575090565b906020823d8211611584575b8161157760209383611173565b810103126100f557505190565b3d915061156a565b6040513d6000823e3d90fd5b504290565b156115a457565b60405162461bcd60e51b815260206004820152601b60248201527f5265717565737420616c726561647920696e697469616c697a656400000000006044820152606490fd5b90816020910312610255575180151581036102555790565b1561160857565b60405162461bcd60e51b81526020600482015260166024820152752ab739bab83837b93a32b21034b232b73a34b334b2b960511b6044820152606490fd5b1561164d57565b60405162461bcd60e51b8152602060048201526014602482015273556e737570706f727465642063757272656e637960601b6044820152606490fd5b1561169057565b60405162461bcd60e51b815260206004820152601360248201527254696d657374616d7020696e2066757475726560681b6044820152606490fd5b156116d257565b60405162461bcd60e51b815260206004820152601760248201527f416e63696c6c617279204461746120746f6f206c6f6e670000000000000000006044820152606490fd5b90816020910312610255576040519061172f8261113d565b51815290565b6040519061174282611106565b8160009081815281602082015281604082015281606082015260405160a081018181106001600160401b038211176117ba5790610120929160405283815283602082015283604082015283606082015283608082015260808201528260a08201528260c08201528260e0820152826101008201520152565b634e487b7160e01b84526041600452602484fd5b6101a09060018060a01b03808251168452806020830151166020850152604082015116604084015260608101511515606084015260808082015180511515828601526020810151151560a08601526040810151151560c0860152606081015160e0860152015190610100918285015260a081015191610120928386015260c082015161014086015260e08201516101608601528101516101808501520151910152565b93929061189761189f9363ffffffff6040931687526102008060208901528701906114fd565b9401906117ce565b565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176110f05761189f926040525b604051611972916001600160a01b031661190e82611158565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d156119fa573d9161195683611194565b926119646040519485611173565b83523d60008785013e6119fe565b8051908282159283156119e2575b5050501561198b5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b6119f293508201810191016115e9565b388281611980565b6060915b91929015611a605750815115611a12575090565b3b15611a1b5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611a735750805190602001fd5b60405162461bcd60e51b815260206004820152908190611a979060248301906114fd565b0390fd5b91908201809211611aa857565b634e487b7160e01b600052601160045260246000fd5b60ff60005460a01c1615611ace57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9695949196929092611b23611abe565b6000805460ff60a01b1990811682559890966001600160a01b03948516908115611d7657611b548886858a88612422565b6007811015611d6257600103611d2957611b70858489876122bd565b95611b7b8988612348565b8060208a0151166040978b898c019b848d51168b606083015115159160c0840151611ba4611522565b9960809b8c95611bca8789019d8e9a898c51015190508015156000146110415790611a9b565b9461010096878a015198610120809b019d8e519c51958351808452611bee90611106565b8251528151602001525101528d51606001528c805101528b5160a001528a5160c00152895160e0015288510152865101528451611c2a91612407565b8251606001519051611c3b91611a9b565b98898281611d12575b50505084169387857f6b4607a9e123267af7874ba0937d994b2a8c72b78028529d7cf15c08889c6396895180611c7d88518c8b84611871565b0390a33b15159081611d06575b50611ca5575b50505050505092600160a01b90825416179055565b823b15610ba457908780949392611cd387519889968795869463191b130b60e31b8652519260048601611dbb565b03925af1908115611cfd5750611cee575b8080808080611c90565b611cf7906110dd565b38611ce4565b513d85823e3d90fd5b90505151151538611c8a565b611d21925116309033906118a1565b388982611c44565b60405162461bcd60e51b8152602060048201526011602482015270135d5cdd081899481c995c5d595cdd1959607a1b6044820152606490fd5b634e487b7160e01b8a52602160045260248afd5b60405162461bcd60e51b815260206004820152601e60248201527f50726f706f7365722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b94939161189f9363ffffffff6118979260609489521660208801526102208060408901528701906114fd565b95949391909293600093611df9611abe565b845460ff60a01b199081168655976001600160a01b0385161561225357611e238785848487612422565b600781101561223f5760020361220757611e3f848383866122bd565b96611e4a8189612348565b600160a01b6001900381511697600160a01b60019003604083015116986060830151151560a084015160c085015160e086015190610100870151926101208801519460808901519f6040519e8f98611ea18a611106565b89526001600160a01b0316602089015260408801526060870152608086019e8f5260a086015260c085015260e0840152610100830152610120820152611ee691612407565b608081015160600151610120820151611efe91611a9b565b97886121e5575b611f246060611f12612606565b9251015160011c610120840151611a9b565b9081612083575b506001600160a01b039050611f3e61253b565b16611f5185611f4b6126a4565b886126cb565b813b1561207f57611f7d8992839260405194858094819363085999a960e21b83528b8b60048501612298565b03925af18015610bb057908891612067575b505060018060a01b0384169382857fda5b062985693ef810f4e00ffa659095b4d7d5c9b3c5b6dd33a3979e12deffaa60405180611fce8c8c8b84611871565b0390a33b15159081612055575b50611ff8575b50505050505091600160a01b906000541617600055565b823b15612051579085809493926120256040519788968795869463613f703960e11b865260048601611dbb565b03925af18015610ca45761203d575b80808080611fe1565b61204782916110dd565b6100f55780612034565b8580fd5b60209150608001510151151538611fdb565b612070906110dd565b61207b578638611f8f565b8680fd5b8880fd5b6040838101519051636eb1769f60e11b81523060048201526001600160a01b03928316602482018190529290911690602081604481855afa9081156121da579084918c9161219f575b506120df61211d94939261211892611a9b565b60405163095ea7b360e01b60208201526001600160a01b039094166024850152604484015282606481015b03601f198101845283611173565b6118f5565b6001600160a01b0361212d612606565b169060018060a01b03604084015116604051916121498361113d565b8252823b1561219b579060448a9283604051958694859363432ce91960e11b855260048501525160248401525af18015610bb057612188575b80611f2b565b612194909791976110dd565b9538612182565b8980fd5b9150506020813d6020116121d2575b816121bb60209383611173565b810103126121ce575183906120df6120cc565b8a80fd5b3d91506121ae565b6040513d8d823e3d90fd5b6040820151612202908a90309033906001600160a01b03166118a1565b611f05565b60405162461bcd60e51b815260206004820152601060248201526f135d5cdd081899481c1c9bdc1bdcd95960821b6044820152606490fd5b634e487b7160e01b87526021600452602487fd5b60405162461bcd60e51b815260206004820152601e60248201527f64697370757465722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b63ffffffff6122ba9493606093835216602082015281604082015201906114fd565b90565b92906122fb6123099263ffffffff604051958694602086019860018060a01b03168952604086015216606084015260808084015260a08301906114fd565b03601f198101835282611173565b51902090565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604482019290925261189f91612118826064810161210a565b600052600160205261235f604060002054916123d1565b0361236657565b60405162461bcd60e51b815260206004820152603860248201527f486173686564207265717565737420706172616d7320646f206e6f74206d617460448201527f6368206578697374696e672072657175657374206861736800000000000000006064820152608490fd5b6040516123e26020820180936117ce565b6101c081526101e081018181106001600160401b038211176110f05760405251902090565b90612411906123d1565b906000526001602052604060002055565b6040850151919490916001600160a01b0391908216156125115781815116156125065760608101516124fb5781602082015116156124d957509161247a60209492612498969461247061253b565b16936104136126a4565b604051630b551cd560e41b8152958694859384939160048501612298565b03915afa90811561158c576000916124bb575b50156124b657600590565b600490565b6124d3915060203d811161080b576107fd8183611173565b386124ab565b935050505060e0915001516124ec611522565b106124f657600390565b600290565b505050505050600690565b505050505050600190565b505050505050600090565b9081602091031261025557516001600160a01b03811681036102555790565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b6125a5915060203d81116125a9575b61259d8183611173565b81019061251c565b1690565b503d612593565b6002546040516302abf57960e61b81527210dbdb1b185d195c985b15da1a5d195b1a5cdd606a1b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b6002546040516302abf57960e61b81526453746f726560d81b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b6002546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526001600160a01b03916020908290602490829086165afa90811561158c5760009161258457501690565b604051906126b182611158565b600b82526a37b7a932b8bab2b9ba32b960a91b6020830152565b906126d6908261289f565b906126f56fffffffffffffffffffffffffffffffff8460201c16612798565b926001600160c01b03199061271b9060601b6bffffffffffffffffffffffff1916612798565b16604051906020820194855260408201526028815260608101938185106001600160401b038611176110f0576122ba936020938660405261276581518092876080880191016114da565b830161277a82518093876080850191016114da565b0161278c8351809360808401906114da565b01038084520182611173565b7f3030303030303030303030303030303030303030303030303030303030303030906001600160401b038060801b8260401b169116178060201b1779ffff000000000000ffff000000000000ffff000000000000ffff7dffff000000000000ffff000000000000ffff000000000000ffff000000008260101b169116178060081b177e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f7f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f008260041b1691161760277f0101010101010101010101010101010101010101010101010101010101010101808360011c16818460021c16178360031c161602010190565b51156128e7576122ba60226040518093600b60fa1b60208301526128cd8151809260206021860191016114da565b8101601d60f91b6021820152036002810184520182611173565b6122ba6021604051836129048295518092602080860191016114da565b8101601d60f91b602082015203600181018452018261117356fea2646970667358221220977f2ec65b4916e4cf5bffa7726d5aecf86966a0f955d9e67d36f1664487e22364736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_finderAddress": "finder to use to get addresses of DVM contracts.",
          "_liveness": "default liveness applied to each price request.",
          "_timerAddress": "address of the timer contract. Should be 0x0 in prod."
        }
      },
      "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "request": "price request parameters whose hash must match the request that the caller wants to             dispute.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
        }
      },
      "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,address)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "disputer": "address to set as the disputer.",
          "identifier": "price identifier to identify the existing request.",
          "request": "price request parameters whose hash must match the request that the caller wants to              dispute.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
        }
      },
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "getState(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "request": "price request parameters.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "_0": "the State."
        }
      },
      "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "request": "price request parameters. The hash of these parameters must match with the request hash that is associated with the price request unique ID {requester, identifier, timestamp, ancillaryData}, or this method will revert.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "_0": "boolean indicating true if price exists and false if not."
        }
      },
      "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),int256)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "proposedPrice": "price being proposed.",
          "request": "price request parameters whose hash must match the request that the caller wants to propose a price for.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
        }
      },
      "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,int256)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "proposedPrice": "price being proposed.",
          "proposer": "address to set as the proposer.",
          "request": "price request parameters whose hash must match the request that the caller wants to propose a price for.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
        }
      },
      "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256),address,int256)": {
        "details": "The caller is the requester, but the proposer can be customized.",
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
          "identifier": "price identifier to identify the existing request.",
          "proposedPrice": "price being proposed.",
          "proposer": "address to set as the proposer.",
          "requestSettings": "settings for the request.",
          "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
        }
      },
      "requestPrice(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256))": {
        "params": {
          "ancillaryData": "ancillary data representing additional args being passed with the price request.",
          "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
          "identifier": "price identifier being requested.",
          "requestSettings": "settings for the request.",
          "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
          "timestamp": "timestamp of the price being requested."
        },
        "returns": {
          "totalBond": "default bond + final fee that the proposer and disputer will be required to pay."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      },
      "settle(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "request": "price request parameters whose hash must match the request that the caller wants to              settle.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "payout": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.",
          "resolvedPrice": "the price that the request settled to."
        }
      },
      "stampAncillaryData(bytes,address)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "requester": "sender of the initial price request."
        },
        "returns": {
          "_0": "the stamped ancillary bytes."
        }
      }
    },
    "title": "Optimistic Oracle with a different interface and fewer features that emphasizes gas cost reductions.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "disputePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "notice": "Disputes a price request with an active proposal where caller is the disputer."
      },
      "disputePriceFor(bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,address)": {
        "notice": "Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller."
      },
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "getState(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "notice": "Computes the current state of a price request. See the State enum for more details."
      },
      "hasPrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "notice": "Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price)."
      },
      "proposePrice(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),int256)": {
        "notice": "Proposes a price value where caller is the proposer."
      },
      "proposePriceFor(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256),address,int256)": {
        "notice": "Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller."
      },
      "requestAndProposePriceFor(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256),address,int256)": {
        "notice": "Combines logic of requestPrice and proposePrice while taking advantage of gas savings from not having to overwrite Request params that a normal requestPrice() => proposePrice() flow would entail. Note: The proposer will receive any rewards that come from this proposal. However, any bonds are pulled from the caller."
      },
      "requestPrice(bytes32,uint32,bytes,address,uint256,(bool,bool,bool,uint256,uint256))": {
        "notice": "Requests a new price."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      },
      "settle(address,bytes32,uint32,bytes,(address,address,address,bool,(bool,bool,bool,uint256,uint256),int256,int256,uint256,uint256,uint256))": {
        "notice": "Attempts to settle an outstanding price request. Will revert if it isn't settleable."
      },
      "stampAncillaryData(bytes,address)": {
        "notice": "Generates stamped ancillary data in the format that it would be used in the case of a price dispute."
      }
    },
    "notice": "Pre-DVM escalation contract that allows faster settlement.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17751,
        "contract": "contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol:SkinnyOptimisticOracleV2",
        "label": "timerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol:SkinnyOptimisticOracleV2",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 60740,
        "contract": "contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol:SkinnyOptimisticOracleV2",
        "label": "requests",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 60743,
        "contract": "contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol:SkinnyOptimisticOracleV2",
        "label": "finder",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FinderInterface)36753"
      },
      {
        "astId": 60745,
        "contract": "contracts/optimistic-oracle-v2/implementation/SkinnyOptimisticOracleV2.sol:SkinnyOptimisticOracleV2",
        "label": "defaultLiveness",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}