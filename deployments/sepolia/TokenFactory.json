{
  "address": "0x8Aa853D41A08c9E22CB27A383344a273d12310C3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "tokenDecimals",
          "type": "uint8"
        }
      ],
      "name": "createToken",
      "outputs": [
        {
          "internalType": "contract ExpandedIERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcf53fcf3bb69687e1ac3aa857fa061fb24665dd59767c954e2348ed7d04be1c7",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x8Aa853D41A08c9E22CB27A383344a273d12310C3",
    "transactionIndex": 62,
    "gasUsed": "2019347",
    "logsBloom": "0x
    "blockHash": "0xcc192f81ea872ebada59e0879dd29c11e5c02ea2a5753f044796ef1655e6eb53",
    "transactionHash": "0xcf53fcf3bb69687e1ac3aa857fa061fb24665dd59767c954e2348ed7d04be1c7",
    "logs": [],
    "blockNumber": 6153698,
    "cumulativeGasUsed": "13925873",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"tokenDecimals\",\"type\":\"uint8\"}],\"name\":\"createToken\",\"outputs\":[{\"internalType\":\"contract ExpandedIERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createToken(string,string,uint8)\":{\"details\":\"The caller will become the only minter and burner and the new owner capable of assigning the roles.\",\"params\":{\"tokenDecimals\":\"used to define the precision used in the token's numerical representation.\",\"tokenName\":\"used to describe the new token.\",\"tokenSymbol\":\"short ticker abbreviation of the name. Ideally < 5 chars.\"},\"returns\":{\"newToken\":\"an instance of the newly created token interface.\"}}},\"title\":\"Factory for creating new mintable and burnable tokens.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createToken(string,string,uint8)\":{\"notice\":\"Create a new token and return it to the caller.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/financial-templates/common/TokenFactory.sol\":\"TokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/ExpandedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\r\\n * be the owner who is capable of adding new roles.\\r\\n */\\r\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\r\\n    enum Roles {\\r\\n        // Can set the minter and burner.\\r\\n        Owner,\\r\\n        // Addresses that can mint new tokens.\\r\\n        Minter,\\r\\n        // Addresses that can burn tokens that address owns.\\r\\n        Burner\\r\\n    }\\r\\n\\r\\n    uint8 _decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the ExpandedERC20.\\r\\n     * @param _tokenName The name which describes the new token.\\r\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param _tokenDecimals The number of decimals to define token precision.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol,\\r\\n        uint8 _tokenDecimals\\r\\n    ) ERC20(_tokenName, _tokenSymbol) {\\r\\n        _decimals = _tokenDecimals;\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\r\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\r\\n     * @param recipient address to mint to.\\r\\n     * @param value amount of tokens to mint.\\r\\n     * @return True if the mint succeeded, or False.\\r\\n     */\\r\\n    function mint(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Minter))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _mint(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     * @return True if the burn succeeded, or False.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Burner))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _burn(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Minter role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Minter role is added.\\r\\n     */\\r\\n    function addMinter(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Burner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Burner role is added.\\r\\n     */\\r\\n    function addBurner(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset Owner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The new holder of the Owner role.\\r\\n     */\\r\\n    function resetOwner(address account) external virtual override {\\r\\n        resetMember(uint256(Roles.Owner), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5ad65b24455d06323ae045e0998a08a36d52bc12644cf667ad3a0e8d92ef734\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface that includes burn and mint methods.\\r\\n */\\r\\nabstract contract ExpandedIERC20 is IERC20 {\\r\\n    /**\\r\\n     * @notice Burns a specific amount of the caller's tokens.\\r\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\r\\n     */\\r\\n    function burn(uint256 value) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\r\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\r\\n     */\\r\\n    function mint(address to, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    function addMinter(address account) external virtual;\\r\\n\\r\\n    function addBurner(address account) external virtual;\\r\\n\\r\\n    function resetOwner(address account) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3e81268dc3417f29f6047fab4fa03d5b1fc23f280485ba81b90769c971293fc\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/SyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../common/implementation/ExpandedERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Burnable and mintable ERC20.\\r\\n * @dev The contract deployer will initially be the only minter, burner and owner capable of adding new roles.\\r\\n */\\r\\n\\r\\ncontract SyntheticToken is ExpandedERC20, Lockable {\\r\\n    /**\\r\\n     * @notice Constructs the SyntheticToken.\\r\\n     * @param tokenName The name which describes the new token.\\r\\n     * @param tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param tokenDecimals The number of decimals to define token precision.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol,\\r\\n        uint8 tokenDecimals\\r\\n    ) ExpandedERC20(tokenName, tokenSymbol, tokenDecimals) nonReentrant() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Add Minter role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Minter role is added.\\r\\n     */\\r\\n    function addMinter(address account) external override nonReentrant() {\\r\\n        addMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove Minter role from account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address from which the Minter role is removed.\\r\\n     */\\r\\n    function removeMinter(address account) external nonReentrant() {\\r\\n        removeMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Burner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Burner role is added.\\r\\n     */\\r\\n    function addBurner(address account) external override nonReentrant() {\\r\\n        addMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes Burner role from account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address from which the Burner role is removed.\\r\\n     */\\r\\n    function removeBurner(address account) external nonReentrant() {\\r\\n        removeMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset Owner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The new holder of the Owner role.\\r\\n     */\\r\\n    function resetOwner(address account) external override nonReentrant() {\\r\\n        resetMember(uint256(Roles.Owner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given account holds the Minter role.\\r\\n     * @param account The address which is checked for the Minter role.\\r\\n     * @return bool True if the provided account is a Minter.\\r\\n     */\\r\\n    function isMinter(address account) public view nonReentrantView() returns (bool) {\\r\\n        return holdsRole(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given account holds the Burner role.\\r\\n     * @param account The address which is checked for the Burner role.\\r\\n     * @return bool True if the provided account is a Burner.\\r\\n     */\\r\\n    function isBurner(address account) public view nonReentrantView() returns (bool) {\\r\\n        return holdsRole(uint256(Roles.Burner), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa3e166aa7e6249d741f5a6549d96ae8b028b2138f545e9b4cb62f994a3f38a59\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SyntheticToken.sol\\\";\\r\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Factory for creating new mintable and burnable tokens.\\r\\n */\\r\\n\\r\\ncontract TokenFactory is Lockable {\\r\\n    /**\\r\\n     * @notice Create a new token and return it to the caller.\\r\\n     * @dev The caller will become the only minter and burner and the new owner capable of assigning the roles.\\r\\n     * @param tokenName used to describe the new token.\\r\\n     * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param tokenDecimals used to define the precision used in the token's numerical representation.\\r\\n     * @return newToken an instance of the newly created token interface.\\r\\n     */\\r\\n    function createToken(\\r\\n        string calldata tokenName,\\r\\n        string calldata tokenSymbol,\\r\\n        uint8 tokenDecimals\\r\\n    ) external nonReentrant() returns (ExpandedIERC20 newToken) {\\r\\n        SyntheticToken mintableToken = new SyntheticToken(tokenName, tokenSymbol, tokenDecimals);\\r\\n        mintableToken.resetOwner(msg.sender);\\r\\n        newToken = ExpandedIERC20(address(mintableToken));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ebfada202555d40bd73ab0febd4830f25a5fd3507384594afb3e6218bf8afb3\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080806040523461002357600160ff19600054161760005561232a90816100298239f35b600080fdfe608060408181526004908136101561001657600080fd5b600092833560e01c63e8a0aed31461002d57600080fd5b346101d85760603660031901126101d85767ffffffffffffffff92803584811161016e5761005e90369083016101dc565b6024358681116101d45761007590369085016101dc565b906044359160ff83168093036101d05789549660ff88161561018f575060ff199687168a558751946120c480870195908b87118888101761017c57926100d36100e19389989796938d96620002318b3960608952606089019161020f565b91868303602088015261020f565b920152039086f08015610172576001600160a01b031693843b1561016e5783516339e6401560e11b81523383820152908682602481838a5af180156101645761013a575b50505092600160209482541617905551908152f35b819692961161015157835293506001602038610125565b634e487b7160e01b825260418652602482fd5b85513d89823e3d90fd5b8580fd5b83513d87823e3d90fd5b634e487b7160e01b8d526041895260248dfd5b62461bcd60e51b8152602087820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8980fd5b8780fd5b8380fd5b9181601f8401121561020a5782359167ffffffffffffffff831161020a576020838186019501011161020a57565b600080fd5b908060209392818452848401376000828201840152601f01601f191601019056fe60406080815234620007c657620020c4803803806200001e81620007eb565b928339810190606081830312620007c65780516001600160401b039290838111620007c657816200005191840162000811565b9060209081840151858111620007c65786916200007091860162000811565b9301519160ff94858416809403620007c657815193818511620006c6576003918254956001948588811c98168015620007bb575b87891014620007a5578190601f988981116200074f575b508790898311600114620006e857600092620006dc575b505060001982861b1c191690851b1783555b8651908111620006c65760049687548581811c91168015620006bb575b87821014620006a65790818884931162000650575b508690888311600114620005e957600092620005dd575b505060001982851b1c191690841b1786555b60ff1990816006541617600655600080526005918285526200017588858b6000200154166200016e8162000883565b15620008a4565b600080528285526002896000208581018685825416179055600081550133156200058e5780546001600160a01b0319163317905560008080528386528990208401548816620001c48162000883565b156200053657620001d4620007cb565b6000815284600052838652620001f789868c6000200154166200016e8162000883565b84600052838652818a600020868101600286825416179055600081550190856000905b62000492575b5050506000805282855287848a6000200154166200023e8162000883565b156200043a57908793929162000253620007cb565b906000825260026000528387526200027886868d6000200154166200016e8162000883565b60026000528387528a600020858101600285825416179055600081550190846000905b62000386575b5050505060008052835286600020015416620002bd8162000883565b156200032f5761010061ff00196006541617938460081c1615620002ef57505050600655516117b29081620008f28239f35b845162461bcd60e51b81529283015260248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260649150fd5b8260849186519162461bcd60e51b835282015260386024820152600080516020620020a483398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152fd5b909192939495825182101562000431575080851b82018701516001600160a01b03168015620003f0576000528287528a60002086858254161790556000198114620003db57899594939291908501856200029b565b601189634e487b7160e01b6000525260246000fd5b60648a8a8a8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b959493620002a1565b885162461bcd60e51b815280880186905260386024820152600080516020620020a483398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152608490fd5b8151811015620005305780861b82018801516001600160a01b03168015620004ee576000528288528b60002087868254161790556000198114620004d9578601866200021a565b60118a634e487b7160e01b6000525260246000fd5b5060648a8a8a8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b62000220565b885162461bcd60e51b8152808801869052603c6024820152600080516020620020a483398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b895162461bcd60e51b8152808901879052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b0151905038806200012d565b90869350601f198316918a600052886000209260005b8a82821062000639575050841162000620575b505050811b0186556200013f565b015160001983871b60f8161c1916905538808062000612565b8385015186558a97909501949384019301620005ff565b90915088600052866000208880850160051c8201928986106200069c575b918891869594930160051c01915b8281106200068c57505062000116565b600081558594508891016200067c565b925081926200066e565b602289634e487b7160e01b6000525260246000fd5b90607f169062000101565b634e487b7160e01b600052604160045260246000fd5b015190503880620000d2565b90879350601f1983169187600052896000209260005b8b8282106200073857505084116200071f575b505050811b018355620000e4565b015160001983881b60f8161c1916905538808062000711565b8385015186558b97909501949384019301620006fe565b90915085600052876000208980850160051c8201928a86106200079b575b918991869594930160051c01915b8281106200078b575050620000bb565b600081558594508991016200077b565b925081926200076d565b634e487b7160e01b600052602260045260246000fd5b97607f1697620000a4565b600080fd5b60405190602082016001600160401b03811183821017620006c657604052565b6040519190601f01601f191682016001600160401b03811183821017620006c657604052565b919080601f84011215620007c65782516001600160401b038111620006c65760209062000847601f8201601f19168301620007eb565b92818452828287010111620007c65760005b8181106200086f57508260009394955001015290565b858101830151848201840152820162000859565b600311156200088e57565b634e487b7160e01b600052602160045260246000fd5b15620008ac57565b60405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fdfe60406080815260048036101561001457600080fd5b600091823560e01c80630284685814610f3f57806306fdde0314610e64578063095ea7b314610e3a57806318160ddd14610e1b57806323b872dd14610d515780633092afd514610c86578063313ce56714610c645780633950935114610c1457806340c10f1914610b4457806342966c6814610b175780634334614a14610ae95780636be7658b14610a4157806370a0823114610a0a57806373cc802a1461093b57806374d0a6761461084657806379cc6790146108115780637cdc1cb9146107e957806395d89b41146106c9578063983b2d56146105b3578063a457c2d71461050c578063a9059cbb146104db578063aa271e1a146104a4578063aaa14ca314610413578063ab3545e5146103bf578063d97c05be146102bd578063dd62ed3e146102705763f44637ba1461014957600080fd5b3461026c57602090816003193601126102685761016461100a565b61016c611707565b61ff0019928360065416600655600286526005815261019f600260ff6001868a2001541661019981611317565b146116a6565b60028652600581526101bd6101b88488205433906115cc565b61164e565b60028652600581526003838720019160018060a01b0316948515610227575084865252808420805460ff1916600117905551916101009190339060027f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8787a46006541617600655f35b60649184519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b8380fd5b8280fd5b8382346102b957806003193601126102b9578060209261028e61100a565b610296611025565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b503461026c578060031936011261026c578135906102d9611025565b82855260056020526102fe600160ff818589200154166102f881611317565b146115ea565b82855260056020526103176101b88387205433906115cc565b82855260056020526002828620019060018060a01b0316938415610370575080546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b608490602084519162461bcd60e51b8352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152fd5b50903461026c57602036600319011261026c579160209235808252600584526103f5600160ff818686200154166102f881611317565b8152600583528190206002015490516001600160a01b039091168152f35b50903461026c57602036600319011261026c5735908183526005602052610448600260ff600184872001541661019981611317565b61045a61045533846115cc565b611337565b818352600560205261048a336003838620019060018060a01b0316600052602052604060002060ff198154169055565b51903390339060008051602061175d8339815191528585a4f35b8382346102b95760203660031901126102b9576020906104d26104c561100a565b6104cd611707565b611495565b90519015158152f35b8382346102b957806003193601126102b9576020906105056104fb61100a565b60243590336110a7565b5160018152f35b5091346105b057826003193601126105b05761052661100a565b918360243592338152600160205281812060018060a01b038616825260205220549082821061055f576020856105058585038733611215565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b509190346102b9576020928360031936011261026c576105d161100a565b6105d9611707565b61ff001991826006541660065560019182865260058752610607600260ff85858a2001541661019981611317565b8286526005875261061f6101b88388205433906115cc565b828652600587526003828720019060018060a01b03169485156106865750859685610100969752528086208260ff19825416179055519333917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8787a46006541617600655f35b825162461bcd60e51b8152908101889052601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b508290346102b957816003193601126102b957805190828454600181811c908083169283156107df575b60209384841081146107cc578388529081156107b0575060011461075b575b505050829003601f01601f191682019267ffffffffffffffff841183851017610748575082918261074492528261103b565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b83851061079c5750505050830101858080610712565b805488860183015293019284908201610786565b60ff1916878501525050151560051b8401019050858080610712565b634e487b7160e01b895260228a52602489fd5b91607f16916106f3565b5082346105b057816003193601126105b057506104d260209261080a611025565b90356115cc565b8382346102b957806003193601126102b95760209061050561083161100a565b61083d61045533611572565b6024359061138e565b503461026c578060031936011261026c57813590610862611025565b8285526005602052610882600260ff600185892001541661019981611317565b828552600560205261089b6101b88387205433906115cc565b82855260056020526003828620019060018060a01b03169384156108f85750838552602052808420805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b606490602084519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b503461026c57602036600319011261026c5761095561100a565b9061095e611707565b61ff0019918260065416600655848052600560205261098a600160ff818589200154166102f881611317565b84805260056020526109a36101b88387205433906115cc565b84805260056020526002828620019060018060a01b0316938415610370575080546001600160a01b03191684179055519161010091903390857f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468187a46006541617600655f35b8382346102b95760203660031901126102b95760209181906001600160a01b03610a3261100a565b16815280845220549051908152f35b50903461026c578160031936011261026c573590610a5d611025565b908284526005602052610a7e600260ff600184882001541661019981611317565b8284526005602052610a976101b88286205433906115cc565b8284526005602052610ac7826003838720019060018060a01b0316600052602052604060002060ff198154169055565b519133916001600160a01b03169060008051602061175d8339815191528585a4f35b8382346102b95760203660031901126102b9576020906104d2610b0a61100a565b610b12611707565b611572565b50903461026c57602036600319011261026c57610b4190610b3a61045533611572565b353361138e565b51f35b5082346105b057816003193601126105b057610b5e61100a565b9060243591610b6f61045533611495565b6001600160a01b0316918215610bd157602080955081610bb27fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93600254611084565b6002558484528382528584208181540190558551908152a35160018152f35b835162461bcd60e51b8152602081870152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b8382346102b957806003193601126102b957610505602092610c5d610c3761100a565b338352600186528483206001600160a01b03821684528652918490205460243590611084565b9033611215565b8382346102b957816003193601126102b95760209060ff600654169051908152f35b8382346102b95760203660031901126102b957610100610ca461100a565b91610cad611707565b61ff0019908160065416600655600185526005602052610cdb600260ff600184892001541661019981611317565b600185526005602052610cf56101b88287205433906115cc565b600185526005602052610d26846003838820019060018060a01b0316600052602052604060002060ff198154169055565b519233906001600160a01b0316600160008051602061175d8339815191528787a46006541617600655f35b509190346102b95760603660031901126102b957610d6d61100a565b610d75611025565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610daf575b6020866105058787876110a7565b848210610dd85750918391610dcd6020969561050595033383611215565b919394819350610da1565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b8382346102b957816003193601126102b9576020906002549051908152f35b8382346102b957806003193601126102b957602090610505610e5a61100a565b6024359033611215565b508290346102b957816003193601126102b95780519082600354600181811c90808316928315610f35575b60209384841081146107cc578388529081156107b05750600114610edf57505050829003601f01601f191682019267ffffffffffffffff841183851017610748575082918261074492528261103b565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610f215750505050830101858080610712565b805488860183015293019284908201610f0b565b91607f1691610e8f565b8382346102b95760203660031901126102b957610100610f5d61100a565b91610f66611707565b61ff0019908160065416600655600285526005602052610f94600260ff600184892001541661019981611317565b600285526005602052610fae6101b88287205433906115cc565b600285526005602052610fdf846003838820019060018060a01b0316600052602052604060002060ff198154169055565b519233906001600160a01b0316600260008051602061175d8339815191528787a46006541617600655f35b600435906001600160a01b038216820361102057565b600080fd5b602435906001600160a01b038216820361102057565b6020808252825181830181905290939260005b82811061107057505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161104e565b9190820180921161109157565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169182156111c257169182156111715760008281528060205260408120549180831061111d57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b039081169182156112c657169182156112765760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6003111561132157565b634e487b7160e01b600052602160045260246000fd5b1561133e57565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b6001600160a01b03168015611446576000918183528260205260408320548181106113f657817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b600160005260056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017c547f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b9060ff166114ef81611317565b6001810361150d5750600201546001600160a01b0391821691161490565b80611519600292611317565b146115545760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60039160018060a01b03166000520160205260ff6040600020541690565b600260005260056020527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733b547f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a9060ff166114ef81611317565b6000526005602052604060002060ff6001820154166114ef81611317565b156115f157565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1561165557565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b156116ad57565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b60ff60065460081c161561171757565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfeeb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5afa26469706673582212207e94ec2549cc5eac65d3ba04ab6bfa51e64e5dc4c828ffbce39686be8ce0a3d364736f6c63430008100033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a26469706673582212200f48139a6ed0a3ebfac3d7979174b17d0a28ffee32465a50bc44acab133eff5464736f6c63430008100033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c63e8a0aed31461002d57600080fd5b346101d85760603660031901126101d85767ffffffffffffffff92803584811161016e5761005e90369083016101dc565b6024358681116101d45761007590369085016101dc565b906044359160ff83168093036101d05789549660ff88161561018f575060ff199687168a558751946120c480870195908b87118888101761017c57926100d36100e19389989796938d96620002318b3960608952606089019161020f565b91868303602088015261020f565b920152039086f08015610172576001600160a01b031693843b1561016e5783516339e6401560e11b81523383820152908682602481838a5af180156101645761013a575b50505092600160209482541617905551908152f35b819692961161015157835293506001602038610125565b634e487b7160e01b825260418652602482fd5b85513d89823e3d90fd5b8580fd5b83513d87823e3d90fd5b634e487b7160e01b8d526041895260248dfd5b62461bcd60e51b8152602087820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8980fd5b8780fd5b8380fd5b9181601f8401121561020a5782359167ffffffffffffffff831161020a576020838186019501011161020a57565b600080fd5b908060209392818452848401376000828201840152601f01601f191601019056fe60406080815234620007c657620020c4803803806200001e81620007eb565b928339810190606081830312620007c65780516001600160401b039290838111620007c657816200005191840162000811565b9060209081840151858111620007c65786916200007091860162000811565b9301519160ff94858416809403620007c657815193818511620006c6576003918254956001948588811c98168015620007bb575b87891014620007a5578190601f988981116200074f575b508790898311600114620006e857600092620006dc575b505060001982861b1c191690851b1783555b8651908111620006c65760049687548581811c91168015620006bb575b87821014620006a65790818884931162000650575b508690888311600114620005e957600092620005dd575b505060001982851b1c191690841b1786555b60ff1990816006541617600655600080526005918285526200017588858b6000200154166200016e8162000883565b15620008a4565b600080528285526002896000208581018685825416179055600081550133156200058e5780546001600160a01b0319163317905560008080528386528990208401548816620001c48162000883565b156200053657620001d4620007cb565b6000815284600052838652620001f789868c6000200154166200016e8162000883565b84600052838652818a600020868101600286825416179055600081550190856000905b62000492575b5050506000805282855287848a6000200154166200023e8162000883565b156200043a57908793929162000253620007cb565b906000825260026000528387526200027886868d6000200154166200016e8162000883565b60026000528387528a600020858101600285825416179055600081550190846000905b62000386575b5050505060008052835286600020015416620002bd8162000883565b156200032f5761010061ff00196006541617938460081c1615620002ef57505050600655516117b29081620008f28239f35b845162461bcd60e51b81529283015260248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260649150fd5b8260849186519162461bcd60e51b835282015260386024820152600080516020620020a483398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152fd5b909192939495825182101562000431575080851b82018701516001600160a01b03168015620003f0576000528287528a60002086858254161790556000198114620003db57899594939291908501856200029b565b601189634e487b7160e01b6000525260246000fd5b60648a8a8a8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b959493620002a1565b885162461bcd60e51b815280880186905260386024820152600080516020620020a483398151915260448201527f20746f206d616e61676520612073686172656420726f6c6500000000000000006064820152608490fd5b8151811015620005305780861b82018801516001600160a01b03168015620004ee576000528288528b60002087868254161790556000198114620004d9578601866200021a565b60118a634e487b7160e01b6000525260246000fd5b5060648a8a8a8f519262461bcd60e51b845283015260248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b62000220565b885162461bcd60e51b8152808801869052603c6024820152600080516020620020a483398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b895162461bcd60e51b8152808901879052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b0151905038806200012d565b90869350601f198316918a600052886000209260005b8a82821062000639575050841162000620575b505050811b0186556200013f565b015160001983871b60f8161c1916905538808062000612565b8385015186558a97909501949384019301620005ff565b90915088600052866000208880850160051c8201928986106200069c575b918891869594930160051c01915b8281106200068c57505062000116565b600081558594508891016200067c565b925081926200066e565b602289634e487b7160e01b6000525260246000fd5b90607f169062000101565b634e487b7160e01b600052604160045260246000fd5b015190503880620000d2565b90879350601f1983169187600052896000209260005b8b8282106200073857505084116200071f575b505050811b018355620000e4565b015160001983881b60f8161c1916905538808062000711565b8385015186558b97909501949384019301620006fe565b90915085600052876000208980850160051c8201928a86106200079b575b918991869594930160051c01915b8281106200078b575050620000bb565b600081558594508991016200077b565b925081926200076d565b634e487b7160e01b600052602260045260246000fd5b97607f1697620000a4565b600080fd5b60405190602082016001600160401b03811183821017620006c657604052565b6040519190601f01601f191682016001600160401b03811183821017620006c657604052565b919080601f84011215620007c65782516001600160401b038111620006c65760209062000847601f8201601f19168301620007eb565b92818452828287010111620007c65760005b8181106200086f57508260009394955001015290565b858101830151848201840152820162000859565b600311156200088e57565b634e487b7160e01b600052602160045260246000fd5b15620008ac57565b60405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fdfe60406080815260048036101561001457600080fd5b600091823560e01c80630284685814610f3f57806306fdde0314610e64578063095ea7b314610e3a57806318160ddd14610e1b57806323b872dd14610d515780633092afd514610c86578063313ce56714610c645780633950935114610c1457806340c10f1914610b4457806342966c6814610b175780634334614a14610ae95780636be7658b14610a4157806370a0823114610a0a57806373cc802a1461093b57806374d0a6761461084657806379cc6790146108115780637cdc1cb9146107e957806395d89b41146106c9578063983b2d56146105b3578063a457c2d71461050c578063a9059cbb146104db578063aa271e1a146104a4578063aaa14ca314610413578063ab3545e5146103bf578063d97c05be146102bd578063dd62ed3e146102705763f44637ba1461014957600080fd5b3461026c57602090816003193601126102685761016461100a565b61016c611707565b61ff0019928360065416600655600286526005815261019f600260ff6001868a2001541661019981611317565b146116a6565b60028652600581526101bd6101b88488205433906115cc565b61164e565b60028652600581526003838720019160018060a01b0316948515610227575084865252808420805460ff1916600117905551916101009190339060027f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8787a46006541617600655f35b60649184519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b8380fd5b8280fd5b8382346102b957806003193601126102b9578060209261028e61100a565b610296611025565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b503461026c578060031936011261026c578135906102d9611025565b82855260056020526102fe600160ff818589200154166102f881611317565b146115ea565b82855260056020526103176101b88387205433906115cc565b82855260056020526002828620019060018060a01b0316938415610370575080546001600160a01b03191684179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b608490602084519162461bcd60e51b8352820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152fd5b50903461026c57602036600319011261026c579160209235808252600584526103f5600160ff818686200154166102f881611317565b8152600583528190206002015490516001600160a01b039091168152f35b50903461026c57602036600319011261026c5735908183526005602052610448600260ff600184872001541661019981611317565b61045a61045533846115cc565b611337565b818352600560205261048a336003838620019060018060a01b0316600052602052604060002060ff198154169055565b51903390339060008051602061175d8339815191528585a4f35b8382346102b95760203660031901126102b9576020906104d26104c561100a565b6104cd611707565b611495565b90519015158152f35b8382346102b957806003193601126102b9576020906105056104fb61100a565b60243590336110a7565b5160018152f35b5091346105b057826003193601126105b05761052661100a565b918360243592338152600160205281812060018060a01b038616825260205220549082821061055f576020856105058585038733611215565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b509190346102b9576020928360031936011261026c576105d161100a565b6105d9611707565b61ff001991826006541660065560019182865260058752610607600260ff85858a2001541661019981611317565b8286526005875261061f6101b88388205433906115cc565b828652600587526003828720019060018060a01b03169485156106865750859685610100969752528086208260ff19825416179055519333917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8787a46006541617600655f35b825162461bcd60e51b8152908101889052601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b508290346102b957816003193601126102b957805190828454600181811c908083169283156107df575b60209384841081146107cc578388529081156107b0575060011461075b575b505050829003601f01601f191682019267ffffffffffffffff841183851017610748575082918261074492528261103b565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b83851061079c5750505050830101858080610712565b805488860183015293019284908201610786565b60ff1916878501525050151560051b8401019050858080610712565b634e487b7160e01b895260228a52602489fd5b91607f16916106f3565b5082346105b057816003193601126105b057506104d260209261080a611025565b90356115cc565b8382346102b957806003193601126102b95760209061050561083161100a565b61083d61045533611572565b6024359061138e565b503461026c578060031936011261026c57813590610862611025565b8285526005602052610882600260ff600185892001541661019981611317565b828552600560205261089b6101b88387205433906115cc565b82855260056020526003828620019060018060a01b03169384156108f85750838552602052808420805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b606490602084519162461bcd60e51b8352820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152fd5b503461026c57602036600319011261026c5761095561100a565b9061095e611707565b61ff0019918260065416600655848052600560205261098a600160ff818589200154166102f881611317565b84805260056020526109a36101b88387205433906115cc565b84805260056020526002828620019060018060a01b0316938415610370575080546001600160a01b03191684179055519161010091903390857f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468187a46006541617600655f35b8382346102b95760203660031901126102b95760209181906001600160a01b03610a3261100a565b16815280845220549051908152f35b50903461026c578160031936011261026c573590610a5d611025565b908284526005602052610a7e600260ff600184882001541661019981611317565b8284526005602052610a976101b88286205433906115cc565b8284526005602052610ac7826003838720019060018060a01b0316600052602052604060002060ff198154169055565b519133916001600160a01b03169060008051602061175d8339815191528585a4f35b8382346102b95760203660031901126102b9576020906104d2610b0a61100a565b610b12611707565b611572565b50903461026c57602036600319011261026c57610b4190610b3a61045533611572565b353361138e565b51f35b5082346105b057816003193601126105b057610b5e61100a565b9060243591610b6f61045533611495565b6001600160a01b0316918215610bd157602080955081610bb27fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef93600254611084565b6002558484528382528584208181540190558551908152a35160018152f35b835162461bcd60e51b8152602081870152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b8382346102b957806003193601126102b957610505602092610c5d610c3761100a565b338352600186528483206001600160a01b03821684528652918490205460243590611084565b9033611215565b8382346102b957816003193601126102b95760209060ff600654169051908152f35b8382346102b95760203660031901126102b957610100610ca461100a565b91610cad611707565b61ff0019908160065416600655600185526005602052610cdb600260ff600184892001541661019981611317565b600185526005602052610cf56101b88287205433906115cc565b600185526005602052610d26846003838820019060018060a01b0316600052602052604060002060ff198154169055565b519233906001600160a01b0316600160008051602061175d8339815191528787a46006541617600655f35b509190346102b95760603660031901126102b957610d6d61100a565b610d75611025565b91846044359460018060a01b038416815260016020528181203382526020522054906000198203610daf575b6020866105058787876110a7565b848210610dd85750918391610dcd6020969561050595033383611215565b919394819350610da1565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b8382346102b957816003193601126102b9576020906002549051908152f35b8382346102b957806003193601126102b957602090610505610e5a61100a565b6024359033611215565b508290346102b957816003193601126102b95780519082600354600181811c90808316928315610f35575b60209384841081146107cc578388529081156107b05750600114610edf57505050829003601f01601f191682019267ffffffffffffffff841183851017610748575082918261074492528261103b565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b838510610f215750505050830101858080610712565b805488860183015293019284908201610f0b565b91607f1691610e8f565b8382346102b95760203660031901126102b957610100610f5d61100a565b91610f66611707565b61ff0019908160065416600655600285526005602052610f94600260ff600184892001541661019981611317565b600285526005602052610fae6101b88287205433906115cc565b600285526005602052610fdf846003838820019060018060a01b0316600052602052604060002060ff198154169055565b519233906001600160a01b0316600260008051602061175d8339815191528787a46006541617600655f35b600435906001600160a01b038216820361102057565b600080fd5b602435906001600160a01b038216820361102057565b6020808252825181830181905290939260005b82811061107057505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161104e565b9190820180921161109157565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b039081169182156111c257169182156111715760008281528060205260408120549180831061111d57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b039081169182156112c657169182156112765760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6003111561132157565b634e487b7160e01b600052602160045260246000fd5b1561133e57565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b6001600160a01b03168015611446576000918183528260205260408320548181106113f657817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608490fd5b600160005260056020527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017c547f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b9060ff166114ef81611317565b6001810361150d5750600201546001600160a01b0391821691161490565b80611519600292611317565b146115545760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60039160018060a01b03166000520160205260ff6040600020541690565b600260005260056020527f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733b547f89832631fb3c3307a103ba2c84ab569c64d6182a18893dcd163f0f1c2090733a9060ff166114ef81611317565b6000526005602052604060002060ff6001820154166114ef81611317565b156115f157565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1561165557565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b156116ad57565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b60ff60065460081c161561171757565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfeeb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5afa26469706673582212207e94ec2549cc5eac65d3ba04ab6bfa51e64e5dc4c828ffbce39686be8ce0a3d364736f6c63430008100033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a26469706673582212200f48139a6ed0a3ebfac3d7979174b17d0a28ffee32465a50bc44acab133eff5464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createToken(string,string,uint8)": {
        "details": "The caller will become the only minter and burner and the new owner capable of assigning the roles.",
        "params": {
          "tokenDecimals": "used to define the precision used in the token's numerical representation.",
          "tokenName": "used to describe the new token.",
          "tokenSymbol": "short ticker abbreviation of the name. Ideally < 5 chars."
        },
        "returns": {
          "newToken": "an instance of the newly created token interface."
        }
      }
    },
    "title": "Factory for creating new mintable and burnable tokens.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createToken(string,string,uint8)": {
        "notice": "Create a new token and return it to the caller."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16304,
        "contract": "contracts/financial-templates/common/TokenFactory.sol:TokenFactory",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}