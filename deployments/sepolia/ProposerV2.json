{
  "address": "0x266be193141e3B0197A02194baf2Bd05A0aE48EE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_bond",
          "type": "uint256"
        },
        {
          "internalType": "contract GovernorV2",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract Finder",
          "name": "_finder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        }
      ],
      "name": "BondSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "ProposalResolved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondedProposals",
      "outputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "time",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "lockedBond",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract Finder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract GovernorV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernorV2.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "resolveProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bond",
          "type": "uint256"
        }
      ],
      "name": "setBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f5ee5efa45dff81a9dfceb76b45f7be8e32f3c22d0e73cf4392ad965240cf38",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x266be193141e3B0197A02194baf2Bd05A0aE48EE",
    "transactionIndex": 19,
    "gasUsed": "1408255",
    "logsBloom": "0x
    "blockHash": "0x1d93b4b92e0d0f479ee08aa6fb67213ae4fee776845b17e3d40bf1ed100a338f",
    "transactionHash": "0x3f5ee5efa45dff81a9dfceb76b45f7be8e32f3c22d0e73cf4392ad965240cf38",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 6161905,
        "transactionHash": "0x3f5ee5efa45dff81a9dfceb76b45f7be8e32f3c22d0e73cf4392ad965240cf38",
        "address": "0x266be193141e3B0197A02194baf2Bd05A0aE48EE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0x1d93b4b92e0d0f479ee08aa6fb67213ae4fee776845b17e3d40bf1ed100a338f"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 6161905,
        "transactionHash": "0x3f5ee5efa45dff81a9dfceb76b45f7be8e32f3c22d0e73cf4392ad965240cf38",
        "address": "0x266be193141e3B0197A02194baf2Bd05A0aE48EE",
        "topics": [
          "0x1b44689fb73c0c9cdf591d534287488fc7959fd3647346821063a3e567ec9a99"
        ],
        "data": "0x00000000000000000000000000000000000000000000010f0cf064dd59200000",
        "logIndex": 32,
        "blockHash": "0x1d93b4b92e0d0f479ee08aa6fb67213ae4fee776845b17e3d40bf1ed100a338f"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 6161905,
        "transactionHash": "0x3f5ee5efa45dff81a9dfceb76b45f7be8e32f3c22d0e73cf4392ad965240cf38",
        "address": "0x266be193141e3B0197A02194baf2Bd05A0aE48EE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6",
          "0x000000000000000000000000681c205ff833dfc748477061e9c299cdb07de82e"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0x1d93b4b92e0d0f479ee08aa6fb67213ae4fee776845b17e3d40bf1ed100a338f"
      }
    ],
    "blockNumber": 6161905,
    "cumulativeGasUsed": "3320196",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x473411E26885aE3A291EF4F4eB430F33946EDAD7",
    "5000000000000000000000",
    "0x681c205Ff833dFc748477061E9c299cDb07DE82e",
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"},{\"internalType\":\"contract GovernorV2\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract Finder\",\"name\":\"_finder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"BondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"ProposalResolved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondedProposals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lockedBond\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract Finder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract GovernorV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernorV2.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"resolveProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bond\",\"type\":\"uint256\"}],\"name\":\"setBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_bond\":\"the bond amount.\",\"_finder\":\"the finder contract used to look up addresses.\",\"_governor\":\"the governor contract that this contract makes proposals to.\",\"_token\":\"the ERC20 token that the bond is paid in.\"}},\"getCurrentTime()\":{\"details\":\"Can be overridden to control contract time.\",\"returns\":{\"_0\":\"the current block timestamp.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"propose((address,uint256,bytes)[],bytes)\":{\"details\":\"Pulls bond from the caller.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"transactions\":\"list of transactions for the governor to execute.\"},\"returns\":{\"_0\":\"id the id of the governor proposal.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"resolveProposal(uint256)\":{\"details\":\"For the resolution to work correctly, this contract must be a registered contract in the DVM.\",\"params\":{\"id\":\"proposal id.\"}},\"setBond(uint256)\":{\"details\":\"Admin is intended to be the governance system itself.\",\"params\":{\"_bond\":\"the new bond.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Proposer contract that allows anyone to make governance proposals with a bond.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Construct the Proposer contract.\"},\"getCurrentTime()\":{\"notice\":\"Returns the current block timestamp.\"},\"propose((address,uint256,bytes)[],bytes)\":{\"notice\":\"Propose a new set of governance transactions for vote.\"},\"resolveProposal(uint256)\":{\"notice\":\"Resolves a proposal by checking the status of the request in the Voting contract.\"},\"setBond(uint256)\":{\"notice\":\"Admin method to set the bond amount.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data-verification-mechanism/implementation/ProposerV2.sol\":\"ProposerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// This contract is taken from Uniswap's multi call implementation (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol)\\r\\n// and was modified to be solidity 0.8 compatible. Additionally, the method was restricted to only work with msg.value\\r\\n// set to 0 to avoid any nasty attack vectors on function calls that use value sent with deposits.\\r\\n\\r\\n/// @title MultiCaller\\r\\n/// @notice Enables calling multiple methods in a single call to the contract\\r\\ncontract MultiCaller {\\r\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\r\\n        results = new bytes[](data.length);\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\r\\n\\r\\n            if (!success) {\\r\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\r\\n                if (result.length < 68) revert();\\r\\n                assembly {\\r\\n                    result := add(result, 0x04)\\r\\n                }\\r\\n                revert(abi.decode(result, (string)));\\r\\n            }\\r\\n\\r\\n            results[i] = result;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb65e9816df65a8c97c2db52e067dd39d5b959dc7524a7f518ff13567cb967bb\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/AdminIdentifierLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @title Library to construct admin identifiers.\\r\\n */\\r\\nlibrary AdminIdentifierLib {\\r\\n    // Returns a UTF-8 identifier representing a particular admin proposal.\\r\\n    // The identifier is of the form \\\"Admin n\\\", where n is the proposal id provided.\\r\\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\\r\\n        bytes32 bytesId = _uintToUtf8(id);\\r\\n        return _addPrefix(bytesId, \\\"Admin \\\", 6);\\r\\n    }\\r\\n\\r\\n    // This method converts the integer `v` into a base-10, UTF-8 representation stored in a `bytes32` type.\\r\\n    // If the input cannot be represented by 32 base-10 digits, it returns only the highest 32 digits.\\r\\n    // This method is based off of this code: https://ethereum.stackexchange.com/a/6613/47801.\\r\\n    function _uintToUtf8(uint256 v) internal pure returns (bytes32) {\\r\\n        bytes32 ret;\\r\\n        if (v == 0) {\\r\\n            // Handle 0 case explicitly.\\r\\n            ret = \\\"0\\\";\\r\\n        } else {\\r\\n            // Constants.\\r\\n            uint256 bitsPerByte = 8;\\r\\n            uint256 base = 10; // Note: the output should be base-10. The below implementation will not work for bases > 10.\\r\\n            uint256 utf8NumberOffset = 48;\\r\\n            while (v > 0) {\\r\\n                // Downshift the entire bytes32 to allow the new digit to be added at the \\\"front\\\" of the bytes32, which\\r\\n                // translates to the beginning of the UTF-8 representation.\\r\\n                ret = ret >> bitsPerByte;\\r\\n\\r\\n                // Separate the last digit that remains in v by modding by the base of desired output representation.\\r\\n                uint256 leastSignificantDigit = v % base;\\r\\n\\r\\n                // Digits 0-9 are represented by 48-57 in UTF-8, so an offset must be added to create the character.\\r\\n                bytes32 utf8Digit = bytes32(leastSignificantDigit + utf8NumberOffset);\\r\\n\\r\\n                // The top byte of ret has already been cleared to make room for the new digit.\\r\\n                // Upshift by 31 bytes to put it in position, and OR it with ret to leave the other characters untouched.\\r\\n                ret |= utf8Digit << (31 * bitsPerByte);\\r\\n\\r\\n                // Divide v by the base to remove the digit that was just added.\\r\\n                v /= base;\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // This method takes two UTF-8 strings represented as bytes32 and outputs one as a prefixed by the other.\\r\\n    // `input` is the UTF-8 that should have the prefix prepended.\\r\\n    // `prefix` is the UTF-8 that should be prepended onto input.\\r\\n    // `prefixLength` is number of UTF-8 characters represented by `prefix`.\\r\\n    // Notes:\\r\\n    // 1. If the resulting UTF-8 is larger than 32 characters, then only the first 32 characters will be represented\\r\\n    //    by the bytes32 output.\\r\\n    // 2. If `prefix` has more characters than `prefixLength`, the function will produce an invalid result.\\r\\n    function _addPrefix(\\r\\n        bytes32 input,\\r\\n        bytes32 prefix,\\r\\n        uint256 prefixLength\\r\\n    ) internal pure returns (bytes32) {\\r\\n        // Downshift `input` to open space at the \\\"front\\\" of the bytes32\\r\\n        bytes32 shiftedInput = input >> (prefixLength * 8);\\r\\n        return shiftedInput | prefix;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5dab9093cc4ffca70452f79f867fa9b29110210508f81a2ebcb872952009b59\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Finder.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples of interfaces with implementations that Finder locates are the Oracle and Store interfaces.\\r\\n */\\r\\ncontract Finder is FinderInterface, Ownable {\\r\\n    mapping(bytes32 => address) public interfacesImplemented;\\r\\n\\r\\n    event InterfaceImplementationChanged(bytes32 indexed interfaceName, address indexed newImplementationAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the implementation contract.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress)\\r\\n        external\\r\\n        override\\r\\n        onlyOwner\\r\\n    {\\r\\n        interfacesImplemented[interfaceName] = implementationAddress;\\r\\n\\r\\n        emit InterfaceImplementationChanged(interfaceName, implementationAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the defined interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view override returns (address) {\\r\\n        address implementationAddress = interfacesImplemented[interfaceName];\\r\\n        require(implementationAddress != address(0x0), \\\"Implementation not found\\\");\\r\\n        return implementationAddress;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x95b0b75931ae158b99727e71c40f1a4ab55496c7663b17a6f679819149316fa5\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/GovernorV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/MultiCaller.sol\\\";\\r\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../interfaces/OracleGovernanceInterface.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./AdminIdentifierLib.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\\r\\n */\\r\\ncontract GovernorV2 is MultiRole, Lockable, MultiCaller {\\r\\n    using Address for address;\\r\\n\\r\\n    /****************************************\\r\\n     *             GOVERNOR STATE           *\\r\\n     ****************************************/\\r\\n\\r\\n    // Permissioned governor rolls.\\r\\n    enum Roles {\\r\\n        Owner, // Can set the proposer.\\r\\n        Proposer, // Address that can make proposals.\\r\\n        EmergencyProposer // Address that can make emergency proposals.\\r\\n    }\\r\\n\\r\\n    // Structure to represent a transaction.\\r\\n    struct Transaction {\\r\\n        address to; // Target.\\r\\n        uint256 value; // value, in eth, to be sent as the msg.value.\\r\\n        bytes data; // payload data to be sent to the target. Would include encoded function call data usually.\\r\\n    }\\r\\n\\r\\n    // Structure to represent a governance proposal.\\r\\n    struct Proposal {\\r\\n        Transaction[] transactions; // Set of transactions to be sent, if the proposal is executed.\\r\\n        uint256 requestTime; // Time at which the proposal was proposed.\\r\\n        bytes ancillaryData; // Extra data appended to a proposal to enhance the voters information.\\r\\n    }\\r\\n\\r\\n    // Reference to UMA finder, used to find addresses of other UMA ecosystem contracts.\\r\\n    FinderInterface public immutable finder;\\r\\n\\r\\n    // Array of all proposals.\\r\\n    Proposal[] public proposals;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\\r\\n\\r\\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\\r\\n    event EmergencyExecution(address indexed to, uint256 value, bytes data);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Governor contract.\\r\\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\\r\\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\\r\\n     */\\r\\n    constructor(address _finderAddress, uint256 _startingId) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\\r\\n        _createExclusiveRole(uint256(Roles.EmergencyProposer), uint256(Roles.Owner), msg.sender);\\r\\n\\r\\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\\r\\n        // other storage slots in the contract.\\r\\n        uint256 maxStartingId = 10**18;\\r\\n        require(_startingId <= maxStartingId, \\\"Cannot set startingId larger than 10^18\\\");\\r\\n\\r\\n        // Sets the initial length of the array to the startingId. Modifying length directly has been disallowed in solidity 0.6.\\r\\n        assembly {\\r\\n            sstore(proposals.slot, _startingId)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          PROPOSAL ACTIONS            *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\\r\\n     * @param transactions list of transactions that are being proposed.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     */\\r\\n    function propose(Transaction[] memory transactions, bytes memory ancillaryData)\\r\\n        external\\r\\n        nonReentrant()\\r\\n        onlyRoleHolder(uint256(Roles.Proposer))\\r\\n    {\\r\\n        require(transactions.length > 0, \\\"Empty transactions array\\\");\\r\\n        uint256 id = proposals.length;\\r\\n        uint256 time = getCurrentTime();\\r\\n\\r\\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\\r\\n        // structs in storage to an array of structs in memory is currently not implemented in solidity :/.\\r\\n\\r\\n        // Add a zero-initialized element to the proposals array.\\r\\n        proposals.push();\\r\\n\\r\\n        // Initialize the new proposal.\\r\\n        Proposal storage proposal = proposals[id];\\r\\n        proposal.requestTime = time;\\r\\n        proposal.ancillaryData = ancillaryData;\\r\\n\\r\\n        // Initialize the transaction array.\\r\\n        for (uint256 i = 0; i < transactions.length; i++) {\\r\\n            require(transactions[i].to != address(0), \\\"The `to` address cannot be 0x0\\\");\\r\\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\\r\\n            if (transactions[i].data.length > 0) {\\r\\n                require(transactions[i].to.isContract(), \\\"EOA can't accept tx with data\\\");\\r\\n            }\\r\\n            proposal.transactions.push(transactions[i]);\\r\\n        }\\r\\n\\r\\n        bytes32 identifier = AdminIdentifierLib._constructIdentifier(id);\\r\\n\\r\\n        // Request a vote on this proposal in the DVM.\\r\\n        _getOracle().requestGovernanceAction(identifier, time, ancillaryData);\\r\\n\\r\\n        emit NewProposal(id, transactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a proposed governance action that has been approved by voters.\\r\\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\\r\\n     * @param id unique id for the executed proposal.\\r\\n     * @param transactionIndex unique transaction index for the executed proposal.\\r\\n     */\\r\\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable nonReentrant() {\\r\\n        Proposal storage proposal = proposals[id];\\r\\n        int256 price =\\r\\n            _getOracle().getPrice(\\r\\n                AdminIdentifierLib._constructIdentifier(id),\\r\\n                proposal.requestTime,\\r\\n                proposal.ancillaryData\\r\\n            );\\r\\n\\r\\n        Transaction memory transaction = proposal.transactions[transactionIndex];\\r\\n\\r\\n        require(\\r\\n            transactionIndex == 0 || proposal.transactions[transactionIndex - 1].to == address(0),\\r\\n            \\\"Previous tx not yet executed\\\"\\r\\n        );\\r\\n        require(transaction.to != address(0), \\\"Tx already executed\\\");\\r\\n        require(price != 0, \\\"Proposal was rejected\\\");\\r\\n        require(msg.value == transaction.value, \\\"Must send exact amount of ETH\\\");\\r\\n\\r\\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\\r\\n        delete proposal.transactions[transactionIndex];\\r\\n\\r\\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \\\"Tx execution failed\\\");\\r\\n\\r\\n        emit ProposalExecuted(id, transactionIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Emergency execution method that bypasses the voting system to execute a transaction.\\r\\n     * @dev This can only be called by the EmergencyProposer.\\r\\n     * @param transaction a single transaction to execute.\\r\\n     */\\r\\n    function emergencyExecute(Transaction memory transaction)\\r\\n        external\\r\\n        payable\\r\\n        nonReentrant()\\r\\n        onlyRoleHolder(uint256(Roles.EmergencyProposer))\\r\\n    {\\r\\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \\\"Tx execution failed\\\");\\r\\n\\r\\n        emit EmergencyExecution(transaction.to, transaction.value, transaction.data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current block timestamp.\\r\\n     * @dev Can be overridden to control contract time.\\r\\n     * @return the current block timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *       GOVERNOR STATE GETTERS         *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the total number of proposals (includes executed and non-executed).\\r\\n     * @return uint256 representing the current number of proposals.\\r\\n     */\\r\\n    function numProposals() external view returns (uint256) {\\r\\n        return proposals.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the proposal data for a particular id.\\r\\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time and ancillary data.\\r\\n     * @param id uniquely identify the identity of the proposal.\\r\\n     * @return proposal struct containing transactions[] and requestTime.\\r\\n     */\\r\\n    function getProposal(uint256 id) external view returns (Proposal memory) {\\r\\n        return proposals[id];\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *      PRIVATE GETTERS AND FUNCTIONS   *\\r\\n     ****************************************/\\r\\n\\r\\n    // Runs a function call on to, with value eth sent and data payload.\\r\\n    function _executeCall(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        // Mostly copied from:\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            let inputData := add(data, 0x20)\\r\\n            let inputDataSize := mload(data)\\r\\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\\r\\n        }\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    // Returns the Voting contract address, named \\\"Oracle\\\" in the finder.\\r\\n    function _getOracle() private view returns (OracleGovernanceInterface) {\\r\\n        return OracleGovernanceInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n\\r\\n    // Returns the IdentifierWhitelist contract address, named \\\"IdentifierWhitelist\\\" in the finder.\\r\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a61a8bd5b94fe568e3629ff1263f242719cd8d146d79a6b512321c4a43fc392\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/ProposerV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"./Finder.sol\\\";\\r\\nimport \\\"./GovernorV2.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"../interfaces/OracleAncillaryInterface.sol\\\";\\r\\nimport \\\"./AdminIdentifierLib.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/MultiCaller.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Proposer contract that allows anyone to make governance proposals with a bond.\\r\\n */\\r\\ncontract ProposerV2 is Ownable, Lockable, MultiCaller {\\r\\n    using SafeERC20 for IERC20;\\r\\n    IERC20 public immutable token; // The ERC20 token that the bond is paid in.\\r\\n    uint256 public bond; // The bond amount for making a proposal.\\r\\n    GovernorV2 public immutable governor; // The governor contract that this contract makes proposals to.\\r\\n    Finder public immutable finder; // Finder contract that stores addresses of UMA system contracts.\\r\\n\\r\\n    struct BondedProposal {\\r\\n        address sender;\\r\\n        // 64 bits to save a storage slot.\\r\\n        uint64 time;\\r\\n        uint256 lockedBond;\\r\\n        bytes ancillaryData;\\r\\n    }\\r\\n    mapping(uint256 => BondedProposal) public bondedProposals;\\r\\n\\r\\n    event BondSet(uint256 bond);\\r\\n    event ProposalResolved(uint256 indexed id, bool success);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Proposer contract.\\r\\n     * @param _token the ERC20 token that the bond is paid in.\\r\\n     * @param _bond the bond amount.\\r\\n     * @param _governor the governor contract that this contract makes proposals to.\\r\\n     * @param _finder the finder contract used to look up addresses.\\r\\n     */\\r\\n    constructor(\\r\\n        IERC20 _token,\\r\\n        uint256 _bond,\\r\\n        GovernorV2 _governor,\\r\\n        Finder _finder\\r\\n    ) {\\r\\n        token = _token;\\r\\n        governor = _governor;\\r\\n        finder = _finder;\\r\\n        setBond(_bond);\\r\\n        transferOwnership(address(_governor));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Propose a new set of governance transactions for vote.\\r\\n     * @dev Pulls bond from the caller.\\r\\n     * @param transactions list of transactions for the governor to execute.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return id the id of the governor proposal.\\r\\n     */\\r\\n    function propose(GovernorV2.Transaction[] memory transactions, bytes memory ancillaryData)\\r\\n        external\\r\\n        nonReentrant()\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 id = governor.numProposals();\\r\\n        token.safeTransferFrom(msg.sender, address(this), bond);\\r\\n        bondedProposals[id] = BondedProposal({\\r\\n            sender: msg.sender,\\r\\n            lockedBond: bond,\\r\\n            time: uint64(getCurrentTime()),\\r\\n            ancillaryData: ancillaryData\\r\\n        });\\r\\n        governor.propose(transactions, ancillaryData);\\r\\n        return id;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Resolves a proposal by checking the status of the request in the Voting contract.\\r\\n     * @dev For the resolution to work correctly, this contract must be a registered contract in the DVM.\\r\\n     * @param id proposal id.\\r\\n     */\\r\\n    function resolveProposal(uint256 id) external nonReentrant() {\\r\\n        BondedProposal memory bondedProposal = bondedProposals[id];\\r\\n        require(bondedProposal.sender != address(0), \\\"Invalid proposal id\\\");\\r\\n        OracleAncillaryInterface voting =\\r\\n            OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n        bytes32 adminIdentifier = AdminIdentifierLib._constructIdentifier(id);\\r\\n\\r\\n        require(\\r\\n            voting.hasPrice(adminIdentifier, bondedProposal.time, bondedProposal.ancillaryData),\\r\\n            \\\"No price resolved\\\"\\r\\n        );\\r\\n        if (voting.getPrice(adminIdentifier, bondedProposal.time, bondedProposal.ancillaryData) != 0) {\\r\\n            token.safeTransfer(bondedProposal.sender, bondedProposal.lockedBond);\\r\\n            emit ProposalResolved(id, true);\\r\\n        } else {\\r\\n            token.safeTransfer(finder.getImplementationAddress(OracleInterfaces.Store), bondedProposal.lockedBond);\\r\\n            emit ProposalResolved(id, false);\\r\\n        }\\r\\n        delete bondedProposals[id];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Admin method to set the bond amount.\\r\\n     * @dev Admin is intended to be the governance system itself.\\r\\n     * @param _bond the new bond.\\r\\n     */\\r\\n    function setBond(uint256 _bond) public nonReentrant() onlyOwner() {\\r\\n        bond = _bond;\\r\\n        emit BondSet(_bond);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current block timestamp.\\r\\n     * @dev Can be overridden to control contract time.\\r\\n     * @return the current block timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b770f778833fc2f599cc9ff6be86a25b5edd5d04fc2333f2d51c1cd76b5e44e\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleGovernanceInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OracleInterface.sol\\\";\\r\\nimport \\\"./OracleAncillaryInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing extending the Oracle interface with governance actions.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle extending governance actions. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleGovernanceInterface is OracleInterface, OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestGovernanceAction(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xaf51537a2ea58e7b5dc334de1ec72a85525bb3e16307f71a31c07357d4bd2814\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestPrice(bytes32 identifier, uint256 time) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(bytes32 identifier, uint256 time) external view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(bytes32 identifier, uint256 time) external view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa135756eabf06899395052031d8a2f617ef504477dc3037585f2b4ce0e3da22a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60e034620001f157601f62001a2538819003918201601f191683019291906001600160401b03841183851017620001f6578160809284926040968752833981010312620001f15780516001600160a01b038082168203620001f157602083015190848401519080821694858303620001f157606001519081168103620001f1576200008a3362000265565b60ff60a01b196000541691600160a01b83179460805260a05260c05260ff8360a01c1615620001ad577f1b44689fb73c0c9cdf591d534287488fc7959fd3647346821063a3e567ec9a9991602091600055620000e56200020c565b806001558551908152a1600055620000fc6200020c565b80156200015a576200010e9062000265565b516117739081620002b282396080518181816102af0152818161036e01528181610c300152610f97015260a0518181816104c20152610f49015260c0518181816101a30152610b1d0152f35b815162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b845162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b6000546001600160a01b031633036200022157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b600080546001600160a01b039283166001600160a01b03198216811783556040519093909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a356fe60806040526004361015610013575b600080fd5b60003560e01c806262804e146101165780630c340a241461010d57806311a9b77b14610104578063259bd920146100fb57806329cb924d146100f257806364c9ec6f146100e9578063715018a6146100e05780638da5cb5b146100d7578063a7d0967c146100ce578063ac9650d8146100c5578063b9a3c84c146100bc578063f2fde38b146100b35763fc0c546a146100ab57600080fd5b61000e610c19565b5061000e610b4c565b5061000e610b06565b5061000e610aa0565b5061000e610929565b5061000e61084a565b5061000e6107e8565b5061000e6107c9565b5061000e6107ad565b5061000e610738565b5061000e6106c2565b5061000e6104ab565b503461000e5760208060031936011261000e5760009061031f61031a60043561013d6114d6565b6000805460ff60a01b19169055610166610161826000526002602052604060002090565b61152b565b80516001600160a01b03959061017f908716151561158d565b604080516302abf57960e61b808252654f7261636c6560d01b6004830152919788927f0000000000000000000000000000000000000000000000000000000000000000821692909161027a918691908281602481895afa908115610493575b8e91610476575b50166101f0896116df565b908861025b84820161024e610233878c606061021386516001600160401b031690565b970196875191519384928392630b551cd560e41b84528c600485016115e4565b0381895afa908115610469575b60009161043c575b50611609565b516001600160401b031690565b905188516338ce36ab60e11b81529586948593849391600485016115e4565b03915afa90811561042f575b8b91610402575b5015158a1461033557505082516102d39392506001600160a01b0316910151907f00000000000000000000000000000000000000000000000000000000000000006116a1565b807fdb53c862706d03ae7c85dcaa4fd1aa1df7fa8914c2b999a15b37e280bf5a207c85518061030781906001602083019252565b0390a26000526002602052604060002090565b611649565b6000805460ff60a01b1916600160a01b17905551f35b82519081526453746f726560d81b600482015261039294918490829060249082905afa9384156103f5575b8a946103c6575b50500151907f00000000000000000000000000000000000000000000000000000000000000006116a1565b807fdb53c862706d03ae7c85dcaa4fd1aa1df7fa8914c2b999a15b37e280bf5a207c85518061030781906000602083019252565b6103e6929450803d106103ee575b6103de81836105b3565b8101906115cf565b913880610367565b503d6103d4565b6103fd6110b4565b610360565b6104229150853d8711610428575b61041a81836105b3565b8101906110a5565b3861028d565b503d610410565b6104376110b4565b610286565b61045c9150883d8a11610462575b61045481836105b3565b810190611347565b38610248565b503d61044a565b6104716110b4565b610240565b61048d9150833d85116103ee576103de81836105b3565b386101e5565b61049b6110b4565b6101de565b600091031261000e57565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90600182811c92168015610521575b602083101461050b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610500565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761055d57604052565b61056561052b565b604052565b6001600160401b03811161055d57604052565b608081019081106001600160401b0382111761055d57604052565b604081019081106001600160401b0382111761055d57604052565b90601f801991011681019081106001600160401b0382111761055d57604052565b90604051918260008254926105e8846104f1565b9081845260019485811690816000146106575750600114610614575b5050610612925003836105b3565b565b9093915060005260209081600020936000915b81831061063f57505061061293508201013880610604565b85548884018501529485019487945091830191610627565b91505061061294506020925060ff191682840152151560051b8201013880610604565b60005b83811061068d5750506000910152565b818101518382015260200161067d565b906020916106b68151809281855285808601910161067a565b601f01601f1916010190565b503461000e57602036600319011261000e5760043560005260026020526001600160401b0360406000206107348154916107036002600183015492016105d4565b9060405194859460018060a01b038116865260a01c166020850152604084015260806060840152608083019061069d565b0390f35b503461000e57602036600319011261000e577f1b44689fb73c0c9cdf591d534287488fc7959fd3647346821063a3e567ec9a9960206004356107786114d6565b6000805460ff60a01b1916905561078d610c5f565b80600155604051908152a16000805460ff60a01b1916600160a01b179055005b503461000e57600036600319011261000e576020604051428152f35b503461000e57600036600319011261000e576020600154604051908152f35b503461000e5760008060031936011261084757610803610c5f565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b604051906106128261057d565b6020906001600160401b03811161089a575b60051b0190565b6108a261052b565b610893565b6001600160a01b0381160361000e57565b6020906001600160401b0381116108d5575b601f01601f19160190565b6108dd61052b565b6108ca565b81601f8201121561000e578035906108f9826108b8565b9261090760405194856105b3565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e5760408060031936011261000e57600435906001600160401b0380831161000e573660238401121561000e57826004013561096881610881565b93610975845195866105b3565b8185526020908186016024809460051b8301019136831161000e57848101915b8383106109d35750505050503590811161000e57610734926109be6109c49236906004016108e2565b90610f24565b90519081529081906020820190565b823587811161000e5782016060602319823603011261000e578851916109f883610542565b87820135610a05816108a7565b835260448201358784015260648201359289841161000e57610a2f8894938a8695369201016108e2565b8b820152815201920191610995565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610a725750505050505090565b9091929394958480610a90600193603f198682030187528a5161069d565b9801930193019194939290610a62565b503461000e57602036600319011261000e576001600160401b0360043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e57610734916024610afa9201610e6c565b60405191829182610a3e565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e57600435610b6a816108a7565b610b72610c5f565b6001600160a01b03908116908115610bc557600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6000546001600160a01b03163303610c7357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90610cc182610881565b610cce60405191826105b3565b8281528092610cdf601f1991610881565b019060005b828110610cf057505050565b806060602080938501015201610ce4565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610d28570190565b610d30610d01565b0190565b50634e487b7160e01b600052603260045260246000fd5b9190811015610d8d575b60051b81013590601e198136030182121561000e5701908135916001600160401b03831161000e57602001823603811361000e579190565b610d95610d34565b610d55565b908092918237016000815290565b3d15610dd3573d90610db9826108b8565b91610dc760405193846105b3565b82523d6000602084013e565b606090565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e578051610e0a816108b8565b92610e1860405194856105b3565b8184526020828401011161000e57610e36916020808501910161067a565b90565b906020610e3692818152019061069d565b6020918151811015610e5f575b60051b010190565b610e67610d34565b610e57565b919091610e7883610cb7565b9260005b818110610e8857505050565b600080610e96838587610d4b565b60409391610ea8855180938193610d9a565b0390305af490610eb6610da8565b91829015610ee557505090610ee091610ecf8288610e4a565b52610eda8187610e4a565b50610d18565b610e7c565b6044839293511061000e57610f0b610f2091600480940160248091518301019101610dd8565b925162461bcd60e51b81529283928301610e39565b0390fd5b610f2c6114d6565b6000805460ff60a01b1916905560405163400e394960e01b8152917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190602084600481865afa938415611098575b600094611078575b50610fbb60015430337f00000000000000000000000000000000000000000000000000000000000000006112e2565b611000600154610fc9610874565b33815290426001600160401b031660208301526040820152826060820152610ffb866000526002602052604060002090565b61111d565b823b1561000e5761102b92600092836040518096819582946329f4259f60e21b84526004840161124a565b03925af1801561106b575b611052575b506000805460ff60a01b1916600160a01b17905590565b8061105f6110659261056a565b806104a0565b3861103b565b6110736110b4565b611036565b61109191945060203d81116104285761041a81836105b3565b9238610f8c565b6110a06110b4565b610f84565b9081602091031261000e575190565b506040513d6000823e3d90fd5b8181106110cc575050565b600081556001016110c1565b9190601f81116110e757505050565b610612926000526020600020906020601f840160051c83019310611113575b601f0160051c01906110c1565b9091508190611106565b815181546020808501516001600160e01b03199092166001600160a01b039093169290921760a09190911b67ffffffffffffffff60a01b16178255604083015160018084019190915560609093015180516002909301939291906001600160401b03831161123d575b61119a8361119487546104f1565b876110d8565b81601f84116001146111d357509282939183926000946111c8575b50501b916000199060031b1c1916179055565b0151925038806111b5565b919083601f1981166111ea88600052602060002090565b946000905b88838310611223575050501061120a575b505050811b019055565b015160001960f88460031b161c19169055388080611200565b8587015188559096019594850194879350908101906111ef565b61124561052b565b611186565b929160409182850192808652815180945260609384870194808260051b890101956020809501936000925b8484106112935750505050505093610e36939481840391015261069d565b90919293949786806112d2600193858f8e8991605f19908503018b5251878060a01b03815116845285810151868501520151918189820152019061069d565b9a01940194019294939190611275565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526106129160a082018281106001600160401b0382111761133a575b60405261135f565b61134261052b565b611332565b9081602091031261000e5751801515810361000e5790565b6040516113bd916001600160a01b031661137882610598565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16113b7610da8565b91611445565b80519082821592831561142d575b505050156113d65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61143d9350820181019101611347565b3882816113cb565b919290156114a75750815115611459575090565b3b156114625790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156114ba5750805190602001fd5b60405162461bcd60e51b8152908190610f209060048301610e39565b60ff60005460a01c16156114e657565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b90604051606061157b600260808401956001600160401b039685811088821117611580575b6040528496815460018060a01b038116875260a01c16602086015260018101546040860152016105d4565b910152565b61158861052b565b611550565b1561159457565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c1c9bdc1bdcd85b081a59606a1b6044820152606490fd5b9081602091031261000e5751610e36816108a7565b6001600160401b03610e3694936060938352166020820152816040820152019061069d565b1561161057565b60405162461bcd60e51b8152602060048201526011602482015270139bc81c1c9a58d9481c995cdbdb1d9959607a1b6044820152606490fd5b60026000918281558260018201550161166281546104f1565b8061166c57505050565b601f811160011461167b575055565b8183526020832061169791601f0160051c8101906001016110c1565b8160208120915555565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610612916116da8261057d565b61135f565b600090806117015750600360fc1b90505b60301c65020b236b4b7160d51b1790565b805b61170d57506116f0565b90600a9081830660308101809111611730575b60f81b9060081c17910480611703565b611738610d01565b61172056fea2646970667358221220cd9fc01c343f41d212b1a8502dd14ea0b829b765466ee37894fd40fb735fcfc764736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c806262804e146101165780630c340a241461010d57806311a9b77b14610104578063259bd920146100fb57806329cb924d146100f257806364c9ec6f146100e9578063715018a6146100e05780638da5cb5b146100d7578063a7d0967c146100ce578063ac9650d8146100c5578063b9a3c84c146100bc578063f2fde38b146100b35763fc0c546a146100ab57600080fd5b61000e610c19565b5061000e610b4c565b5061000e610b06565b5061000e610aa0565b5061000e610929565b5061000e61084a565b5061000e6107e8565b5061000e6107c9565b5061000e6107ad565b5061000e610738565b5061000e6106c2565b5061000e6104ab565b503461000e5760208060031936011261000e5760009061031f61031a60043561013d6114d6565b6000805460ff60a01b19169055610166610161826000526002602052604060002090565b61152b565b80516001600160a01b03959061017f908716151561158d565b604080516302abf57960e61b808252654f7261636c6560d01b6004830152919788927f0000000000000000000000000000000000000000000000000000000000000000821692909161027a918691908281602481895afa908115610493575b8e91610476575b50166101f0896116df565b908861025b84820161024e610233878c606061021386516001600160401b031690565b970196875191519384928392630b551cd560e41b84528c600485016115e4565b0381895afa908115610469575b60009161043c575b50611609565b516001600160401b031690565b905188516338ce36ab60e11b81529586948593849391600485016115e4565b03915afa90811561042f575b8b91610402575b5015158a1461033557505082516102d39392506001600160a01b0316910151907f00000000000000000000000000000000000000000000000000000000000000006116a1565b807fdb53c862706d03ae7c85dcaa4fd1aa1df7fa8914c2b999a15b37e280bf5a207c85518061030781906001602083019252565b0390a26000526002602052604060002090565b611649565b6000805460ff60a01b1916600160a01b17905551f35b82519081526453746f726560d81b600482015261039294918490829060249082905afa9384156103f5575b8a946103c6575b50500151907f00000000000000000000000000000000000000000000000000000000000000006116a1565b807fdb53c862706d03ae7c85dcaa4fd1aa1df7fa8914c2b999a15b37e280bf5a207c85518061030781906000602083019252565b6103e6929450803d106103ee575b6103de81836105b3565b8101906115cf565b913880610367565b503d6103d4565b6103fd6110b4565b610360565b6104229150853d8711610428575b61041a81836105b3565b8101906110a5565b3861028d565b503d610410565b6104376110b4565b610286565b61045c9150883d8a11610462575b61045481836105b3565b810190611347565b38610248565b503d61044a565b6104716110b4565b610240565b61048d9150833d85116103ee576103de81836105b3565b386101e5565b61049b6110b4565b6101de565b600091031261000e57565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90600182811c92168015610521575b602083101461050b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610500565b50634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761055d57604052565b61056561052b565b604052565b6001600160401b03811161055d57604052565b608081019081106001600160401b0382111761055d57604052565b604081019081106001600160401b0382111761055d57604052565b90601f801991011681019081106001600160401b0382111761055d57604052565b90604051918260008254926105e8846104f1565b9081845260019485811690816000146106575750600114610614575b5050610612925003836105b3565b565b9093915060005260209081600020936000915b81831061063f57505061061293508201013880610604565b85548884018501529485019487945091830191610627565b91505061061294506020925060ff191682840152151560051b8201013880610604565b60005b83811061068d5750506000910152565b818101518382015260200161067d565b906020916106b68151809281855285808601910161067a565b601f01601f1916010190565b503461000e57602036600319011261000e5760043560005260026020526001600160401b0360406000206107348154916107036002600183015492016105d4565b9060405194859460018060a01b038116865260a01c166020850152604084015260806060840152608083019061069d565b0390f35b503461000e57602036600319011261000e577f1b44689fb73c0c9cdf591d534287488fc7959fd3647346821063a3e567ec9a9960206004356107786114d6565b6000805460ff60a01b1916905561078d610c5f565b80600155604051908152a16000805460ff60a01b1916600160a01b179055005b503461000e57600036600319011261000e576020604051428152f35b503461000e57600036600319011261000e576020600154604051908152f35b503461000e5760008060031936011261084757610803610c5f565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b604051906106128261057d565b6020906001600160401b03811161089a575b60051b0190565b6108a261052b565b610893565b6001600160a01b0381160361000e57565b6020906001600160401b0381116108d5575b601f01601f19160190565b6108dd61052b565b6108ca565b81601f8201121561000e578035906108f9826108b8565b9261090760405194856105b3565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e5760408060031936011261000e57600435906001600160401b0380831161000e573660238401121561000e57826004013561096881610881565b93610975845195866105b3565b8185526020908186016024809460051b8301019136831161000e57848101915b8383106109d35750505050503590811161000e57610734926109be6109c49236906004016108e2565b90610f24565b90519081529081906020820190565b823587811161000e5782016060602319823603011261000e578851916109f883610542565b87820135610a05816108a7565b835260448201358784015260648201359289841161000e57610a2f8894938a8695369201016108e2565b8b820152815201920191610995565b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610a725750505050505090565b9091929394958480610a90600193603f198682030187528a5161069d565b9801930193019194939290610a62565b503461000e57602036600319011261000e576001600160401b0360043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e57610734916024610afa9201610e6c565b60405191829182610a3e565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461000e57602036600319011261000e57600435610b6a816108a7565b610b72610c5f565b6001600160a01b03908116908115610bc557600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b6000546001600160a01b03163303610c7357565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90610cc182610881565b610cce60405191826105b3565b8281528092610cdf601f1991610881565b019060005b828110610cf057505050565b806060602080938501015201610ce4565b50634e487b7160e01b600052601160045260246000fd5b6001906000198114610d28570190565b610d30610d01565b0190565b50634e487b7160e01b600052603260045260246000fd5b9190811015610d8d575b60051b81013590601e198136030182121561000e5701908135916001600160401b03831161000e57602001823603811361000e579190565b610d95610d34565b610d55565b908092918237016000815290565b3d15610dd3573d90610db9826108b8565b91610dc760405193846105b3565b82523d6000602084013e565b606090565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e578051610e0a816108b8565b92610e1860405194856105b3565b8184526020828401011161000e57610e36916020808501910161067a565b90565b906020610e3692818152019061069d565b6020918151811015610e5f575b60051b010190565b610e67610d34565b610e57565b919091610e7883610cb7565b9260005b818110610e8857505050565b600080610e96838587610d4b565b60409391610ea8855180938193610d9a565b0390305af490610eb6610da8565b91829015610ee557505090610ee091610ecf8288610e4a565b52610eda8187610e4a565b50610d18565b610e7c565b6044839293511061000e57610f0b610f2091600480940160248091518301019101610dd8565b925162461bcd60e51b81529283928301610e39565b0390fd5b610f2c6114d6565b6000805460ff60a01b1916905560405163400e394960e01b8152917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169190602084600481865afa938415611098575b600094611078575b50610fbb60015430337f00000000000000000000000000000000000000000000000000000000000000006112e2565b611000600154610fc9610874565b33815290426001600160401b031660208301526040820152826060820152610ffb866000526002602052604060002090565b61111d565b823b1561000e5761102b92600092836040518096819582946329f4259f60e21b84526004840161124a565b03925af1801561106b575b611052575b506000805460ff60a01b1916600160a01b17905590565b8061105f6110659261056a565b806104a0565b3861103b565b6110736110b4565b611036565b61109191945060203d81116104285761041a81836105b3565b9238610f8c565b6110a06110b4565b610f84565b9081602091031261000e575190565b506040513d6000823e3d90fd5b8181106110cc575050565b600081556001016110c1565b9190601f81116110e757505050565b610612926000526020600020906020601f840160051c83019310611113575b601f0160051c01906110c1565b9091508190611106565b815181546020808501516001600160e01b03199092166001600160a01b039093169290921760a09190911b67ffffffffffffffff60a01b16178255604083015160018084019190915560609093015180516002909301939291906001600160401b03831161123d575b61119a8361119487546104f1565b876110d8565b81601f84116001146111d357509282939183926000946111c8575b50501b916000199060031b1c1916179055565b0151925038806111b5565b919083601f1981166111ea88600052602060002090565b946000905b88838310611223575050501061120a575b505050811b019055565b015160001960f88460031b161c19169055388080611200565b8587015188559096019594850194879350908101906111ef565b61124561052b565b611186565b929160409182850192808652815180945260609384870194808260051b890101956020809501936000925b8484106112935750505050505093610e36939481840391015261069d565b90919293949786806112d2600193858f8e8991605f19908503018b5251878060a01b03815116845285810151868501520151918189820152019061069d565b9a01940194019294939190611275565b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526106129160a082018281106001600160401b0382111761133a575b60405261135f565b61134261052b565b611332565b9081602091031261000e5751801515810361000e5790565b6040516113bd916001600160a01b031661137882610598565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af16113b7610da8565b91611445565b80519082821592831561142d575b505050156113d65750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61143d9350820181019101611347565b3882816113cb565b919290156114a75750815115611459575090565b3b156114625790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156114ba5750805190602001fd5b60405162461bcd60e51b8152908190610f209060048301610e39565b60ff60005460a01c16156114e657565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b90604051606061157b600260808401956001600160401b039685811088821117611580575b6040528496815460018060a01b038116875260a01c16602086015260018101546040860152016105d4565b910152565b61158861052b565b611550565b1561159457565b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081c1c9bdc1bdcd85b081a59606a1b6044820152606490fd5b9081602091031261000e5751610e36816108a7565b6001600160401b03610e3694936060938352166020820152816040820152019061069d565b1561161057565b60405162461bcd60e51b8152602060048201526011602482015270139bc81c1c9a58d9481c995cdbdb1d9959607a1b6044820152606490fd5b60026000918281558260018201550161166281546104f1565b8061166c57505050565b601f811160011461167b575055565b8183526020832061169791601f0160051c8101906001016110c1565b8160208120915555565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152610612916116da8261057d565b61135f565b600090806117015750600360fc1b90505b60301c65020b236b4b7160d51b1790565b805b61170d57506116f0565b90600a9081830660308101809111611730575b60f81b9060081c17910480611703565b611738610d01565b61172056fea2646970667358221220cd9fc01c343f41d212b1a8502dd14ea0b829b765466ee37894fd40fb735fcfc764736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_bond": "the bond amount.",
          "_finder": "the finder contract used to look up addresses.",
          "_governor": "the governor contract that this contract makes proposals to.",
          "_token": "the ERC20 token that the bond is paid in."
        }
      },
      "getCurrentTime()": {
        "details": "Can be overridden to control contract time.",
        "returns": {
          "_0": "the current block timestamp."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "propose((address,uint256,bytes)[],bytes)": {
        "details": "Pulls bond from the caller.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "transactions": "list of transactions for the governor to execute."
        },
        "returns": {
          "_0": "id the id of the governor proposal."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "resolveProposal(uint256)": {
        "details": "For the resolution to work correctly, this contract must be a registered contract in the DVM.",
        "params": {
          "id": "proposal id."
        }
      },
      "setBond(uint256)": {
        "details": "Admin is intended to be the governance system itself.",
        "params": {
          "_bond": "the new bond."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Proposer contract that allows anyone to make governance proposals with a bond.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Construct the Proposer contract."
      },
      "getCurrentTime()": {
        "notice": "Returns the current block timestamp."
      },
      "propose((address,uint256,bytes)[],bytes)": {
        "notice": "Propose a new set of governance transactions for vote."
      },
      "resolveProposal(uint256)": {
        "notice": "Resolves a proposal by checking the status of the request in the Voting contract."
      },
      "setBond(uint256)": {
        "notice": "Admin method to set the bond amount."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4304,
        "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 27765,
        "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
        "label": "bond",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 27785,
        "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
        "label": "bondedProposals",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(BondedProposal)27780_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(BondedProposal)27780_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ProposerV2.BondedProposal)",
        "numberOfBytes": "32",
        "value": "t_struct(BondedProposal)27780_storage"
      },
      "t_struct(BondedProposal)27780_storage": {
        "encoding": "inplace",
        "label": "struct ProposerV2.BondedProposal",
        "members": [
          {
            "astId": 27773,
            "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 27775,
            "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
            "label": "time",
            "offset": 20,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 27777,
            "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
            "label": "lockedBond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 27779,
            "contract": "contracts/data-verification-mechanism/implementation/ProposerV2.sol:ProposerV2",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}