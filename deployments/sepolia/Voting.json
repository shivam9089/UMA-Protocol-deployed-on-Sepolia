{
  "address": "0xc4ad63c8793E4f41Bd7a17607fa0fbf434Cb7973",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_phaseLength",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "_gatPercentage",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "_inflationRate",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_rewardsExpirationTimeout",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_votingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_finder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedVote",
          "type": "bytes"
        }
      ],
      "name": "EncryptedVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "PriceRequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "PriceResolved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "name": "RewardsRetrieved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "VoteCommitted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numTokens",
          "type": "uint256"
        }
      ],
      "name": "VoteRevealed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ancillaryBytesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "encryptedVote",
              "type": "bytes"
            }
          ],
          "internalType": "struct VotingAncillaryInterface.CommitmentAncillary[]",
          "name": "commits",
          "type": "tuple[]"
        }
      ],
      "name": "batchCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "hash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "encryptedVote",
              "type": "bytes"
            }
          ],
          "internalType": "struct VotingInterface.Commitment[]",
          "name": "commits",
          "type": "tuple[]"
        }
      ],
      "name": "batchCommit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "salt",
              "type": "int256"
            }
          ],
          "internalType": "struct VotingInterface.Reveal[]",
          "name": "reveals",
          "type": "tuple[]"
        }
      ],
      "name": "batchReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "price",
              "type": "int256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            },
            {
              "internalType": "int256",
              "name": "salt",
              "type": "int256"
            }
          ],
          "internalType": "struct VotingAncillaryInterface.RevealAncillary[]",
          "name": "reveals",
          "type": "tuple[]"
        }
      ],
      "name": "batchReveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encryptedVote",
          "type": "bytes"
        }
      ],
      "name": "commitAndEmitEncryptedVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encryptedVote",
          "type": "bytes"
        }
      ],
      "name": "commitAndEmitEncryptedVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "commitVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "commitVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gatPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rawValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingRequests",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "internalType": "struct VotingAncillaryInterface.PendingRequestAncillary[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "internalType": "struct VotingAncillaryInterface.PendingRequestAncillary[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "getPriceRequestStatuses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Voting.RequestStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastVotingRound",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.RequestState[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            }
          ],
          "internalType": "struct VotingInterface.PendingRequest[]",
          "name": "requests",
          "type": "tuple[]"
        }
      ],
      "name": "getPriceRequestStatuses",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum Voting.RequestStatus",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "lastVotingRound",
              "type": "uint256"
            }
          ],
          "internalType": "struct Voting.RequestState[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotePhase",
      "outputs": [
        {
          "internalType": "enum VotingAncillaryInterface.Phase",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "hasPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "hasPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inflationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rawValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "migratedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "requestPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "requestPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "internalType": "struct VotingAncillaryInterface.PendingRequestAncillary[]",
          "name": "toRetrieve",
          "type": "tuple[]"
        }
      ],
      "name": "retrieveRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "totalRewardToIssue",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "voterAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "identifier",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "time",
              "type": "uint256"
            }
          ],
          "internalType": "struct VotingInterface.PendingRequest[]",
          "name": "toRetrieve",
          "type": "tuple[]"
        }
      ],
      "name": "retrieveRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "salt",
          "type": "int256"
        }
      ],
      "name": "revealVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "int256",
          "name": "salt",
          "type": "int256"
        }
      ],
      "name": "revealVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "snapshotId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "inflationRate",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "gatPercentage",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "rewardsExpirationTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "newGatPercentage",
          "type": "tuple"
        }
      ],
      "name": "setGatPercentage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rawValue",
              "type": "uint256"
            }
          ],
          "internalType": "struct FixedPoint.Unsigned",
          "name": "newInflationRate",
          "type": "tuple"
        }
      ],
      "name": "setInflationRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newVotingAddress",
          "type": "address"
        }
      ],
      "name": "setMigrated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "NewRewardsExpirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setRewardsExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "snapshotCurrentRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "snapshotMessageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteTiming",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "phaseLength",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingToken",
      "outputs": [
        {
          "internalType": "contract VotingToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbc64992a9908da5eeee4352cbde59ea65a662b325499d5567fb085786d79830e",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0xc4ad63c8793E4f41Bd7a17607fa0fbf434Cb7973",
    "transactionIndex": 55,
    "gasUsed": "4210570",
    "logsBloom": "0x00000000000000000000000000000000000004000800000000800000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000001000000400000000000000000000000000000020000000000000000000800000010000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5cfb86dc83cabaa66df4e44f5e101eb887fb4cc8901a535e84d40e4f086549ae",
    "transactionHash": "0xbc64992a9908da5eeee4352cbde59ea65a662b325499d5567fb085786d79830e",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 6153664,
        "transactionHash": "0xbc64992a9908da5eeee4352cbde59ea65a662b325499d5567fb085786d79830e",
        "address": "0xc4ad63c8793E4f41Bd7a17607fa0fbf434Cb7973",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 149,
        "blockHash": "0x5cfb86dc83cabaa66df4e44f5e101eb887fb4cc8901a535e84d40e4f086549ae"
      }
    ],
    "blockNumber": 6153664,
    "cumulativeGasUsed": "12551674",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "86400",
    {
      "rawValue": "50000000000000000"
    },
    {
      "rawValue": "500000000000000"
    },
    1209600,
    "0x473411E26885aE3A291EF4F4eB430F33946EDAD7",
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e",
    "0xf8815ce169E5450aa6908e76E1B970dBcEC11550"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_phaseLength\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"_gatPercentage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"_inflationRate\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_rewardsExpirationTimeout\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedVote\",\"type\":\"bytes\"}],\"name\":\"EncryptedVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"PriceRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"PriceResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"RewardsRetrieved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"VoteCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"VoteRevealed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedVote\",\"type\":\"bytes\"}],\"internalType\":\"struct VotingAncillaryInterface.CommitmentAncillary[]\",\"name\":\"commits\",\"type\":\"tuple[]\"}],\"name\":\"batchCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedVote\",\"type\":\"bytes\"}],\"internalType\":\"struct VotingInterface.Commitment[]\",\"name\":\"commits\",\"type\":\"tuple[]\"}],\"name\":\"batchCommit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"salt\",\"type\":\"int256\"}],\"internalType\":\"struct VotingInterface.Reveal[]\",\"name\":\"reveals\",\"type\":\"tuple[]\"}],\"name\":\"batchReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"salt\",\"type\":\"int256\"}],\"internalType\":\"struct VotingAncillaryInterface.RevealAncillary[]\",\"name\":\"reveals\",\"type\":\"tuple[]\"}],\"name\":\"batchReveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedVote\",\"type\":\"bytes\"}],\"name\":\"commitAndEmitEncryptedVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedVote\",\"type\":\"bytes\"}],\"name\":\"commitAndEmitEncryptedVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"commitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"commitVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingRequests\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"internalType\":\"struct VotingAncillaryInterface.PendingRequestAncillary[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"internalType\":\"struct VotingAncillaryInterface.PendingRequestAncillary[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"getPriceRequestStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Voting.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastVotingRound\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.RequestState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct VotingInterface.PendingRequest[]\",\"name\":\"requests\",\"type\":\"tuple[]\"}],\"name\":\"getPriceRequestStatuses\",\"outputs\":[{\"components\":[{\"internalType\":\"enum Voting.RequestStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"lastVotingRound\",\"type\":\"uint256\"}],\"internalType\":\"struct Voting.RequestState[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotePhase\",\"outputs\":[{\"internalType\":\"enum VotingAncillaryInterface.Phase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inflationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migratedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"requestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"requestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"internalType\":\"struct VotingAncillaryInterface.PendingRequestAncillary[]\",\"name\":\"toRetrieve\",\"type\":\"tuple[]\"}],\"name\":\"retrieveRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"totalRewardToIssue\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"voterAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"internalType\":\"struct VotingInterface.PendingRequest[]\",\"name\":\"toRetrieve\",\"type\":\"tuple[]\"}],\"name\":\"retrieveRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"salt\",\"type\":\"int256\"}],\"name\":\"revealVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"salt\",\"type\":\"int256\"}],\"name\":\"revealVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"snapshotId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"inflationRate\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"gatPercentage\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"rewardsExpirationTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"newGatPercentage\",\"type\":\"tuple\"}],\"name\":\"setGatPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rawValue\",\"type\":\"uint256\"}],\"internalType\":\"struct FixedPoint.Unsigned\",\"name\":\"newInflationRate\",\"type\":\"tuple\"}],\"name\":\"setInflationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVotingAddress\",\"type\":\"address\"}],\"name\":\"setMigrated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"NewRewardsExpirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setRewardsExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"snapshotCurrentRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"snapshotMessageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteTiming\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"phaseLength\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingToken\",\"outputs\":[{\"internalType\":\"contract VotingToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Handles receiving and resolving price requests via a commit-reveal voting scheme.\",\"kind\":\"dev\",\"methods\":{\"batchCommit((bytes32,uint256,bytes,bytes32,bytes)[])\":{\"details\":\"Using `encryptedVote` is optional. If included then commitment is emitted in an event. Look at `project-root/common/Constants.js` for the tested maximum number of commitments that can fit in one transaction.\",\"params\":{\"commits\":\"struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\"}},\"batchCommit((bytes32,uint256,bytes32,bytes)[])\":{\"details\":\"Using `encryptedVote` is optional. If included then commitment is stored on chain. Look at `project-root/common/Constants.js` for the tested maximum number of commitments that can fit in one transaction.\",\"params\":{\"commits\":\"array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\"}},\"batchReveal((bytes32,uint256,int256,bytes,int256)[])\":{\"details\":\"For more info on reveals, review the comment for `revealVote`.\",\"params\":{\"reveals\":\"array of the Reveal struct which contains an identifier, time, price and salt.\"}},\"batchReveal((bytes32,uint256,int256,int256)[])\":{\"details\":\"For more information on reveals, review the comment for `revealVote`.\",\"params\":{\"reveals\":\"array of the Reveal struct which contains an identifier, time, price and salt.\"}},\"commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)\":{\"details\":\"An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"encryptedVote\":\"offchain encrypted blob containing the voters amount, time and salt.\",\"hash\":\"keccak256 hash of the price you want to vote for and a `int256 salt`.\",\"identifier\":\"unique price pair identifier. Eg: BTC/USD price pair.\",\"time\":\"unix timestamp of for the price request.\"}},\"commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)\":{\"details\":\"An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\",\"params\":{\"encryptedVote\":\"offchain encrypted blob containing the voters amount, time and salt.\",\"hash\":\"keccak256 hash of the price you want to vote for and a `int256 salt`.\",\"identifier\":\"unique price pair identifier. Eg: BTC/USD price pair.\",\"time\":\"unix timestamp of for the price request.\"}},\"commitVote(bytes32,uint256,bytes,bytes32)\":{\"details\":\"`identifier`, `time` must correspond to a price request that's currently in the commit phase. Commits can be changed.Since transaction data is public, the salt will be revealed with the vote. While this is the system\\u2019s expected behavior, voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then they can determine the vote pre-reveal.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"hash\":\"keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\",\"identifier\":\"uniquely identifies the committed vote. EG BTC/USD price pair.\",\"time\":\"unix timestamp of the price being voted on.\"}},\"commitVote(bytes32,uint256,bytes32)\":{\"details\":\"`identifier`, `time` must correspond to a price request that's currently in the commit phase. Commits can be changed.Since transaction data is public, the salt will be revealed with the vote. While this is the system\\u2019s expected behavior, voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then they can determine the vote pre-reveal.\",\"params\":{\"hash\":\"keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\",\"identifier\":\"uniquely identifies the committed vote. EG BTC/USD price pair.\",\"time\":\"unix timestamp of the price being voted on.\"}},\"constructor\":{\"params\":{\"_finder\":\"keeps track of all contracts within the system based on their interfaceName.\",\"_gatPercentage\":\"of the total token supply that must be used in a vote to create a valid price resolution.\",\"_inflationRate\":\"percentage inflation per round used to increase token supply of correct voters.\",\"_phaseLength\":\"length of the commit and reveal phases in seconds.\",\"_rewardsExpirationTimeout\":\"timeout, in seconds, within which rewards must be claimed.\",\"_timerAddress\":\"Contract that stores the current time in a testing environment. Must be set to 0x0 for production environments that use live time.\",\"_votingToken\":\"address of the UMA token contract used to commit votes.\"}},\"getCurrentRoundId()\":{\"returns\":{\"_0\":\"uint256 representing the unique round ID.\"}},\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"getPendingRequests()\":{\"returns\":{\"_0\":\"pendingRequests array containing identifiers of type `PendingRequest`. and timestamps for all pending requests.\"}},\"getPrice(bytes32,uint256)\":{\"details\":\"If the price is not available, the method reverts.\",\"params\":{\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"},\"returns\":{\"_0\":\"int256 representing the resolved price for the given identifier and timestamp.\"}},\"getPrice(bytes32,uint256,bytes)\":{\"details\":\"If the price is not available, the method reverts.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp of for the price request.\"},\"returns\":{\"_0\":\"int256 representing the resolved price for the given identifier and timestamp.\"}},\"getPriceRequestStatuses((bytes32,uint256,bytes)[])\":{\"details\":\"If the status for a particular request is NotRequested, the lastVotingRound will always be 0.\",\"params\":{\"requests\":\"array of type PendingRequest which includes an identifier and timestamp for each request.\"},\"returns\":{\"_0\":\"requestStates a list, in the same order as the input list, giving the status of each of the specified price requests.\"}},\"getVotePhase()\":{\"returns\":{\"_0\":\"Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\"}},\"hasPrice(bytes32,uint256)\":{\"details\":\"Time must be in the past and the identifier must be supported.\",\"params\":{\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"},\"returns\":{\"_0\":\"bool if the DVM has resolved to a price for the given identifier and timestamp.\"}},\"hasPrice(bytes32,uint256,bytes)\":{\"details\":\"Time must be in the past and the identifier must be supported.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp of for the price request.\"},\"returns\":{\"_0\":\"_hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"requestPrice(bytes32,uint256)\":{\"details\":\"Time must be in the past and the identifier must be supported.\",\"params\":{\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"}},\"requestPrice(bytes32,uint256,bytes)\":{\"details\":\"Time must be in the past and the identifier must be supported. The length of the ancillary data is limited such that this method abides by the EVM transaction gas limit.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\",\"time\":\"unix timestamp for the price request.\"}},\"retrieveRewards(address,uint256,(bytes32,uint256)[])\":{\"details\":\"Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold (not expired).\",\"params\":{\"roundId\":\"the round from which voting rewards will be retrieved from.\",\"toRetrieve\":\"array of PendingRequests which rewards are retrieved from.\",\"voterAddress\":\"voter for which rewards will be retrieved. Does not have to be the caller.\"},\"returns\":{\"_0\":\"total amount of rewards returned to the voter.\"}},\"retrieveRewards(address,uint256,(bytes32,uint256,bytes)[])\":{\"details\":\"Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold (not expired). Note that a named return value is used here to avoid a stack to deep error.\",\"params\":{\"roundId\":\"the round from which voting rewards will be retrieved from.\",\"toRetrieve\":\"array of PendingRequests which rewards are retrieved from.\",\"voterAddress\":\"voter for which rewards will be retrieved. Does not have to be the caller.\"},\"returns\":{\"totalRewardToIssue\":\"total amount of rewards returned to the voter.\"}},\"revealVote(bytes32,uint256,int256,bytes,int256)\":{\"details\":\"The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash` that `commitVote()` was called with. Only the committer can reveal their vote.\",\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"identifier\":\"voted on in the commit phase. EG BTC/USD price pair.\",\"price\":\"voted on during the commit phase.\",\"salt\":\"value used to hide the commitment price during the commit phase.\",\"time\":\"specifies the unix timestamp of the price being voted on.\"}},\"revealVote(bytes32,uint256,int256,int256)\":{\"details\":\"The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash` that `commitVote()` was called with. Only the committer can reveal their vote.\",\"params\":{\"identifier\":\"voted on in the commit phase. EG BTC/USD price pair.\",\"price\":\"voted on during the commit phase.\",\"salt\":\"value used to hide the commitment price during the commit phase.\",\"time\":\"specifies the unix timestamp of the price is being voted on.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}},\"setGatPercentage((uint256))\":{\"details\":\"This method is public because calldata structs are not currently supported by solidity.\",\"params\":{\"newGatPercentage\":\"sets the next round's Gat percentage.\"}},\"setInflationRate((uint256))\":{\"details\":\"This method is public because calldata structs are not currently supported by solidity.\",\"params\":{\"newInflationRate\":\"sets the next round's inflation rate.\"}},\"setMigrated(address)\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"newVotingAddress\":\"the newly migrated contract address.\"}},\"setRewardsExpirationTimeout(uint256)\":{\"details\":\"This change only applies to rounds that have not yet begun.\",\"params\":{\"NewRewardsExpirationTimeout\":\"how long a caller can wait before choosing to withdraw their rewards.\"}},\"snapshotCurrentRound(bytes)\":{\"details\":\"This function can be called multiple times, but only the first call per round into this function or `revealVote` will create the round snapshot. Any later calls will be a no-op. Will revert unless called during reveal period.\",\"params\":{\"signature\":\"signature required to prove caller is an EOA to prevent flash loans from being included in the snapshot.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Voting system for Oracle.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchCommit((bytes32,uint256,bytes,bytes32,bytes)[])\":{\"notice\":\"Submit a batch of commits in a single transaction.\"},\"batchCommit((bytes32,uint256,bytes32,bytes)[])\":{\"notice\":\"Submit a batch of commits in a single transaction.\"},\"batchReveal((bytes32,uint256,int256,bytes,int256)[])\":{\"notice\":\"Reveal multiple votes in a single transaction. Look at `project-root/common/Constants.js` for the tested maximum number of reveals. that can fit in one transaction.\"},\"batchReveal((bytes32,uint256,int256,int256)[])\":{\"notice\":\"Reveal multiple votes in a single transaction. Look at `project-root/common/Constants.js` for the tested maximum number of reveals. that can fit in one transaction.\"},\"commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)\":{\"notice\":\"commits a vote and logs an event with a data blob, typically an encrypted version of the vote\"},\"commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)\":{\"notice\":\"commits a vote and logs an event with a data blob, typically an encrypted version of the vote\"},\"commitVote(bytes32,uint256,bytes,bytes32)\":{\"notice\":\"Commit a vote for a price request for `identifier` at `time`.\"},\"commitVote(bytes32,uint256,bytes32)\":{\"notice\":\"Commit a vote for a price request for `identifier` at `time`.\"},\"constructor\":{\"notice\":\"Construct the Voting contract.\"},\"getCurrentRoundId()\":{\"notice\":\"Returns the current round ID, as a function of the current time.\"},\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"getPendingRequests()\":{\"notice\":\"Gets the queries that are being voted on this round.\"},\"getPrice(bytes32,uint256)\":{\"notice\":\"Gets the price for `identifier` and `time` if it has already been requested and resolved.\"},\"getPrice(bytes32,uint256,bytes)\":{\"notice\":\"Gets the price for `identifier` and `time` if it has already been requested and resolved.\"},\"getPriceRequestStatuses((bytes32,uint256,bytes)[])\":{\"notice\":\"Gets the status of a list of price requests, identified by their identifier and time.\"},\"getVotePhase()\":{\"notice\":\"Returns the current voting phase, as a function of the current time.\"},\"hasPrice(bytes32,uint256)\":{\"notice\":\"Whether the price for `identifier` and `time` is available.\"},\"hasPrice(bytes32,uint256,bytes)\":{\"notice\":\"Whether the price for `identifier` and `time` is available.\"},\"requestPrice(bytes32,uint256)\":{\"notice\":\"Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\"},\"requestPrice(bytes32,uint256,bytes)\":{\"notice\":\"Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\"},\"retrieveRewards(address,uint256,(bytes32,uint256)[])\":{\"notice\":\"Retrieves rewards owed for a set of resolved price requests.\"},\"retrieveRewards(address,uint256,(bytes32,uint256,bytes)[])\":{\"notice\":\"Retrieves rewards owed for a set of resolved price requests.\"},\"revealVote(bytes32,uint256,int256,bytes,int256)\":{\"notice\":\"Reveal a previously committed vote for `identifier` at `time`.\"},\"revealVote(bytes32,uint256,int256,int256)\":{\"notice\":\"Reveal a previously committed vote for `identifier` at `time`.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"},\"setGatPercentage((uint256))\":{\"notice\":\"Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\"},\"setInflationRate((uint256))\":{\"notice\":\"Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\"},\"setMigrated(address)\":{\"notice\":\"Disables this Voting contract in favor of the migrated one.\"},\"setRewardsExpirationTimeout(uint256)\":{\"notice\":\"Resets the rewards expiration timeout.\"},\"snapshotCurrentRound(bytes)\":{\"notice\":\"Snapshot the current round's token balances and lock in the inflation rate and GAT.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data-verification-mechanism/implementation/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Snapshot.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Arrays.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev This contract extends an ERC20 token with a snapshot mechanism. When a snapshot is created, the balances and\\n * total supply at the time are recorded for later access.\\n *\\n * This can be used to safely create mechanisms based on token balances such as trustless dividends or weighted voting.\\n * In naive implementations it's possible to perform a \\\"double spend\\\" attack by reusing the same balance from different\\n * accounts. By using snapshots to calculate dividends or voting power, those attacks no longer apply. It can also be\\n * used to create an efficient ERC20 forking mechanism.\\n *\\n * Snapshots are created by the internal {_snapshot} function, which will emit the {Snapshot} event and return a\\n * snapshot id. To get the total supply at the time of a snapshot, call the function {totalSupplyAt} with the snapshot\\n * id. To get the balance of an account at the time of a snapshot, call the {balanceOfAt} function with the snapshot id\\n * and the account address.\\n *\\n * NOTE: Snapshot policy can be customized by overriding the {_getCurrentSnapshotId} method. For example, having it\\n * return `block.number` will trigger the creation of snapshot at the beginning of each new block. When overriding this\\n * function, be careful about the monotonicity of its result. Non-monotonic snapshot ids will break the contract.\\n *\\n * Implementing snapshots for every block using this method will incur significant gas costs. For a gas-efficient\\n * alternative consider {ERC20Votes}.\\n *\\n * ==== Gas Costs\\n *\\n * Snapshots are efficient. Snapshot creation is _O(1)_. Retrieval of balances or total supply from a snapshot is _O(log\\n * n)_ in the number of snapshots that have been created, although _n_ for a specific account will generally be much\\n * smaller since identical balances in subsequent snapshots are stored as a single entry.\\n *\\n * There is a constant overhead for normal ERC20 transfers due to the additional snapshot bookkeeping. This overhead is\\n * only significant for the first transfer that immediately follows a snapshot for a particular account. Subsequent\\n * transfers will have normal cost until the next snapshot, and so on.\\n */\\n\\nabstract contract ERC20Snapshot is ERC20 {\\n    // Inspired by Jordi Baylina's MiniMeToken to record historical balances:\\n    // https://github.com/Giveth/minime/blob/ea04d950eea153a04c51fa510b068b9dded390cb/contracts/MiniMeToken.sol\\n\\n    using Arrays for uint256[];\\n    using Counters for Counters.Counter;\\n\\n    // Snapshotted values have arrays of ids and the value corresponding to that id. These could be an array of a\\n    // Snapshot struct, but that would impede usage of functions that work on an array.\\n    struct Snapshots {\\n        uint256[] ids;\\n        uint256[] values;\\n    }\\n\\n    mapping(address => Snapshots) private _accountBalanceSnapshots;\\n    Snapshots private _totalSupplySnapshots;\\n\\n    // Snapshot ids increase monotonically, with the first value being 1. An id of 0 is invalid.\\n    Counters.Counter private _currentSnapshotId;\\n\\n    /**\\n     * @dev Emitted by {_snapshot} when a snapshot identified by `id` is created.\\n     */\\n    event Snapshot(uint256 id);\\n\\n    /**\\n     * @dev Creates a new snapshot and returns its snapshot id.\\n     *\\n     * Emits a {Snapshot} event that contains the same id.\\n     *\\n     * {_snapshot} is `internal` and you have to decide how to expose it externally. Its usage may be restricted to a\\n     * set of accounts, for example using {AccessControl}, or it may be open to the public.\\n     *\\n     * [WARNING]\\n     * ====\\n     * While an open way of calling {_snapshot} is required for certain trust minimization mechanisms such as forking,\\n     * you must consider that it can potentially be used by attackers in two ways.\\n     *\\n     * First, it can be used to increase the cost of retrieval of values from snapshots, although it will grow\\n     * logarithmically thus rendering this attack ineffective in the long term. Second, it can be used to target\\n     * specific accounts and increase the cost of ERC20 transfers for them, in the ways specified in the Gas Costs\\n     * section above.\\n     *\\n     * We haven't measured the actual numbers; if this is something you're interested in please reach out to us.\\n     * ====\\n     */\\n    function _snapshot() internal virtual returns (uint256) {\\n        _currentSnapshotId.increment();\\n\\n        uint256 currentId = _getCurrentSnapshotId();\\n        emit Snapshot(currentId);\\n        return currentId;\\n    }\\n\\n    /**\\n     * @dev Get the current snapshotId\\n     */\\n    function _getCurrentSnapshotId() internal view virtual returns (uint256) {\\n        return _currentSnapshotId.current();\\n    }\\n\\n    /**\\n     * @dev Retrieves the balance of `account` at the time `snapshotId` was created.\\n     */\\n    function balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\\n\\n        return snapshotted ? value : balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Retrieves the total supply at the time `snapshotId` was created.\\n     */\\n    function totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\\n        (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\\n\\n        return snapshotted ? value : totalSupply();\\n    }\\n\\n    // Update balance and/or total supply snapshots before the values are modified. This is implemented\\n    // in the _beforeTokenTransfer hook, which is executed for _mint, _burn, and _transfer operations.\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) {\\n            // mint\\n            _updateAccountSnapshot(to);\\n            _updateTotalSupplySnapshot();\\n        } else if (to == address(0)) {\\n            // burn\\n            _updateAccountSnapshot(from);\\n            _updateTotalSupplySnapshot();\\n        } else {\\n            // transfer\\n            _updateAccountSnapshot(from);\\n            _updateAccountSnapshot(to);\\n        }\\n    }\\n\\n    function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\\n        require(snapshotId > 0, \\\"ERC20Snapshot: id is 0\\\");\\n        require(snapshotId <= _getCurrentSnapshotId(), \\\"ERC20Snapshot: nonexistent id\\\");\\n\\n        // When a valid snapshot is queried, there are three possibilities:\\n        //  a) The queried value was not modified after the snapshot was taken. Therefore, a snapshot entry was never\\n        //  created for this id, and all stored snapshot ids are smaller than the requested one. The value that corresponds\\n        //  to this id is the current one.\\n        //  b) The queried value was modified after the snapshot was taken. Therefore, there will be an entry with the\\n        //  requested id, and its value is the one to return.\\n        //  c) More snapshots were created after the requested one, and the queried value was later modified. There will be\\n        //  no entry for the requested id: the value that corresponds to it is that of the smallest snapshot id that is\\n        //  larger than the requested one.\\n        //\\n        // In summary, we need to find an element in an array, returning the index of the smallest value that is larger if\\n        // it is not found, unless said value doesn't exist (e.g. when all values are smaller). Arrays.findUpperBound does\\n        // exactly this.\\n\\n        uint256 index = snapshots.ids.findUpperBound(snapshotId);\\n\\n        if (index == snapshots.ids.length) {\\n            return (false, 0);\\n        } else {\\n            return (true, snapshots.values[index]);\\n        }\\n    }\\n\\n    function _updateAccountSnapshot(address account) private {\\n        _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\\n    }\\n\\n    function _updateTotalSupplySnapshot() private {\\n        _updateSnapshot(_totalSupplySnapshots, totalSupply());\\n    }\\n\\n    function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\\n        uint256 currentId = _getCurrentSnapshotId();\\n        if (_lastSnapshotId(snapshots.ids) < currentId) {\\n            snapshots.ids.push(currentId);\\n            snapshots.values.push(currentValue);\\n        }\\n    }\\n\\n    function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\\n        if (ids.length == 0) {\\n            return 0;\\n        } else {\\n            return ids[ids.length - 1];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb3718ef8e5a9d4b3a165319d86e75c4c197a5433dfd7c308393e659e8590c56d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./StorageSlot.sol\\\";\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        if (array.length == 0) {\\n            return 0;\\n        }\\n\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds down (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.17/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n}\\n\",\"keccak256\":\"0x104a08fc99d01f2229044fe3db7b3e0375b5d93cd7203f11db6ecdc9c8c8b0b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/ExpandedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\r\\n * be the owner who is capable of adding new roles.\\r\\n */\\r\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\r\\n    enum Roles {\\r\\n        // Can set the minter and burner.\\r\\n        Owner,\\r\\n        // Addresses that can mint new tokens.\\r\\n        Minter,\\r\\n        // Addresses that can burn tokens that address owns.\\r\\n        Burner\\r\\n    }\\r\\n\\r\\n    uint8 _decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the ExpandedERC20.\\r\\n     * @param _tokenName The name which describes the new token.\\r\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param _tokenDecimals The number of decimals to define token precision.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol,\\r\\n        uint8 _tokenDecimals\\r\\n    ) ERC20(_tokenName, _tokenSymbol) {\\r\\n        _decimals = _tokenDecimals;\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\r\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\r\\n     * @param recipient address to mint to.\\r\\n     * @param value amount of tokens to mint.\\r\\n     * @return True if the mint succeeded, or False.\\r\\n     */\\r\\n    function mint(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Minter))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _mint(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     * @return True if the burn succeeded, or False.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Burner))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _burn(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Minter role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Minter role is added.\\r\\n     */\\r\\n    function addMinter(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Burner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Burner role is added.\\r\\n     */\\r\\n    function addBurner(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset Owner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The new holder of the Owner role.\\r\\n     */\\r\\n    function resetOwner(address account) external virtual override {\\r\\n        resetMember(uint256(Roles.Owner), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5ad65b24455d06323ae045e0998a08a36d52bc12644cf667ad3a0e8d92ef734\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface that includes burn and mint methods.\\r\\n */\\r\\nabstract contract ExpandedIERC20 is IERC20 {\\r\\n    /**\\r\\n     * @notice Burns a specific amount of the caller's tokens.\\r\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\r\\n     */\\r\\n    function burn(uint256 value) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\r\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\r\\n     */\\r\\n    function mint(address to, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    function addMinter(address account) external virtual;\\r\\n\\r\\n    function addBurner(address account) external virtual;\\r\\n\\r\\n    function resetOwner(address account) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3e81268dc3417f29f6047fab4fa03d5b1fc23f280485ba81b90769c971293fc\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/RegistryInterface.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Registry for financial contracts and approved financial contract creators.\\r\\n * @dev Maintains a whitelist of financial contract creators that are allowed\\r\\n * to register new financial contracts and stores party members of a financial contract.\\r\\n */\\r\\ncontract Registry is RegistryInterface, MultiRole {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    /****************************************\\r\\n     *    INTERNAL VARIABLES AND STORAGE    *\\r\\n     ****************************************/\\r\\n\\r\\n    enum Roles {\\r\\n        Owner, // The owner manages the set of ContractCreators.\\r\\n        ContractCreator // Can register financial contracts.\\r\\n    }\\r\\n\\r\\n    // This enum is required because a `WasValid` state is required\\r\\n    // to ensure that financial contracts cannot be re-registered.\\r\\n    enum Validity { Invalid, Valid }\\r\\n\\r\\n    // Local information about a contract.\\r\\n    struct FinancialContract {\\r\\n        Validity valid;\\r\\n        uint128 index;\\r\\n    }\\r\\n\\r\\n    struct Party {\\r\\n        address[] contracts; // Each financial contract address is stored in this array.\\r\\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\\r\\n        mapping(address => uint256) contractIndex;\\r\\n    }\\r\\n\\r\\n    // Array of all contracts that are approved to use the UMA Oracle.\\r\\n    address[] public registeredContracts;\\r\\n\\r\\n    // Map of financial contract contracts to the associated FinancialContract struct.\\r\\n    mapping(address => FinancialContract) public contractMap;\\r\\n\\r\\n    // Map each party member to their their associated Party struct.\\r\\n    mapping(address => Party) private partyMap;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\\r\\n    event PartyAdded(address indexed contractAddress, address indexed party);\\r\\n    event PartyRemoved(address indexed contractAddress, address indexed party);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Registry contract.\\r\\n     */\\r\\n    constructor() {\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        // Start with no contract creators registered.\\r\\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        REGISTRATION FUNCTIONS        *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Registers a new financial contract.\\r\\n     * @dev Only authorized contract creators can call this method.\\r\\n     * @param parties array of addresses who become parties in the contract.\\r\\n     * @param contractAddress address of the contract against which the parties are registered.\\r\\n     */\\r\\n    function registerContract(address[] calldata parties, address contractAddress)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.ContractCreator))\\r\\n    {\\r\\n        FinancialContract storage financialContract = contractMap[contractAddress];\\r\\n        require(contractMap[contractAddress].valid == Validity.Invalid, \\\"Can only register once\\\");\\r\\n\\r\\n        // Store contract address as a registered contract.\\r\\n        registeredContracts.push(contractAddress);\\r\\n\\r\\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\\r\\n        financialContract.index = uint128(registeredContracts.length.sub(1));\\r\\n\\r\\n        // For all parties in the array add them to the contract's parties.\\r\\n        financialContract.valid = Validity.Valid;\\r\\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\\r\\n            _addPartyToContract(parties[i], contractAddress);\\r\\n        }\\r\\n\\r\\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds a party member to the calling contract.\\r\\n     * @dev msg.sender will be used to determine the contract that this party is added to.\\r\\n     * @param party new party for the calling contract.\\r\\n     */\\r\\n    function addPartyToContract(address party) external override {\\r\\n        address contractAddress = msg.sender;\\r\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Can only add to valid contract\\\");\\r\\n\\r\\n        _addPartyToContract(party, contractAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes a party member from the calling contract.\\r\\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\\r\\n     * @param partyAddress address to be removed from the calling contract.\\r\\n     */\\r\\n    function removePartyFromContract(address partyAddress) external override {\\r\\n        address contractAddress = msg.sender;\\r\\n        Party storage party = partyMap[partyAddress];\\r\\n        uint256 numberOfContracts = party.contracts.length;\\r\\n\\r\\n        require(numberOfContracts != 0, \\\"Party has no contracts\\\");\\r\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Remove only from valid contract\\\");\\r\\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \\\"Can only remove existing party\\\");\\r\\n\\r\\n        // Index of the current location of the contract to remove.\\r\\n        uint256 deleteIndex = party.contractIndex[contractAddress];\\r\\n\\r\\n        // Store the last contract's address to update the lookup map.\\r\\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\\r\\n\\r\\n        // Swap the contract to be removed with the last contract.\\r\\n        party.contracts[deleteIndex] = lastContractAddress;\\r\\n\\r\\n        // Update the lookup index with the new location.\\r\\n        party.contractIndex[lastContractAddress] = deleteIndex;\\r\\n\\r\\n        // Pop the last contract from the array and update the lookup map.\\r\\n        party.contracts.pop();\\r\\n        delete party.contractIndex[contractAddress];\\r\\n\\r\\n        emit PartyRemoved(contractAddress, partyAddress);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *         REGISTRY STATE GETTERS       *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the contract has been registered with the registry.\\r\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\r\\n     * @param contractAddress address of the financial contract.\\r\\n     * @return bool indicates whether the contract is registered.\\r\\n     */\\r\\n    function isContractRegistered(address contractAddress) external view override returns (bool) {\\r\\n        return contractMap[contractAddress].valid == Validity.Valid;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\r\\n     * @param party address of the party.\\r\\n     * @return an array of the contracts the party is registered to.\\r\\n     */\\r\\n    function getRegisteredContracts(address party) external view override returns (address[] memory) {\\r\\n        return partyMap[party].contracts;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns all registered contracts.\\r\\n     * @return all registered contract addresses within the system.\\r\\n     */\\r\\n    function getAllRegisteredContracts() external view override returns (address[] memory) {\\r\\n        return registeredContracts;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice checks if an address is a party of a contract.\\r\\n     * @param party party to check.\\r\\n     * @param contractAddress address to check against the party.\\r\\n     * @return bool indicating if the address is a party of the contract.\\r\\n     */\\r\\n    function isPartyMemberOfContract(address party, address contractAddress) public view override returns (bool) {\\r\\n        uint256 index = partyMap[party].contractIndex[contractAddress];\\r\\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *           INTERNAL FUNCTIONS         *\\r\\n     ****************************************/\\r\\n\\r\\n    function _addPartyToContract(address party, address contractAddress) internal {\\r\\n        require(!isPartyMemberOfContract(party, contractAddress), \\\"Can only register a party once\\\");\\r\\n        uint256 contractIndex = partyMap[party].contracts.length;\\r\\n        partyMap[party].contracts.push(contractAddress);\\r\\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\\r\\n\\r\\n        emit PartyAdded(contractAddress, party);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0f2261642d37630d06cbb588571a3f2de39f5eef787e38d81833cf4d45bb6e10\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/ResultComputation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Computes vote results.\\r\\n * @dev The result is the mode of the added votes. Otherwise, the vote is unresolved.\\r\\n */\\r\\nlibrary ResultComputation {\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n\\r\\n    /****************************************\\r\\n     *   INTERNAL LIBRARY DATA STRUCTURE    *\\r\\n     ****************************************/\\r\\n\\r\\n    struct Data {\\r\\n        // Maps price to number of tokens that voted for that price.\\r\\n        mapping(int256 => FixedPoint.Unsigned) voteFrequency;\\r\\n        // The total votes that have been added.\\r\\n        FixedPoint.Unsigned totalVotes;\\r\\n        // The price that is the current mode, i.e., the price with the highest frequency in `voteFrequency`.\\r\\n        int256 currentMode;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *            VOTING FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Adds a new vote to be used when computing the result.\\r\\n     * @param data contains information to which the vote is applied.\\r\\n     * @param votePrice value specified in the vote for the given `numberTokens`.\\r\\n     * @param numberTokens number of tokens that voted on the `votePrice`.\\r\\n     */\\r\\n    function addVote(\\r\\n        Data storage data,\\r\\n        int256 votePrice,\\r\\n        FixedPoint.Unsigned memory numberTokens\\r\\n    ) internal {\\r\\n        data.totalVotes = data.totalVotes.add(numberTokens);\\r\\n        data.voteFrequency[votePrice] = data.voteFrequency[votePrice].add(numberTokens);\\r\\n        if (\\r\\n            votePrice != data.currentMode &&\\r\\n            data.voteFrequency[votePrice].isGreaterThan(data.voteFrequency[data.currentMode])\\r\\n        ) data.currentMode = votePrice;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        VOTING STATE GETTERS          *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the result is resolved, and if so, what value it resolved to.\\r\\n     * @dev `price` should be ignored if `isResolved` is false.\\r\\n     * @param data contains information against which the `minVoteThreshold` is applied.\\r\\n     * @param minVoteThreshold min (exclusive) number of tokens that must have voted for the result to be valid. Can be\\r\\n     * used to enforce a minimum voter participation rate, regardless of how the votes are distributed.\\r\\n     * @return isResolved indicates if the price has been resolved correctly.\\r\\n     * @return price the price that the dvm resolved to.\\r\\n     */\\r\\n    function getResolvedPrice(Data storage data, FixedPoint.Unsigned memory minVoteThreshold)\\r\\n        internal\\r\\n        view\\r\\n        returns (bool isResolved, int256 price)\\r\\n    {\\r\\n        FixedPoint.Unsigned memory modeThreshold = FixedPoint.fromUnscaledUint(50).div(100);\\r\\n\\r\\n        if (\\r\\n            data.totalVotes.isGreaterThan(minVoteThreshold) &&\\r\\n            data.voteFrequency[data.currentMode].div(data.totalVotes).isGreaterThan(modeThreshold)\\r\\n        ) {\\r\\n            // `modeThreshold` and `minVoteThreshold` are exceeded, so the current mode is the resolved price.\\r\\n            isResolved = true;\\r\\n            price = data.currentMode;\\r\\n        } else isResolved = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether a `voteHash` is considered correct.\\r\\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\\r\\n     * @param data contains information against which the `voteHash` is checked.\\r\\n     * @param voteHash committed hash submitted by the voter.\\r\\n     * @return bool true if the vote was correct.\\r\\n     */\\r\\n    function wasVoteCorrect(Data storage data, bytes32 voteHash) internal view returns (bool) {\\r\\n        return voteHash == keccak256(abi.encode(data.currentMode));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the total number of tokens whose votes are considered correct.\\r\\n     * @dev Should only be called after a vote is resolved, i.e., via `getResolvedPrice`.\\r\\n     * @param data contains all votes against which the correctly voted tokens are counted.\\r\\n     * @return FixedPoint.Unsigned which indicates the frequency of the correctly voted tokens.\\r\\n     */\\r\\n    function getTotalCorrectlyVotedTokens(Data storage data) internal view returns (FixedPoint.Unsigned memory) {\\r\\n        return data.voteFrequency[data.currentMode];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x696b4c11b686987597005d85e60c576e4cb8b4e2f39c7d502bc6338869f32650\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/VoteTiming.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/VotingInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library to compute rounds and phases for an equal length commit-reveal voting cycle.\\r\\n */\\r\\nlibrary VoteTiming {\\r\\n    struct Data {\\r\\n        uint256 phaseLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initializes the data object. Sets the phase length based on the input.\\r\\n     * @param data reference to the this library's data object.\\r\\n     * @param phaseLength length of voting phase in seconds.\\r\\n     */\\r\\n    function init(Data storage data, uint256 phaseLength) internal {\\r\\n        // This should have a require message but this results in an internal Solidity error.\\r\\n        require(phaseLength > 0);\\r\\n        data.phaseLength = phaseLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the roundID based off the current time as floor(timestamp/roundLength).\\r\\n     * @dev The round ID depends on the global timestamp but not on the lifetime of the system.\\r\\n     * The consequence is that the initial round ID starts at an arbitrary number (that increments, as expected, for subsequent rounds) instead of zero or one.\\r\\n     * @param data input data object.\\r\\n     * @param currentTime input unix timestamp used to compute the current roundId.\\r\\n     * @return roundId defined as a function of the currentTime and `phaseLength` from `data`.\\r\\n     */\\r\\n    function computeCurrentRoundId(Data storage data, uint256 currentTime) internal view returns (uint256) {\\r\\n        uint256 roundLength = data.phaseLength * uint256(VotingAncillaryInterface.Phase.NUM_PHASES);\\r\\n        return currentTime / roundLength;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice compute the round end time as a function of the round Id.\\r\\n     * @param data input data object.\\r\\n     * @param roundId uniquely identifies the current round.\\r\\n     * @return timestamp unix time of when the current round will end.\\r\\n     */\\r\\n    function computeRoundEndTime(Data storage data, uint256 roundId) internal view returns (uint256) {\\r\\n        uint256 roundLength = data.phaseLength * uint256(VotingAncillaryInterface.Phase.NUM_PHASES);\\r\\n        return roundLength * (roundId + 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the current phase based only on the current time.\\r\\n     * @param data input data object.\\r\\n     * @param currentTime input unix timestamp used to compute the current roundId.\\r\\n     * @return current voting phase based on current time and vote phases configuration.\\r\\n     */\\r\\n    function computeCurrentPhase(Data storage data, uint256 currentTime)\\r\\n        internal\\r\\n        view\\r\\n        returns (VotingAncillaryInterface.Phase)\\r\\n    {\\r\\n        // This employs some hacky casting. We could make this an if-statement if we're worried about type safety.\\r\\n        return\\r\\n            VotingAncillaryInterface.Phase(\\r\\n                (currentTime / data.phaseLength) % uint256(VotingAncillaryInterface.Phase.NUM_PHASES)\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2fed5ae911ef4d9a01895768e058998642c23a0aa293b5655d3425a0fedc8879\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../interfaces/OracleInterface.sol\\\";\\r\\nimport \\\"../interfaces/OracleAncillaryInterface.sol\\\";\\r\\nimport \\\"../interfaces/VotingInterface.sol\\\";\\r\\nimport \\\"../interfaces/VotingAncillaryInterface.sol\\\";\\r\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"./Registry.sol\\\";\\r\\nimport \\\"./ResultComputation.sol\\\";\\r\\nimport \\\"./VoteTiming.sol\\\";\\r\\nimport \\\"./VotingToken.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Voting system for Oracle.\\r\\n * @dev Handles receiving and resolving price requests via a commit-reveal voting scheme.\\r\\n */\\r\\ncontract Voting is\\r\\n    Testable,\\r\\n    Ownable,\\r\\n    OracleInterface,\\r\\n    OracleAncillaryInterface, // Interface to support ancillary data with price requests.\\r\\n    VotingInterface,\\r\\n    VotingAncillaryInterface // Interface to support ancillary data with voting rounds.\\r\\n{\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using SafeMath for uint256;\\r\\n    using VoteTiming for VoteTiming.Data;\\r\\n    using ResultComputation for ResultComputation.Data;\\r\\n\\r\\n    /****************************************\\r\\n     *        VOTING DATA STRUCTURES        *\\r\\n     ****************************************/\\r\\n\\r\\n    // Identifies a unique price request for which the Oracle will always return the same value.\\r\\n    // Tracks ongoing votes as well as the result of the vote.\\r\\n    struct PriceRequest {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        // A map containing all votes for this price in various rounds.\\r\\n        mapping(uint256 => VoteInstance) voteInstances;\\r\\n        // If in the past, this was the voting round where this price was resolved. If current or the upcoming round,\\r\\n        // this is the voting round where this price will be voted on, but not necessarily resolved.\\r\\n        uint256 lastVotingRound;\\r\\n        // The index in the `pendingPriceRequests` that references this PriceRequest. A value of UINT_MAX means that\\r\\n        // this PriceRequest is resolved and has been cleaned up from `pendingPriceRequests`.\\r\\n        uint256 index;\\r\\n        bytes ancillaryData;\\r\\n    }\\r\\n\\r\\n    struct VoteInstance {\\r\\n        // Maps (voterAddress) to their submission.\\r\\n        mapping(address => VoteSubmission) voteSubmissions;\\r\\n        // The data structure containing the computed voting results.\\r\\n        ResultComputation.Data resultComputation;\\r\\n    }\\r\\n\\r\\n    struct VoteSubmission {\\r\\n        // A bytes32 of `0` indicates no commit or a commit that was already revealed.\\r\\n        bytes32 commit;\\r\\n        // The hash of the value that was revealed.\\r\\n        // Note: this is only used for computation of rewards.\\r\\n        bytes32 revealHash;\\r\\n    }\\r\\n\\r\\n    struct Round {\\r\\n        uint256 snapshotId; // Voting token snapshot ID for this round.  0 if no snapshot has been taken.\\r\\n        FixedPoint.Unsigned inflationRate; // Inflation rate set for this round.\\r\\n        FixedPoint.Unsigned gatPercentage; // Gat rate set for this round.\\r\\n        uint256 rewardsExpirationTime; // Time that rewards for this round can be claimed until.\\r\\n    }\\r\\n\\r\\n    // Represents the status a price request has.\\r\\n    enum RequestStatus {\\r\\n        NotRequested, // Was never requested.\\r\\n        Active, // Is being voted on in the current round.\\r\\n        Resolved, // Was resolved in a previous round.\\r\\n        Future // Is scheduled to be voted on in a future round.\\r\\n    }\\r\\n\\r\\n    // Only used as a return value in view methods -- never stored in the contract.\\r\\n    struct RequestState {\\r\\n        RequestStatus status;\\r\\n        uint256 lastVotingRound;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          INTERNAL TRACKING           *\\r\\n     ****************************************/\\r\\n\\r\\n    // Maps round numbers to the rounds.\\r\\n    mapping(uint256 => Round) public rounds;\\r\\n\\r\\n    // Maps price request IDs to the PriceRequest struct.\\r\\n    mapping(bytes32 => PriceRequest) private priceRequests;\\r\\n\\r\\n    // Price request ids for price requests that haven't yet been marked as resolved.\\r\\n    // These requests may be for future rounds.\\r\\n    bytes32[] internal pendingPriceRequests;\\r\\n\\r\\n    VoteTiming.Data public voteTiming;\\r\\n\\r\\n    // Percentage of the total token supply that must be used in a vote to\\r\\n    // create a valid price resolution. 1 == 100%.\\r\\n    FixedPoint.Unsigned public gatPercentage;\\r\\n\\r\\n    // Global setting for the rate of inflation per vote. This is the percentage of the snapshotted total supply that\\r\\n    // should be split among the correct voters.\\r\\n    // Note: this value is used to set per-round inflation at the beginning of each round. 1 = 100%.\\r\\n    FixedPoint.Unsigned public inflationRate;\\r\\n\\r\\n    // Time in seconds from the end of the round in which a price request is\\r\\n    // resolved that voters can still claim their rewards.\\r\\n    uint256 public rewardsExpirationTimeout;\\r\\n\\r\\n    // Reference to the voting token.\\r\\n    VotingToken public votingToken;\\r\\n\\r\\n    // Reference to the Finder.\\r\\n    FinderInterface private finder;\\r\\n\\r\\n    // If non-zero, this contract has been migrated to this address. All voters and\\r\\n    // financial contracts should query the new address only.\\r\\n    address public migratedAddress;\\r\\n\\r\\n    // Max value of an unsigned integer.\\r\\n    uint256 private constant UINT_MAX = ~uint256(0);\\r\\n\\r\\n    // Max length in bytes of ancillary data that can be appended to a price request.\\r\\n    // As of December 2020, the current Ethereum gas limit is 12.5 million. This requestPrice function's gas primarily\\r\\n    // comes from computing a Keccak-256 hash in _encodePriceRequest and writing a new PriceRequest to\\r\\n    // storage. We have empirically determined an ancillary data limit of 8192 bytes that keeps this function\\r\\n    // well within the gas limit at ~8 million gas. To learn more about the gas limit and EVM opcode costs go here:\\r\\n    // - https://etherscan.io/chart/gaslimit\\r\\n    // - https://github.com/djrtwo/evm-opcode-gas-costs\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    bytes32 public snapshotMessageHash = ECDSA.toEthSignedMessageHash(keccak256(bytes(\\\"Sign For Snapshot\\\")));\\r\\n\\r\\n    /***************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event VoteCommitted(\\r\\n        address indexed voter,\\r\\n        uint256 indexed roundId,\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        bytes ancillaryData\\r\\n    );\\r\\n\\r\\n    event EncryptedVote(\\r\\n        address indexed voter,\\r\\n        uint256 indexed roundId,\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        bytes ancillaryData,\\r\\n        bytes encryptedVote\\r\\n    );\\r\\n\\r\\n    event VoteRevealed(\\r\\n        address indexed voter,\\r\\n        uint256 indexed roundId,\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        bytes ancillaryData,\\r\\n        uint256 numTokens\\r\\n    );\\r\\n\\r\\n    event RewardsRetrieved(\\r\\n        address indexed voter,\\r\\n        uint256 indexed roundId,\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        bytes ancillaryData,\\r\\n        uint256 numTokens\\r\\n    );\\r\\n\\r\\n    event PriceRequestAdded(uint256 indexed roundId, bytes32 indexed identifier, uint256 time);\\r\\n\\r\\n    event PriceResolved(\\r\\n        uint256 indexed roundId,\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        bytes ancillaryData\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Voting contract.\\r\\n     * @param _phaseLength length of the commit and reveal phases in seconds.\\r\\n     * @param _gatPercentage of the total token supply that must be used in a vote to create a valid price resolution.\\r\\n     * @param _inflationRate percentage inflation per round used to increase token supply of correct voters.\\r\\n     * @param _rewardsExpirationTimeout timeout, in seconds, within which rewards must be claimed.\\r\\n     * @param _votingToken address of the UMA token contract used to commit votes.\\r\\n     * @param _finder keeps track of all contracts within the system based on their interfaceName.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _phaseLength,\\r\\n        FixedPoint.Unsigned memory _gatPercentage,\\r\\n        FixedPoint.Unsigned memory _inflationRate,\\r\\n        uint256 _rewardsExpirationTimeout,\\r\\n        address _votingToken,\\r\\n        address _finder,\\r\\n        address _timerAddress\\r\\n    ) Testable(_timerAddress) {\\r\\n        voteTiming.init(_phaseLength);\\r\\n        require(_gatPercentage.isLessThanOrEqual(1), \\\"GAT percentage must be <= 100%\\\");\\r\\n        gatPercentage = _gatPercentage;\\r\\n        inflationRate = _inflationRate;\\r\\n        votingToken = VotingToken(_votingToken);\\r\\n        finder = FinderInterface(_finder);\\r\\n        rewardsExpirationTimeout = _rewardsExpirationTimeout;\\r\\n    }\\r\\n\\r\\n    /***************************************\\r\\n                    MODIFIERS\\r\\n    ****************************************/\\r\\n\\r\\n    modifier onlyRegisteredContract() {\\r\\n        if (migratedAddress != address(0)) {\\r\\n            require(msg.sender == migratedAddress, \\\"Caller must be migrated address\\\");\\r\\n        } else {\\r\\n            Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\\r\\n            require(registry.isContractRegistered(msg.sender), \\\"Called must be registered\\\");\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyIfNotMigrated() {\\r\\n        require(migratedAddress == address(0), \\\"Only call this if not migrated\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *  PRICE REQUEST AND ACCESS FUNCTIONS  *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported. The length of the ancillary data\\r\\n     * is limited such that this method abides by the EVM transaction gas limit.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public override onlyRegisteredContract() {\\r\\n        uint256 blockTime = getCurrentTime();\\r\\n        require(time <= blockTime, \\\"Can only request in past\\\");\\r\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \\\"Unsupported identifier request\\\");\\r\\n        require(ancillaryData.length <= ancillaryBytesLimit, \\\"Invalid ancillary data\\\");\\r\\n\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\\r\\n        PriceRequest storage priceRequest = priceRequests[priceRequestId];\\r\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\\r\\n\\r\\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\\r\\n\\r\\n        if (requestStatus == RequestStatus.NotRequested) {\\r\\n            // Price has never been requested.\\r\\n            // Price requests always go in the next round, so add 1 to the computed current round.\\r\\n            uint256 nextRoundId = currentRoundId.add(1);\\r\\n\\r\\n            PriceRequest storage newPriceRequest = priceRequests[priceRequestId];\\r\\n            newPriceRequest.identifier = identifier;\\r\\n            newPriceRequest.time = time;\\r\\n            newPriceRequest.lastVotingRound = nextRoundId;\\r\\n            newPriceRequest.index = pendingPriceRequests.length;\\r\\n            newPriceRequest.ancillaryData = ancillaryData;\\r\\n\\r\\n            pendingPriceRequests.push(priceRequestId);\\r\\n            emit PriceRequestAdded(nextRoundId, identifier, time);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function requestPrice(bytes32 identifier, uint256 time) public override {\\r\\n        requestPrice(identifier, time, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp of for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return _hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override onlyRegisteredContract() returns (bool) {\\r\\n        (bool _hasPrice, , ) = _getPriceOrError(identifier, time, ancillaryData);\\r\\n        return _hasPrice;\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function hasPrice(bytes32 identifier, uint256 time) public view override returns (bool) {\\r\\n        return hasPrice(identifier, time, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp of for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override onlyRegisteredContract() returns (int256) {\\r\\n        (bool _hasPrice, int256 price, string memory message) = _getPriceOrError(identifier, time, ancillaryData);\\r\\n\\r\\n        // If the price wasn't available, revert with the provided message.\\r\\n        require(_hasPrice, message);\\r\\n        return price;\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function getPrice(bytes32 identifier, uint256 time) public view override returns (int256) {\\r\\n        return getPrice(identifier, time, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the status of a list of price requests, identified by their identifier and time.\\r\\n     * @dev If the status for a particular request is NotRequested, the lastVotingRound will always be 0.\\r\\n     * @param requests array of type PendingRequest which includes an identifier and timestamp for each request.\\r\\n     * @return requestStates a list, in the same order as the input list, giving the status of each of the specified price requests.\\r\\n     */\\r\\n    function getPriceRequestStatuses(PendingRequestAncillary[] memory requests)\\r\\n        public\\r\\n        view\\r\\n        returns (RequestState[] memory)\\r\\n    {\\r\\n        RequestState[] memory requestStates = new RequestState[](requests.length);\\r\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\r\\n        for (uint256 i = 0; i < requests.length; i++) {\\r\\n            PriceRequest storage priceRequest =\\r\\n                _getPriceRequest(requests[i].identifier, requests[i].time, requests[i].ancillaryData);\\r\\n\\r\\n            RequestStatus status = _getRequestStatus(priceRequest, currentRoundId);\\r\\n\\r\\n            // If it's an active request, its true lastVotingRound is the current one, even if it hasn't been updated.\\r\\n            if (status == RequestStatus.Active) {\\r\\n                requestStates[i].lastVotingRound = currentRoundId;\\r\\n            } else {\\r\\n                requestStates[i].lastVotingRound = priceRequest.lastVotingRound;\\r\\n            }\\r\\n            requestStates[i].status = status;\\r\\n        }\\r\\n        return requestStates;\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function getPriceRequestStatuses(PendingRequest[] memory requests) public view returns (RequestState[] memory) {\\r\\n        PendingRequestAncillary[] memory requestsAncillary = new PendingRequestAncillary[](requests.length);\\r\\n\\r\\n        for (uint256 i = 0; i < requests.length; i++) {\\r\\n            requestsAncillary[i].identifier = requests[i].identifier;\\r\\n            requestsAncillary[i].time = requests[i].time;\\r\\n            requestsAncillary[i].ancillaryData = \\\"\\\";\\r\\n        }\\r\\n        return getPriceRequestStatuses(requestsAncillary);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *            VOTING FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\r\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\r\\n     * Commits can be changed.\\r\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\\u2019s expected behavior,\\r\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\r\\n     * they can determine the vote pre-reveal.\\r\\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\\r\\n     * @param time unix timestamp of the price being voted on.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\r\\n     */\\r\\n    function commitVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash\\r\\n    ) public override onlyIfNotMigrated() {\\r\\n        require(hash != bytes32(0), \\\"Invalid provided hash\\\");\\r\\n        // Current time is required for all vote timing queries.\\r\\n        uint256 blockTime = getCurrentTime();\\r\\n        require(\\r\\n            voteTiming.computeCurrentPhase(blockTime) == VotingAncillaryInterface.Phase.Commit,\\r\\n            \\\"Cannot commit in reveal phase\\\"\\r\\n        );\\r\\n\\r\\n        // At this point, the computed and last updated round ID should be equal.\\r\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\\r\\n\\r\\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\\r\\n        require(\\r\\n            _getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active,\\r\\n            \\\"Cannot commit inactive request\\\"\\r\\n        );\\r\\n\\r\\n        priceRequest.lastVotingRound = currentRoundId;\\r\\n        VoteInstance storage voteInstance = priceRequest.voteInstances[currentRoundId];\\r\\n        voteInstance.voteSubmissions[msg.sender].commit = hash;\\r\\n\\r\\n        emit VoteCommitted(msg.sender, currentRoundId, identifier, time, ancillaryData);\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function commitVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes32 hash\\r\\n    ) public override onlyIfNotMigrated() {\\r\\n        commitVote(identifier, time, \\\"\\\", hash);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Snapshot the current round's token balances and lock in the inflation rate and GAT.\\r\\n     * @dev This function can be called multiple times, but only the first call per round into this function or `revealVote`\\r\\n     * will create the round snapshot. Any later calls will be a no-op. Will revert unless called during reveal period.\\r\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\r\\n     * snapshot.\\r\\n     */\\r\\n    function snapshotCurrentRound(bytes calldata signature)\\r\\n        external\\r\\n        override(VotingInterface, VotingAncillaryInterface)\\r\\n        onlyIfNotMigrated()\\r\\n    {\\r\\n        uint256 blockTime = getCurrentTime();\\r\\n        require(voteTiming.computeCurrentPhase(blockTime) == Phase.Reveal, \\\"Only snapshot in reveal phase\\\");\\r\\n        // Require public snapshot require signature to ensure caller is an EOA.\\r\\n        require(ECDSA.recover(snapshotMessageHash, signature) == msg.sender, \\\"Signature must match sender\\\");\\r\\n        uint256 roundId = voteTiming.computeCurrentRoundId(blockTime);\\r\\n        _freezeRoundVariables(roundId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\r\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\r\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\r\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\r\\n     * @param time specifies the unix timestamp of the price being voted on.\\r\\n     * @param price voted on during the commit phase.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param salt value used to hide the commitment price during the commit phase.\\r\\n     */\\r\\n    function revealVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 salt\\r\\n    ) public override onlyIfNotMigrated() {\\r\\n        require(voteTiming.computeCurrentPhase(getCurrentTime()) == Phase.Reveal, \\\"Cannot reveal in commit phase\\\");\\r\\n        // Note: computing the current round is required to disallow people from revealing an old commit after the round is over.\\r\\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\r\\n\\r\\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\\r\\n        VoteInstance storage voteInstance = priceRequest.voteInstances[roundId];\\r\\n        VoteSubmission storage voteSubmission = voteInstance.voteSubmissions[msg.sender];\\r\\n\\r\\n        // Scoping to get rid of a stack too deep error.\\r\\n        {\\r\\n            // 0 hashes are disallowed in the commit phase, so they indicate a different error.\\r\\n            // Cannot reveal an uncommitted or previously revealed hash\\r\\n            require(voteSubmission.commit != bytes32(0), \\\"Invalid hash reveal\\\");\\r\\n            require(\\r\\n                keccak256(abi.encodePacked(price, salt, msg.sender, time, ancillaryData, roundId, identifier)) ==\\r\\n                    voteSubmission.commit,\\r\\n                \\\"Revealed data != commit hash\\\"\\r\\n            );\\r\\n            // To protect against flash loans, we require snapshot be validated as EOA.\\r\\n            require(rounds[roundId].snapshotId != 0, \\\"Round has no snapshot\\\");\\r\\n        }\\r\\n\\r\\n        // Get the frozen snapshotId\\r\\n        uint256 snapshotId = rounds[roundId].snapshotId;\\r\\n\\r\\n        delete voteSubmission.commit;\\r\\n\\r\\n        // Get the voter's snapshotted balance. Since balances are returned pre-scaled by 10**18, we can directly\\r\\n        // initialize the Unsigned value with the returned uint.\\r\\n        FixedPoint.Unsigned memory balance = FixedPoint.Unsigned(votingToken.balanceOfAt(msg.sender, snapshotId));\\r\\n\\r\\n        // Set the voter's submission.\\r\\n        voteSubmission.revealHash = keccak256(abi.encode(price));\\r\\n\\r\\n        // Add vote to the results.\\r\\n        voteInstance.resultComputation.addVote(price, balance);\\r\\n\\r\\n        emit VoteRevealed(msg.sender, roundId, identifier, time, price, ancillaryData, balance.rawValue);\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function revealVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        int256 salt\\r\\n    ) public override {\\r\\n        revealVote(identifier, time, price, \\\"\\\", salt);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\r\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\r\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\r\\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\\r\\n     * @param time unix timestamp of for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\r\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\r\\n     */\\r\\n    function commitAndEmitEncryptedVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash,\\r\\n        bytes memory encryptedVote\\r\\n    ) public override {\\r\\n        commitVote(identifier, time, ancillaryData, hash);\\r\\n\\r\\n        uint256 roundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\r\\n        emit EncryptedVote(msg.sender, roundId, identifier, time, ancillaryData, encryptedVote);\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function commitAndEmitEncryptedVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes32 hash,\\r\\n        bytes memory encryptedVote\\r\\n    ) public override {\\r\\n        commitVote(identifier, time, \\\"\\\", hash);\\r\\n\\r\\n        commitAndEmitEncryptedVote(identifier, time, \\\"\\\", hash, encryptedVote);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Submit a batch of commits in a single transaction.\\r\\n     * @dev Using `encryptedVote` is optional. If included then commitment is emitted in an event.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\r\\n     * commitments that can fit in one transaction.\\r\\n     * @param commits struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\r\\n     */\\r\\n    function batchCommit(CommitmentAncillary[] memory commits) public override {\\r\\n        for (uint256 i = 0; i < commits.length; i++) {\\r\\n            if (commits[i].encryptedVote.length == 0) {\\r\\n                commitVote(commits[i].identifier, commits[i].time, commits[i].ancillaryData, commits[i].hash);\\r\\n            } else {\\r\\n                commitAndEmitEncryptedVote(\\r\\n                    commits[i].identifier,\\r\\n                    commits[i].time,\\r\\n                    commits[i].ancillaryData,\\r\\n                    commits[i].hash,\\r\\n                    commits[i].encryptedVote\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function batchCommit(Commitment[] memory commits) public override {\\r\\n        CommitmentAncillary[] memory commitsAncillary = new CommitmentAncillary[](commits.length);\\r\\n\\r\\n        for (uint256 i = 0; i < commits.length; i++) {\\r\\n            commitsAncillary[i].identifier = commits[i].identifier;\\r\\n            commitsAncillary[i].time = commits[i].time;\\r\\n            commitsAncillary[i].ancillaryData = \\\"\\\";\\r\\n            commitsAncillary[i].hash = commits[i].hash;\\r\\n            commitsAncillary[i].encryptedVote = commits[i].encryptedVote;\\r\\n        }\\r\\n        batchCommit(commitsAncillary);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal multiple votes in a single transaction.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\r\\n     * that can fit in one transaction.\\r\\n     * @dev For more info on reveals, review the comment for `revealVote`.\\r\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\r\\n     */\\r\\n    function batchReveal(RevealAncillary[] memory reveals) public override {\\r\\n        for (uint256 i = 0; i < reveals.length; i++) {\\r\\n            revealVote(\\r\\n                reveals[i].identifier,\\r\\n                reveals[i].time,\\r\\n                reveals[i].price,\\r\\n                reveals[i].ancillaryData,\\r\\n                reveals[i].salt\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function batchReveal(Reveal[] memory reveals) public override {\\r\\n        RevealAncillary[] memory revealsAncillary = new RevealAncillary[](reveals.length);\\r\\n\\r\\n        for (uint256 i = 0; i < reveals.length; i++) {\\r\\n            revealsAncillary[i].identifier = reveals[i].identifier;\\r\\n            revealsAncillary[i].time = reveals[i].time;\\r\\n            revealsAncillary[i].price = reveals[i].price;\\r\\n            revealsAncillary[i].ancillaryData = \\\"\\\";\\r\\n            revealsAncillary[i].salt = reveals[i].salt;\\r\\n        }\\r\\n        batchReveal(revealsAncillary);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\r\\n     * @dev Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold\\r\\n     * (not expired). Note that a named return value is used here to avoid a stack to deep error.\\r\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\r\\n     * @param roundId the round from which voting rewards will be retrieved from.\\r\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\r\\n     * @return totalRewardToIssue total amount of rewards returned to the voter.\\r\\n     */\\r\\n    function retrieveRewards(\\r\\n        address voterAddress,\\r\\n        uint256 roundId,\\r\\n        PendingRequestAncillary[] memory toRetrieve\\r\\n    ) public override returns (FixedPoint.Unsigned memory totalRewardToIssue) {\\r\\n        if (migratedAddress != address(0)) {\\r\\n            require(msg.sender == migratedAddress, \\\"Can only call from migrated\\\");\\r\\n        }\\r\\n        require(roundId < voteTiming.computeCurrentRoundId(getCurrentTime()), \\\"Invalid roundId\\\");\\r\\n\\r\\n        Round storage round = rounds[roundId];\\r\\n        bool isExpired = getCurrentTime() > round.rewardsExpirationTime;\\r\\n        FixedPoint.Unsigned memory snapshotBalance =\\r\\n            FixedPoint.Unsigned(votingToken.balanceOfAt(voterAddress, round.snapshotId));\\r\\n\\r\\n        // Compute the total amount of reward that will be issued for each of the votes in the round.\\r\\n        FixedPoint.Unsigned memory snapshotTotalSupply =\\r\\n            FixedPoint.Unsigned(votingToken.totalSupplyAt(round.snapshotId));\\r\\n        FixedPoint.Unsigned memory totalRewardPerVote = round.inflationRate.mul(snapshotTotalSupply);\\r\\n\\r\\n        // Keep track of the voter's accumulated token reward.\\r\\n        totalRewardToIssue = FixedPoint.Unsigned(0);\\r\\n\\r\\n        for (uint256 i = 0; i < toRetrieve.length; i++) {\\r\\n            PriceRequest storage priceRequest =\\r\\n                _getPriceRequest(toRetrieve[i].identifier, toRetrieve[i].time, toRetrieve[i].ancillaryData);\\r\\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\\r\\n            // Only retrieve rewards for votes resolved in same round\\r\\n            require(priceRequest.lastVotingRound == roundId, \\\"Retrieve for votes same round\\\");\\r\\n\\r\\n            _resolvePriceRequest(priceRequest, voteInstance);\\r\\n\\r\\n            if (voteInstance.voteSubmissions[voterAddress].revealHash == 0) {\\r\\n                continue;\\r\\n            } else if (isExpired) {\\r\\n                // Emit a 0 token retrieval on expired rewards.\\r\\n                emit RewardsRetrieved(\\r\\n                    voterAddress,\\r\\n                    roundId,\\r\\n                    toRetrieve[i].identifier,\\r\\n                    toRetrieve[i].time,\\r\\n                    toRetrieve[i].ancillaryData,\\r\\n                    0\\r\\n                );\\r\\n            } else if (\\r\\n                voteInstance.resultComputation.wasVoteCorrect(voteInstance.voteSubmissions[voterAddress].revealHash)\\r\\n            ) {\\r\\n                // The price was successfully resolved during the voter's last voting round, the voter revealed\\r\\n                // and was correct, so they are eligible for a reward.\\r\\n                // Compute the reward and add to the cumulative reward.\\r\\n\\r\\n                FixedPoint.Unsigned memory reward =\\r\\n                    snapshotBalance.mul(totalRewardPerVote).div(\\r\\n                        voteInstance.resultComputation.getTotalCorrectlyVotedTokens()\\r\\n                    );\\r\\n                totalRewardToIssue = totalRewardToIssue.add(reward);\\r\\n\\r\\n                // Emit reward retrieval for this vote.\\r\\n                emit RewardsRetrieved(\\r\\n                    voterAddress,\\r\\n                    roundId,\\r\\n                    toRetrieve[i].identifier,\\r\\n                    toRetrieve[i].time,\\r\\n                    toRetrieve[i].ancillaryData,\\r\\n                    reward.rawValue\\r\\n                );\\r\\n            } else {\\r\\n                // Emit a 0 token retrieval on incorrect votes.\\r\\n                emit RewardsRetrieved(\\r\\n                    voterAddress,\\r\\n                    roundId,\\r\\n                    toRetrieve[i].identifier,\\r\\n                    toRetrieve[i].time,\\r\\n                    toRetrieve[i].ancillaryData,\\r\\n                    0\\r\\n                );\\r\\n            }\\r\\n\\r\\n            // Delete the submission to capture any refund and clean up storage.\\r\\n            delete voteInstance.voteSubmissions[voterAddress].revealHash;\\r\\n        }\\r\\n\\r\\n        // Issue any accumulated rewards.\\r\\n        if (totalRewardToIssue.isGreaterThan(0)) {\\r\\n            require(votingToken.mint(voterAddress, totalRewardToIssue.rawValue), \\\"Voting token issuance failed\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Overloaded method to enable short term backwards compatibility. Will be deprecated in the next DVM version.\\r\\n    function retrieveRewards(\\r\\n        address voterAddress,\\r\\n        uint256 roundId,\\r\\n        PendingRequest[] memory toRetrieve\\r\\n    ) public override returns (FixedPoint.Unsigned memory) {\\r\\n        PendingRequestAncillary[] memory toRetrieveAncillary = new PendingRequestAncillary[](toRetrieve.length);\\r\\n\\r\\n        for (uint256 i = 0; i < toRetrieve.length; i++) {\\r\\n            toRetrieveAncillary[i].identifier = toRetrieve[i].identifier;\\r\\n            toRetrieveAncillary[i].time = toRetrieve[i].time;\\r\\n            toRetrieveAncillary[i].ancillaryData = \\\"\\\";\\r\\n        }\\r\\n\\r\\n        return retrieveRewards(voterAddress, roundId, toRetrieveAncillary);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        VOTING GETTER FUNCTIONS       *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the queries that are being voted on this round.\\r\\n     * @return pendingRequests array containing identifiers of type `PendingRequest`.\\r\\n     * and timestamps for all pending requests.\\r\\n     */\\r\\n    function getPendingRequests()\\r\\n        external\\r\\n        view\\r\\n        override(VotingInterface, VotingAncillaryInterface)\\r\\n        returns (PendingRequestAncillary[] memory)\\r\\n    {\\r\\n        uint256 blockTime = getCurrentTime();\\r\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(blockTime);\\r\\n\\r\\n        // Solidity memory arrays aren't resizable (and reading storage is expensive). Hence this hackery to filter\\r\\n        // `pendingPriceRequests` only to those requests that have an Active RequestStatus.\\r\\n        PendingRequestAncillary[] memory unresolved = new PendingRequestAncillary[](pendingPriceRequests.length);\\r\\n        uint256 numUnresolved = 0;\\r\\n\\r\\n        for (uint256 i = 0; i < pendingPriceRequests.length; i++) {\\r\\n            PriceRequest storage priceRequest = priceRequests[pendingPriceRequests[i]];\\r\\n            if (_getRequestStatus(priceRequest, currentRoundId) == RequestStatus.Active) {\\r\\n                unresolved[numUnresolved] = PendingRequestAncillary({\\r\\n                    identifier: priceRequest.identifier,\\r\\n                    time: priceRequest.time,\\r\\n                    ancillaryData: priceRequest.ancillaryData\\r\\n                });\\r\\n                numUnresolved++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        PendingRequestAncillary[] memory pendingRequests = new PendingRequestAncillary[](numUnresolved);\\r\\n        for (uint256 i = 0; i < numUnresolved; i++) {\\r\\n            pendingRequests[i] = unresolved[i];\\r\\n        }\\r\\n        return pendingRequests;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current voting phase, as a function of the current time.\\r\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }.\\r\\n     */\\r\\n    function getVotePhase() external view override(VotingInterface, VotingAncillaryInterface) returns (Phase) {\\r\\n        return voteTiming.computeCurrentPhase(getCurrentTime());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current round ID, as a function of the current time.\\r\\n     * @return uint256 representing the unique round ID.\\r\\n     */\\r\\n    function getCurrentRoundId() external view override(VotingInterface, VotingAncillaryInterface) returns (uint256) {\\r\\n        return voteTiming.computeCurrentRoundId(getCurrentTime());\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        OWNER ADMIN FUNCTIONS         *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Disables this Voting contract in favor of the migrated one.\\r\\n     * @dev Can only be called by the contract owner.\\r\\n     * @param newVotingAddress the newly migrated contract address.\\r\\n     */\\r\\n    function setMigrated(address newVotingAddress)\\r\\n        external\\r\\n        override(VotingInterface, VotingAncillaryInterface)\\r\\n        onlyOwner\\r\\n    {\\r\\n        migratedAddress = newVotingAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newInflationRate sets the next round's inflation rate.\\r\\n     */\\r\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate)\\r\\n        public\\r\\n        override(VotingInterface, VotingAncillaryInterface)\\r\\n        onlyOwner\\r\\n    {\\r\\n        inflationRate = newInflationRate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newGatPercentage sets the next round's Gat percentage.\\r\\n     */\\r\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage)\\r\\n        public\\r\\n        override(VotingInterface, VotingAncillaryInterface)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(newGatPercentage.isLessThan(1), \\\"GAT percentage must be < 100%\\\");\\r\\n        gatPercentage = newGatPercentage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the rewards expiration timeout.\\r\\n     * @dev This change only applies to rounds that have not yet begun.\\r\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\r\\n     */\\r\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout)\\r\\n        public\\r\\n        override(VotingInterface, VotingAncillaryInterface)\\r\\n        onlyOwner\\r\\n    {\\r\\n        rewardsExpirationTimeout = NewRewardsExpirationTimeout;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *    PRIVATE AND INTERNAL FUNCTIONS    *\\r\\n     ****************************************/\\r\\n\\r\\n    // Returns the price for a given identifer. Three params are returns: bool if there was an error, int to represent\\r\\n    // the resolved price and a string which is filled with an error message, if there was an error or \\\"\\\".\\r\\n    function _getPriceOrError(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    )\\r\\n        private\\r\\n        view\\r\\n        returns (\\r\\n            bool,\\r\\n            int256,\\r\\n            string memory\\r\\n        )\\r\\n    {\\r\\n        PriceRequest storage priceRequest = _getPriceRequest(identifier, time, ancillaryData);\\r\\n        uint256 currentRoundId = voteTiming.computeCurrentRoundId(getCurrentTime());\\r\\n\\r\\n        RequestStatus requestStatus = _getRequestStatus(priceRequest, currentRoundId);\\r\\n        if (requestStatus == RequestStatus.Active) {\\r\\n            return (false, 0, \\\"Current voting round not ended\\\");\\r\\n        } else if (requestStatus == RequestStatus.Resolved) {\\r\\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\\r\\n            (, int256 resolvedPrice) =\\r\\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\\r\\n            return (true, resolvedPrice, \\\"\\\");\\r\\n        } else if (requestStatus == RequestStatus.Future) {\\r\\n            return (false, 0, \\\"Price is still to be voted on\\\");\\r\\n        } else {\\r\\n            return (false, 0, \\\"Price was never requested\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getPriceRequest(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) private view returns (PriceRequest storage) {\\r\\n        return priceRequests[_encodePriceRequest(identifier, time, ancillaryData)];\\r\\n    }\\r\\n\\r\\n    function _encodePriceRequest(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(identifier, time, ancillaryData));\\r\\n    }\\r\\n\\r\\n    function _freezeRoundVariables(uint256 roundId) private {\\r\\n        Round storage round = rounds[roundId];\\r\\n        // Only on the first reveal should the snapshot be captured for that round.\\r\\n        if (round.snapshotId == 0) {\\r\\n            // There is no snapshot ID set, so create one.\\r\\n            round.snapshotId = votingToken.snapshot();\\r\\n\\r\\n            // Set the round inflation rate to the current global inflation rate.\\r\\n            rounds[roundId].inflationRate = inflationRate;\\r\\n\\r\\n            // Set the round gat percentage to the current global gat rate.\\r\\n            rounds[roundId].gatPercentage = gatPercentage;\\r\\n\\r\\n            // Set the rewards expiration time based on end of time of this round and the current global timeout.\\r\\n            rounds[roundId].rewardsExpirationTime = voteTiming.computeRoundEndTime(roundId).add(\\r\\n                rewardsExpirationTimeout\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _resolvePriceRequest(PriceRequest storage priceRequest, VoteInstance storage voteInstance) private {\\r\\n        if (priceRequest.index == UINT_MAX) {\\r\\n            return;\\r\\n        }\\r\\n        (bool isResolved, int256 resolvedPrice) =\\r\\n            voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\\r\\n        require(isResolved, \\\"Can't resolve unresolved request\\\");\\r\\n\\r\\n        // Delete the resolved price request from pendingPriceRequests.\\r\\n        uint256 lastIndex = pendingPriceRequests.length - 1;\\r\\n        PriceRequest storage lastPriceRequest = priceRequests[pendingPriceRequests[lastIndex]];\\r\\n        lastPriceRequest.index = priceRequest.index;\\r\\n        pendingPriceRequests[priceRequest.index] = pendingPriceRequests[lastIndex];\\r\\n        pendingPriceRequests.pop();\\r\\n\\r\\n        priceRequest.index = UINT_MAX;\\r\\n        emit PriceResolved(\\r\\n            priceRequest.lastVotingRound,\\r\\n            priceRequest.identifier,\\r\\n            priceRequest.time,\\r\\n            resolvedPrice,\\r\\n            priceRequest.ancillaryData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _computeGat(uint256 roundId) private view returns (FixedPoint.Unsigned memory) {\\r\\n        uint256 snapshotId = rounds[roundId].snapshotId;\\r\\n        if (snapshotId == 0) {\\r\\n            // No snapshot - return max value to err on the side of caution.\\r\\n            return FixedPoint.Unsigned(UINT_MAX);\\r\\n        }\\r\\n\\r\\n        // Grab the snapshotted supply from the voting token. It's already scaled by 10**18, so we can directly\\r\\n        // initialize the Unsigned value with the returned uint.\\r\\n        FixedPoint.Unsigned memory snapshottedSupply = FixedPoint.Unsigned(votingToken.totalSupplyAt(snapshotId));\\r\\n\\r\\n        // Multiply the total supply at the snapshot by the gatPercentage to get the GAT in number of tokens.\\r\\n        return snapshottedSupply.mul(rounds[roundId].gatPercentage);\\r\\n    }\\r\\n\\r\\n    function _getRequestStatus(PriceRequest storage priceRequest, uint256 currentRoundId)\\r\\n        private\\r\\n        view\\r\\n        returns (RequestStatus)\\r\\n    {\\r\\n        if (priceRequest.lastVotingRound == 0) {\\r\\n            return RequestStatus.NotRequested;\\r\\n        } else if (priceRequest.lastVotingRound < currentRoundId) {\\r\\n            VoteInstance storage voteInstance = priceRequest.voteInstances[priceRequest.lastVotingRound];\\r\\n            (bool isResolved, ) =\\r\\n                voteInstance.resultComputation.getResolvedPrice(_computeGat(priceRequest.lastVotingRound));\\r\\n            return isResolved ? RequestStatus.Resolved : RequestStatus.Active;\\r\\n        } else if (priceRequest.lastVotingRound == currentRoundId) {\\r\\n            return RequestStatus.Active;\\r\\n        } else {\\r\\n            // Means than priceRequest.lastVotingRound > currentRoundId\\r\\n            return RequestStatus.Future;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface supportedIdentifiers) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x21e3d2839bb5b7383c7346483f4d20a393594e4d2df2fbe87b70f4d42ce2db19\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/VotingToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/ExpandedERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Ownership of this token allows a voter to respond to price requests.\\r\\n * @dev Supports snapshotting and allows the Oracle to mint new tokens as rewards.\\r\\n */\\r\\ncontract VotingToken is ExpandedERC20, ERC20Snapshot {\\r\\n    /**\\r\\n     * @notice Constructs the VotingToken.\\r\\n     */\\r\\n    constructor() ExpandedERC20(\\\"UMA Voting Token v1\\\", \\\"UMA\\\", 18) ERC20Snapshot() {}\\r\\n\\r\\n    function decimals() public view virtual override(ERC20, ExpandedERC20) returns (uint8) {\\r\\n        return super.decimals();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a new snapshot ID.\\r\\n     * @return uint256 Thew new snapshot ID.\\r\\n     */\\r\\n    function snapshot() external returns (uint256) {\\r\\n        return _snapshot();\\r\\n    }\\r\\n\\r\\n    // _transfer, _mint and _burn are ERC20 internal methods that are overridden by ERC20Snapshot,\\r\\n    // therefore the compiler will complain that VotingToken must override these methods\\r\\n    // because the two base classes (ERC20 and ERC20Snapshot) both define the same functions\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal override(ERC20) {\\r\\n        super._transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 value) internal virtual override(ERC20) {\\r\\n        super._mint(account, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 value) internal virtual override(ERC20) {\\r\\n        super._burn(account, value);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual override(ERC20, ERC20Snapshot) {\\r\\n        super._beforeTokenTransfer(from, to, amount);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4707515b6e776a1a31b8b38c0e3d15d7337da7f2cc80b34b984aa8252690e95c\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestPrice(bytes32 identifier, uint256 time) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(bytes32 identifier, uint256 time) external view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(bytes32 identifier, uint256 time) external view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa135756eabf06899395052031d8a2f617ef504477dc3037585f2b4ce0e3da22a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/RegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for a registry of contracts and contract creators.\\r\\n */\\r\\ninterface RegistryInterface {\\r\\n    /**\\r\\n     * @notice Registers a new contract.\\r\\n     * @dev Only authorized contract creators can call this method.\\r\\n     * @param parties an array of addresses who become parties in the contract.\\r\\n     * @param contractAddress defines the address of the deployed contract.\\r\\n     */\\r\\n    function registerContract(address[] calldata parties, address contractAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the contract has been registered with the registry.\\r\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\r\\n     * @param contractAddress address of the contract.\\r\\n     * @return bool indicates whether the contract is registered.\\r\\n     */\\r\\n    function isContractRegistered(address contractAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\r\\n     * @param party address of the party.\\r\\n     * @return an array of the contracts the party is registered to.\\r\\n     */\\r\\n    function getRegisteredContracts(address party) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns all registered contracts.\\r\\n     * @return all registered contract addresses within the system.\\r\\n     */\\r\\n    function getAllRegisteredContracts() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds a party to the calling contract.\\r\\n     * @dev msg.sender must be the contract to which the party member is added.\\r\\n     * @param party address to be added to the contract.\\r\\n     */\\r\\n    function addPartyToContract(address party) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes a party member to the calling contract.\\r\\n     * @dev msg.sender must be the contract to which the party member is added.\\r\\n     * @param party address to be removed from the contract.\\r\\n     */\\r\\n    function removePartyFromContract(address party) external;\\r\\n\\r\\n    /**\\r\\n     * @notice checks if an address is a party in a contract.\\r\\n     * @param party party to check.\\r\\n     * @param contractAddress address to check against the party.\\r\\n     * @return bool indicating if the address is a party of the contract.\\r\\n     */\\r\\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xea7f5a5abd024662fa3a79a23823710b36ce5b9e72381716bdd4697d4b9cb403\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/VotingAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that voters must use to Vote on price request resolutions.\\r\\n */\\r\\nabstract contract VotingAncillaryInterface {\\r\\n    struct PendingRequestAncillary {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        bytes ancillaryData;\\r\\n    }\\r\\n\\r\\n    // Captures the necessary data for making a commitment.\\r\\n    // Used as a parameter when making batch commitments.\\r\\n    // Not used as a data structure for storage.\\r\\n    struct CommitmentAncillary {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        bytes ancillaryData;\\r\\n        bytes32 hash;\\r\\n        bytes encryptedVote;\\r\\n    }\\r\\n\\r\\n    // Captures the necessary data for revealing a vote.\\r\\n    // Used as a parameter when making batch reveals.\\r\\n    // Not used as a data structure for storage.\\r\\n    struct RevealAncillary {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        int256 price;\\r\\n        bytes ancillaryData;\\r\\n        int256 salt;\\r\\n    }\\r\\n\\r\\n    // Note: the phases must be in order. Meaning the first enum value must be the first phase, etc.\\r\\n    // `NUM_PHASES` is to get the number of phases. It isn't an actual phase, and it should always be last.\\r\\n    enum Phase { Commit, Reveal, NUM_PHASES }\\r\\n\\r\\n    /**\\r\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\r\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\r\\n     * Commits can be changed.\\r\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\\u2019s expected behavior,\\r\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\r\\n     * they can determine the vote pre-reveal.\\r\\n     * @param identifier uniquely identifies the committed vote. E.G. BTC/USD price pair.\\r\\n     * @param time unix timestamp of the price being voted on.\\r\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\r\\n     */\\r\\n    function commitVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Submit a batch of commits in a single transaction.\\r\\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\r\\n     * commitments that can fit in one transaction.\\r\\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\r\\n     */\\r\\n    function batchCommit(CommitmentAncillary[] memory commits) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\r\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\r\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\r\\n     * @param identifier unique price pair identifier. E.g. BTC/USD price pair.\\r\\n     * @param time unix timestamp of for the price request.\\r\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\r\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\r\\n     */\\r\\n    function commitAndEmitEncryptedVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        bytes32 hash,\\r\\n        bytes memory encryptedVote\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\\r\\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\\r\\n     * time of calling `_freezeRoundVariables`.\\r\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\r\\n     * snapshot.\\r\\n     */\\r\\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\r\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\r\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\r\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\r\\n     * @param time specifies the unix timestamp of the price is being voted on.\\r\\n     * @param price voted on during the commit phase.\\r\\n     * @param salt value used to hide the commitment price during the commit phase.\\r\\n     */\\r\\n    function revealVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 salt\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal multiple votes in a single transaction.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\r\\n     * that can fit in one transaction.\\r\\n     * @dev For more information on reveals, review the comment for `revealVote`.\\r\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\r\\n     */\\r\\n    function batchReveal(RevealAncillary[] memory reveals) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the queries that are being voted on this round.\\r\\n     * @return pendingRequests `PendingRequest` array containing identifiers\\r\\n     * and timestamps for all pending requests.\\r\\n     */\\r\\n    function getPendingRequests() external view virtual returns (PendingRequestAncillary[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current voting phase, as a function of the current time.\\r\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES }.\\r\\n     */\\r\\n    function getVotePhase() external view virtual returns (Phase);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current round ID, as a function of the current time.\\r\\n     * @return uint256 representing the unique round ID.\\r\\n     */\\r\\n    function getCurrentRoundId() external view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\r\\n     * @dev Can only retrieve rewards if calling for a valid round and if the\\r\\n     * call is done within the timeout threshold (not expired).\\r\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\r\\n     * @param roundId the round from which voting rewards will be retrieved from.\\r\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\r\\n     * @return total amount of rewards returned to the voter.\\r\\n     */\\r\\n    function retrieveRewards(\\r\\n        address voterAddress,\\r\\n        uint256 roundId,\\r\\n        PendingRequestAncillary[] memory toRetrieve\\r\\n    ) public virtual returns (FixedPoint.Unsigned memory);\\r\\n\\r\\n    // Voting Owner functions.\\r\\n\\r\\n    /**\\r\\n     * @notice Disables this Voting contract in favor of the migrated one.\\r\\n     * @dev Can only be called by the contract owner.\\r\\n     * @param newVotingAddress the newly migrated contract address.\\r\\n     */\\r\\n    function setMigrated(address newVotingAddress) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newInflationRate sets the next round's inflation rate.\\r\\n     */\\r\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newGatPercentage sets the next round's Gat percentage.\\r\\n     */\\r\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the rewards expiration timeout.\\r\\n     * @dev This change only applies to rounds that have not yet begun.\\r\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\r\\n     */\\r\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x975892765f628db8ba5904ec9f02ae98ea9d3e01258122d0014e36e8dfa843d1\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/VotingInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"./VotingAncillaryInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that voters must use to Vote on price request resolutions.\\r\\n */\\r\\nabstract contract VotingInterface {\\r\\n    struct PendingRequest {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n    }\\r\\n\\r\\n    // Captures the necessary data for making a commitment.\\r\\n    // Used as a parameter when making batch commitments.\\r\\n    // Not used as a data structure for storage.\\r\\n    struct Commitment {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        bytes32 hash;\\r\\n        bytes encryptedVote;\\r\\n    }\\r\\n\\r\\n    // Captures the necessary data for revealing a vote.\\r\\n    // Used as a parameter when making batch reveals.\\r\\n    // Not used as a data structure for storage.\\r\\n    struct Reveal {\\r\\n        bytes32 identifier;\\r\\n        uint256 time;\\r\\n        int256 price;\\r\\n        int256 salt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Commit a vote for a price request for `identifier` at `time`.\\r\\n     * @dev `identifier`, `time` must correspond to a price request that's currently in the commit phase.\\r\\n     * Commits can be changed.\\r\\n     * @dev Since transaction data is public, the salt will be revealed with the vote. While this is the system\\u2019s expected behavior,\\r\\n     * voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then\\r\\n     * they can determine the vote pre-reveal.\\r\\n     * @param identifier uniquely identifies the committed vote. EG BTC/USD price pair.\\r\\n     * @param time unix timestamp of the price being voted on.\\r\\n     * @param hash keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.\\r\\n     */\\r\\n    function commitVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes32 hash\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Submit a batch of commits in a single transaction.\\r\\n     * @dev Using `encryptedVote` is optional. If included then commitment is stored on chain.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of\\r\\n     * commitments that can fit in one transaction.\\r\\n     * @param commits array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`.\\r\\n     */\\r\\n    function batchCommit(Commitment[] memory commits) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice commits a vote and logs an event with a data blob, typically an encrypted version of the vote\\r\\n     * @dev An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to\\r\\n     * retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.\\r\\n     * @param identifier unique price pair identifier. Eg: BTC/USD price pair.\\r\\n     * @param time unix timestamp of for the price request.\\r\\n     * @param hash keccak256 hash of the price you want to vote for and a `int256 salt`.\\r\\n     * @param encryptedVote offchain encrypted blob containing the voters amount, time and salt.\\r\\n     */\\r\\n    function commitAndEmitEncryptedVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes32 hash,\\r\\n        bytes memory encryptedVote\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice snapshot the current round's token balances and lock in the inflation rate and GAT.\\r\\n     * @dev This function can be called multiple times but each round will only every have one snapshot at the\\r\\n     * time of calling `_freezeRoundVariables`.\\r\\n     * @param signature  signature required to prove caller is an EOA to prevent flash loans from being included in the\\r\\n     * snapshot.\\r\\n     */\\r\\n    function snapshotCurrentRound(bytes calldata signature) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal a previously committed vote for `identifier` at `time`.\\r\\n     * @dev The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash`\\r\\n     * that `commitVote()` was called with. Only the committer can reveal their vote.\\r\\n     * @param identifier voted on in the commit phase. EG BTC/USD price pair.\\r\\n     * @param time specifies the unix timestamp of the price is being voted on.\\r\\n     * @param price voted on during the commit phase.\\r\\n     * @param salt value used to hide the commitment price during the commit phase.\\r\\n     */\\r\\n    function revealVote(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        int256 price,\\r\\n        int256 salt\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Reveal multiple votes in a single transaction.\\r\\n     * Look at `project-root/common/Constants.js` for the tested maximum number of reveals.\\r\\n     * that can fit in one transaction.\\r\\n     * @dev For more information on reveals, review the comment for `revealVote`.\\r\\n     * @param reveals array of the Reveal struct which contains an identifier, time, price and salt.\\r\\n     */\\r\\n    function batchReveal(Reveal[] memory reveals) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the queries that are being voted on this round.\\r\\n     * @return pendingRequests `PendingRequest` array containing identifiers\\r\\n     * and timestamps for all pending requests.\\r\\n     */\\r\\n    function getPendingRequests()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        returns (VotingAncillaryInterface.PendingRequestAncillary[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current voting phase, as a function of the current time.\\r\\n     * @return Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES }.\\r\\n     */\\r\\n    function getVotePhase() external view virtual returns (VotingAncillaryInterface.Phase);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current round ID, as a function of the current time.\\r\\n     * @return uint256 representing the unique round ID.\\r\\n     */\\r\\n    function getCurrentRoundId() external view virtual returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves rewards owed for a set of resolved price requests.\\r\\n     * @dev Can only retrieve rewards if calling for a valid round and if the\\r\\n     * call is done within the timeout threshold (not expired).\\r\\n     * @param voterAddress voter for which rewards will be retrieved. Does not have to be the caller.\\r\\n     * @param roundId the round from which voting rewards will be retrieved from.\\r\\n     * @param toRetrieve array of PendingRequests which rewards are retrieved from.\\r\\n     * @return total amount of rewards returned to the voter.\\r\\n     */\\r\\n    function retrieveRewards(\\r\\n        address voterAddress,\\r\\n        uint256 roundId,\\r\\n        PendingRequest[] memory toRetrieve\\r\\n    ) public virtual returns (FixedPoint.Unsigned memory);\\r\\n\\r\\n    // Voting Owner functions.\\r\\n\\r\\n    /**\\r\\n     * @notice Disables this Voting contract in favor of the migrated one.\\r\\n     * @dev Can only be called by the contract owner.\\r\\n     * @param newVotingAddress the newly migrated contract address.\\r\\n     */\\r\\n    function setMigrated(address newVotingAddress) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the inflation rate. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newInflationRate sets the next round's inflation rate.\\r\\n     */\\r\\n    function setInflationRate(FixedPoint.Unsigned memory newInflationRate) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun.\\r\\n     * @dev This method is public because calldata structs are not currently supported by solidity.\\r\\n     * @param newGatPercentage sets the next round's Gat percentage.\\r\\n     */\\r\\n    function setGatPercentage(FixedPoint.Unsigned memory newGatPercentage) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Resets the rewards expiration timeout.\\r\\n     * @dev This change only applies to rounds that have not yet begun.\\r\\n     * @param NewRewardsExpirationTimeout how long a caller can wait before choosing to withdraw their rewards.\\r\\n     */\\r\\n    function setRewardsExpirationTimeout(uint256 NewRewardsExpirationTimeout) public virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0x724237fe6b7495b24d558f11d76855ad18729262fbd68be2e59d2773a08a5c15\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346200023157601f620049f838819003918201601f1916830192916001600160401b039182851184861017620002365781906040958652843982019160e08184031262000231578060c091516200006a6200006086602085016200026c565b958784016200026c565b6060830151956200007e608085016200029c565b926200008d60a086016200029c565b6001600160a01b039690958791620000a691016200029c565b169060018060a01b0319976000928984541617835560015490338a8316176001558b5191893391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08685a3818c01908111828210176200021d578b52601181527014da59db88119bdc8814db985c1cda1bdd607a1b6020909101527f19457468657265756d205369676e6564204d6573736167653a0a33320000000082527f05ae8dd7e03a2a2e45343dbd50fe048482c1d0e0e9e034857ff13dd19f476b7e601c52603c8220600c5580156200021957600555815190620001876200024c565b52670de0b6b3a764000090816200019d6200024c565b5211620001d557908492915160065551600755168360095416176009551690600a541617600a55600855516147469081620002b28239f35b875162461bcd60e51b815260206004820152601e60248201527f4741542070657263656e74616765206d757374206265203c3d203130302500006044820152606490fd5b5080fd5b634e487b7160e01b84526041600452602484fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60405190602082016001600160401b038111838210176200023657604052565b91908260209103126200023157604051602081016001600160401b03811182821017620002365760405291518252565b51906001600160a01b0382168203620002315756fe6040608081526004908136101561001557600080fd5b600091823560e01c8063017e4c03146125855780630d434e7e146124b9578063110d559a1461223357806313e56d6a146121a357806316d32474146121475780631c39c38d1461211f57806320b373a214612100578063216666a414611dca57806322f8e56614611d3c57806326af73bf14611d1d5780632960b5af14611cd757806329cb924d14611cba57806331f9e35b14611c9b5780634000851f14611c725780634666cb0c14611ac8578063498ec3c914611a8b5780634c7a2603146119a75780635727e25d146119875780636852eea0146117d157806368ad8ae3146112cf5780636ec1fd5d146111c957806370a0cf2c14610fce578063715018a614610f6d578063719c6d5614610f5157806371b7db5314610f3257806374dd278c14610eed57806380a1f71214610c9657806383c6aaca14610c775780638558d4f314610bb15780638876e8a014610b90578063894fcecc14610b395780638c65c81f14610ad45780638da5cb5b14610aab578063a03e881a14610a81578063a65d15911461097b578063add2ccb41461055f578063b034012314610536578063b551cd5014610511578063b90fd480146104f2578063c371dda7146104d5578063c9280f06146104a0578063d8651ad0146102c95763f2fde38b146101fa57600080fd5b346102c55760203660031901126102c5576102136125d0565b61021b61299a565b6001600160a01b03908116918215610273575060015492826bffffffffffffffffffffffff60a01b8516176001555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50346102c55760603660031901126102c557600b54813591906001600160a01b0316156024803590604435906102fe84612fa8565b61031587519461030d866125e6565b898652612fa8565b8115610466576103236129f2565b61032c81612ff4565b6003811015610454576104245761034e90610348600554612be6565b90612c0f565b9461035a85858961431a565b895260036020528789209161036f8784614672565b82811015610412576001036103d0575050906002828660036000805160206146d183398151915296950155868a52016020528688203360005260205286600020558551908152856020820152806103ca339488830190612975565b0390a451f35b90601e60649260208b519362461bcd60e51b85528401528201527f43616e6e6f7420636f6d6d697420696e616374697665207265717565737400006044820152fd5b50634e487b7160e01b8a526021825289fd5b875162461bcd60e51b8152602081880152601d818401526000805160206146f18339815191526044820152606490fd5b634e487b7160e01b8a5260218752828afd5b84601560649260208a519362461bcd60e51b855284015282015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152fd5b5050346104d1576104ca6020926104b63661293c565b908451926104c3846125e6565b8352612cf7565b9051908152f35b5080fd5b5050346104d157816003193601126104d157602090516120008152f35b5050346104d157816003193601126104d1576020906006549051908152f35b5050346104d15760209061052d6105273661289a565b91612c2f565b90519015158152f35b5050346104d157816003193601126104d15760095490516001600160a01b039091168152602090f35b50346102c55760a03660031901126102c557803590602480356044356064356001600160401b038111610977576105999036908601612701565b9060018060a01b03936105b085600b541615612fa8565b6105c06105bb6129f2565b612ff4565b600381101561096557600103610923576105e66105db6129f2565b610348600554612be6565b956105f284868a61431a565b8a526020956003875260028a8c2001888c528752898b2091336000528288528a60002093845480156108ea57868961067b8f8f908f8f928e61066060d49585519889968288019b8c52608435908801523360601b606088015260748701528251928391609488019101612952565b830191609483015260b48201520360b4810184520182612683565b519020036108a857898d52600289528b8d20541561086e5750888c52600288528a8c2054600085556009548c5163277166bf60e11b81523393810193845260208401929092528d98979695949391928d928b928592839003604001918391165afa938415610864578992899561081e575b508594936107ce979693836003937f3fad5d37ee1be2f58ff1735699121a8ead73c3b70d02fc06d07b0db29854d3b49c955197610728896125e6565b8852600182518481019089825285815261074181612668565b51902091015560018301946002840161076889845161075f816125e6565b835481526131f1565b5190558681528583528561078d89848420855190610785826125e6565b5481526131f1565b9388835252209051905501908d8d8354918286141593846107e5575b505050506107dd575b5050519589519485528401526080888401526080830190612975565b9260608201528033930390a451f35b5581386107b2565b9091809394508220938351946107fa866125e6565b54855282528c5220908d519161080f836125e6565b548092525111388d8f826107a9565b985092959493505086813d831161085d575b61083a8183612683565b810103126108585794518a959293919290919087908b9060036106ec565b600080fd5b503d610830565b81513d8a823e3d90fd5b8b5162461bcd60e51b815291820189905260159082015274149bdd5b99081a185cc81b9bc81cdb985c1cda1bdd605a1b6044820152606490fd5b8b5162461bcd60e51b8152918201899052601c908201527f52657665616c6564206461746120213d20636f6d6d69742068617368000000006044820152606490fd5b508b5162461bcd60e51b815291820189905260139082015272125b9d985b1a59081a185cda081c995d99585b606a1b6044820152606490fd5b85601d60649260208b519362461bcd60e51b85528401528201527f43616e6e6f742072657665616c20696e20636f6d6d69742070686173650000006044820152fd5b50634e487b7160e01b89526021865288fd5b8780fd5b50346102c557602080600319360112610a7d5781356001600160401b0392838211610a795736602383011215610a79578101356109b7816126a4565b936109c486519586612683565b818552838501916024809160051b85010193368511610a7557818101935b8585106109f75789896109f48a613686565b51f35b8435848111610a7157820160a06023198236030112610a7157895191610a1c83612632565b84820135835260448201358984015260648201358b840152608482013592868411610a6d5760a48a9493610a568695893691840101612701565b6060840152013560808201528152019401936109e2565b8c80fd5b8a80fd5b8880fd5b8580fd5b8380fd5b5050346104d15761052d602092610a973661293c565b90845192610aa4846125e6565b8352612c2f565b5050346104d157816003193601126104d15760015490516001600160a01b039091168152602090f35b50346102c55760203660031901126102c5576080928291358152600260205220805491805191610b03836125e6565b600181015483526003825191610b18836125e6565b60028101548352015492825194855251602085015251908301526060820152f35b50346102c55760803660031901126102c557803590602480356044356001600160401b038111610b8c57610b709036908501612701565b600b54909260643591610315906001600160a01b031615612fa8565b8680fd5b50346102c55760203660031901126102c557610baa61299a565b3560085551f35b509134610c7457602092836003193601126104d15780356001600160401b0381116102c557610be2913691016127f8565b91610bed8351612f42565b93825b8451811015610c585780610c07610c539287612df7565b5151610c138289612df7565b515282610c208288612df7565b51015183610c2e838a612df7565b51015283610c3c8289612df7565b5101845190610c4a826125e6565b86825252612de8565b610bf0565b610c7083610c6588612e0b565b9051918291826128cc565b0390f35b80fd5b5050346104d157610c873661287a565b610c8f61299a565b5160075551f35b508290346104d157816003193601126104d157610cb16129f2565b91610cc26005936103488554612be6565b91805492610ccf84612f42565b938392845b828110610da25750505050610ce881612f42565b92825b828110610d6b575050508351926020808501918186528451809352818784818901931b880101950193965b838810610d235786860387f35b90919293948380610d5a600193603f198b8203018752858a5180518352848101518584015201519060609081888201520190612975565b970193019701969093929193610d16565b80610d7d610d99928499969899612df7565b51610d888288612df7565b52610d938187612df7565b50612de8565b95949295610ceb565b610daf8199969899612b76565b9054600391821b1c89526020908152868920610dcb8682614672565b9084821015610eda576001809214610df3575b505050610dea90612de8565b97969497610cd4565b8097939754928c838301549201918a5194610e0d8661264d565b8552818501528951928d8d938054610e2481612b3c565b80885292818516918215610eb2575050600114610e77575b505050509181610e55610dea9593610e6e950382612683565b89820152610e63828b612df7565b52610d93818a612df7565b94908a80610dde565b90919293508d52828d20918d925b828410610e9f5750505082010181610e5581610e6e610e3c565b8054868501860152928401928101610e85565b60ff19168689015292151590921b86019093019350849250610e559150829050610e6e610e3c565b634e487b7160e01b8b526021855260248bfd5b509190346104d157816003193601126104d157610f0b6105bb6129f2565b9051916003821015610f1f57602083838152f35b634e487b7160e01b815260218452602490fd5b5050346104d157816003193601126104d1576020906005549051908152f35b5050346104d1576020906104ca610f673661289a565b91612cf7565b5050346104d157816003193601126104d157610f8761299a565b600180546001600160a01b031981169091559051906000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5090346102c55760209182600319360112610a7d5780356001600160401b0391828211610a795736602383011215610a79578101359161100d836126a4565b9261101a85519485612683565b808452858401916024809260051b85010193368511610a7557828101935b85851061115d57505050505050805191611051836126a4565b9261105e82519485612683565b80845261106d601f19916126a4565b0184865b82811061112b57505050845b8251811015611120578061109461111b9285612df7565b51516110a08287612df7565b5152856110ad8286612df7565b510151866110bb8388612df7565b510152826110c98287612df7565b51018351906110d7826125e6565b88825252826110e68286612df7565b510151606090816110f78489612df7565b5101526111048286612df7565b51015160806111138388612df7565b510152612de8565b61107d565b85826109f486613419565b835161113681612632565b88815288838201526060808683015289818301526080820152828288010152018590611071565b8435838111610a7157820160806023198236030112610a715788519161118283612617565b85820135835260448201358b84015260648201358a840152608482013592858411610a6d576111b98c949388869536920101612701565b6060820152815201940193611038565b50346102c557602080600319360112610a7d5781356001600160401b0392838211610a795736602383011215610a795781013592611206846126a4565b9361121386519586612683565b808552838501916024809260051b85010193368511610a7557828101935b8585106112435789896109f48a613419565b8435838111610a7157820160a06023198236030112610a715789519161126883612632565b8582013583526044820135898401526064820135858111610a6d5761129290873691850101612701565b8b8401526084820135606084015260a482013592858411610a6d576112bf8a949388869536920101612701565b6080820152815201940193611231565b50346102c5576112de3661293c565b8392919251906112ed826125e6565b858252600b546001600160a01b0392908316801561171257611310903314612af0565b6113186129f2565b938483116116cf57600a5487516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b8184015260209560249392909190879082908690829086165afa80156116c55787918c91611698575b50848b51809481936390978d1b60e01b83528d88840152165afa90811561168e578a91611661575b5015611621576120008351116115e8576113b283858961431a565b92838a52600386526113d66113cf8a8c2098610348600554612be6565b8098614672565b828110156115d657156113e857898951f35b6001908188018098116115c457848b526003875260058a8c208a8155878482015589600382015584548582015501908051906001600160401b0382116115b2578c82916114358554612b3c565b8b601f8211611557575b50508a91601f84116001146114f857926114ed575b5050600019600383901b1c191690831b1790555b815492600160401b8410156114dc5750826114c7926114ae927f5d80f93c41e95cacea0b9ce9bb825092d709fa503a70bb26ea3f536bf16946bd98979695019055612b76565b819391549060031b600019811b9283911b169119161790565b90558551908152a33880808080808080898951f35b634e487b7160e01b8b52604183528afd5b015190503880611454565b9190869450601f1984168684528c8420935b8d8282106115415750508411611528575b505050811b019055611468565b015160001960f88460031b161c1916905538808061151b565b838501518655899790950194938401930161150a565b9193509185815220601f840160051c8101918b85106115a8575b918f92859492601f89920160051c01915b8281106115915750508b61143f565b600091939550809294505501918e91868594611582565b9091508190611571565b634e487b7160e01b8d5260418552858dfd5b634e487b7160e01b8b5260118352838bfd5b634e487b7160e01b8b5260218352838bfd5b6016606492868a519362461bcd60e51b855284015282015275496e76616c696420616e63696c6c617279206461746160501b6044820152fd5b601e606492868a519362461bcd60e51b85528401528201527f556e737570706f72746564206964656e746966696572207265717565737400006044820152fd5b6116819150863d8811611687575b6116798183612683565b810190612a8c565b38611397565b503d61166f565b89513d8c823e3d90fd5b6116b89150823d84116116be575b6116b08183612683565b810190612a6d565b3861136f565b503d6116a6565b8a513d8d823e3d90fd5b606490602088519162461bcd60e51b8352820152601860248201527f43616e206f6e6c79207265717565737420696e207061737400000000000000006044820152fd5b50600a5486516302abf57960e61b815267526567697374727960c01b8682015260209182908290602490829089165afa9081156117aa57859183918b916117b4575b5060248a518094819363f9f6b49b60e01b8352338c840152165afa9081156117aa57611788928a9261178d575b5050612aa4565b611310565b6117a39250803d10611687576116798183612683565b3880611781565b88513d8b823e3d90fd5b6117cb9150823d84116116be576116b08183612683565b38611754565b50346102c55760209182600319360112610a7d578135916001600160401b0383116119835736602384011215611983578201359161180e836126a4565b9261181b83519485612683565b80845260248585019160071b83010191368311610b8c57602401905b8282106119415750505081519161184d836126a4565b9261185a83519485612683565b808452611869601f19916126a4565b0184865b82811061190f57505050845b815181101561190457806118906118ff9284612df7565b515161189c8287612df7565b5152856118a98285612df7565b510151866118b78388612df7565b510152836118c58285612df7565b510151846118d38388612df7565b5101526060806118e38388612df7565b51018551906118f1826125e6565b898252526111048285612df7565b611879565b85836109f486613686565b845161191a81612632565b8881528883820152888682015260608082015288608082015282828801015201859061186d565b608082360312610b8c5785608091855161195a81612617565b843581528285013583820152868501358782015260608086013590820152815201910190611837565b8480fd5b5050346104d157816003193601126104d1576020906104ca6105db6129f2565b50346102c55760803660031901126102c557803590602480356044358551906119cf826125e6565b878252600b546001600160a01b0394906119eb90861615612fa8565b6119f66105bb6129f2565b60038110156109655760010361092357611a116105db6129f2565b95611a1d84868a61431a565b8a526020956003875260028a8c2001888c528752898b2091336000528288528a60002093845480156108ea57868961067b8f8f908f8f928e61066060d49585519889968288019b8c52606435908801523360601b606088015260748701528251928391609488019101612952565b509134610c74576020366003190112610c74578235906001600160401b038211610c745750611ac3610c7093610c659236910161271f565b612e0b565b509190346104d15760803660031901126104d1576024604435843582356064356001600160401b038111610b8c57611b039036908901612701565b93855190611b10826125e6565b878252600b54611b29906001600160a01b031615612fa8565b8415611c3857611b376129f2565b611b4081612ff4565b6003811015611c2657611bf657611b5c90610348600554612be6565b98611b6883858761431a565b8952600360205287892091611b7d8b84614672565b82811015610412576001036103d057505097839160028a8360036109f49b9c9d0155838c5201602052888a20336000526020528589600020556000805160206146d183398151915289518581528a602082015280611bdf33948d830190612975565b0390a4855191611bee836125e6565b878352613220565b875162461bcd60e51b81526020818c0152601d818401526000805160206146f18339815191526044820152606490fd5b634e487b7160e01b8a5260218b52828afd5b88601560649260208a519362461bcd60e51b855284015282015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152fd5b5050346104d157816003193601126104d157600b5490516001600160a01b039091168152602090f35b5050346104d157816003193601126104d1576020906007549051908152f35b5050346104d157816003193601126104d1576020906104ca6129f2565b5050346104d15760203660031901126104d157611cf26125d0565b611cfa61299a565b60018060a01b03166bffffffffffffffffffffffff60a01b600b541617600b5551f35b5050346104d157816003193601126104d1576020906008549051908152f35b508290346104d15760203660031901126104d15781546001600160a01b031680156102c557803b156102c55790828092602486518095819363117c72b360e11b83528635878401525af18015611dc057611d9557828451f35b6001600160401b038211611dad575082528280828451f35b634e487b7160e01b835260419052602482fd5b84513d85823e3d90fd5b50346102c557611dd93661289a565b600b549293926001600160a01b039291908316801561206957611dfd903314612af0565b611e056129f2565b938483116116cf57600a5487516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b8184015260209560249392909190879082908690829086165afa80156116c55787918c9161204c575b50848b51809481936390978d1b60e01b83528d88840152165afa90811561168e578a9161202f575b5015611621576120008351116115e857611e9f83858961431a565b92838a5260038652611ebc6113cf8a8c2098610348600554612be6565b828110156115d65715611ece57898951f35b6001908188018098116115c457848b526003875260058a8c208a8155878482015589600382015584548582015501908051906001600160401b0382116115b2578c8291611f1b8554612b3c565b8b601f8211611fd7575b50508a91601f8411600114611f9257926114ed575050600019600383901b1c191690831b179055815492600160401b8410156114dc5750826114c7926114ae927f5d80f93c41e95cacea0b9ce9bb825092d709fa503a70bb26ea3f536bf16946bd98979695019055612b76565b9190869450601f1984168684528c8420935b8d828210611fc1575050841161152857505050811b019055611468565b8385015186558997909501949384019301611fa4565b9193509185815220601f840160051c8101918b8510612025575b918f92859492601f89920160051c01915b8281106120115750508b611f25565b809294919395505501918e91868594612002565b9091508190611ff1565b6120469150863d8811611687576116798183612683565b38611e84565b6120639150823d84116116be576116b08183612683565b38611e5c565b50600a5486516302abf57960e61b815267526567697374727960c01b8682015260209182908290602490829089165afa9081156117aa57859183918b916120e3575b5060248a518094819363f9f6b49b60e01b8352338c840152165afa9081156117aa576120de928a9261178d575050612aa4565b611dfd565b6120fa9150823d84116116be576116b08183612683565b386120ab565b5050346104d157816003193601126104d157602090600c549051908152f35b5050346104d157816003193601126104d157905490516001600160a01b039091168152602090f35b50346102c55760a03660031901126102c5576001600160401b0390604435828111611983576121799036908301612701565b90608435928311611983576121946109f49336908301612701565b91606435916024359035613220565b50346102c5576121b23661287a565b906121bb61299a565b81518484516121c9816125e6565b528351906121d6826125e6565b670de0b6b3a764000080925210156121f057505160065551f35b606490602084519162461bcd60e51b8352820152601d60248201527f4741542070657263656e74616765206d757374206265203c20313030250000006044820152fd5b50346102c557602080600319360112610a7d576001600160401b03918035838111610a795736602382011215610a795780820135938411610a795760249036828683010111610b8c57600b546001600160a01b03959061229590871615612fa8565b61229d6129f2565b916122a783612ff4565b60038110156124a757600103612465576122dd916122cf6122d592600c5492873692016126bb565b9061312a565b919091613026565b8533911603612424576122f68791610348600554612be6565b94858252600285528682209081541561230e57828851f35b85906009541685895180958193634b88b8ad60e11b83525af191821561241a5788926123eb575b505583865260028352600185872001600781036123e0575b50600285872001600681036123d5575b50600554908160001904600211821515166123c45760018501928386116123b35750506123936002939261239c9260011b612bfc565b60085490612bc3565b928552526003828420015538808080858180828851f35b634e487b7160e01b88526011905286fd5b634e487b7160e01b87526011835286fd5b60065490553861235d565b60075490553861234d565b9091508481813d8311612413575b6124038183612683565b8101031261097757519038612335565b503d6123f9565b87513d8a823e3d90fd5b50601b9060649386519362461bcd60e51b85528401528201527f5369676e6174757265206d757374206d617463682073656e64657200000000006044820152fd5b875162461bcd60e51b8152808601879052601d818601527f4f6e6c7920736e617073686f7420696e2072657665616c2070686173650000006044820152606490fd5b634e487b7160e01b8a5260218652848afd5b508234610c74576060366003190112610c74576124d46125d0565b916044356001600160401b0381116102c5576124f2913691016127f8565b8184516124fe816125e6565b526125098151612f42565b90825b815181101561256d57806125236125689284612df7565b515161252f8286612df7565b515260208061253e8386612df7565b5101519061254c8387612df7565b5101528661255a8286612df7565b5101875190610c4a826125e6565b61250c565b60208661257d8560243589613abc565b905190518152f35b50346102c55760603660031901126102c55761259f6125d0565b92604435906001600160401b038211610c745750926125c661257d9260209536910161271f565b9060243590613abc565b600435906001600160a01b038216820361085857565b602081019081106001600160401b0382111761260157604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761260157604052565b60a081019081106001600160401b0382111761260157604052565b606081019081106001600160401b0382111761260157604052565b604081019081106001600160401b0382111761260157604052565b90601f801991011681019081106001600160401b0382111761260157604052565b6001600160401b0381116126015760051b60200190565b9291926001600160401b03821161260157604051916126e4601f8201601f191660200184612683565b829481845281830111610858578281602093846000960137010152565b9080601f830112156108585781602061271c933591016126bb565b90565b9080601f83011215610858578135612736816126a4565b9260409161274683519586612683565b808552602093848087019260051b8401019381851161085857858401925b858410612775575050505050505090565b6001600160401b03843581811161085857860191606080601f19858803011261085857845190808201828110858211176127e35786528a8501358252858501358b830152840135928311610858576127d4868b80969581960101612701565b85820152815201930192612764565b60246000634e487b7160e01b81526041600452fd5b81601f820112156108585780359061280f826126a4565b9260409261281f84519586612683565b808552602091828087019260061b85010193818511610858578301915b84831061284c5750505050505090565b858383031261085857838691825161286381612668565b85358152828601358382015281520192019161283c565b602090600319011261085857604051612892816125e6565b600435815290565b6060600319820112610858576004359160243591604435906001600160401b0382116108585761271c91600401612701565b602090818101828252835180915282604080930194019260009283905b8382106128f95750505050505090565b909192939495865180516004808210156129295750825284015184820152810195830194939291600101906128e9565b634e487b7160e01b895260219052602488fd5b6040906003190112610858576004359060243590565b60005b8381106129655750506000910152565b8181015183820152602001612955565b9060209161298e81518092818552858086019101612952565b601f01601f1916010190565b6001546001600160a01b031633036129ae57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000546001600160a01b03168015612a68576020600491604051928380926329cb924d60e01b82525afa908115612a5c57600091612a2e575090565b906020823d8211612a54575b81612a4760209383612683565b81010312610c7457505190565b3d9150612a3a565b6040513d6000823e3d90fd5b504290565b9081602091031261085857516001600160a01b03811681036108585790565b90816020910312610858575180151581036108585790565b15612aab57565b60405162461bcd60e51b815260206004820152601960248201527f43616c6c6564206d7573742062652072656769737465726564000000000000006044820152606490fd5b15612af757565b60405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206d757374206265206d696772617465642061646472657373006044820152606490fd5b90600182811c92168015612b6c575b6020831014612b5657565b634e487b7160e01b600052602260045260246000fd5b91607f1691612b4b565b600454811015612bad5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b91908201809211612bd057565b634e487b7160e01b600052601160045260246000fd5b806000190460021181151516612bd05760011b90565b8060001904821181151516612bd0570290565b8115612c19570490565b634e487b7160e01b600052601260045260246000fd5b600b546001600160a01b03908116939291908415612c605750612c56612c5b943314612af0565b614100565b505090565b809450600a541660405180916302abf57960e61b825267526567697374727960c01b600483015281602460209485935afa8015612a5c578291600091612cda575b5060246040518098819363f9f6b49b60e01b8352336004840152165afa8015612a5c57612c5b95612c569260009261178d575050612aa4565b612cf19150823d84116116be576116b08183612683565b38612ca1565b600b546001600160a01b03908116939291908415612d515750612c56612d1e943314612af0565b909115612d29575090565b60405162461bcd60e51b815260206004820152908190612d4d906024830190612975565b0390fd5b809450600a541660405180916302abf57960e61b825267526567697374727960c01b600483015281602460209485935afa8015612a5c578291600091612dcb575b5060246040518098819363f9f6b49b60e01b8352336004840152165afa8015612a5c57612d1e95612c569260009261178d575050612aa4565b612de29150823d84116116be576116b08183612683565b38612d92565b6000198114612bd05760010190565b8051821015612bad5760209160051b010190565b908151612e17816126a4565b92604091612e2783519586612683565b808552612e36601f19916126a4565b0160005b818110612f1e575050612e4e6105db6129f2565b9060005b8151811015612f1857612e658183612df7565b5151612e8f60209182612e788587612df7565b51015187612e868688612df7565b5101519161431a565b6000526003908181528560002091612ea78684614672565b92600480851015612f03575091869184936001612ee8979614600014612eed575050612ed3848b612df7565b5101525b612ee18289612df7565b5152612de8565b612e52565b01549150612efb848b612df7565b510152612ed7565b602190634e487b7160e01b6000525260246000fd5b50505050565b6020908451612f2c81612668565b6000815282600081830152828901015201612e3a565b90612f4c826126a4565b6040612f5a81519283612683565b8382528193612f6b601f19916126a4565b0191600090815b848110612f80575050505050565b6020908451612f8e8161264d565b848152828581830152606087830152828501015201612f72565b15612faf57565b60405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792063616c6c2074686973206966206e6f74206d6967726174656400006044820152606490fd5b61300360019160055490612c0f565b1660038110156130105790565b634e487b7160e01b600052602160045260246000fd5b600581101561301057806130375750565b600181036130845760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036130d15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6003146130da57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b90604181511460001461315857613154916020820151906060604084015193015160001a90613162565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116131e55791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156131d85781516001600160a01b038116156131d2579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b9061320e916000604051613204816125e6565b5251905190612bc3565b6040519061321b826125e6565b815290565b600b5490949293919061323c906001600160a01b031615612fa8565b81156133dc5761324a6129f2565b61325381612ff4565b6003811015613010576133a95761326f90610348600554612be6565b61327a85838861431a565b906000918252602093600385526040928381206132978482614672565b600481101561339557600103613351579284927f0296c44e55ad4a025c9701a71c746d4275d63dfe301e390a7429551010a8fea19796958b9360028785600361334c9a015585835201895281812033825289522055825185815283878201526000805160206146d18339815191523391806133158d88830190612975565b0390a461333d6133266105db6129f2565b976060835196879687528601526060850190612975565b90838203908401523395612975565b0390a4565b845162461bcd60e51b815260048101889052601e60248201527f43616e6e6f7420636f6d6d697420696e616374697665207265717565737400006044820152606490fd5b634e487b7160e01b83526021600452602483fd5b60405162461bcd60e51b815260206004820152601d60248201526000805160206146f18339815191526044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152606490fd5b6000915b8151831015613681576080806134338585612df7565b5101515161362357506134468383612df7565b515192602093846134578386612df7565b510151604095866134688588612df7565b5101519160606134788689612df7565b510151600b54909390613494906001600160a01b031615612fa8565b83156135e7576134a26129f2565b936134ac85612ff4565b9460039586811015613010576135b5576134cb90610348600554612be6565b946134d783858961431a565b6000528085528a600020906134ec8783614672565b600490818110156135a05760010361355d5750926000805160206146d18339815191529492600283896135569d9e9f999761354e9601558960005201855286600020336000528552866000205585805194859485528401523395830190612975565b0390a4612de8565b919061341d565b8c5162461bcd60e51b8152908101879052601e60248201527f43616e6e6f7420636f6d6d697420696e616374697665207265717565737400006044820152606490fd5b602182634e487b7160e01b6000525260246000fd5b8a5162461bcd60e51b815260048101869052601d60248201526000805160206146f18339815191526044820152606490fd5b885162461bcd60e51b8152600481018490526015602482015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152606490fd5b9261367c8394613637836135569596612df7565b51519060206136468589612df7565b5101516040613655868a612df7565b510151906060613665878b612df7565b51015192613673878b612df7565b51015193613220565b612de8565b915050565b6000915b81518310156136815761369d8383612df7565b51519260206136ac8285612df7565b5101519360406136bc8386612df7565b51015160606136cb8487612df7565b5101519060806136db8588612df7565b510151600b549092906136f7906001600160a01b031615612fa8565b6137026105bb6129f2565b600381101561301057600103613a775761371d6105db6129f2565b92613729828a8761431a565b6000526003602052600260406000200184600052602052604060002033600052806020526040600020918254908115613a3c57604051602081019187835260408201523360601b60608201528c60748201526137b360d487518a609491613797818c6020868a019101612952565b8501918201528360b4918d838201520390810184520182612683565b519020036139f757846000526002602052604060002054156139ba57600085815260026020908152604080832054928555600954905163277166bf60e11b81523360048201526024810193909352919391849060449082906001600160a01b03165afa928315612a5c57600093613966575b509261391898999a9285613907937f3fad5d37ee1be2f58ff1735699121a8ead73c3b70d02fc06d07b0db29854d3b49660405193613862856125e6565b8452600160405160208101908582526020815261387e81612668565b519020910155600360018201916002810161389f8660405161075f816125e6565b51905583600052826020526138c085604060002060405190610785826125e6565b846000528360205260406000209051905501908154808414159182613927575b505061391f575b505051946040519384526020840152608060408401526080830190612975565b9260608201528033930390a4612de8565b919061368a565b5585386138e7565b9091506040600020916040519261393d846125e6565b54835260005260205260406000209060405191613959836125e6565b54809252511138806138e0565b90926020823d6020116139b2575b8161398160209383612683565b81010312610c74575051917f3fad5d37ee1be2f58ff1735699121a8ead73c3b70d02fc06d07b0db29854d3b4613825565b3d9150613974565b60405162461bcd60e51b8152602060048201526015602482015274149bdd5b99081a185cc81b9bc81cdb985c1cda1bdd605a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f52657665616c6564206461746120213d20636f6d6d69742068617368000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081a185cda081c995d99585b606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742072657665616c20696e20636f6d6d69742070686173650000006044820152606490fd5b9291926000604051613acd816125e6565b52600b546001600160a01b031680614047575b50613aec6105db6129f2565b82101561401057816000526002602052604060002093613b0a6129f2565b6003860154600954875460405163277166bf60e11b81526001600160a01b038781166004830152602482018390529099949093109693929091169190602089604481865afa988915612a5c57600099613fdb575b5060209060405199613b6f8b6125e6565b8a52602460405180958193630981b24d60e41b835260048301525afa908115612a5c57600091613fa5575b613bc6925060405191613bac836125e6565b8252600160405191613bbd836125e6565b01548152614098565b95604051613bd3816125e6565b600081529060005b8451811015613ec057613c0e613bf18287612df7565b51516020613bff8489612df7565b5101516040612e86858a612df7565b6000526003602052604060002090600382015480600052600283016020528560406000209103613e7b57613c4581613c6b94614359565b6001600160a01b038816600090815260208290526040902060010154613c705750612de8565b613bdb565b8815613d1357613c808288612df7565b515186887f6fb9765a6e4b0dd2aaedad44f9b165a2a64a53ce67a6ec812075faa9220d41bc613cdc6040613cc3886020613cba8288612df7565b51015195612df7565b5101516040519384526060806020860152840190612975565b600060408401526001600160a01b038d16929081900390a45b60018060a01b03881660005260205260006001604082200155612de8565b6001604060002001548b600383015491604051602081019084825260208152613d3b81612668565b51902003613e1857613d9091613d54613d899288614098565b906000604051613d63816125e6565b526000526001840160205260406000209060405191613d81836125e6565b5482526140cc565b80966131f1565b9486613d9c848a612df7565b5151917f6fb9765a6e4b0dd2aaedad44f9b165a2a64a53ce67a6ec812075faa9220d41bc8a613dfb6040613ddf896020613dd68287612df7565b51015194612df7565b5101519351936040519283526060806020850152830190612975565b60408201939093526001600160a01b038d169281900390a4613cf5565b5050613e248288612df7565b515186887f6fb9765a6e4b0dd2aaedad44f9b165a2a64a53ce67a6ec812075faa9220d41bc613e5e6040613cc3886020613cba8288612df7565b600060408401526001600160a01b038d16929081900390a4613cf5565b60405162461bcd60e51b815260206004820152601d60248201527f526574726965766520666f7220766f7465732073616d6520726f756e640000006044820152606490fd5b505095505050905082516000604051613ed8816125e6565b526000604051613ee7816125e6565b52613eef5750565b60095483516040516340c10f1960e01b81526001600160a01b03938416600482015260248101919091529160209183916044918391600091165af1908115612a5c57600091613f86575b5015613f4157565b60405162461bcd60e51b815260206004820152601c60248201527f566f74696e6720746f6b656e2069737375616e6365206661696c6564000000006044820152606490fd5b613f9f915060203d602011611687576116798183612683565b38613f39565b90506020823d602011613fd3575b81613fc060209383612683565b8101031261085857613bc6915190613b9a565b3d9150613fb3565b9098506020813d602011614008575b81613ff760209383612683565b810103126108585751976020613b5e565b3d9150613fea565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c9bdd5b991259608a1b6044820152606490fd5b33036140535738613ae0565b60405162461bcd60e51b815260206004820152601b60248201527f43616e206f6e6c792063616c6c2066726f6d206d6967726174656400000000006044820152606490fd5b670de0b6b3a7640000916140be9160006040516140b4816125e6565b5251905190612bfc565b046040519061321b826125e6565b60006040516140da816125e6565b5251670de0b6b3a76400008160001904811182151516612bd05761320e92519102612c0f565b9061410b929161431a565b906000918252600360205260409081832061413061412a6105db6129f2565b82614672565b600481101561423a576001810361417c57505082915161414f81612668565b601e81527f43757272656e7420766f74696e6720726f756e64206e6f7420656e6465640000602082015290565b600281036141be575080600260036141ad93015491828752016020526141a76001858720019161458b565b9061424e565b925160019490915061321b826125e6565b600314159050614201578291516141d481612668565b601d81527f5072696365206973207374696c6c20746f20626520766f746564206f6e000000602082015290565b82915161420d81612668565b601981527f507269636520776173206e657665722072657175657374656400000000000000602082015290565b634e487b7160e01b85526021600452602485fd5b919060009060409060008251614263816125e6565b5260648251614271816125e6565b6802b5e3af16b188000081526000845161428a816125e6565b5251049082519161429a836125e6565b82528251906142a8826125e6565b600187015480925251811192836142d6575b5050506000146142cf57506002600192015490565b6000925090565b61430e92935060028701546000528660205280600020908051916142f9836125e6565b5482525191614307836125e6565b82526140cc565b519051103880806142ba565b9190614353906143456040519384926020840196875260408401526060808401526080830190612975565b03601f198101835282612683565b51902090565b60049081810180549060001980831461458357600384019061438861437e835461458b565b600180990161424e565b93901561453f5786549682880197881161452a576143a588612b76565b90549060031b1c9560009687526143dc6114ae6143cf60209b60038d52848660408d200155612b76565b90549060031b1c92612b76565b905580548015614517578301906143f282612b76565b8582549160031b1b191690555555549383549560058186015495019260405195865282860152606060408601528383549361442c85612b3c565b9485606089015283811690816000146144cd5750600114614476575b505050505090807fb1f1bf5aec084730c2c09f66ae2099185eaf6f951ddc113a19aa886a9f5e71b7920390a3565b90809550528184205b8385106144b957505050508101608001817fb1f1bf5aec084730c2c09f66ae2099185eaf6f951ddc113a19aa886a9f5e71b7388080614448565b80548686016080015293820193810161447f565b92505050859450608092507fb1f1bf5aec084730c2c09f66ae2099185eaf6f951ddc113a19aa886a9f5e71b79593915060ff191682840152151560051b8201019192388080614448565b634e487b7160e01b875260318252602487fd5b601190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081890181905260248201527f43616e2774207265736f6c766520756e7265736f6c76656420726571756573746044820152606490fd5b505050505050565b90604080519261459a846125e6565b60008094528084526020600281528285205491821561465a576009548451630981b24d60e41b815260048101949094528290849060249082906001600160a01b03165afa92831561465057869361461f575b5061271c9495600280938693845196614604886125e6565b87528352522001915191614617836125e6565b548252614098565b9092508181813d8311614649575b6146378183612683565b81010312610a7957519161271c6145ec565b503d61462d565b84513d88823e3d90fd5b5050509091505161466a816125e6565b600019815290565b600381015490918161468657505050600090565b808210156146be575060026146ae9282600052016020526141a760016040600020019161458b565b50156146b957600290565b600190565b141590506146cb57600190565b60039056fe6beca723245953d9ed92ae4d320d4772838e841161bfff12c78ae4268df525eb43616e6e6f7420636f6d6d697420696e2072657665616c207068617365000000a264697066735822122056d79cc8478ed34f3a6a0e1247f17fca5a79ceee475f04bf72e1149cad5d1c2d64736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8063017e4c03146125855780630d434e7e146124b9578063110d559a1461223357806313e56d6a146121a357806316d32474146121475780631c39c38d1461211f57806320b373a214612100578063216666a414611dca57806322f8e56614611d3c57806326af73bf14611d1d5780632960b5af14611cd757806329cb924d14611cba57806331f9e35b14611c9b5780634000851f14611c725780634666cb0c14611ac8578063498ec3c914611a8b5780634c7a2603146119a75780635727e25d146119875780636852eea0146117d157806368ad8ae3146112cf5780636ec1fd5d146111c957806370a0cf2c14610fce578063715018a614610f6d578063719c6d5614610f5157806371b7db5314610f3257806374dd278c14610eed57806380a1f71214610c9657806383c6aaca14610c775780638558d4f314610bb15780638876e8a014610b90578063894fcecc14610b395780638c65c81f14610ad45780638da5cb5b14610aab578063a03e881a14610a81578063a65d15911461097b578063add2ccb41461055f578063b034012314610536578063b551cd5014610511578063b90fd480146104f2578063c371dda7146104d5578063c9280f06146104a0578063d8651ad0146102c95763f2fde38b146101fa57600080fd5b346102c55760203660031901126102c5576102136125d0565b61021b61299a565b6001600160a01b03908116918215610273575060015492826bffffffffffffffffffffffff60a01b8516176001555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50346102c55760603660031901126102c557600b54813591906001600160a01b0316156024803590604435906102fe84612fa8565b61031587519461030d866125e6565b898652612fa8565b8115610466576103236129f2565b61032c81612ff4565b6003811015610454576104245761034e90610348600554612be6565b90612c0f565b9461035a85858961431a565b895260036020528789209161036f8784614672565b82811015610412576001036103d0575050906002828660036000805160206146d183398151915296950155868a52016020528688203360005260205286600020558551908152856020820152806103ca339488830190612975565b0390a451f35b90601e60649260208b519362461bcd60e51b85528401528201527f43616e6e6f7420636f6d6d697420696e616374697665207265717565737400006044820152fd5b50634e487b7160e01b8a526021825289fd5b875162461bcd60e51b8152602081880152601d818401526000805160206146f18339815191526044820152606490fd5b634e487b7160e01b8a5260218752828afd5b84601560649260208a519362461bcd60e51b855284015282015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152fd5b5050346104d1576104ca6020926104b63661293c565b908451926104c3846125e6565b8352612cf7565b9051908152f35b5080fd5b5050346104d157816003193601126104d157602090516120008152f35b5050346104d157816003193601126104d1576020906006549051908152f35b5050346104d15760209061052d6105273661289a565b91612c2f565b90519015158152f35b5050346104d157816003193601126104d15760095490516001600160a01b039091168152602090f35b50346102c55760a03660031901126102c557803590602480356044356064356001600160401b038111610977576105999036908601612701565b9060018060a01b03936105b085600b541615612fa8565b6105c06105bb6129f2565b612ff4565b600381101561096557600103610923576105e66105db6129f2565b610348600554612be6565b956105f284868a61431a565b8a526020956003875260028a8c2001888c528752898b2091336000528288528a60002093845480156108ea57868961067b8f8f908f8f928e61066060d49585519889968288019b8c52608435908801523360601b606088015260748701528251928391609488019101612952565b830191609483015260b48201520360b4810184520182612683565b519020036108a857898d52600289528b8d20541561086e5750888c52600288528a8c2054600085556009548c5163277166bf60e11b81523393810193845260208401929092528d98979695949391928d928b928592839003604001918391165afa938415610864578992899561081e575b508594936107ce979693836003937f3fad5d37ee1be2f58ff1735699121a8ead73c3b70d02fc06d07b0db29854d3b49c955197610728896125e6565b8852600182518481019089825285815261074181612668565b51902091015560018301946002840161076889845161075f816125e6565b835481526131f1565b5190558681528583528561078d89848420855190610785826125e6565b5481526131f1565b9388835252209051905501908d8d8354918286141593846107e5575b505050506107dd575b5050519589519485528401526080888401526080830190612975565b9260608201528033930390a451f35b5581386107b2565b9091809394508220938351946107fa866125e6565b54855282528c5220908d519161080f836125e6565b548092525111388d8f826107a9565b985092959493505086813d831161085d575b61083a8183612683565b810103126108585794518a959293919290919087908b9060036106ec565b600080fd5b503d610830565b81513d8a823e3d90fd5b8b5162461bcd60e51b815291820189905260159082015274149bdd5b99081a185cc81b9bc81cdb985c1cda1bdd605a1b6044820152606490fd5b8b5162461bcd60e51b8152918201899052601c908201527f52657665616c6564206461746120213d20636f6d6d69742068617368000000006044820152606490fd5b508b5162461bcd60e51b815291820189905260139082015272125b9d985b1a59081a185cda081c995d99585b606a1b6044820152606490fd5b85601d60649260208b519362461bcd60e51b85528401528201527f43616e6e6f742072657665616c20696e20636f6d6d69742070686173650000006044820152fd5b50634e487b7160e01b89526021865288fd5b8780fd5b50346102c557602080600319360112610a7d5781356001600160401b0392838211610a795736602383011215610a79578101356109b7816126a4565b936109c486519586612683565b818552838501916024809160051b85010193368511610a7557818101935b8585106109f75789896109f48a613686565b51f35b8435848111610a7157820160a06023198236030112610a7157895191610a1c83612632565b84820135835260448201358984015260648201358b840152608482013592868411610a6d5760a48a9493610a568695893691840101612701565b6060840152013560808201528152019401936109e2565b8c80fd5b8a80fd5b8880fd5b8580fd5b8380fd5b5050346104d15761052d602092610a973661293c565b90845192610aa4846125e6565b8352612c2f565b5050346104d157816003193601126104d15760015490516001600160a01b039091168152602090f35b50346102c55760203660031901126102c5576080928291358152600260205220805491805191610b03836125e6565b600181015483526003825191610b18836125e6565b60028101548352015492825194855251602085015251908301526060820152f35b50346102c55760803660031901126102c557803590602480356044356001600160401b038111610b8c57610b709036908501612701565b600b54909260643591610315906001600160a01b031615612fa8565b8680fd5b50346102c55760203660031901126102c557610baa61299a565b3560085551f35b509134610c7457602092836003193601126104d15780356001600160401b0381116102c557610be2913691016127f8565b91610bed8351612f42565b93825b8451811015610c585780610c07610c539287612df7565b5151610c138289612df7565b515282610c208288612df7565b51015183610c2e838a612df7565b51015283610c3c8289612df7565b5101845190610c4a826125e6565b86825252612de8565b610bf0565b610c7083610c6588612e0b565b9051918291826128cc565b0390f35b80fd5b5050346104d157610c873661287a565b610c8f61299a565b5160075551f35b508290346104d157816003193601126104d157610cb16129f2565b91610cc26005936103488554612be6565b91805492610ccf84612f42565b938392845b828110610da25750505050610ce881612f42565b92825b828110610d6b575050508351926020808501918186528451809352818784818901931b880101950193965b838810610d235786860387f35b90919293948380610d5a600193603f198b8203018752858a5180518352848101518584015201519060609081888201520190612975565b970193019701969093929193610d16565b80610d7d610d99928499969899612df7565b51610d888288612df7565b52610d938187612df7565b50612de8565b95949295610ceb565b610daf8199969899612b76565b9054600391821b1c89526020908152868920610dcb8682614672565b9084821015610eda576001809214610df3575b505050610dea90612de8565b97969497610cd4565b8097939754928c838301549201918a5194610e0d8661264d565b8552818501528951928d8d938054610e2481612b3c565b80885292818516918215610eb2575050600114610e77575b505050509181610e55610dea9593610e6e950382612683565b89820152610e63828b612df7565b52610d93818a612df7565b94908a80610dde565b90919293508d52828d20918d925b828410610e9f5750505082010181610e5581610e6e610e3c565b8054868501860152928401928101610e85565b60ff19168689015292151590921b86019093019350849250610e559150829050610e6e610e3c565b634e487b7160e01b8b526021855260248bfd5b509190346104d157816003193601126104d157610f0b6105bb6129f2565b9051916003821015610f1f57602083838152f35b634e487b7160e01b815260218452602490fd5b5050346104d157816003193601126104d1576020906005549051908152f35b5050346104d1576020906104ca610f673661289a565b91612cf7565b5050346104d157816003193601126104d157610f8761299a565b600180546001600160a01b031981169091559051906000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b5090346102c55760209182600319360112610a7d5780356001600160401b0391828211610a795736602383011215610a79578101359161100d836126a4565b9261101a85519485612683565b808452858401916024809260051b85010193368511610a7557828101935b85851061115d57505050505050805191611051836126a4565b9261105e82519485612683565b80845261106d601f19916126a4565b0184865b82811061112b57505050845b8251811015611120578061109461111b9285612df7565b51516110a08287612df7565b5152856110ad8286612df7565b510151866110bb8388612df7565b510152826110c98287612df7565b51018351906110d7826125e6565b88825252826110e68286612df7565b510151606090816110f78489612df7565b5101526111048286612df7565b51015160806111138388612df7565b510152612de8565b61107d565b85826109f486613419565b835161113681612632565b88815288838201526060808683015289818301526080820152828288010152018590611071565b8435838111610a7157820160806023198236030112610a715788519161118283612617565b85820135835260448201358b84015260648201358a840152608482013592858411610a6d576111b98c949388869536920101612701565b6060820152815201940193611038565b50346102c557602080600319360112610a7d5781356001600160401b0392838211610a795736602383011215610a795781013592611206846126a4565b9361121386519586612683565b808552838501916024809260051b85010193368511610a7557828101935b8585106112435789896109f48a613419565b8435838111610a7157820160a06023198236030112610a715789519161126883612632565b8582013583526044820135898401526064820135858111610a6d5761129290873691850101612701565b8b8401526084820135606084015260a482013592858411610a6d576112bf8a949388869536920101612701565b6080820152815201940193611231565b50346102c5576112de3661293c565b8392919251906112ed826125e6565b858252600b546001600160a01b0392908316801561171257611310903314612af0565b6113186129f2565b938483116116cf57600a5487516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b8184015260209560249392909190879082908690829086165afa80156116c55787918c91611698575b50848b51809481936390978d1b60e01b83528d88840152165afa90811561168e578a91611661575b5015611621576120008351116115e8576113b283858961431a565b92838a52600386526113d66113cf8a8c2098610348600554612be6565b8098614672565b828110156115d657156113e857898951f35b6001908188018098116115c457848b526003875260058a8c208a8155878482015589600382015584548582015501908051906001600160401b0382116115b2578c82916114358554612b3c565b8b601f8211611557575b50508a91601f84116001146114f857926114ed575b5050600019600383901b1c191690831b1790555b815492600160401b8410156114dc5750826114c7926114ae927f5d80f93c41e95cacea0b9ce9bb825092d709fa503a70bb26ea3f536bf16946bd98979695019055612b76565b819391549060031b600019811b9283911b169119161790565b90558551908152a33880808080808080898951f35b634e487b7160e01b8b52604183528afd5b015190503880611454565b9190869450601f1984168684528c8420935b8d8282106115415750508411611528575b505050811b019055611468565b015160001960f88460031b161c1916905538808061151b565b838501518655899790950194938401930161150a565b9193509185815220601f840160051c8101918b85106115a8575b918f92859492601f89920160051c01915b8281106115915750508b61143f565b600091939550809294505501918e91868594611582565b9091508190611571565b634e487b7160e01b8d5260418552858dfd5b634e487b7160e01b8b5260118352838bfd5b634e487b7160e01b8b5260218352838bfd5b6016606492868a519362461bcd60e51b855284015282015275496e76616c696420616e63696c6c617279206461746160501b6044820152fd5b601e606492868a519362461bcd60e51b85528401528201527f556e737570706f72746564206964656e746966696572207265717565737400006044820152fd5b6116819150863d8811611687575b6116798183612683565b810190612a8c565b38611397565b503d61166f565b89513d8c823e3d90fd5b6116b89150823d84116116be575b6116b08183612683565b810190612a6d565b3861136f565b503d6116a6565b8a513d8d823e3d90fd5b606490602088519162461bcd60e51b8352820152601860248201527f43616e206f6e6c79207265717565737420696e207061737400000000000000006044820152fd5b50600a5486516302abf57960e61b815267526567697374727960c01b8682015260209182908290602490829089165afa9081156117aa57859183918b916117b4575b5060248a518094819363f9f6b49b60e01b8352338c840152165afa9081156117aa57611788928a9261178d575b5050612aa4565b611310565b6117a39250803d10611687576116798183612683565b3880611781565b88513d8b823e3d90fd5b6117cb9150823d84116116be576116b08183612683565b38611754565b50346102c55760209182600319360112610a7d578135916001600160401b0383116119835736602384011215611983578201359161180e836126a4565b9261181b83519485612683565b80845260248585019160071b83010191368311610b8c57602401905b8282106119415750505081519161184d836126a4565b9261185a83519485612683565b808452611869601f19916126a4565b0184865b82811061190f57505050845b815181101561190457806118906118ff9284612df7565b515161189c8287612df7565b5152856118a98285612df7565b510151866118b78388612df7565b510152836118c58285612df7565b510151846118d38388612df7565b5101526060806118e38388612df7565b51018551906118f1826125e6565b898252526111048285612df7565b611879565b85836109f486613686565b845161191a81612632565b8881528883820152888682015260608082015288608082015282828801015201859061186d565b608082360312610b8c5785608091855161195a81612617565b843581528285013583820152868501358782015260608086013590820152815201910190611837565b8480fd5b5050346104d157816003193601126104d1576020906104ca6105db6129f2565b50346102c55760803660031901126102c557803590602480356044358551906119cf826125e6565b878252600b546001600160a01b0394906119eb90861615612fa8565b6119f66105bb6129f2565b60038110156109655760010361092357611a116105db6129f2565b95611a1d84868a61431a565b8a526020956003875260028a8c2001888c528752898b2091336000528288528a60002093845480156108ea57868961067b8f8f908f8f928e61066060d49585519889968288019b8c52606435908801523360601b606088015260748701528251928391609488019101612952565b509134610c74576020366003190112610c74578235906001600160401b038211610c745750611ac3610c7093610c659236910161271f565b612e0b565b509190346104d15760803660031901126104d1576024604435843582356064356001600160401b038111610b8c57611b039036908901612701565b93855190611b10826125e6565b878252600b54611b29906001600160a01b031615612fa8565b8415611c3857611b376129f2565b611b4081612ff4565b6003811015611c2657611bf657611b5c90610348600554612be6565b98611b6883858761431a565b8952600360205287892091611b7d8b84614672565b82811015610412576001036103d057505097839160028a8360036109f49b9c9d0155838c5201602052888a20336000526020528589600020556000805160206146d183398151915289518581528a602082015280611bdf33948d830190612975565b0390a4855191611bee836125e6565b878352613220565b875162461bcd60e51b81526020818c0152601d818401526000805160206146f18339815191526044820152606490fd5b634e487b7160e01b8a5260218b52828afd5b88601560649260208a519362461bcd60e51b855284015282015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152fd5b5050346104d157816003193601126104d157600b5490516001600160a01b039091168152602090f35b5050346104d157816003193601126104d1576020906007549051908152f35b5050346104d157816003193601126104d1576020906104ca6129f2565b5050346104d15760203660031901126104d157611cf26125d0565b611cfa61299a565b60018060a01b03166bffffffffffffffffffffffff60a01b600b541617600b5551f35b5050346104d157816003193601126104d1576020906008549051908152f35b508290346104d15760203660031901126104d15781546001600160a01b031680156102c557803b156102c55790828092602486518095819363117c72b360e11b83528635878401525af18015611dc057611d9557828451f35b6001600160401b038211611dad575082528280828451f35b634e487b7160e01b835260419052602482fd5b84513d85823e3d90fd5b50346102c557611dd93661289a565b600b549293926001600160a01b039291908316801561206957611dfd903314612af0565b611e056129f2565b938483116116cf57600a5487516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b8184015260209560249392909190879082908690829086165afa80156116c55787918c9161204c575b50848b51809481936390978d1b60e01b83528d88840152165afa90811561168e578a9161202f575b5015611621576120008351116115e857611e9f83858961431a565b92838a5260038652611ebc6113cf8a8c2098610348600554612be6565b828110156115d65715611ece57898951f35b6001908188018098116115c457848b526003875260058a8c208a8155878482015589600382015584548582015501908051906001600160401b0382116115b2578c8291611f1b8554612b3c565b8b601f8211611fd7575b50508a91601f8411600114611f9257926114ed575050600019600383901b1c191690831b179055815492600160401b8410156114dc5750826114c7926114ae927f5d80f93c41e95cacea0b9ce9bb825092d709fa503a70bb26ea3f536bf16946bd98979695019055612b76565b9190869450601f1984168684528c8420935b8d828210611fc1575050841161152857505050811b019055611468565b8385015186558997909501949384019301611fa4565b9193509185815220601f840160051c8101918b8510612025575b918f92859492601f89920160051c01915b8281106120115750508b611f25565b809294919395505501918e91868594612002565b9091508190611ff1565b6120469150863d8811611687576116798183612683565b38611e84565b6120639150823d84116116be576116b08183612683565b38611e5c565b50600a5486516302abf57960e61b815267526567697374727960c01b8682015260209182908290602490829089165afa9081156117aa57859183918b916120e3575b5060248a518094819363f9f6b49b60e01b8352338c840152165afa9081156117aa576120de928a9261178d575050612aa4565b611dfd565b6120fa9150823d84116116be576116b08183612683565b386120ab565b5050346104d157816003193601126104d157602090600c549051908152f35b5050346104d157816003193601126104d157905490516001600160a01b039091168152602090f35b50346102c55760a03660031901126102c5576001600160401b0390604435828111611983576121799036908301612701565b90608435928311611983576121946109f49336908301612701565b91606435916024359035613220565b50346102c5576121b23661287a565b906121bb61299a565b81518484516121c9816125e6565b528351906121d6826125e6565b670de0b6b3a764000080925210156121f057505160065551f35b606490602084519162461bcd60e51b8352820152601d60248201527f4741542070657263656e74616765206d757374206265203c20313030250000006044820152fd5b50346102c557602080600319360112610a7d576001600160401b03918035838111610a795736602382011215610a795780820135938411610a795760249036828683010111610b8c57600b546001600160a01b03959061229590871615612fa8565b61229d6129f2565b916122a783612ff4565b60038110156124a757600103612465576122dd916122cf6122d592600c5492873692016126bb565b9061312a565b919091613026565b8533911603612424576122f68791610348600554612be6565b94858252600285528682209081541561230e57828851f35b85906009541685895180958193634b88b8ad60e11b83525af191821561241a5788926123eb575b505583865260028352600185872001600781036123e0575b50600285872001600681036123d5575b50600554908160001904600211821515166123c45760018501928386116123b35750506123936002939261239c9260011b612bfc565b60085490612bc3565b928552526003828420015538808080858180828851f35b634e487b7160e01b88526011905286fd5b634e487b7160e01b87526011835286fd5b60065490553861235d565b60075490553861234d565b9091508481813d8311612413575b6124038183612683565b8101031261097757519038612335565b503d6123f9565b87513d8a823e3d90fd5b50601b9060649386519362461bcd60e51b85528401528201527f5369676e6174757265206d757374206d617463682073656e64657200000000006044820152fd5b875162461bcd60e51b8152808601879052601d818601527f4f6e6c7920736e617073686f7420696e2072657665616c2070686173650000006044820152606490fd5b634e487b7160e01b8a5260218652848afd5b508234610c74576060366003190112610c74576124d46125d0565b916044356001600160401b0381116102c5576124f2913691016127f8565b8184516124fe816125e6565b526125098151612f42565b90825b815181101561256d57806125236125689284612df7565b515161252f8286612df7565b515260208061253e8386612df7565b5101519061254c8387612df7565b5101528661255a8286612df7565b5101875190610c4a826125e6565b61250c565b60208661257d8560243589613abc565b905190518152f35b50346102c55760603660031901126102c55761259f6125d0565b92604435906001600160401b038211610c745750926125c661257d9260209536910161271f565b9060243590613abc565b600435906001600160a01b038216820361085857565b602081019081106001600160401b0382111761260157604052565b634e487b7160e01b600052604160045260246000fd5b608081019081106001600160401b0382111761260157604052565b60a081019081106001600160401b0382111761260157604052565b606081019081106001600160401b0382111761260157604052565b604081019081106001600160401b0382111761260157604052565b90601f801991011681019081106001600160401b0382111761260157604052565b6001600160401b0381116126015760051b60200190565b9291926001600160401b03821161260157604051916126e4601f8201601f191660200184612683565b829481845281830111610858578281602093846000960137010152565b9080601f830112156108585781602061271c933591016126bb565b90565b9080601f83011215610858578135612736816126a4565b9260409161274683519586612683565b808552602093848087019260051b8401019381851161085857858401925b858410612775575050505050505090565b6001600160401b03843581811161085857860191606080601f19858803011261085857845190808201828110858211176127e35786528a8501358252858501358b830152840135928311610858576127d4868b80969581960101612701565b85820152815201930192612764565b60246000634e487b7160e01b81526041600452fd5b81601f820112156108585780359061280f826126a4565b9260409261281f84519586612683565b808552602091828087019260061b85010193818511610858578301915b84831061284c5750505050505090565b858383031261085857838691825161286381612668565b85358152828601358382015281520192019161283c565b602090600319011261085857604051612892816125e6565b600435815290565b6060600319820112610858576004359160243591604435906001600160401b0382116108585761271c91600401612701565b602090818101828252835180915282604080930194019260009283905b8382106128f95750505050505090565b909192939495865180516004808210156129295750825284015184820152810195830194939291600101906128e9565b634e487b7160e01b895260219052602488fd5b6040906003190112610858576004359060243590565b60005b8381106129655750506000910152565b8181015183820152602001612955565b9060209161298e81518092818552858086019101612952565b601f01601f1916010190565b6001546001600160a01b031633036129ae57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6000546001600160a01b03168015612a68576020600491604051928380926329cb924d60e01b82525afa908115612a5c57600091612a2e575090565b906020823d8211612a54575b81612a4760209383612683565b81010312610c7457505190565b3d9150612a3a565b6040513d6000823e3d90fd5b504290565b9081602091031261085857516001600160a01b03811681036108585790565b90816020910312610858575180151581036108585790565b15612aab57565b60405162461bcd60e51b815260206004820152601960248201527f43616c6c6564206d7573742062652072656769737465726564000000000000006044820152606490fd5b15612af757565b60405162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206d757374206265206d696772617465642061646472657373006044820152606490fd5b90600182811c92168015612b6c575b6020831014612b5657565b634e487b7160e01b600052602260045260246000fd5b91607f1691612b4b565b600454811015612bad5760046000527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0190600090565b634e487b7160e01b600052603260045260246000fd5b91908201809211612bd057565b634e487b7160e01b600052601160045260246000fd5b806000190460021181151516612bd05760011b90565b8060001904821181151516612bd0570290565b8115612c19570490565b634e487b7160e01b600052601260045260246000fd5b600b546001600160a01b03908116939291908415612c605750612c56612c5b943314612af0565b614100565b505090565b809450600a541660405180916302abf57960e61b825267526567697374727960c01b600483015281602460209485935afa8015612a5c578291600091612cda575b5060246040518098819363f9f6b49b60e01b8352336004840152165afa8015612a5c57612c5b95612c569260009261178d575050612aa4565b612cf19150823d84116116be576116b08183612683565b38612ca1565b600b546001600160a01b03908116939291908415612d515750612c56612d1e943314612af0565b909115612d29575090565b60405162461bcd60e51b815260206004820152908190612d4d906024830190612975565b0390fd5b809450600a541660405180916302abf57960e61b825267526567697374727960c01b600483015281602460209485935afa8015612a5c578291600091612dcb575b5060246040518098819363f9f6b49b60e01b8352336004840152165afa8015612a5c57612d1e95612c569260009261178d575050612aa4565b612de29150823d84116116be576116b08183612683565b38612d92565b6000198114612bd05760010190565b8051821015612bad5760209160051b010190565b908151612e17816126a4565b92604091612e2783519586612683565b808552612e36601f19916126a4565b0160005b818110612f1e575050612e4e6105db6129f2565b9060005b8151811015612f1857612e658183612df7565b5151612e8f60209182612e788587612df7565b51015187612e868688612df7565b5101519161431a565b6000526003908181528560002091612ea78684614672565b92600480851015612f03575091869184936001612ee8979614600014612eed575050612ed3848b612df7565b5101525b612ee18289612df7565b5152612de8565b612e52565b01549150612efb848b612df7565b510152612ed7565b602190634e487b7160e01b6000525260246000fd5b50505050565b6020908451612f2c81612668565b6000815282600081830152828901015201612e3a565b90612f4c826126a4565b6040612f5a81519283612683565b8382528193612f6b601f19916126a4565b0191600090815b848110612f80575050505050565b6020908451612f8e8161264d565b848152828581830152606087830152828501015201612f72565b15612faf57565b60405162461bcd60e51b815260206004820152601e60248201527f4f6e6c792063616c6c2074686973206966206e6f74206d6967726174656400006044820152606490fd5b61300360019160055490612c0f565b1660038110156130105790565b634e487b7160e01b600052602160045260246000fd5b600581101561301057806130375750565b600181036130845760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606490fd5b600281036130d15760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606490fd5b6003146130da57565b60405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608490fd5b90604181511460001461315857613154916020820151906060604084015193015160001a90613162565b9091565b5050600090600290565b9291907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083116131e55791608094939160ff602094604051948552168484015260408301526060820152600093849182805260015afa156131d85781516001600160a01b038116156131d2579190565b50600190565b50604051903d90823e3d90fd5b50505050600090600390565b9061320e916000604051613204816125e6565b5251905190612bc3565b6040519061321b826125e6565b815290565b600b5490949293919061323c906001600160a01b031615612fa8565b81156133dc5761324a6129f2565b61325381612ff4565b6003811015613010576133a95761326f90610348600554612be6565b61327a85838861431a565b906000918252602093600385526040928381206132978482614672565b600481101561339557600103613351579284927f0296c44e55ad4a025c9701a71c746d4275d63dfe301e390a7429551010a8fea19796958b9360028785600361334c9a015585835201895281812033825289522055825185815283878201526000805160206146d18339815191523391806133158d88830190612975565b0390a461333d6133266105db6129f2565b976060835196879687528601526060850190612975565b90838203908401523395612975565b0390a4565b845162461bcd60e51b815260048101889052601e60248201527f43616e6e6f7420636f6d6d697420696e616374697665207265717565737400006044820152606490fd5b634e487b7160e01b83526021600452602483fd5b60405162461bcd60e51b815260206004820152601d60248201526000805160206146f18339815191526044820152606490fd5b60405162461bcd60e51b8152602060048201526015602482015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152606490fd5b6000915b8151831015613681576080806134338585612df7565b5101515161362357506134468383612df7565b515192602093846134578386612df7565b510151604095866134688588612df7565b5101519160606134788689612df7565b510151600b54909390613494906001600160a01b031615612fa8565b83156135e7576134a26129f2565b936134ac85612ff4565b9460039586811015613010576135b5576134cb90610348600554612be6565b946134d783858961431a565b6000528085528a600020906134ec8783614672565b600490818110156135a05760010361355d5750926000805160206146d18339815191529492600283896135569d9e9f999761354e9601558960005201855286600020336000528552866000205585805194859485528401523395830190612975565b0390a4612de8565b919061341d565b8c5162461bcd60e51b8152908101879052601e60248201527f43616e6e6f7420636f6d6d697420696e616374697665207265717565737400006044820152606490fd5b602182634e487b7160e01b6000525260246000fd5b8a5162461bcd60e51b815260048101869052601d60248201526000805160206146f18339815191526044820152606490fd5b885162461bcd60e51b8152600481018490526015602482015274092dcecc2d8d2c840e0e4deecd2c8cac840d0c2e6d605b1b6044820152606490fd5b9261367c8394613637836135569596612df7565b51519060206136468589612df7565b5101516040613655868a612df7565b510151906060613665878b612df7565b51015192613673878b612df7565b51015193613220565b612de8565b915050565b6000915b81518310156136815761369d8383612df7565b51519260206136ac8285612df7565b5101519360406136bc8386612df7565b51015160606136cb8487612df7565b5101519060806136db8588612df7565b510151600b549092906136f7906001600160a01b031615612fa8565b6137026105bb6129f2565b600381101561301057600103613a775761371d6105db6129f2565b92613729828a8761431a565b6000526003602052600260406000200184600052602052604060002033600052806020526040600020918254908115613a3c57604051602081019187835260408201523360601b60608201528c60748201526137b360d487518a609491613797818c6020868a019101612952565b8501918201528360b4918d838201520390810184520182612683565b519020036139f757846000526002602052604060002054156139ba57600085815260026020908152604080832054928555600954905163277166bf60e11b81523360048201526024810193909352919391849060449082906001600160a01b03165afa928315612a5c57600093613966575b509261391898999a9285613907937f3fad5d37ee1be2f58ff1735699121a8ead73c3b70d02fc06d07b0db29854d3b49660405193613862856125e6565b8452600160405160208101908582526020815261387e81612668565b519020910155600360018201916002810161389f8660405161075f816125e6565b51905583600052826020526138c085604060002060405190610785826125e6565b846000528360205260406000209051905501908154808414159182613927575b505061391f575b505051946040519384526020840152608060408401526080830190612975565b9260608201528033930390a4612de8565b919061368a565b5585386138e7565b9091506040600020916040519261393d846125e6565b54835260005260205260406000209060405191613959836125e6565b54809252511138806138e0565b90926020823d6020116139b2575b8161398160209383612683565b81010312610c74575051917f3fad5d37ee1be2f58ff1735699121a8ead73c3b70d02fc06d07b0db29854d3b4613825565b3d9150613974565b60405162461bcd60e51b8152602060048201526015602482015274149bdd5b99081a185cc81b9bc81cdb985c1cda1bdd605a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f52657665616c6564206461746120213d20636f6d6d69742068617368000000006044820152606490fd5b60405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081a185cda081c995d99585b606a1b6044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f43616e6e6f742072657665616c20696e20636f6d6d69742070686173650000006044820152606490fd5b9291926000604051613acd816125e6565b52600b546001600160a01b031680614047575b50613aec6105db6129f2565b82101561401057816000526002602052604060002093613b0a6129f2565b6003860154600954875460405163277166bf60e11b81526001600160a01b038781166004830152602482018390529099949093109693929091169190602089604481865afa988915612a5c57600099613fdb575b5060209060405199613b6f8b6125e6565b8a52602460405180958193630981b24d60e41b835260048301525afa908115612a5c57600091613fa5575b613bc6925060405191613bac836125e6565b8252600160405191613bbd836125e6565b01548152614098565b95604051613bd3816125e6565b600081529060005b8451811015613ec057613c0e613bf18287612df7565b51516020613bff8489612df7565b5101516040612e86858a612df7565b6000526003602052604060002090600382015480600052600283016020528560406000209103613e7b57613c4581613c6b94614359565b6001600160a01b038816600090815260208290526040902060010154613c705750612de8565b613bdb565b8815613d1357613c808288612df7565b515186887f6fb9765a6e4b0dd2aaedad44f9b165a2a64a53ce67a6ec812075faa9220d41bc613cdc6040613cc3886020613cba8288612df7565b51015195612df7565b5101516040519384526060806020860152840190612975565b600060408401526001600160a01b038d16929081900390a45b60018060a01b03881660005260205260006001604082200155612de8565b6001604060002001548b600383015491604051602081019084825260208152613d3b81612668565b51902003613e1857613d9091613d54613d899288614098565b906000604051613d63816125e6565b526000526001840160205260406000209060405191613d81836125e6565b5482526140cc565b80966131f1565b9486613d9c848a612df7565b5151917f6fb9765a6e4b0dd2aaedad44f9b165a2a64a53ce67a6ec812075faa9220d41bc8a613dfb6040613ddf896020613dd68287612df7565b51015194612df7565b5101519351936040519283526060806020850152830190612975565b60408201939093526001600160a01b038d169281900390a4613cf5565b5050613e248288612df7565b515186887f6fb9765a6e4b0dd2aaedad44f9b165a2a64a53ce67a6ec812075faa9220d41bc613e5e6040613cc3886020613cba8288612df7565b600060408401526001600160a01b038d16929081900390a4613cf5565b60405162461bcd60e51b815260206004820152601d60248201527f526574726965766520666f7220766f7465732073616d6520726f756e640000006044820152606490fd5b505095505050905082516000604051613ed8816125e6565b526000604051613ee7816125e6565b52613eef5750565b60095483516040516340c10f1960e01b81526001600160a01b03938416600482015260248101919091529160209183916044918391600091165af1908115612a5c57600091613f86575b5015613f4157565b60405162461bcd60e51b815260206004820152601c60248201527f566f74696e6720746f6b656e2069737375616e6365206661696c6564000000006044820152606490fd5b613f9f915060203d602011611687576116798183612683565b38613f39565b90506020823d602011613fd3575b81613fc060209383612683565b8101031261085857613bc6915190613b9a565b3d9150613fb3565b9098506020813d602011614008575b81613ff760209383612683565b810103126108585751976020613b5e565b3d9150613fea565b60405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081c9bdd5b991259608a1b6044820152606490fd5b33036140535738613ae0565b60405162461bcd60e51b815260206004820152601b60248201527f43616e206f6e6c792063616c6c2066726f6d206d6967726174656400000000006044820152606490fd5b670de0b6b3a7640000916140be9160006040516140b4816125e6565b5251905190612bfc565b046040519061321b826125e6565b60006040516140da816125e6565b5251670de0b6b3a76400008160001904811182151516612bd05761320e92519102612c0f565b9061410b929161431a565b906000918252600360205260409081832061413061412a6105db6129f2565b82614672565b600481101561423a576001810361417c57505082915161414f81612668565b601e81527f43757272656e7420766f74696e6720726f756e64206e6f7420656e6465640000602082015290565b600281036141be575080600260036141ad93015491828752016020526141a76001858720019161458b565b9061424e565b925160019490915061321b826125e6565b600314159050614201578291516141d481612668565b601d81527f5072696365206973207374696c6c20746f20626520766f746564206f6e000000602082015290565b82915161420d81612668565b601981527f507269636520776173206e657665722072657175657374656400000000000000602082015290565b634e487b7160e01b85526021600452602485fd5b919060009060409060008251614263816125e6565b5260648251614271816125e6565b6802b5e3af16b188000081526000845161428a816125e6565b5251049082519161429a836125e6565b82528251906142a8826125e6565b600187015480925251811192836142d6575b5050506000146142cf57506002600192015490565b6000925090565b61430e92935060028701546000528660205280600020908051916142f9836125e6565b5482525191614307836125e6565b82526140cc565b519051103880806142ba565b9190614353906143456040519384926020840196875260408401526060808401526080830190612975565b03601f198101835282612683565b51902090565b60049081810180549060001980831461458357600384019061438861437e835461458b565b600180990161424e565b93901561453f5786549682880197881161452a576143a588612b76565b90549060031b1c9560009687526143dc6114ae6143cf60209b60038d52848660408d200155612b76565b90549060031b1c92612b76565b905580548015614517578301906143f282612b76565b8582549160031b1b191690555555549383549560058186015495019260405195865282860152606060408601528383549361442c85612b3c565b9485606089015283811690816000146144cd5750600114614476575b505050505090807fb1f1bf5aec084730c2c09f66ae2099185eaf6f951ddc113a19aa886a9f5e71b7920390a3565b90809550528184205b8385106144b957505050508101608001817fb1f1bf5aec084730c2c09f66ae2099185eaf6f951ddc113a19aa886a9f5e71b7388080614448565b80548686016080015293820193810161447f565b92505050859450608092507fb1f1bf5aec084730c2c09f66ae2099185eaf6f951ddc113a19aa886a9f5e71b79593915060ff191682840152151560051b8201019192388080614448565b634e487b7160e01b875260318252602487fd5b601190634e487b7160e01b6000525260246000fd5b60405162461bcd60e51b8152602081890181905260248201527f43616e2774207265736f6c766520756e7265736f6c76656420726571756573746044820152606490fd5b505050505050565b90604080519261459a846125e6565b60008094528084526020600281528285205491821561465a576009548451630981b24d60e41b815260048101949094528290849060249082906001600160a01b03165afa92831561465057869361461f575b5061271c9495600280938693845196614604886125e6565b87528352522001915191614617836125e6565b548252614098565b9092508181813d8311614649575b6146378183612683565b81010312610a7957519161271c6145ec565b503d61462d565b84513d88823e3d90fd5b5050509091505161466a816125e6565b600019815290565b600381015490918161468657505050600090565b808210156146be575060026146ae9282600052016020526141a760016040600020019161458b565b50156146b957600290565b600190565b141590506146cb57600190565b60039056fe6beca723245953d9ed92ae4d320d4772838e841161bfff12c78ae4268df525eb43616e6e6f7420636f6d6d697420696e2072657665616c207068617365000000a264697066735822122056d79cc8478ed34f3a6a0e1247f17fca5a79ceee475f04bf72e1149cad5d1c2d64736f6c63430008100033",
  "devdoc": {
    "details": "Handles receiving and resolving price requests via a commit-reveal voting scheme.",
    "kind": "dev",
    "methods": {
      "batchCommit((bytes32,uint256,bytes,bytes32,bytes)[])": {
        "details": "Using `encryptedVote` is optional. If included then commitment is emitted in an event. Look at `project-root/common/Constants.js` for the tested maximum number of commitments that can fit in one transaction.",
        "params": {
          "commits": "struct to encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`."
        }
      },
      "batchCommit((bytes32,uint256,bytes32,bytes)[])": {
        "details": "Using `encryptedVote` is optional. If included then commitment is stored on chain. Look at `project-root/common/Constants.js` for the tested maximum number of commitments that can fit in one transaction.",
        "params": {
          "commits": "array of structs that encapsulate an `identifier`, `time`, `hash` and optional `encryptedVote`."
        }
      },
      "batchReveal((bytes32,uint256,int256,bytes,int256)[])": {
        "details": "For more info on reveals, review the comment for `revealVote`.",
        "params": {
          "reveals": "array of the Reveal struct which contains an identifier, time, price and salt."
        }
      },
      "batchReveal((bytes32,uint256,int256,int256)[])": {
        "details": "For more information on reveals, review the comment for `revealVote`.",
        "params": {
          "reveals": "array of the Reveal struct which contains an identifier, time, price and salt."
        }
      },
      "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)": {
        "details": "An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "encryptedVote": "offchain encrypted blob containing the voters amount, time and salt.",
          "hash": "keccak256 hash of the price you want to vote for and a `int256 salt`.",
          "identifier": "unique price pair identifier. Eg: BTC/USD price pair.",
          "time": "unix timestamp of for the price request."
        }
      },
      "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)": {
        "details": "An encrypted version of the vote is emitted in an event `EncryptedVote` to allow off-chain infrastructure to retrieve the commit. The contents of `encryptedVote` are never used on chain: it is purely for convenience.",
        "params": {
          "encryptedVote": "offchain encrypted blob containing the voters amount, time and salt.",
          "hash": "keccak256 hash of the price you want to vote for and a `int256 salt`.",
          "identifier": "unique price pair identifier. Eg: BTC/USD price pair.",
          "time": "unix timestamp of for the price request."
        }
      },
      "commitVote(bytes32,uint256,bytes,bytes32)": {
        "details": "`identifier`, `time` must correspond to a price request that's currently in the commit phase. Commits can be changed.Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior, voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then they can determine the vote pre-reveal.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "hash": "keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.",
          "identifier": "uniquely identifies the committed vote. EG BTC/USD price pair.",
          "time": "unix timestamp of the price being voted on."
        }
      },
      "commitVote(bytes32,uint256,bytes32)": {
        "details": "`identifier`, `time` must correspond to a price request that's currently in the commit phase. Commits can be changed.Since transaction data is public, the salt will be revealed with the vote. While this is the system’s expected behavior, voters should never reuse salts. If someone else is able to guess the voted price and knows that a salt will be reused, then they can determine the vote pre-reveal.",
        "params": {
          "hash": "keccak256 hash of the `price`, `salt`, voter `address`, `time`, current `roundId`, and `identifier`.",
          "identifier": "uniquely identifies the committed vote. EG BTC/USD price pair.",
          "time": "unix timestamp of the price being voted on."
        }
      },
      "constructor": {
        "params": {
          "_finder": "keeps track of all contracts within the system based on their interfaceName.",
          "_gatPercentage": "of the total token supply that must be used in a vote to create a valid price resolution.",
          "_inflationRate": "percentage inflation per round used to increase token supply of correct voters.",
          "_phaseLength": "length of the commit and reveal phases in seconds.",
          "_rewardsExpirationTimeout": "timeout, in seconds, within which rewards must be claimed.",
          "_timerAddress": "Contract that stores the current time in a testing environment. Must be set to 0x0 for production environments that use live time.",
          "_votingToken": "address of the UMA token contract used to commit votes."
        }
      },
      "getCurrentRoundId()": {
        "returns": {
          "_0": "uint256 representing the unique round ID."
        }
      },
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "getPendingRequests()": {
        "returns": {
          "_0": "pendingRequests array containing identifiers of type `PendingRequest`. and timestamps for all pending requests."
        }
      },
      "getPrice(bytes32,uint256)": {
        "details": "If the price is not available, the method reverts.",
        "params": {
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        },
        "returns": {
          "_0": "int256 representing the resolved price for the given identifier and timestamp."
        }
      },
      "getPrice(bytes32,uint256,bytes)": {
        "details": "If the price is not available, the method reverts.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp of for the price request."
        },
        "returns": {
          "_0": "int256 representing the resolved price for the given identifier and timestamp."
        }
      },
      "getPriceRequestStatuses((bytes32,uint256,bytes)[])": {
        "details": "If the status for a particular request is NotRequested, the lastVotingRound will always be 0.",
        "params": {
          "requests": "array of type PendingRequest which includes an identifier and timestamp for each request."
        },
        "returns": {
          "_0": "requestStates a list, in the same order as the input list, giving the status of each of the specified price requests."
        }
      },
      "getVotePhase()": {
        "returns": {
          "_0": "Phase to indicate the current phase. Either { Commit, Reveal, NUM_PHASES_PLACEHOLDER }."
        }
      },
      "hasPrice(bytes32,uint256)": {
        "details": "Time must be in the past and the identifier must be supported.",
        "params": {
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        },
        "returns": {
          "_0": "bool if the DVM has resolved to a price for the given identifier and timestamp."
        }
      },
      "hasPrice(bytes32,uint256,bytes)": {
        "details": "Time must be in the past and the identifier must be supported.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp of for the price request."
        },
        "returns": {
          "_0": "_hasPrice bool if the DVM has resolved to a price for the given identifier and timestamp."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "requestPrice(bytes32,uint256)": {
        "details": "Time must be in the past and the identifier must be supported.",
        "params": {
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        }
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "details": "Time must be in the past and the identifier must be supported. The length of the ancillary data is limited such that this method abides by the EVM transaction gas limit.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.",
          "time": "unix timestamp for the price request."
        }
      },
      "retrieveRewards(address,uint256,(bytes32,uint256)[])": {
        "details": "Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold (not expired).",
        "params": {
          "roundId": "the round from which voting rewards will be retrieved from.",
          "toRetrieve": "array of PendingRequests which rewards are retrieved from.",
          "voterAddress": "voter for which rewards will be retrieved. Does not have to be the caller."
        },
        "returns": {
          "_0": "total amount of rewards returned to the voter."
        }
      },
      "retrieveRewards(address,uint256,(bytes32,uint256,bytes)[])": {
        "details": "Can only retrieve rewards if calling for a valid round and if the call is done within the timeout threshold (not expired). Note that a named return value is used here to avoid a stack to deep error.",
        "params": {
          "roundId": "the round from which voting rewards will be retrieved from.",
          "toRetrieve": "array of PendingRequests which rewards are retrieved from.",
          "voterAddress": "voter for which rewards will be retrieved. Does not have to be the caller."
        },
        "returns": {
          "totalRewardToIssue": "total amount of rewards returned to the voter."
        }
      },
      "revealVote(bytes32,uint256,int256,bytes,int256)": {
        "details": "The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash` that `commitVote()` was called with. Only the committer can reveal their vote.",
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "identifier": "voted on in the commit phase. EG BTC/USD price pair.",
          "price": "voted on during the commit phase.",
          "salt": "value used to hide the commitment price during the commit phase.",
          "time": "specifies the unix timestamp of the price being voted on."
        }
      },
      "revealVote(bytes32,uint256,int256,int256)": {
        "details": "The revealed `price`, `salt`, `address`, `time`, `roundId`, and `identifier`, must hash to the latest `hash` that `commitVote()` was called with. Only the committer can reveal their vote.",
        "params": {
          "identifier": "voted on in the commit phase. EG BTC/USD price pair.",
          "price": "voted on during the commit phase.",
          "salt": "value used to hide the commitment price during the commit phase.",
          "time": "specifies the unix timestamp of the price is being voted on."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      },
      "setGatPercentage((uint256))": {
        "details": "This method is public because calldata structs are not currently supported by solidity.",
        "params": {
          "newGatPercentage": "sets the next round's Gat percentage."
        }
      },
      "setInflationRate((uint256))": {
        "details": "This method is public because calldata structs are not currently supported by solidity.",
        "params": {
          "newInflationRate": "sets the next round's inflation rate."
        }
      },
      "setMigrated(address)": {
        "details": "Can only be called by the contract owner.",
        "params": {
          "newVotingAddress": "the newly migrated contract address."
        }
      },
      "setRewardsExpirationTimeout(uint256)": {
        "details": "This change only applies to rounds that have not yet begun.",
        "params": {
          "NewRewardsExpirationTimeout": "how long a caller can wait before choosing to withdraw their rewards."
        }
      },
      "snapshotCurrentRound(bytes)": {
        "details": "This function can be called multiple times, but only the first call per round into this function or `revealVote` will create the round snapshot. Any later calls will be a no-op. Will revert unless called during reveal period.",
        "params": {
          "signature": "signature required to prove caller is an EOA to prevent flash loans from being included in the snapshot."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Voting system for Oracle.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchCommit((bytes32,uint256,bytes,bytes32,bytes)[])": {
        "notice": "Submit a batch of commits in a single transaction."
      },
      "batchCommit((bytes32,uint256,bytes32,bytes)[])": {
        "notice": "Submit a batch of commits in a single transaction."
      },
      "batchReveal((bytes32,uint256,int256,bytes,int256)[])": {
        "notice": "Reveal multiple votes in a single transaction. Look at `project-root/common/Constants.js` for the tested maximum number of reveals. that can fit in one transaction."
      },
      "batchReveal((bytes32,uint256,int256,int256)[])": {
        "notice": "Reveal multiple votes in a single transaction. Look at `project-root/common/Constants.js` for the tested maximum number of reveals. that can fit in one transaction."
      },
      "commitAndEmitEncryptedVote(bytes32,uint256,bytes,bytes32,bytes)": {
        "notice": "commits a vote and logs an event with a data blob, typically an encrypted version of the vote"
      },
      "commitAndEmitEncryptedVote(bytes32,uint256,bytes32,bytes)": {
        "notice": "commits a vote and logs an event with a data blob, typically an encrypted version of the vote"
      },
      "commitVote(bytes32,uint256,bytes,bytes32)": {
        "notice": "Commit a vote for a price request for `identifier` at `time`."
      },
      "commitVote(bytes32,uint256,bytes32)": {
        "notice": "Commit a vote for a price request for `identifier` at `time`."
      },
      "constructor": {
        "notice": "Construct the Voting contract."
      },
      "getCurrentRoundId()": {
        "notice": "Returns the current round ID, as a function of the current time."
      },
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "getPendingRequests()": {
        "notice": "Gets the queries that are being voted on this round."
      },
      "getPrice(bytes32,uint256)": {
        "notice": "Gets the price for `identifier` and `time` if it has already been requested and resolved."
      },
      "getPrice(bytes32,uint256,bytes)": {
        "notice": "Gets the price for `identifier` and `time` if it has already been requested and resolved."
      },
      "getPriceRequestStatuses((bytes32,uint256,bytes)[])": {
        "notice": "Gets the status of a list of price requests, identified by their identifier and time."
      },
      "getVotePhase()": {
        "notice": "Returns the current voting phase, as a function of the current time."
      },
      "hasPrice(bytes32,uint256)": {
        "notice": "Whether the price for `identifier` and `time` is available."
      },
      "hasPrice(bytes32,uint256,bytes)": {
        "notice": "Whether the price for `identifier` and `time` is available."
      },
      "requestPrice(bytes32,uint256)": {
        "notice": "Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair."
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "notice": "Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair."
      },
      "retrieveRewards(address,uint256,(bytes32,uint256)[])": {
        "notice": "Retrieves rewards owed for a set of resolved price requests."
      },
      "retrieveRewards(address,uint256,(bytes32,uint256,bytes)[])": {
        "notice": "Retrieves rewards owed for a set of resolved price requests."
      },
      "revealVote(bytes32,uint256,int256,bytes,int256)": {
        "notice": "Reveal a previously committed vote for `identifier` at `time`."
      },
      "revealVote(bytes32,uint256,int256,int256)": {
        "notice": "Reveal a previously committed vote for `identifier` at `time`."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      },
      "setGatPercentage((uint256))": {
        "notice": "Resets the Gat percentage. Note: this change only applies to rounds that have not yet begun."
      },
      "setInflationRate((uint256))": {
        "notice": "Resets the inflation rate. Note: this change only applies to rounds that have not yet begun."
      },
      "setMigrated(address)": {
        "notice": "Disables this Voting contract in favor of the migrated one."
      },
      "setRewardsExpirationTimeout(uint256)": {
        "notice": "Resets the rewards expiration timeout."
      },
      "snapshotCurrentRound(bytes)": {
        "notice": "Snapshot the current round's token balances and lock in the inflation rate and GAT."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17751,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "timerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4304,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 30370,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "rounds",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Round)30354_storage)"
      },
      {
        "astId": 30375,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "priceRequests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(PriceRequest)30329_storage)"
      },
      {
        "astId": 30378,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "pendingPriceRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 30381,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "voteTiming",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(Data)30156_storage"
      },
      {
        "astId": 30384,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "gatPercentage",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(Unsigned)14666_storage"
      },
      {
        "astId": 30387,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "inflationRate",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(Unsigned)14666_storage"
      },
      {
        "astId": 30389,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "rewardsExpirationTimeout",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 30392,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "votingToken",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(VotingToken)32876"
      },
      {
        "astId": 30395,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "finder",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(FinderInterface)36753"
      },
      {
        "astId": 30397,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "migratedAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 30418,
        "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
        "label": "snapshotMessageHash",
        "offset": 0,
        "slot": "12",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VotingToken)32876": {
        "encoding": "inplace",
        "label": "contract VotingToken",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(VoteSubmission)30343_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Voting.VoteSubmission)",
        "numberOfBytes": "32",
        "value": "t_struct(VoteSubmission)30343_storage"
      },
      "t_mapping(t_bytes32,t_struct(PriceRequest)30329_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Voting.PriceRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(PriceRequest)30329_storage"
      },
      "t_mapping(t_int256,t_struct(Unsigned)14666_storage)": {
        "encoding": "mapping",
        "key": "t_int256",
        "label": "mapping(int256 => struct FixedPoint.Unsigned)",
        "numberOfBytes": "32",
        "value": "t_struct(Unsigned)14666_storage"
      },
      "t_mapping(t_uint256,t_struct(Round)30354_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)30354_storage"
      },
      "t_mapping(t_uint256,t_struct(VoteInstance)30338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Voting.VoteInstance)",
        "numberOfBytes": "32",
        "value": "t_struct(VoteInstance)30338_storage"
      },
      "t_struct(Data)28507_storage": {
        "encoding": "inplace",
        "label": "struct ResultComputation.Data",
        "members": [
          {
            "astId": 28501,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "voteFrequency",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_int256,t_struct(Unsigned)14666_storage)"
          },
          {
            "astId": 28504,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "totalVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Unsigned)14666_storage"
          },
          {
            "astId": 28506,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "currentMode",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Data)30156_storage": {
        "encoding": "inplace",
        "label": "struct VoteTiming.Data",
        "members": [
          {
            "astId": 30155,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "phaseLength",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(PriceRequest)30329_storage": {
        "encoding": "inplace",
        "label": "struct Voting.PriceRequest",
        "members": [
          {
            "astId": 30315,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "identifier",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 30317,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "time",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 30322,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "voteInstances",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_struct(VoteInstance)30338_storage)"
          },
          {
            "astId": 30324,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "lastVotingRound",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 30326,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "index",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 30328,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Round)30354_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Round",
        "members": [
          {
            "astId": 30345,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "snapshotId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 30348,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "inflationRate",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Unsigned)14666_storage"
          },
          {
            "astId": 30351,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "gatPercentage",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Unsigned)14666_storage"
          },
          {
            "astId": 30353,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "rewardsExpirationTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Unsigned)14666_storage": {
        "encoding": "inplace",
        "label": "struct FixedPoint.Unsigned",
        "members": [
          {
            "astId": 14665,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "rawValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(VoteInstance)30338_storage": {
        "encoding": "inplace",
        "label": "struct Voting.VoteInstance",
        "members": [
          {
            "astId": 30334,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "voteSubmissions",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_struct(VoteSubmission)30343_storage)"
          },
          {
            "astId": 30337,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "resultComputation",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(Data)28507_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VoteSubmission)30343_storage": {
        "encoding": "inplace",
        "label": "struct Voting.VoteSubmission",
        "members": [
          {
            "astId": 30340,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "commit",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 30342,
            "contract": "contracts/data-verification-mechanism/implementation/Voting.sol:Voting",
            "label": "revealHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}