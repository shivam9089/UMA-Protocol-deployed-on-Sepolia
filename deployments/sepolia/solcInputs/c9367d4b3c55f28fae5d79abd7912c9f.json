{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/external/chainbridge/Bridge.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./interfaces/IDepositExecute.sol\";\r\nimport \"./interfaces/IBridge.sol\";\r\nimport \"./interfaces/IERCHandler.sol\";\r\nimport \"./interfaces/IGenericHandler.sol\";\r\n\r\n/**\r\n    @title Facilitates deposits, creation and votiing of deposit proposals, and deposit executions.\r\n    @author ChainSafe Systems.\r\n */\r\ncontract Bridge is Pausable, AccessControl {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public _chainID;\r\n    uint256 public _relayerThreshold;\r\n    uint256 public _totalRelayers;\r\n    uint256 public _totalProposals;\r\n    uint256 public _fee;\r\n    uint256 public _expiry;\r\n\r\n    enum Vote { No, Yes }\r\n\r\n    enum ProposalStatus { Inactive, Active, Passed, Executed, Cancelled }\r\n\r\n    struct Proposal {\r\n        bytes32 _resourceID;\r\n        bytes32 _dataHash;\r\n        address[] _yesVotes;\r\n        address[] _noVotes;\r\n        ProposalStatus _status;\r\n        uint256 _proposedBlock;\r\n    }\r\n\r\n    // destinationChainID => number of deposits\r\n    mapping(uint256 => uint64) public _depositCounts;\r\n    // resourceID => handler address\r\n    mapping(bytes32 => address) public _resourceIDToHandlerAddress;\r\n    // depositNonce => destinationChainID => bytes\r\n    mapping(uint64 => mapping(uint256 => bytes)) public _depositRecords;\r\n    // destinationChainID + depositNonce => dataHash => Proposal\r\n    mapping(uint256 => mapping(bytes32 => Proposal)) public _proposals;\r\n    // destinationChainID + depositNonce => dataHash => relayerAddress => bool\r\n    mapping(uint256 => mapping(bytes32 => mapping(address => bool))) public _hasVotedOnProposal;\r\n\r\n    event RelayerThresholdChanged(uint256 indexed newThreshold);\r\n    event RelayerAdded(address indexed relayer);\r\n    event RelayerRemoved(address indexed relayer);\r\n    event Deposit(uint256 indexed destinationChainID, bytes32 indexed resourceID, uint64 indexed depositNonce);\r\n    event ProposalEvent(\r\n        uint256 indexed originChainID,\r\n        uint64 indexed depositNonce,\r\n        ProposalStatus indexed status,\r\n        bytes32 resourceID,\r\n        bytes32 dataHash\r\n    );\r\n\r\n    event ProposalVote(\r\n        uint256 indexed originChainID,\r\n        uint64 indexed depositNonce,\r\n        ProposalStatus indexed status,\r\n        bytes32 resourceID\r\n    );\r\n\r\n    bytes32 public constant RELAYER_ROLE = keccak256(\"RELAYER_ROLE\");\r\n\r\n    modifier onlyAdmin() {\r\n        _onlyAdmin();\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdminOrRelayer() {\r\n        _onlyAdminOrRelayer();\r\n        _;\r\n    }\r\n\r\n    modifier onlyRelayers() {\r\n        _onlyRelayers();\r\n        _;\r\n    }\r\n\r\n    function _onlyAdminOrRelayer() private view {\r\n        require(\r\n            hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || hasRole(RELAYER_ROLE, msg.sender),\r\n            \"sender is not relayer or admin\"\r\n        );\r\n    }\r\n\r\n    function _onlyAdmin() private view {\r\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \"sender doesn't have admin role\");\r\n    }\r\n\r\n    function _onlyRelayers() private view {\r\n        require(hasRole(RELAYER_ROLE, msg.sender), \"sender doesn't have relayer role\");\r\n    }\r\n\r\n    /**\r\n        @notice Initializes Bridge, creates and grants {msg.sender} the admin role,\r\n        creates and grants {initialRelayers} the relayer role.\r\n        @param chainID ID of chain the Bridge contract exists on.\r\n        @param initialRelayers Addresses that should be initially granted the relayer role.\r\n        @param initialRelayerThreshold Number of votes needed for a deposit proposal to be considered passed.\r\n     */\r\n    constructor(\r\n        uint256 chainID,\r\n        address[] memory initialRelayers,\r\n        uint256 initialRelayerThreshold,\r\n        uint256 fee,\r\n        uint256 expiry\r\n    ) {\r\n        _chainID = chainID;\r\n        _relayerThreshold = initialRelayerThreshold;\r\n        _fee = fee;\r\n        _expiry = expiry;\r\n\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setRoleAdmin(RELAYER_ROLE, DEFAULT_ADMIN_ROLE);\r\n\r\n        for (uint256 i; i < initialRelayers.length; i++) {\r\n            grantRole(RELAYER_ROLE, initialRelayers[i]);\r\n            _totalRelayers++;\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Returns true if {relayer} has the relayer role.\r\n        @param relayer Address to check.\r\n     */\r\n    function isRelayer(address relayer) external view returns (bool) {\r\n        return hasRole(RELAYER_ROLE, relayer);\r\n    }\r\n\r\n    /**\r\n        @notice Removes admin role from {msg.sender} and grants it to {newAdmin}.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param newAdmin Address that admin role will be granted to.\r\n     */\r\n    function renounceAdmin(address newAdmin) external onlyAdmin {\r\n        grantRole(DEFAULT_ADMIN_ROLE, newAdmin);\r\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n    }\r\n\r\n    /**\r\n        @notice Pauses deposits, proposal creation and voting, and deposit executions.\r\n        @notice Only callable by an address that currently has the admin role.\r\n     */\r\n    function adminPauseTransfers() external onlyAdmin {\r\n        _pause();\r\n    }\r\n\r\n    /**\r\n        @notice Unpauses deposits, proposal creation and voting, and deposit executions.\r\n        @notice Only callable by an address that currently has the admin role.\r\n     */\r\n    function adminUnpauseTransfers() external onlyAdmin {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n        @notice Modifies the number of votes required for a proposal to be considered passed.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param newThreshold Value {_relayerThreshold} will be changed to.\r\n        @notice Emits {RelayerThresholdChanged} event.\r\n     */\r\n    function adminChangeRelayerThreshold(uint256 newThreshold) external onlyAdmin {\r\n        _relayerThreshold = newThreshold;\r\n        emit RelayerThresholdChanged(newThreshold);\r\n    }\r\n\r\n    /**\r\n        @notice Grants {relayerAddress} the relayer role and increases {_totalRelayer} count.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param relayerAddress Address of relayer to be added.\r\n        @notice Emits {RelayerAdded} event.\r\n     */\r\n    function adminAddRelayer(address relayerAddress) external onlyAdmin {\r\n        require(!hasRole(RELAYER_ROLE, relayerAddress), \"addr already has relayer role!\");\r\n        grantRole(RELAYER_ROLE, relayerAddress);\r\n        emit RelayerAdded(relayerAddress);\r\n        _totalRelayers++;\r\n    }\r\n\r\n    /**\r\n        @notice Removes relayer role for {relayerAddress} and decreases {_totalRelayer} count.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param relayerAddress Address of relayer to be removed.\r\n        @notice Emits {RelayerRemoved} event.\r\n     */\r\n    function adminRemoveRelayer(address relayerAddress) external onlyAdmin {\r\n        require(hasRole(RELAYER_ROLE, relayerAddress), \"addr doesn't have relayer role!\");\r\n        revokeRole(RELAYER_ROLE, relayerAddress);\r\n        emit RelayerRemoved(relayerAddress);\r\n        _totalRelayers--;\r\n    }\r\n\r\n    /**\r\n        @notice Sets a new resource for handler contracts that use the IERCHandler interface,\r\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param handlerAddress Address of handler resource will be set for.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n    function adminSetResource(\r\n        address handlerAddress,\r\n        bytes32 resourceID,\r\n        address tokenAddress\r\n    ) external onlyAdmin {\r\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n        handler.setResource(resourceID, tokenAddress);\r\n    }\r\n\r\n    /**\r\n        @notice Sets a new resource for handler contracts that use the IGenericHandler interface,\r\n        and maps the {handlerAddress} to {resourceID} in {_resourceIDToHandlerAddress}.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param handlerAddress Address of handler resource will be set for.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n    function adminSetGenericResource(\r\n        address handlerAddress,\r\n        bytes32 resourceID,\r\n        address contractAddress,\r\n        bytes4 depositFunctionSig,\r\n        bytes4 executeFunctionSig\r\n    ) external onlyAdmin {\r\n        _resourceIDToHandlerAddress[resourceID] = handlerAddress;\r\n        IGenericHandler handler = IGenericHandler(handlerAddress);\r\n        handler.setResource(resourceID, contractAddress, depositFunctionSig, executeFunctionSig);\r\n    }\r\n\r\n    /**\r\n        @notice Sets a resource as burnable for handler contracts that use the IERCHandler interface.\r\n        @notice Only callable by an address that currently has the admin role.\r\n        @param handlerAddress Address of handler resource will be set for.\r\n        @param tokenAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n    function adminSetBurnable(address handlerAddress, address tokenAddress) external onlyAdmin {\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n        handler.setBurnable(tokenAddress);\r\n    }\r\n\r\n    /**\r\n        @notice Returns a proposal.\r\n        @param originChainID Chain ID deposit originated from.\r\n        @param depositNonce ID of proposal generated by proposal's origin Bridge contract.\r\n        @param dataHash Hash of data to be provided when deposit proposal is executed.\r\n        @return Proposal which consists of:\r\n        - _dataHash Hash of data to be provided when deposit proposal is executed.\r\n        - _yesVotes Number of votes in favor of proposal.\r\n        - _noVotes Number of votes against proposal.\r\n        - _status Current status of proposal.\r\n     */\r\n    function getProposal(\r\n        uint256 originChainID,\r\n        uint64 depositNonce,\r\n        bytes32 dataHash\r\n    ) external view returns (Proposal memory) {\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(originChainID);\r\n        return _proposals[nonceAndID][dataHash];\r\n    }\r\n\r\n    /**\r\n        @notice Changes deposit fee.\r\n        @notice Only callable by admin.\r\n        @param newFee Value {_fee} will be updated to.\r\n     */\r\n    function adminChangeFee(uint256 newFee) external onlyAdmin {\r\n        require(_fee != newFee, \"Current fee is equal to new fee\");\r\n        _fee = newFee;\r\n    }\r\n\r\n    /**\r\n        @notice Used to manually withdraw funds from ERC safes.\r\n        @param handlerAddress Address of handler to withdraw from.\r\n        @param tokenAddress Address of token to withdraw.\r\n        @param recipient Address to withdraw tokens to.\r\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to withdraw.\r\n     */\r\n    function adminWithdraw(\r\n        address handlerAddress,\r\n        address tokenAddress,\r\n        address recipient,\r\n        uint256 amountOrTokenID\r\n    ) external onlyAdmin {\r\n        IERCHandler handler = IERCHandler(handlerAddress);\r\n        handler.withdraw(tokenAddress, recipient, amountOrTokenID);\r\n    }\r\n\r\n    /**\r\n        @notice Initiates a transfer using a specified handler contract.\r\n        @notice Only callable when Bridge is not paused.\r\n        @param destinationChainID ID of chain deposit will be bridged to.\r\n        @param resourceID ResourceID used to find address of handler to be used for deposit.\r\n        @param data Additional data to be passed to specified handler.\r\n        @notice Emits {Deposit} event.\r\n     */\r\n    function deposit(\r\n        uint256 destinationChainID,\r\n        bytes32 resourceID,\r\n        bytes calldata data\r\n    ) external payable whenNotPaused {\r\n        require(msg.value == _fee, \"Incorrect fee supplied\");\r\n\r\n        address handler = _resourceIDToHandlerAddress[resourceID];\r\n        require(handler != address(0), \"resourceID not mapped to handler\");\r\n\r\n        uint64 depositNonce = ++_depositCounts[destinationChainID];\r\n        _depositRecords[depositNonce][destinationChainID] = data;\r\n\r\n        IDepositExecute depositHandler = IDepositExecute(handler);\r\n        depositHandler.deposit(resourceID, destinationChainID, depositNonce, msg.sender, data);\r\n\r\n        emit Deposit(destinationChainID, resourceID, depositNonce);\r\n    }\r\n\r\n    /**\r\n        @notice When called, {msg.sender} will be marked as voting in favor of proposal.\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n        @param chainID ID of chain deposit originated from.\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n        @param dataHash Hash of data provided when deposit was made.\r\n        @notice Proposal must not have already been passed or executed.\r\n        @notice {msg.sender} must not have already voted on proposal.\r\n        @notice Emits {ProposalEvent} event with status indicating the proposal status.\r\n        @notice Emits {ProposalVote} event.\r\n     */\r\n    function voteProposal(\r\n        uint256 chainID,\r\n        uint64 depositNonce,\r\n        bytes32 resourceID,\r\n        bytes32 dataHash\r\n    ) external onlyRelayers whenNotPaused {\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\r\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\r\n\r\n        require(_resourceIDToHandlerAddress[resourceID] != address(0), \"no handler for resourceID\");\r\n        require(uint256(proposal._status) <= 1, \"proposal already passed/executed/cancelled\");\r\n        require(!_hasVotedOnProposal[nonceAndID][dataHash][msg.sender], \"relayer already voted\");\r\n\r\n        if (uint256(proposal._status) == 0) {\r\n            ++_totalProposals;\r\n            _proposals[nonceAndID][dataHash] = Proposal({\r\n                _resourceID: resourceID,\r\n                _dataHash: dataHash,\r\n                _yesVotes: new address[](1),\r\n                _noVotes: new address[](0),\r\n                _status: ProposalStatus.Active,\r\n                _proposedBlock: block.number\r\n            });\r\n\r\n            proposal._yesVotes[0] = msg.sender;\r\n            emit ProposalEvent(chainID, depositNonce, ProposalStatus.Active, resourceID, dataHash);\r\n        } else {\r\n            if (block.number.sub(proposal._proposedBlock) > _expiry) {\r\n                // if the number of blocks that has passed since this proposal was\r\n                // submitted exceeds the expiry threshold set, cancel the proposal\r\n                proposal._status = ProposalStatus.Cancelled;\r\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, resourceID, dataHash);\r\n            } else {\r\n                require(dataHash == proposal._dataHash, \"datahash mismatch\");\r\n                proposal._yesVotes.push(msg.sender);\r\n            }\r\n        }\r\n        if (proposal._status != ProposalStatus.Cancelled) {\r\n            _hasVotedOnProposal[nonceAndID][dataHash][msg.sender] = true;\r\n            emit ProposalVote(chainID, depositNonce, proposal._status, resourceID);\r\n\r\n            // If _depositThreshold is set to 1, then auto finalize\r\n            // or if _relayerThreshold has been exceeded\r\n            if (_relayerThreshold <= 1 || proposal._yesVotes.length >= _relayerThreshold) {\r\n                proposal._status = ProposalStatus.Passed;\r\n\r\n                emit ProposalEvent(chainID, depositNonce, ProposalStatus.Passed, resourceID, dataHash);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n        @param chainID ID of chain deposit originated from.\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n        @param dataHash Hash of data originally provided when deposit was made.\r\n        @notice Proposal must be past expiry threshold.\r\n        @notice Emits {ProposalEvent} event with status {Cancelled}.\r\n     */\r\n    function cancelProposal(\r\n        uint256 chainID,\r\n        uint64 depositNonce,\r\n        bytes32 dataHash\r\n    ) public onlyAdminOrRelayer {\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\r\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\r\n\r\n        require(proposal._status != ProposalStatus.Cancelled, \"Proposal already cancelled\");\r\n        require(block.number.sub(proposal._proposedBlock) > _expiry, \"Proposal not at expiry threshold\");\r\n\r\n        proposal._status = ProposalStatus.Cancelled;\r\n        emit ProposalEvent(chainID, depositNonce, ProposalStatus.Cancelled, proposal._resourceID, proposal._dataHash);\r\n    }\r\n\r\n    /**\r\n        @notice Executes a deposit proposal that is considered passed using a specified handler contract.\r\n        @notice Only callable by relayers when Bridge is not paused.\r\n        @param chainID ID of chain deposit originated from.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param depositNonce ID of deposited generated by origin Bridge contract.\r\n        @param data Data originally provided when deposit was made.\r\n        @notice Proposal must have Passed status.\r\n        @notice Hash of {data} must equal proposal's {dataHash}.\r\n        @notice Emits {ProposalEvent} event with status {Executed}.\r\n     */\r\n    function executeProposal(\r\n        uint256 chainID,\r\n        uint64 depositNonce,\r\n        bytes calldata data,\r\n        bytes32 resourceID\r\n    ) external onlyRelayers whenNotPaused {\r\n        address handler = _resourceIDToHandlerAddress[resourceID];\r\n        uint72 nonceAndID = (uint72(depositNonce) << 8) | uint72(chainID);\r\n        bytes32 dataHash = keccak256(abi.encodePacked(handler, data));\r\n        Proposal storage proposal = _proposals[nonceAndID][dataHash];\r\n\r\n        require(proposal._status != ProposalStatus.Inactive, \"proposal is not active\");\r\n        require(proposal._status == ProposalStatus.Passed, \"proposal already transferred\");\r\n        require(dataHash == proposal._dataHash, \"data doesn't match datahash\");\r\n\r\n        proposal._status = ProposalStatus.Executed;\r\n\r\n        IDepositExecute depositHandler = IDepositExecute(_resourceIDToHandlerAddress[proposal._resourceID]);\r\n        depositHandler.executeProposal(proposal._resourceID, data);\r\n\r\n        emit ProposalEvent(chainID, depositNonce, proposal._status, proposal._resourceID, proposal._dataHash);\r\n    }\r\n\r\n    /**\r\n        @notice Transfers eth in the contract to the specified addresses. The parameters addrs and amounts are mapped 1-1.\r\n        This means that the address at index 0 for addrs will receive the amount (in WEI) from amounts at index 0.\r\n        @param addrs Array of addresses to transfer {amounts} to.\r\n        @param amounts Array of amonuts to transfer to {addrs}.\r\n     */\r\n    function transferFunds(address payable[] calldata addrs, uint256[] calldata amounts) external onlyAdmin {\r\n        for (uint256 i = 0; i < addrs.length; i++) {\r\n            addrs[i].transfer(amounts[i]);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/external/chainbridge/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    @title Interface for Bridge contract.\r\n    @author ChainSafe Systems.\r\n */\r\ninterface IBridge {\r\n    /**\r\n        @notice Exposing getter for {_chainID} instead of forcing the use of call.\r\n        @return uint8 The {_chainID} that is currently set for the Bridge contract.\r\n     */\r\n    function _chainID() external returns (uint8);\r\n\r\n    function deposit(\r\n        uint8 destinationChainID,\r\n        bytes32 resourceID,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n"
    },
    "contracts/external/chainbridge/interfaces/IDepositExecute.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    @title Interface for handler contracts that support deposits and deposit executions.\r\n    @author ChainSafe Systems.\r\n */\r\ninterface IDepositExecute {\r\n    /**\r\n        @notice It is intended that deposit are made using the Bridge contract.\r\n        @param destinationChainID Chain ID deposit is expected to be bridged to.\r\n        @param depositNonce This value is generated as an ID by the Bridge contract.\r\n        @param depositer Address of account making the deposit in the Bridge contract.\r\n        @param data Consists of additional data needed for a specific deposit.\r\n     */\r\n    function deposit(\r\n        bytes32 resourceID,\r\n        uint256 destinationChainID,\r\n        uint64 depositNonce,\r\n        address depositer,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n        @notice It is intended that proposals are executed by the Bridge contract.\r\n        @param data Consists of additional data needed for a specific deposit execution.\r\n     */\r\n    function executeProposal(bytes32 resourceID, bytes calldata data) external;\r\n}\r\n"
    },
    "contracts/external/chainbridge/interfaces/IERCHandler.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    @title Interface to be used with handlers that support ERC20s and ERC721s.\r\n    @author ChainSafe Systems.\r\n */\r\ninterface IERCHandler {\r\n    /**\r\n        @notice Correlates {resourceID} with {contractAddress}.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n     */\r\n    function setResource(bytes32 resourceID, address contractAddress) external;\r\n\r\n    /**\r\n        @notice Marks {contractAddress} as mintable/burnable.\r\n        @param contractAddress Address of contract to be used when making or executing deposits.\r\n     */\r\n    function setBurnable(address contractAddress) external;\r\n\r\n    /**\r\n        @notice Used to manually release funds from ERC safes.\r\n        @param tokenAddress Address of token contract to release.\r\n        @param recipient Address to release tokens to.\r\n        @param amountOrTokenID Either the amount of ERC20 tokens or the ERC721 token ID to release.\r\n     */\r\n    function withdraw(\r\n        address tokenAddress,\r\n        address recipient,\r\n        uint256 amountOrTokenID\r\n    ) external;\r\n}\r\n"
    },
    "contracts/external/chainbridge/interfaces/IGenericHandler.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n    @title Interface for handler that handles generic deposits and deposit executions.\r\n    @dev Copied directly from here: https://github.com/ChainSafe/chainbridge-solidity/releases/tag/v1.0.0.\r\n    @author ChainSafe Systems.\r\n */\r\ninterface IGenericHandler {\r\n    /**\r\n        @notice Correlates {resourceID} with {contractAddress}, {depositFunctionSig}, and {executeFunctionSig}.\r\n        @param resourceID ResourceID to be used when making deposits.\r\n        @param contractAddress Address of contract to be called when a deposit is made and a deposited is executed.\r\n        @param depositFunctionSig Function signature of method to be called in {contractAddress} when a deposit is made.\r\n        @param executeFunctionSig Function signature of method to be called in {contractAddress} when a deposit is executed.\r\n     */\r\n    function setResource(\r\n        bytes32 resourceID,\r\n        address contractAddress,\r\n        bytes4 depositFunctionSig,\r\n        bytes4 executeFunctionSig\r\n    ) external;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}