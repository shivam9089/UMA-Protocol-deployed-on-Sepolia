{
  "address": "0x50cb0f7Fdd27030Fa9fB8cE1fb4682958FE32e75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        }
      ],
      "name": "PriceRequestAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestHash",
          "type": "bytes32"
        }
      ],
      "name": "PushedPrice",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ancillaryBytesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "hasPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "requestPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "stampAncillaryData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x79ae0588a0b7c17318968ca67c9c397da4f9479c486e1ba4846b6dba1da6f785",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x50cb0f7Fdd27030Fa9fB8cE1fb4682958FE32e75",
    "transactionIndex": 20,
    "gasUsed": "1032265",
    "logsBloom": "0x
    "blockHash": "0x1b7bb6c4592b3716eb13e7d0f59d1db8e77f43e498ebafa9eb2a3440f96eb194",
    "transactionHash": "0x79ae0588a0b7c17318968ca67c9c397da4f9479c486e1ba4846b6dba1da6f785",
    "logs": [],
    "blockNumber": 6161306,
    "cumulativeGasUsed": "4603268",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf6537Fd2A447afAC20bABaFBf9113bc60F4fa594",
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"PriceRequestAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestHash\",\"type\":\"bytes32\"}],\"name\":\"PushedPrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"requestPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"stampAncillaryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The intended client of this contract is an OptimisticOracle on sidechain that needs price resolution secured by the DVM on mainnet.\",\"kind\":\"dev\",\"methods\":{\"getPrice(bytes32,uint256,bytes)\":{\"details\":\"Reverts if price is not available.\",\"params\":{\"ancillaryData\":\"extra data of price request.\",\"identifier\":\"Identifier of price request.\",\"time\":\"Timestamp of price request\"},\"returns\":{\"_0\":\"int256 Price, or reverts if no resolved price for any reason.\"}},\"hasPrice(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"extra data of price request.\",\"identifier\":\"Identifier of price request.\",\"time\":\"Timestamp of price request\"},\"returns\":{\"_0\":\"True if a price is available, False otherwise. If true, then getPrice will succeed for the request.\"}},\"requestPrice(bytes32,uint256,bytes)\":{\"details\":\"Can be called only by a registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the price resolution data from mainnet. Emits a message that will be included in regular checkpoint of all sidechain transactions to mainnet.\",\"params\":{\"ancillaryData\":\"extra data of price request.\",\"identifier\":\"Identifier of price request.\",\"time\":\"Timestamp of price request.\"}},\"stampAncillaryData(bytes,address)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"requester\":\"sender of the initial price request.\"},\"returns\":{\"_0\":\"the stamped ancillary bytes.\"}}},\"title\":\"Adapter deployed on sidechain to give financial contracts the ability to trigger cross-chain price requests to the mainnet DVM. Also has the ability to receive published prices from mainnet. This contract can be treated as the \\\"DVM\\\" for this network, because a calling contract can request and access a resolved price request from this contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice(bytes32,uint256,bytes)\":{\"notice\":\"Returns resolved price for the request.\"},\"hasPrice(bytes32,uint256,bytes)\":{\"notice\":\"Returns whether a price has resolved for the request.\"},\"requestPrice(bytes32,uint256,bytes)\":{\"notice\":\"This should be called to bridge a price request to mainnet.\"},\"stampAncillaryData(bytes,address)\":{\"notice\":\"Generates stamped ancillary data in the format that it would be used in the case of a price request.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol\":\"OracleChildTunnel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n/**\\n * @notice Mock child tunnel contract to receive and send message from L2\\n */\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor {\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external virtual {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(\\n        uint256 stateId,\\n        address rootMessageSender,\\n        bytes calldata data\\n    ) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(\\n        uint256 stateId,\\n        address sender,\\n        bytes memory message\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x4e102fe11245e851e0f581b1fd4d5a3de2a86254a39e25d7ecc6d4a5947bcbd8\",\"license\":\"MIT\"},\"contracts/common/implementation/AncillaryData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Library for encoding and decoding ancillary data for DVM price requests.\\r\\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\\r\\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\\r\\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\\r\\n * smart contracts. More details on UMA's ancillary data guidelines below:\\r\\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\\r\\n */\\r\\nlibrary AncillaryData {\\r\\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\\r\\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\\r\\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\\r\\n        unchecked {\\r\\n            uint256 x = uint256(bytesIn);\\r\\n\\r\\n            // Nibble interleave\\r\\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\r\\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\r\\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\r\\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\r\\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\r\\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\r\\n\\r\\n            // Hex encode\\r\\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\\r\\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\\r\\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\\r\\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\\r\\n\\r\\n            // Return the result.\\r\\n            return bytes32(x);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\\r\\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\\r\\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\\r\\n     * @param bytesIn bytes32 to encode.\\r\\n     * @return utf8 encoded bytes32.\\r\\n     */\\r\\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\\r\\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\\r\\n     * @dev Will return address in all lower case characters and without the leading 0x.\\r\\n     * @param x address to encode.\\r\\n     * @return utf8 encoded address bytes.\\r\\n     */\\r\\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\\r\\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\\r\\n     */\\r\\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\\r\\n        if (x == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = x;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (x != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            x /= 10;\\r\\n        }\\r\\n        return bstr;\\r\\n    }\\r\\n\\r\\n    function appendKeyValueBytes32(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        bytes32 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is an address that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueAddress(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        address value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueUint(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        uint256 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper method that returns the left hand side of a \\\"key:value\\\" pair plus the colon \\\":\\\" and a leading\\r\\n     * comma \\\",\\\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\\r\\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\\r\\n     */\\r\\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\\r\\n        if (currentAncillaryData.length > 0) {\\r\\n            return abi.encodePacked(\\\",\\\", key, \\\":\\\");\\r\\n        } else {\\r\\n            return abi.encodePacked(key, \\\":\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe2300c69cbaca3ca305dc9445e6f791ef26315d1af9cf4f8021757fd1e2fd07\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/RegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for a registry of contracts and contract creators.\\r\\n */\\r\\ninterface RegistryInterface {\\r\\n    /**\\r\\n     * @notice Registers a new contract.\\r\\n     * @dev Only authorized contract creators can call this method.\\r\\n     * @param parties an array of addresses who become parties in the contract.\\r\\n     * @param contractAddress defines the address of the deployed contract.\\r\\n     */\\r\\n    function registerContract(address[] calldata parties, address contractAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether the contract has been registered with the registry.\\r\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\r\\n     * @param contractAddress address of the contract.\\r\\n     * @return bool indicates whether the contract is registered.\\r\\n     */\\r\\n    function isContractRegistered(address contractAddress) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\r\\n     * @param party address of the party.\\r\\n     * @return an array of the contracts the party is registered to.\\r\\n     */\\r\\n    function getRegisteredContracts(address party) external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns all registered contracts.\\r\\n     * @return all registered contract addresses within the system.\\r\\n     */\\r\\n    function getAllRegisteredContracts() external view returns (address[] memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds a party to the calling contract.\\r\\n     * @dev msg.sender must be the contract to which the party member is added.\\r\\n     * @param party address to be added to the contract.\\r\\n     */\\r\\n    function addPartyToContract(address party) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes a party member to the calling contract.\\r\\n     * @dev msg.sender must be the contract to which the party member is added.\\r\\n     * @param party address to be removed from the contract.\\r\\n     */\\r\\n    function removePartyFromContract(address party) external;\\r\\n\\r\\n    /**\\r\\n     * @notice checks if an address is a party in a contract.\\r\\n     * @param party party to check.\\r\\n     * @param contractAddress address to check against the party.\\r\\n     * @return bool indicating if the address is a party of the contract.\\r\\n     */\\r\\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xea7f5a5abd024662fa3a79a23823710b36ce5b9e72381716bdd4697d4b9cb403\",\"license\":\"AGPL-3.0-only\"},\"contracts/polygon-cross-chain-oracle/OracleBaseTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Enforces lifecycle of price requests for deriving contract.\\r\\n */\\r\\nabstract contract OracleBaseTunnel {\\r\\n    enum RequestState { NeverRequested, Requested, Resolved }\\r\\n\\r\\n    struct Price {\\r\\n        RequestState state;\\r\\n        int256 price;\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be resolved by the DVM which refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    // Mapping of encoded price requests {identifier, time, ancillaryData} to Price objects.\\r\\n    mapping(bytes32 => Price) internal prices;\\r\\n\\r\\n    // Finder to provide addresses for DVM system contracts.\\r\\n    FinderInterface public finder;\\r\\n\\r\\n    event PriceRequestAdded(bytes32 indexed identifier, uint256 time, bytes ancillaryData, bytes32 indexed requestHash);\\r\\n    event PushedPrice(\\r\\n        bytes32 indexed identifier,\\r\\n        uint256 time,\\r\\n        bytes ancillaryData,\\r\\n        int256 price,\\r\\n        bytes32 indexed requestHash\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\\r\\n     */\\r\\n    constructor(address _finderAddress) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given (identifier, time,\\r\\n     * ancillary data) combination. Will only emit an event if the request has never been requested.\\r\\n     */\\r\\n    function _requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) internal {\\r\\n        require(ancillaryData.length <= ancillaryBytesLimit, \\\"Invalid ancillary data\\\");\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\\r\\n        Price storage lookup = prices[priceRequestId];\\r\\n        if (lookup.state == RequestState.NeverRequested) {\\r\\n            lookup.state = RequestState.Requested;\\r\\n            emit PriceRequestAdded(identifier, time, ancillaryData, priceRequestId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Publishes price for a requested query. Will only emit an event if the request has never been resolved.\\r\\n     */\\r\\n    function _publishPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 price\\r\\n    ) internal {\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, ancillaryData);\\r\\n        Price storage lookup = prices[priceRequestId];\\r\\n        if (lookup.state == RequestState.Requested) {\\r\\n            lookup.price = price;\\r\\n            lookup.state = RequestState.Resolved;\\r\\n            emit PushedPrice(identifier, time, ancillaryData, lookup.price, priceRequestId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the convenient way to store price requests, uniquely identified by {identifier, time,\\r\\n     * ancillaryData }.\\r\\n     */\\r\\n    function _encodePriceRequest(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(identifier, time, ancillaryData));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xf35e0889668f5abe46cead21796a69430f539e14e375ee0d3e3188199dd1bb0d\",\"license\":\"AGPL-3.0-only\"},\"contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\r\\nimport \\\"../data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\\\";\\r\\nimport \\\"../data-verification-mechanism/interfaces/RegistryInterface.sol\\\";\\r\\nimport \\\"./OracleBaseTunnel.sol\\\";\\r\\nimport \\\"../common/implementation/AncillaryData.sol\\\";\\r\\nimport \\\"../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Adapter deployed on sidechain to give financial contracts the ability to trigger cross-chain price requests to\\r\\n * the mainnet DVM. Also has the ability to receive published prices from mainnet. This contract can be treated as the\\r\\n * \\\"DVM\\\" for this network, because a calling contract can request and access a resolved price request from this\\r\\n * contract.\\r\\n * @dev The intended client of this contract is an OptimisticOracle on sidechain that needs price\\r\\n * resolution secured by the DVM on mainnet.\\r\\n */\\r\\ncontract OracleChildTunnel is OracleBaseTunnel, OracleAncillaryInterface, FxBaseChildTunnel, Lockable {\\r\\n    constructor(address _fxChild, address _finderAddress)\\r\\n        OracleBaseTunnel(_finderAddress)\\r\\n        FxBaseChildTunnel(_fxChild)\\r\\n    {}\\r\\n\\r\\n    // This assumes that the local network has a Registry that resembles the mainnet registry.\\r\\n    modifier onlyRegisteredContract() {\\r\\n        RegistryInterface registry = RegistryInterface(finder.getImplementationAddress(OracleInterfaces.Registry));\\r\\n        require(registry.isContractRegistered(msg.sender), \\\"Caller must be registered\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This should be called to bridge a price request to mainnet.\\r\\n     * @dev Can be called only by a registered contract that is allowed to make DVM price requests. Will mark this\\r\\n     * price request as Requested, and therefore able to receive the price resolution data from mainnet. Emits a message\\r\\n     * that will be included in regular checkpoint of all sidechain transactions to mainnet.\\r\\n     * @param identifier Identifier of price request.\\r\\n     * @param time Timestamp of price request.\\r\\n     * @param ancillaryData extra data of price request.\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public override nonReentrant() onlyRegisteredContract() {\\r\\n        // This implementation allows duplicate price requests to emit duplicate MessageSent events via\\r\\n        // _sendMessageToRoot. The DVM will not have a problem handling duplicate requests (it will just ignore them).\\r\\n        // This is potentially a fallback in case the checkpointing to mainnet is missing the `requestPrice` transaction\\r\\n        // for some reason. There is little risk in duplicating MessageSent emissions because the sidechain bridge\\r\\n        // does not impose any rate-limiting and this method is only callable by registered callers.\\r\\n        _requestPrice(identifier, time, _stampAncillaryData(ancillaryData, msg.sender));\\r\\n        _sendMessageToRoot(abi.encode(identifier, time, _stampAncillaryData(ancillaryData, msg.sender)));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Resolves a price request.\\r\\n     * @dev The data will be received automatically from the state receiver when the state is synced between Ethereum\\r\\n     * and Polygon. This will revert if the Root chain sender is not the `fxRootTunnel` contract.\\r\\n     * @param sender The sender of `data` from the Root chain.\\r\\n     * @param data ABI encoded params with which to call `_publishPrice`.\\r\\n     */\\r\\n    function _processMessageFromRoot(\\r\\n        uint256, /* stateId */\\r\\n        address sender,\\r\\n        bytes memory data\\r\\n    ) internal override validateSender(sender) {\\r\\n        (bytes32 identifier, uint256 time, bytes memory ancillaryData, int256 price) =\\r\\n            abi.decode(data, (bytes32, uint256, bytes, int256));\\r\\n        _publishPrice(identifier, time, ancillaryData, price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns whether a price has resolved for the request.\\r\\n     * @param identifier Identifier of price request.\\r\\n     * @param time Timestamp of price request\\r\\n     * @param ancillaryData extra data of price request.\\r\\n     * @return True if a price is available, False otherwise. If true, then getPrice will succeed for the request.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override nonReentrantView() onlyRegisteredContract() returns (bool) {\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, _stampAncillaryData(ancillaryData, msg.sender));\\r\\n        return prices[priceRequestId].state == RequestState.Resolved;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns resolved price for the request.\\r\\n     * @dev Reverts if price is not available.\\r\\n     * @param identifier Identifier of price request.\\r\\n     * @param time Timestamp of price request\\r\\n     * @param ancillaryData extra data of price request.\\r\\n     * @return int256 Price, or reverts if no resolved price for any reason.\\r\\n     */\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override nonReentrantView() onlyRegisteredContract() returns (int256) {\\r\\n        bytes32 priceRequestId = _encodePriceRequest(identifier, time, _stampAncillaryData(ancillaryData, msg.sender));\\r\\n        Price storage lookup = prices[priceRequestId];\\r\\n        require(lookup.state == RequestState.Resolved, \\\"Price has not been resolved\\\");\\r\\n        return lookup.price;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @return the stamped ancillary bytes.\\r\\n     */\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        view\\r\\n        nonReentrantView()\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return _stampAncillaryData(ancillaryData, requester);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translatable in utf8.\\r\\n     * For those cases, we assume that the client will be able to strip out the utf8-translatable part of the\\r\\n     * ancillary data that this contract stamps.\\r\\n     */\\r\\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal view returns (bytes memory) {\\r\\n        // Price requests that originate from this method, on Polygon, will ultimately be submitted to the DVM on\\r\\n        // Ethereum via the OracleRootTunnel. Therefore this contract should stamp its requester's address in the\\r\\n        // ancillary data so voters can conveniently track the requests path to the DVM.\\r\\n        return\\r\\n            AncillaryData.appendKeyValueUint(\\r\\n                AncillaryData.appendKeyValueAddress(ancillaryData, \\\"childRequester\\\", requester),\\r\\n                \\\"childChainId\\\",\\r\\n                block.chainid\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xc4da0b900f232ee080ff9475012f7bbdfa6c5cdf0c2289bf328c1c0a865ad854\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "The intended client of this contract is an OptimisticOracle on sidechain that needs price resolution secured by the DVM on mainnet.",
    "kind": "dev",
    "methods": {
      "getPrice(bytes32,uint256,bytes)": {
        "details": "Reverts if price is not available.",
        "params": {
          "ancillaryData": "extra data of price request.",
          "identifier": "Identifier of price request.",
          "time": "Timestamp of price request"
        },
        "returns": {
          "_0": "int256 Price, or reverts if no resolved price for any reason."
        }
      },
      "hasPrice(bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "extra data of price request.",
          "identifier": "Identifier of price request.",
          "time": "Timestamp of price request"
        },
        "returns": {
          "_0": "True if a price is available, False otherwise. If true, then getPrice will succeed for the request."
        }
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "details": "Can be called only by a registered contract that is allowed to make DVM price requests. Will mark this price request as Requested, and therefore able to receive the price resolution data from mainnet. Emits a message that will be included in regular checkpoint of all sidechain transactions to mainnet.",
        "params": {
          "ancillaryData": "extra data of price request.",
          "identifier": "Identifier of price request.",
          "time": "Timestamp of price request."
        }
      },
      "stampAncillaryData(bytes,address)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "requester": "sender of the initial price request."
        },
        "returns": {
          "_0": "the stamped ancillary bytes."
        }
      }
    },
    "title": "Adapter deployed on sidechain to give financial contracts the ability to trigger cross-chain price requests to the mainnet DVM. Also has the ability to receive published prices from mainnet. This contract can be treated as the \"DVM\" for this network, because a calling contract can request and access a resolved price request from this contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice(bytes32,uint256,bytes)": {
        "notice": "Returns resolved price for the request."
      },
      "hasPrice(bytes32,uint256,bytes)": {
        "notice": "Returns whether a price has resolved for the request."
      },
      "requestPrice(bytes32,uint256,bytes)": {
        "notice": "This should be called to bridge a price request to mainnet."
      },
      "stampAncillaryData(bytes,address)": {
        "notice": "Generates stamped ancillary data in the format that it would be used in the case of a price request."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72263,
        "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
        "label": "prices",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Price)72255_storage)"
      },
      {
        "astId": 72266,
        "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
        "label": "finder",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FinderInterface)36753"
      },
      {
        "astId": 2764,
        "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
        "label": "fxChild",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2766,
        "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
        "label": "_notEntered",
        "offset": 20,
        "slot": "3",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_enum(RequestState)72249": {
        "encoding": "inplace",
        "label": "enum OracleBaseTunnel.RequestState",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Price)72255_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OracleBaseTunnel.Price)",
        "numberOfBytes": "32",
        "value": "t_struct(Price)72255_storage"
      },
      "t_struct(Price)72255_storage": {
        "encoding": "inplace",
        "label": "struct OracleBaseTunnel.Price",
        "members": [
          {
            "astId": 72252,
            "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(RequestState)72249"
          },
          {
            "astId": 72254,
            "contract": "contracts/polygon-cross-chain-oracle/OracleChildTunnel.sol:OracleChildTunnel",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}