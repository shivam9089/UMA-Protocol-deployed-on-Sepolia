{
  "address": "0xf5D0f95B66559A01fF361B89a18738FdC1BBC548",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "_finder",
          "type": "address"
        },
        {
          "internalType": "contract TokenFactory",
          "name": "_tokenFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "longShortPair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "deployerAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "longToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "shortToken",
          "type": "address"
        }
      ],
      "name": "CreatedLongShortPair",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "pairName",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "expirationTimestamp",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "collateralPerPair",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "priceIdentifier",
              "type": "bytes32"
            },
            {
              "internalType": "bool",
              "name": "enableEarlyExpiration",
              "type": "bool"
            },
            {
              "internalType": "string",
              "name": "longSynthName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "longSynthSymbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "shortSynthName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "shortSynthSymbol",
              "type": "string"
            },
            {
              "internalType": "contract IERC20Standard",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "contract LongShortPairFinancialProductLibrary",
              "name": "financialProductLibrary",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "customAncillaryData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "proposerReward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optimisticOracleLivenessTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "optimisticOracleProposerBond",
              "type": "uint256"
            }
          ],
          "internalType": "struct LongShortPairCreator.CreatorParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createLongShortPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "contract TokenFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7874c6fdb3946d67a6e08ebc7f256abb810bf2eb58cd4e5e6bf490a284dac36a",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0xf5D0f95B66559A01fF361B89a18738FdC1BBC548",
    "transactionIndex": 15,
    "gasUsed": "3624320",
    "logsBloom": "0x
    "blockHash": "0x79a2fd6e43760d9d5e9d9603c45504639c47377d245193c62ccdf525ffc7f3bc",
    "transactionHash": "0x7874c6fdb3946d67a6e08ebc7f256abb810bf2eb58cd4e5e6bf490a284dac36a",
    "logs": [],
    "blockNumber": 6161313,
    "cumulativeGasUsed": "5286359",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e",
    "0x8Aa853D41A08c9E22CB27A383344a273d12310C3",
    "0xf8815ce169E5450aa6908e76E1B970dBcEC11550"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"_finder\",\"type\":\"address\"},{\"internalType\":\"contract TokenFactory\",\"name\":\"_tokenFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"longShortPair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"deployerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"longToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"shortToken\",\"type\":\"address\"}],\"name\":\"CreatedLongShortPair\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"pairName\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"expirationTimestamp\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"collateralPerPair\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"priceIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"enableEarlyExpiration\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"longSynthName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"longSynthSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shortSynthName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"shortSynthSymbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20Standard\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract LongShortPairFinancialProductLibrary\",\"name\":\"financialProductLibrary\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"customAncillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"proposerReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimisticOracleLivenessTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"optimisticOracleProposerBond\",\"type\":\"uint256\"}],\"internalType\":\"struct LongShortPairCreator.CreatorParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createLongShortPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"contract TokenFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_finder\":\"UMA protocol Finder used to discover other protocol contracts.\",\"_timer\":\"Contract that stores the current time in a testing environment.\",\"_tokenFactory\":\"ERC20 token factory used to deploy synthetic token instances.\"}},\"createLongShortPair((string,uint64,uint256,bytes32,bool,string,string,string,string,address,address,bytes,uint256,uint256,uint256))\":{\"params\":{\"params\":\"Constructor params used to initialize the LSP. Key-valued object with the following structure:     - `pairName`: Name of the long short pair contract.     - `expirationTimestamp`: Unix timestamp of when the contract will expire.     - `collateralPerPair`: How many units of collateral are required to mint one pair of synthetic tokens.     - `priceIdentifier`: Registered in the DVM for the synthetic.     - `enableEarlyExpiration`: Enables the LSP contract to be settled early.     - `longSynthName`: Name of the long synthetic tokens to be created.     - `longSynthSymbol`: Symbol of the long synthetic tokens to be created.     - `shortSynthName`: Name of the short synthetic tokens to be created.     - `shortSynthSymbol`: Symbol of the short synthetic tokens to be created.     - `collateralToken`: ERC20 token used as collateral in the LSP.     - `financialProductLibrary`: Contract providing settlement payout logic.     - `customAncillaryData`: Custom ancillary data to be passed along with the price request. If not needed, this                              should be left as a 0-length bytes array.     - `proposerReward`: Optimistic oracle reward amount, pulled from the caller of the expire function.     - `optimisticOracleLivenessTime`: Optimistic oracle liveness time for price requests.     - `optimisticOracleProposerBond`: Optimistic oracle proposer bond for price requests.\"},\"returns\":{\"_0\":\"lspAddress the deployed address of the new long short pair contract.\"}},\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}}},\"title\":\"Long Short Pair Contract Creator.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the LongShortPairCreator contract.\"},\"createLongShortPair((string,uint64,uint256,bytes32,bool,string,string,string,string,address,address,bytes,uint256,uint256,uint256))\":{\"notice\":\"Creates a longShortPair contract and associated long and short tokens.Created LSP is not registered within the registry as the LSP uses the Optimistic Oracle for settlement.The LSP constructor does a number of validations on input params. These are not repeated here.\"},\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"}},\"notice\":\"Factory contract to create new instances of long short pair contracts. Responsible for constraining the parameters used to construct a new LSP. These constraints can evolve over time and are initially constrained to conservative values in this first iteration.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/financial-templates/long-short-pair/LongShortPairCreator.sol\":\"LongShortPairCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/AncillaryData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Library for encoding and decoding ancillary data for DVM price requests.\\r\\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\\r\\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\\r\\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\\r\\n * smart contracts. More details on UMA's ancillary data guidelines below:\\r\\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\\r\\n */\\r\\nlibrary AncillaryData {\\r\\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\\r\\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\\r\\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\\r\\n        unchecked {\\r\\n            uint256 x = uint256(bytesIn);\\r\\n\\r\\n            // Nibble interleave\\r\\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\r\\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\r\\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\r\\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\r\\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\r\\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\r\\n\\r\\n            // Hex encode\\r\\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\\r\\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\\r\\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\\r\\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\\r\\n\\r\\n            // Return the result.\\r\\n            return bytes32(x);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\\r\\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\\r\\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\\r\\n     * @param bytesIn bytes32 to encode.\\r\\n     * @return utf8 encoded bytes32.\\r\\n     */\\r\\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\\r\\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\\r\\n     * @dev Will return address in all lower case characters and without the leading 0x.\\r\\n     * @param x address to encode.\\r\\n     * @return utf8 encoded address bytes.\\r\\n     */\\r\\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\\r\\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\\r\\n     */\\r\\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\\r\\n        if (x == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = x;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (x != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            x /= 10;\\r\\n        }\\r\\n        return bstr;\\r\\n    }\\r\\n\\r\\n    function appendKeyValueBytes32(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        bytes32 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is an address that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueAddress(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        address value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueUint(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        uint256 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper method that returns the left hand side of a \\\"key:value\\\" pair plus the colon \\\":\\\" and a leading\\r\\n     * comma \\\",\\\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\\r\\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\\r\\n     */\\r\\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\\r\\n        if (currentAncillaryData.length > 0) {\\r\\n            return abi.encodePacked(\\\",\\\", key, \\\":\\\");\\r\\n        } else {\\r\\n            return abi.encodePacked(key, \\\":\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe2300c69cbaca3ca305dc9445e6f791ef26315d1af9cf4f8021757fd1e2fd07\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/ExpandedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\r\\n * be the owner who is capable of adding new roles.\\r\\n */\\r\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\r\\n    enum Roles {\\r\\n        // Can set the minter and burner.\\r\\n        Owner,\\r\\n        // Addresses that can mint new tokens.\\r\\n        Minter,\\r\\n        // Addresses that can burn tokens that address owns.\\r\\n        Burner\\r\\n    }\\r\\n\\r\\n    uint8 _decimals;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the ExpandedERC20.\\r\\n     * @param _tokenName The name which describes the new token.\\r\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param _tokenDecimals The number of decimals to define token precision.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory _tokenName,\\r\\n        string memory _tokenSymbol,\\r\\n        uint8 _tokenDecimals\\r\\n    ) ERC20(_tokenName, _tokenSymbol) {\\r\\n        _decimals = _tokenDecimals;\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\r\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\r\\n     * @param recipient address to mint to.\\r\\n     * @param value amount of tokens to mint.\\r\\n     * @return True if the mint succeeded, or False.\\r\\n     */\\r\\n    function mint(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Minter))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _mint(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\r\\n        _burn(msg.sender, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     * @return True if the burn succeeded, or False.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value)\\r\\n        external\\r\\n        override\\r\\n        onlyRoleHolder(uint256(Roles.Burner))\\r\\n        returns (bool)\\r\\n    {\\r\\n        _burn(recipient, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Minter role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Minter role is added.\\r\\n     */\\r\\n    function addMinter(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Burner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Burner role is added.\\r\\n     */\\r\\n    function addBurner(address account) external virtual override {\\r\\n        addMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset Owner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The new holder of the Owner role.\\r\\n     */\\r\\n    function resetOwner(address account) external virtual override {\\r\\n        resetMember(uint256(Roles.Owner), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd5ad65b24455d06323ae045e0998a08a36d52bc12644cf667ad3a0e8d92ef734\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AddressWhitelistInterface {\\r\\n    function addToWhitelist(address newElement) external;\\r\\n\\r\\n    function removeFromWhitelist(address newElement) external;\\r\\n\\r\\n    function isOnWhitelist(address newElement) external view returns (bool);\\r\\n\\r\\n    function getWhitelist() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x72c9c89bc8aa33b9bb4b5ce8d4fe365f60b08cb5179f240545b8b3f9ff1f61a5\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface that includes burn and mint methods.\\r\\n */\\r\\nabstract contract ExpandedIERC20 is IERC20 {\\r\\n    /**\\r\\n     * @notice Burns a specific amount of the caller's tokens.\\r\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\r\\n     */\\r\\n    function burn(uint256 value) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @dev Burns `value` tokens owned by `recipient`.\\r\\n     * @param recipient address to burn tokens from.\\r\\n     * @param value amount of tokens to burn.\\r\\n     */\\r\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\r\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\r\\n     */\\r\\n    function mint(address to, uint256 value) external virtual returns (bool);\\r\\n\\r\\n    function addMinter(address account) external virtual;\\r\\n\\r\\n    function addBurner(address account) external virtual;\\r\\n\\r\\n    function resetOwner(address account) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xb3e81268dc3417f29f6047fab4fa03d5b1fc23f280485ba81b90769c971293fc\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/IERC20Standard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title ERC20 interface that includes the decimals read only method.\\r\\n */\\r\\ninterface IERC20Standard is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05`\\r\\n     * (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value\\r\\n     * {ERC20} uses, unless {_setupDecimals} is called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic\\r\\n     * of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xf1f55b07b9c61b3b02b5ed2d9bd37d1c0feda56f3483780156e9aced8ada4958\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestPrice(bytes32 identifier, uint256 time) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(bytes32 identifier, uint256 time) external view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(bytes32 identifier, uint256 time) external view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa135756eabf06899395052031d8a2f617ef504477dc3037585f2b4ce0e3da22a\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/SyntheticToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../common/implementation/ExpandedERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Burnable and mintable ERC20.\\r\\n * @dev The contract deployer will initially be the only minter, burner and owner capable of adding new roles.\\r\\n */\\r\\n\\r\\ncontract SyntheticToken is ExpandedERC20, Lockable {\\r\\n    /**\\r\\n     * @notice Constructs the SyntheticToken.\\r\\n     * @param tokenName The name which describes the new token.\\r\\n     * @param tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param tokenDecimals The number of decimals to define token precision.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory tokenName,\\r\\n        string memory tokenSymbol,\\r\\n        uint8 tokenDecimals\\r\\n    ) ExpandedERC20(tokenName, tokenSymbol, tokenDecimals) nonReentrant() {}\\r\\n\\r\\n    /**\\r\\n     * @notice Add Minter role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Minter role is added.\\r\\n     */\\r\\n    function addMinter(address account) external override nonReentrant() {\\r\\n        addMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Remove Minter role from account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address from which the Minter role is removed.\\r\\n     */\\r\\n    function removeMinter(address account) external nonReentrant() {\\r\\n        removeMember(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Add Burner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address to which the Burner role is added.\\r\\n     */\\r\\n    function addBurner(address account) external override nonReentrant() {\\r\\n        addMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes Burner role from account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The address from which the Burner role is removed.\\r\\n     */\\r\\n    function removeBurner(address account) external nonReentrant() {\\r\\n        removeMember(uint256(Roles.Burner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reset Owner role to account.\\r\\n     * @dev The caller must have the Owner role.\\r\\n     * @param account The new holder of the Owner role.\\r\\n     */\\r\\n    function resetOwner(address account) external override nonReentrant() {\\r\\n        resetMember(uint256(Roles.Owner), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given account holds the Minter role.\\r\\n     * @param account The address which is checked for the Minter role.\\r\\n     * @return bool True if the provided account is a Minter.\\r\\n     */\\r\\n    function isMinter(address account) public view nonReentrantView() returns (bool) {\\r\\n        return holdsRole(uint256(Roles.Minter), account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given account holds the Burner role.\\r\\n     * @param account The address which is checked for the Burner role.\\r\\n     * @return bool True if the provided account is a Burner.\\r\\n     */\\r\\n    function isBurner(address account) public view nonReentrantView() returns (bool) {\\r\\n        return holdsRole(uint256(Roles.Burner), account);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa3e166aa7e6249d741f5a6549d96ae8b028b2138f545e9b4cb62f994a3f38a59\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/TokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./SyntheticToken.sol\\\";\\r\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Factory for creating new mintable and burnable tokens.\\r\\n */\\r\\n\\r\\ncontract TokenFactory is Lockable {\\r\\n    /**\\r\\n     * @notice Create a new token and return it to the caller.\\r\\n     * @dev The caller will become the only minter and burner and the new owner capable of assigning the roles.\\r\\n     * @param tokenName used to describe the new token.\\r\\n     * @param tokenSymbol short ticker abbreviation of the name. Ideally < 5 chars.\\r\\n     * @param tokenDecimals used to define the precision used in the token's numerical representation.\\r\\n     * @return newToken an instance of the newly created token interface.\\r\\n     */\\r\\n    function createToken(\\r\\n        string calldata tokenName,\\r\\n        string calldata tokenSymbol,\\r\\n        uint8 tokenDecimals\\r\\n    ) external nonReentrant() returns (ExpandedIERC20 newToken) {\\r\\n        SyntheticToken mintableToken = new SyntheticToken(tokenName, tokenSymbol, tokenDecimals);\\r\\n        mintableToken.resetOwner(msg.sender);\\r\\n        newToken = ExpandedIERC20(address(mintableToken));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7ebfada202555d40bd73ab0febd4830f25a5fd3507384594afb3e6218bf8afb3\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/common/financial-product-libraries/long-short-pair-libraries/LongShortPairFinancialProductLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"../../../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ninterface ExpiringContractInterface {\\r\\n    function expirationTimestamp() external view returns (uint256);\\r\\n}\\r\\n\\r\\nabstract contract LongShortPairFinancialProductLibrary {\\r\\n    function percentageLongCollateralAtExpiry(int256 expiryPrice) public view virtual returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xd004c8c7b2b5b8b1d3d71b82bcdad0edb4c734963c19df86fe4a4e28462ac77c\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/long-short-pair/LongShortPair.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../common/financial-product-libraries/long-short-pair-libraries/LongShortPairFinancialProductLibrary.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/AncillaryData.sol\\\";\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\r\\nimport \\\"../../common/interfaces/AddressWhitelistInterface.sol\\\";\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/interfaces/OracleInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\nimport \\\"../../optimistic-oracle-v2/interfaces/OptimisticOracleV2Interface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Long Short Pair.\\r\\n * @notice Uses a combination of long and short tokens to tokenize the bounded price exposure to a given identifier.\\r\\n */\\r\\ncontract LongShortPair is Testable, Lockable {\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    /*************************************\\r\\n     *  LONG SHORT PAIR DATA STRUCTURES  *\\r\\n     *************************************/\\r\\n\\r\\n    // Define the contract's constructor parameters as a struct to enable more variables to be specified.\\r\\n    struct ConstructorParams {\\r\\n        string pairName; // Name of the long short pair contract.\\r\\n        uint64 expirationTimestamp; // Unix timestamp of when the contract will expire.\\r\\n        uint256 collateralPerPair; // How many units of collateral are required to mint one pair of synthetic tokens.\\r\\n        bytes32 priceIdentifier; // Price identifier, registered in the DVM for the long short pair.\\r\\n        bool enableEarlyExpiration; // Enables the LSP contract to be settled early.\\r\\n        ExpandedIERC20 longToken; // Token used as long in the LSP. Mint and burn rights needed by this contract.\\r\\n        ExpandedIERC20 shortToken; // Token used as short in the LSP. Mint and burn rights needed by this contract.\\r\\n        IERC20 collateralToken; // Collateral token used to back LSP synthetics.\\r\\n        LongShortPairFinancialProductLibrary financialProductLibrary; // Contract providing settlement payout logic.\\r\\n        bytes customAncillaryData; // Custom ancillary data to be passed along with the price request to the OO.\\r\\n        uint256 proposerReward; // Optimistic oracle reward amount, pulled from the caller of the expire function.\\r\\n        uint256 optimisticOracleLivenessTime; // OO liveness time for price requests.\\r\\n        uint256 optimisticOracleProposerBond; // OO proposer bond for price requests.\\r\\n        FinderInterface finder; // DVM finder to find other UMA ecosystem contracts.\\r\\n        address timerAddress; // Timer used to synchronize contract time in testing. Set to 0x000... in production.\\r\\n    }\\r\\n\\r\\n    bool public receivedSettlementPrice;\\r\\n\\r\\n    bool public enableEarlyExpiration; // If set, the LSP contract can request to be settled early by calling the OO.\\r\\n    uint64 public expirationTimestamp;\\r\\n    uint64 public earlyExpirationTimestamp; // Set in the case the contract is expired early.\\r\\n    string public pairName;\\r\\n    uint256 public collateralPerPair; // Amount of collateral a pair of tokens is always redeemable for.\\r\\n\\r\\n    // Number between 0 and 1e18 to allocate collateral between long & short tokens at redemption. 0 entitles each short\\r\\n    // to collateralPerPair and each long to 0. 1e18 makes each long worth collateralPerPair and short 0.\\r\\n    uint256 public expiryPercentLong;\\r\\n    bytes32 public priceIdentifier;\\r\\n\\r\\n    // Price returned from the Optimistic oracle at settlement time.\\r\\n    int256 public expiryPrice;\\r\\n\\r\\n    // External contract interfaces.\\r\\n    IERC20 public collateralToken;\\r\\n    ExpandedIERC20 public longToken;\\r\\n    ExpandedIERC20 public shortToken;\\r\\n    FinderInterface public finder;\\r\\n    LongShortPairFinancialProductLibrary public financialProductLibrary;\\r\\n\\r\\n    // Optimistic oracle customization parameters.\\r\\n    bytes public customAncillaryData;\\r\\n    uint256 public proposerReward;\\r\\n    uint256 public optimisticOracleLivenessTime;\\r\\n    uint256 public optimisticOracleProposerBond;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event TokensCreated(address indexed sponsor, uint256 indexed collateralUsed, uint256 indexed tokensMinted);\\r\\n    event TokensRedeemed(address indexed sponsor, uint256 indexed collateralReturned, uint256 indexed tokensRedeemed);\\r\\n    event ContractExpired(address indexed caller);\\r\\n    event EarlyExpirationRequested(address indexed caller, uint64 earlyExpirationTimeStamp);\\r\\n    event PositionSettled(address indexed sponsor, uint256 collateralReturned, uint256 longTokens, uint256 shortTokens);\\r\\n\\r\\n    /****************************************\\r\\n     *               MODIFIERS              *\\r\\n     ****************************************/\\r\\n\\r\\n    modifier preExpiration() {\\r\\n        require(getCurrentTime() < expirationTimestamp, \\\"Only callable pre-expiry\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier postExpiration() {\\r\\n        require(getCurrentTime() >= expirationTimestamp, \\\"Only callable post-expiry\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier notEarlyExpired() {\\r\\n        require(!isContractEarlyExpired(), \\\"Contract already early expired\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the LongShortPair\\r\\n     * @param params Constructor params used to initialize the LSP. Key-valued object with the following structure:\\r\\n     *    - `pairName`: Name of the long short pair contract.\\r\\n     *    - `expirationTimestamp`: Unix timestamp of when the contract will expire.\\r\\n     *    - `collateralPerPair`: How many units of collateral are required to mint one pair of synthetic tokens.\\r\\n     *    - `priceIdentifier`: Price identifier, registered in the DVM for the long short pair.\\r\\n     *    - `longToken`: Token used as long in the LSP. Mint and burn rights needed by this contract.\\r\\n     *    - `shortToken`: Token used as short in the LSP. Mint and burn rights needed by this contract.\\r\\n     *    - `collateralToken`: Collateral token used to back LSP synthetics.\\r\\n     *    - `financialProductLibrary`: Contract providing settlement payout logic.\\r\\n     *    - `customAncillaryData`: Custom ancillary data to be passed along with the price request to the OO.\\r\\n     *    - `proposerReward`: Preloaded reward to incentivize settlement price proposals.\\r\\n     *    - `optimisticOracleLivenessTime`: OO liveness time for price requests.\\r\\n     *    - `optimisticOracleProposerBond`: OO proposer bond for price requests.\\r\\n     *    - `finder`: DVM finder to find other UMA ecosystem contracts.\\r\\n     *    - `timerAddress`: Timer used to synchronize contract time in testing. Set to 0x000... in production.\\r\\n     */\\r\\n    constructor(ConstructorParams memory params) Testable(params.timerAddress) {\\r\\n        finder = params.finder;\\r\\n        require(bytes(params.pairName).length > 0, \\\"Pair name cant be empty\\\");\\r\\n        require(params.expirationTimestamp > getCurrentTime(), \\\"Expiration timestamp in past\\\");\\r\\n        require(params.collateralPerPair > 0, \\\"Collateral per pair cannot be 0\\\");\\r\\n        require(_getIdentifierWhitelist().isIdentifierSupported(params.priceIdentifier), \\\"Identifier not registered\\\");\\r\\n        require(address(_getOptimisticOracle()) != address(0), \\\"Invalid finder\\\");\\r\\n        require(address(params.financialProductLibrary) != address(0), \\\"Invalid FinancialProductLibrary\\\");\\r\\n        require(_getCollateralWhitelist().isOnWhitelist(address(params.collateralToken)), \\\"Collateral not whitelisted\\\");\\r\\n        require(params.optimisticOracleLivenessTime > 0, \\\"OO liveness cannot be 0\\\");\\r\\n        require(params.optimisticOracleLivenessTime < 5200 weeks, \\\"OO liveness too large\\\");\\r\\n\\r\\n        pairName = params.pairName;\\r\\n        expirationTimestamp = params.expirationTimestamp;\\r\\n        collateralPerPair = params.collateralPerPair;\\r\\n        priceIdentifier = params.priceIdentifier;\\r\\n        enableEarlyExpiration = params.enableEarlyExpiration;\\r\\n\\r\\n        longToken = params.longToken;\\r\\n        shortToken = params.shortToken;\\r\\n        collateralToken = params.collateralToken;\\r\\n\\r\\n        financialProductLibrary = params.financialProductLibrary;\\r\\n        OptimisticOracleV2Interface optimisticOracle = _getOptimisticOracle();\\r\\n\\r\\n        // Ancillary data + additional stamped information should be less than ancillary data limit. Consider early\\r\\n        // expiration ancillary data, if enableEarlyExpiration is set.\\r\\n        customAncillaryData = params.customAncillaryData;\\r\\n        require(\\r\\n            optimisticOracle\\r\\n                .stampAncillaryData(\\r\\n                (enableEarlyExpiration ? getEarlyExpirationAncillaryData() : customAncillaryData),\\r\\n                address(this)\\r\\n            )\\r\\n                .length <= optimisticOracle.ancillaryBytesLimit(),\\r\\n            \\\"Ancillary Data too long\\\"\\r\\n        );\\r\\n\\r\\n        proposerReward = params.proposerReward;\\r\\n        optimisticOracleLivenessTime = params.optimisticOracleLivenessTime;\\r\\n        optimisticOracleProposerBond = params.optimisticOracleProposerBond;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          POSITION FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a pair of long and short tokens equal in number to tokensToCreate. Pulls the required collateral\\r\\n     * amount into this contract, defined by the collateralPerPair value.\\r\\n     * @dev The caller must approve this contract to transfer `tokensToCreate * collateralPerPair` amount of collateral.\\r\\n     * @param tokensToCreate number of long and short synthetic tokens to create.\\r\\n     * @return collateralUsed total collateral used to mint the synthetics.\\r\\n     */\\r\\n    function create(uint256 tokensToCreate) public preExpiration() nonReentrant() returns (uint256 collateralUsed) {\\r\\n        // Note the use of mulCeil to prevent small collateralPerPair causing rounding of collateralUsed to 0 enabling\\r\\n        // callers to mint dust LSP tokens without paying any collateral.\\r\\n        collateralUsed = FixedPoint.Unsigned(tokensToCreate).mulCeil(FixedPoint.Unsigned(collateralPerPair)).rawValue;\\r\\n\\r\\n        collateralToken.safeTransferFrom(msg.sender, address(this), collateralUsed);\\r\\n\\r\\n        require(longToken.mint(msg.sender, tokensToCreate));\\r\\n        require(shortToken.mint(msg.sender, tokensToCreate));\\r\\n\\r\\n        emit TokensCreated(msg.sender, collateralUsed, tokensToCreate);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Redeems a pair of long and short tokens equal in number to tokensToRedeem. Returns the commensurate\\r\\n     * amount of collateral to the caller for the pair of tokens, defined by the collateralPerPair value.\\r\\n     * @dev This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.\\r\\n     * @dev The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long\\r\\n     * and short tokens are burned, rather than transferred, from the caller.\\r\\n     * @dev This method can be called either pre or post expiration.\\r\\n     * @param tokensToRedeem number of long and short synthetic tokens to redeem.\\r\\n     * @return collateralReturned total collateral returned in exchange for the pair of synthetics.\\r\\n     */\\r\\n    function redeem(uint256 tokensToRedeem) public nonReentrant() returns (uint256 collateralReturned) {\\r\\n        require(longToken.burnFrom(msg.sender, tokensToRedeem));\\r\\n        require(shortToken.burnFrom(msg.sender, tokensToRedeem));\\r\\n\\r\\n        collateralReturned = FixedPoint.Unsigned(tokensToRedeem).mul(FixedPoint.Unsigned(collateralPerPair)).rawValue;\\r\\n\\r\\n        collateralToken.safeTransfer(msg.sender, collateralReturned);\\r\\n\\r\\n        emit TokensRedeemed(msg.sender, collateralReturned, tokensToRedeem);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Settle long and/or short tokens in for collateral at a rate informed by the contract settlement.\\r\\n     * @dev Uses financialProductLibrary to compute the redemption rate between long and short tokens.\\r\\n     * @dev This contract must have the `Burner` role for the `longToken` and `shortToken` in order to call `burnFrom`.\\r\\n     * @dev The caller does not need to approve this contract to transfer any amount of `tokensToRedeem` since long\\r\\n     * and short tokens are burned, rather than transferred, from the caller.\\r\\n     * @dev This function can be called before or after expiration to facilitate early expiration. If a price has\\r\\n     * not yet been resolved for either normal or early expiration yet then it will revert.\\r\\n     * @param longTokensToRedeem number of long tokens to settle.\\r\\n     * @param shortTokensToRedeem number of short tokens to settle.\\r\\n     * @return collateralReturned total collateral returned in exchange for the pair of synthetics.\\r\\n     */\\r\\n    function settle(uint256 longTokensToRedeem, uint256 shortTokensToRedeem)\\r\\n        public\\r\\n        nonReentrant()\\r\\n        returns (uint256 collateralReturned)\\r\\n    {\\r\\n        // Either early expiration is enabled and it's before the expiration time or it's after the expiration time.\\r\\n        require(\\r\\n            (enableEarlyExpiration && getCurrentTime() < expirationTimestamp) ||\\r\\n                getCurrentTime() >= expirationTimestamp,\\r\\n            \\\"Cannot settle\\\"\\r\\n        );\\r\\n\\r\\n        // Get the settlement price and store it. Also sets expiryPercentLong to inform settlement. Reverts if either:\\r\\n        // a) the price request has not resolved (either a normal expiration call or early expiration call) or b) If the\\r\\n        // the contract was attempted to be settled early but the price returned is the ignore oracle price.\\r\\n        // Note that we use the bool receivedSettlementPrice over checking for price != 0 as 0 is a valid price.\\r\\n        if (!receivedSettlementPrice) getExpirationPrice();\\r\\n\\r\\n        require(longToken.burnFrom(msg.sender, longTokensToRedeem));\\r\\n        require(shortToken.burnFrom(msg.sender, shortTokensToRedeem));\\r\\n\\r\\n        // expiryPercentLong is a number between 0 and 1e18. 0 means all collateral goes to short tokens and 1e18 means\\r\\n        // all collateral goes to the long token. Total collateral returned is the sum of payouts.\\r\\n        uint256 longCollateralRedeemed =\\r\\n            FixedPoint\\r\\n                .Unsigned(longTokensToRedeem)\\r\\n                .mul(FixedPoint.Unsigned(collateralPerPair))\\r\\n                .mul(FixedPoint.Unsigned(expiryPercentLong))\\r\\n                .rawValue;\\r\\n        uint256 shortCollateralRedeemed =\\r\\n            FixedPoint\\r\\n                .Unsigned(shortTokensToRedeem)\\r\\n                .mul(FixedPoint.Unsigned(collateralPerPair))\\r\\n                .mul(FixedPoint.fromUnscaledUint(1).sub(FixedPoint.Unsigned(expiryPercentLong)))\\r\\n                .rawValue;\\r\\n\\r\\n        collateralReturned = longCollateralRedeemed + shortCollateralRedeemed;\\r\\n        collateralToken.safeTransfer(msg.sender, collateralReturned);\\r\\n\\r\\n        emit PositionSettled(msg.sender, collateralReturned, longTokensToRedeem, shortTokensToRedeem);\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *        GLOBAL STATE FUNCTIONS        *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Enables the LSP to request early expiration. This initiates a price request to the optimistic oracle at\\r\\n     * the provided timestamp with a modified version of the ancillary data that includes the key \\\"earlyExpiration:1\\\"\\r\\n     * which signals to the OO that this is an early expiration request, rather than standard settlement.\\r\\n     * @dev The caller must approve this contract to transfer `proposerReward` amount of collateral.\\r\\n     * @dev Will revert if: a) the contract is already early expired, b) it is after the expiration timestamp, c)\\r\\n     * early expiration is disabled for this contract, d) the proposed expiration timestamp is in the future.\\r\\n     * e) an early expiration attempt has already been made (in pending state).\\r\\n     * @param _earlyExpirationTimestamp timestamp at which the early expiration is proposed.\\r\\n     */\\r\\n    function requestEarlyExpiration(uint64 _earlyExpirationTimestamp)\\r\\n        public\\r\\n        nonReentrant()\\r\\n        notEarlyExpired()\\r\\n        preExpiration()\\r\\n    {\\r\\n        require(enableEarlyExpiration, \\\"Early expiration disabled\\\");\\r\\n        require(_earlyExpirationTimestamp <= getCurrentTime(), \\\"Only propose expire in the past\\\");\\r\\n        require(_earlyExpirationTimestamp > 0, \\\"Early expiration can't be 0\\\");\\r\\n\\r\\n        earlyExpirationTimestamp = _earlyExpirationTimestamp;\\r\\n\\r\\n        _requestOraclePrice(earlyExpirationTimestamp, getEarlyExpirationAncillaryData());\\r\\n\\r\\n        emit EarlyExpirationRequested(msg.sender, _earlyExpirationTimestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Expire the LSP contract. Makes a request to the optimistic oracle to inform the settlement price.\\r\\n     * @dev The caller must approve this contract to transfer `proposerReward` amount of collateral.\\r\\n     * @dev Will revert if: a) the contract is already early expired, b) it is before the expiration timestamp or c)\\r\\n     * an expire call has already been made.\\r\\n     */\\r\\n    function expire() public nonReentrant() notEarlyExpired() postExpiration() {\\r\\n        _requestOraclePrice(expirationTimestamp, customAncillaryData);\\r\\n\\r\\n        emit ContractExpired(msg.sender);\\r\\n    }\\r\\n\\r\\n    /***********************************\\r\\n     *      GLOBAL VIEW FUNCTIONS      *\\r\\n     ***********************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the number of long and short tokens a sponsor wallet holds.\\r\\n     * @param sponsor address of the sponsor to query.\\r\\n     * @return longTokens the number of long tokens held by the sponsor.\\r\\n     * @return shortTokens the number of short tokens held by the sponsor.\\r\\n     */\\r\\n    function getPositionTokens(address sponsor)\\r\\n        public\\r\\n        view\\r\\n        nonReentrantView()\\r\\n        returns (uint256 longTokens, uint256 shortTokens)\\r\\n    {\\r\\n        return (longToken.balanceOf(sponsor), shortToken.balanceOf(sponsor));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generates a modified ancillary data that indicates the contract is being expired early.\\r\\n     */\\r\\n    function getEarlyExpirationAncillaryData() public view returns (bytes memory) {\\r\\n        return AncillaryData.appendKeyValueUint(customAncillaryData, \\\"earlyExpiration\\\", 1);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Defines a special number that, if returned during an attempted early expiration, will cause the contract\\r\\n     * to do nothing and not expire. This enables the OO (and DVM voters in the case of a dispute) to choose to keep\\r\\n     * the contract running, thereby denying the early settlement request.\\r\\n     */\\r\\n    function ignoreEarlyExpirationPrice() public pure returns (int256) {\\r\\n        return type(int256).min;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice If the earlyExpirationTimestamp is != 0 then a previous early expiration OO request might still be in the\\r\\n     * pending state. Check if the OO contains the ignore early price. If it does not contain this then the contract\\r\\n     * was early expired correctly. Note that _getOraclePrice call will revert if the price request is still pending,\\r\\n     * thereby reverting all upstream calls pre-settlement of the early expiration price request.\\r\\n     */\\r\\n    function isContractEarlyExpired() public returns (bool) {\\r\\n        return (earlyExpirationTimestamp != 0 &&\\r\\n            _getOraclePrice(earlyExpirationTimestamp, getEarlyExpirationAncillaryData()) !=\\r\\n            ignoreEarlyExpirationPrice());\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          INTERNAL FUNCTIONS          *\\r\\n     ****************************************/\\r\\n\\r\\n    // Return the oracle price for a given request timestamp and ancillary data combo.\\r\\n    function _getOraclePrice(uint64 requestTimestamp, bytes memory requestAncillaryData) internal returns (int256) {\\r\\n        return _getOptimisticOracle().settleAndGetPrice(priceIdentifier, requestTimestamp, requestAncillaryData);\\r\\n    }\\r\\n\\r\\n    // Request a price in the optimistic oracle for a given request timestamp and ancillary data combo. Set the bonds\\r\\n    // accordingly to the deployer's parameters. Will revert if re-requesting for a previously requested combo.\\r\\n    function _requestOraclePrice(uint64 requestTimestamp, bytes memory requestAncillaryData) internal {\\r\\n        OptimisticOracleV2Interface optimisticOracle = _getOptimisticOracle();\\r\\n\\r\\n        // If the proposer reward was set then pull it from the caller of the function.\\r\\n        if (proposerReward > 0) {\\r\\n            collateralToken.safeTransferFrom(msg.sender, address(this), proposerReward);\\r\\n            collateralToken.safeApprove(address(optimisticOracle), proposerReward);\\r\\n        }\\r\\n        optimisticOracle.requestPrice(\\r\\n            priceIdentifier,\\r\\n            uint256(requestTimestamp),\\r\\n            requestAncillaryData,\\r\\n            collateralToken,\\r\\n            proposerReward\\r\\n        );\\r\\n\\r\\n        // Set the Optimistic oracle liveness for the price request.\\r\\n        optimisticOracle.setCustomLiveness(\\r\\n            priceIdentifier,\\r\\n            uint256(requestTimestamp),\\r\\n            requestAncillaryData,\\r\\n            optimisticOracleLivenessTime\\r\\n        );\\r\\n\\r\\n        // Set the Optimistic oracle proposer bond for the price request.\\r\\n        optimisticOracle.setBond(\\r\\n            priceIdentifier,\\r\\n            uint256(requestTimestamp),\\r\\n            requestAncillaryData,\\r\\n            optimisticOracleProposerBond\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Fetch the optimistic oracle expiration price. If the oracle has the price for the provided expiration timestamp\\r\\n    // and customData combo then return this. Else, try fetch the price on the early expiration ancillary data. If\\r\\n    // there is no price for either, revert. If the early expiration price is the ignore price will also revert.\\r\\n    function getExpirationPrice() internal {\\r\\n        if (_getOptimisticOracle().hasPrice(address(this), priceIdentifier, expirationTimestamp, customAncillaryData))\\r\\n            expiryPrice = _getOraclePrice(expirationTimestamp, customAncillaryData);\\r\\n        else {\\r\\n            expiryPrice = _getOraclePrice(earlyExpirationTimestamp, getEarlyExpirationAncillaryData());\\r\\n            require(expiryPrice != ignoreEarlyExpirationPrice(), \\\"Oracle prevents early expiration\\\");\\r\\n        }\\r\\n\\r\\n        // Finally, compute the value of expiryPercentLong based on the expiryPrice. Cap the return value at 1e18 as\\r\\n        // this should, by definition, between 0 and 1e18.\\r\\n        expiryPercentLong = Math.min(\\r\\n            financialProductLibrary.percentageLongCollateralAtExpiry(expiryPrice),\\r\\n            FixedPoint.fromUnscaledUint(1).rawValue\\r\\n        );\\r\\n\\r\\n        receivedSettlementPrice = true;\\r\\n    }\\r\\n\\r\\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n\\r\\n    function _getCollateralWhitelist() internal view returns (AddressWhitelistInterface) {\\r\\n        return AddressWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\\r\\n    }\\r\\n\\r\\n    function _getOptimisticOracle() internal view returns (OptimisticOracleV2Interface) {\\r\\n        return OptimisticOracleV2Interface(finder.getImplementationAddress(OracleInterfaces.OptimisticOracleV2));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd947d185103c7480b327c2dc4d5730d6dea5ba202657a607721f74b529a7f720\",\"license\":\"AGPL-3.0-only\"},\"contracts/financial-templates/long-short-pair/LongShortPairCreator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../../common/interfaces/ExpandedIERC20.sol\\\";\\r\\nimport \\\"../../common/interfaces/IERC20Standard.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../common/TokenFactory.sol\\\";\\r\\nimport \\\"./LongShortPair.sol\\\";\\r\\nimport \\\"../common/financial-product-libraries/long-short-pair-libraries/LongShortPairFinancialProductLibrary.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Long Short Pair Contract Creator.\\r\\n * @notice Factory contract to create new instances of long short pair contracts.\\r\\n * Responsible for constraining the parameters used to construct a new LSP. These constraints can evolve over time and\\r\\n * are initially constrained to conservative values in this first iteration.\\r\\n */\\r\\ncontract LongShortPairCreator is Testable, Lockable {\\r\\n    using FixedPoint for FixedPoint.Unsigned;\\r\\n    using SafeERC20 for IERC20Standard;\\r\\n\\r\\n    struct CreatorParams {\\r\\n        string pairName;\\r\\n        uint64 expirationTimestamp;\\r\\n        uint256 collateralPerPair;\\r\\n        bytes32 priceIdentifier;\\r\\n        bool enableEarlyExpiration;\\r\\n        string longSynthName;\\r\\n        string longSynthSymbol;\\r\\n        string shortSynthName;\\r\\n        string shortSynthSymbol;\\r\\n        IERC20Standard collateralToken;\\r\\n        LongShortPairFinancialProductLibrary financialProductLibrary;\\r\\n        bytes customAncillaryData;\\r\\n        uint256 proposerReward;\\r\\n        uint256 optimisticOracleLivenessTime;\\r\\n        uint256 optimisticOracleProposerBond;\\r\\n    }\\r\\n\\r\\n    // Address of TokenFactory used to create a new synthetic token.\\r\\n    TokenFactory public tokenFactory;\\r\\n\\r\\n    FinderInterface public finder;\\r\\n\\r\\n    event CreatedLongShortPair(\\r\\n        address indexed longShortPair,\\r\\n        address indexed deployerAddress,\\r\\n        address longToken,\\r\\n        address shortToken\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the LongShortPairCreator contract.\\r\\n     * @param _finder UMA protocol Finder used to discover other protocol contracts.\\r\\n     * @param _tokenFactory ERC20 token factory used to deploy synthetic token instances.\\r\\n     * @param _timer Contract that stores the current time in a testing environment.\\r\\n     */\\r\\n    constructor(\\r\\n        FinderInterface _finder,\\r\\n        TokenFactory _tokenFactory,\\r\\n        address _timer\\r\\n    ) Testable(_timer) nonReentrant() {\\r\\n        tokenFactory = _tokenFactory;\\r\\n        finder = _finder;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Creates a longShortPair contract and associated long and short tokens.\\r\\n     * @param params Constructor params used to initialize the LSP. Key-valued object with the following structure:\\r\\n     *     - `pairName`: Name of the long short pair contract.\\r\\n     *     - `expirationTimestamp`: Unix timestamp of when the contract will expire.\\r\\n     *     - `collateralPerPair`: How many units of collateral are required to mint one pair of synthetic tokens.\\r\\n     *     - `priceIdentifier`: Registered in the DVM for the synthetic.\\r\\n     *     - `enableEarlyExpiration`: Enables the LSP contract to be settled early.\\r\\n     *     - `longSynthName`: Name of the long synthetic tokens to be created.\\r\\n     *     - `longSynthSymbol`: Symbol of the long synthetic tokens to be created.\\r\\n     *     - `shortSynthName`: Name of the short synthetic tokens to be created.\\r\\n     *     - `shortSynthSymbol`: Symbol of the short synthetic tokens to be created.\\r\\n     *     - `collateralToken`: ERC20 token used as collateral in the LSP.\\r\\n     *     - `financialProductLibrary`: Contract providing settlement payout logic.\\r\\n     *     - `customAncillaryData`: Custom ancillary data to be passed along with the price request. If not needed, this\\r\\n     *                              should be left as a 0-length bytes array.\\r\\n     *     - `proposerReward`: Optimistic oracle reward amount, pulled from the caller of the expire function.\\r\\n     *     - `optimisticOracleLivenessTime`: Optimistic oracle liveness time for price requests.\\r\\n     *     - `optimisticOracleProposerBond`: Optimistic oracle proposer bond for price requests.\\r\\n     * @return lspAddress the deployed address of the new long short pair contract.\\r\\n     * @notice Created LSP is not registered within the registry as the LSP uses the Optimistic Oracle for settlement.\\r\\n     * @notice The LSP constructor does a number of validations on input params. These are not repeated here.\\r\\n     */\\r\\n    function createLongShortPair(CreatorParams memory params) public nonReentrant() returns (address) {\\r\\n        // Create a new synthetic token using the params.\\r\\n        require(bytes(params.longSynthName).length != 0, \\\"Missing long synthetic name\\\");\\r\\n        require(bytes(params.shortSynthName).length != 0, \\\"Missing short synthetic name\\\");\\r\\n        require(bytes(params.longSynthSymbol).length != 0, \\\"Missing long synthetic symbol\\\");\\r\\n        require(bytes(params.shortSynthSymbol).length != 0, \\\"Missing short synthetic symbol\\\");\\r\\n\\r\\n        // If the collateral token does not have a `decimals()` method, then a default precision of 18 will be\\r\\n        // applied to the newly created synthetic token.\\r\\n        uint8 collateralDecimals = _getSyntheticDecimals(params.collateralToken);\\r\\n        ExpandedIERC20 longToken =\\r\\n            tokenFactory.createToken(params.longSynthName, params.longSynthSymbol, collateralDecimals);\\r\\n        ExpandedIERC20 shortToken =\\r\\n            tokenFactory.createToken(params.shortSynthName, params.shortSynthSymbol, collateralDecimals);\\r\\n\\r\\n        // Deploy the LSP contract.\\r\\n        LongShortPair lsp = new LongShortPair(_convertParams(params, longToken, shortToken));\\r\\n\\r\\n        address lspAddress = address(lsp);\\r\\n\\r\\n        // Give permissions to new lsp contract and then hand over ownership.\\r\\n        longToken.addMinter(lspAddress);\\r\\n        longToken.addBurner(lspAddress);\\r\\n        longToken.resetOwner(lspAddress);\\r\\n\\r\\n        shortToken.addMinter(lspAddress);\\r\\n        shortToken.addBurner(lspAddress);\\r\\n        shortToken.resetOwner(lspAddress);\\r\\n\\r\\n        emit CreatedLongShortPair(lspAddress, msg.sender, address(longToken), address(shortToken));\\r\\n\\r\\n        return lspAddress;\\r\\n    }\\r\\n\\r\\n    // Converts createLongShortPair creator params to LongShortPair constructor params.\\r\\n    function _convertParams(\\r\\n        CreatorParams memory creatorParams,\\r\\n        ExpandedIERC20 longToken,\\r\\n        ExpandedIERC20 shortToken\\r\\n    ) private view returns (LongShortPair.ConstructorParams memory constructorParams) {\\r\\n        // Input from function call.\\r\\n        constructorParams.pairName = creatorParams.pairName;\\r\\n        constructorParams.expirationTimestamp = creatorParams.expirationTimestamp;\\r\\n        constructorParams.collateralPerPair = creatorParams.collateralPerPair;\\r\\n        constructorParams.priceIdentifier = creatorParams.priceIdentifier;\\r\\n        constructorParams.enableEarlyExpiration = creatorParams.enableEarlyExpiration;\\r\\n        constructorParams.collateralToken = creatorParams.collateralToken;\\r\\n        constructorParams.financialProductLibrary = creatorParams.financialProductLibrary;\\r\\n        constructorParams.customAncillaryData = creatorParams.customAncillaryData;\\r\\n        constructorParams.proposerReward = creatorParams.proposerReward;\\r\\n        constructorParams.optimisticOracleLivenessTime = creatorParams.optimisticOracleLivenessTime;\\r\\n        constructorParams.optimisticOracleProposerBond = creatorParams.optimisticOracleProposerBond;\\r\\n\\r\\n        // Constructed long & short synthetic tokens.\\r\\n        constructorParams.longToken = longToken;\\r\\n        constructorParams.shortToken = shortToken;\\r\\n\\r\\n        // Finder and timer. Should be the same as that used in this factory contract.\\r\\n        constructorParams.finder = finder;\\r\\n        constructorParams.timerAddress = timerAddress;\\r\\n    }\\r\\n\\r\\n    // IERC20Standard.decimals() will revert if the collateral contract has not implemented the decimals() method,\\r\\n    // which is possible since the method is only an OPTIONAL method in the ERC20 standard:\\r\\n    // https://eips.ethereum.org/EIPS/eip-20#methods.\\r\\n    function _getSyntheticDecimals(IERC20Standard _collateralToken) private view returns (uint8 decimals) {\\r\\n        try _collateralToken.decimals() returns (uint8 _decimals) {\\r\\n            return _decimals;\\r\\n        } catch {\\r\\n            return 18;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdbafc01b12fdaf14de5a4373e57eaab7e1a3f7e964e5920f69cb362d2354a04d\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OptimisticOracleV2Interface {\\r\\n    event RequestPrice(\\r\\n        address indexed requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        address currency,\\r\\n        uint256 reward,\\r\\n        uint256 finalFee\\r\\n    );\\r\\n    event ProposePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice,\\r\\n        uint256 expirationTimestamp,\\r\\n        address currency\\r\\n    );\\r\\n    event DisputePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    );\\r\\n    event Settle(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 price,\\r\\n        uint256 payout\\r\\n    );\\r\\n    // Struct representing the state of a price request.\\r\\n    enum State {\\r\\n        Invalid, // Never requested.\\r\\n        Requested, // Requested, no other actions taken.\\r\\n        Proposed, // Proposed, but not expired or disputed yet.\\r\\n        Expired, // Proposed, not disputed, past liveness.\\r\\n        Disputed, // Disputed, but no DVM price returned yet.\\r\\n        Resolved, // Disputed and DVM price is available.\\r\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\r\\n    }\\r\\n\\r\\n    struct RequestSettings {\\r\\n        bool eventBased; // True if the request is set to be event-based.\\r\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\r\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\r\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\r\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\r\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\r\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\r\\n    }\\r\\n\\r\\n    // Struct representing a price request.\\r\\n    struct Request {\\r\\n        address proposer; // Address of the proposer.\\r\\n        address disputer; // Address of the disputer.\\r\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\r\\n        bool settled; // True if the request is settled.\\r\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\r\\n        int256 proposedPrice; // Price that the proposer submitted.\\r\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\r\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\r\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\r\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    function defaultLiveness() external view virtual returns (uint256);\\r\\n\\r\\n    function finder() external view virtual returns (FinderInterface);\\r\\n\\r\\n    function getCurrentTime() external view virtual returns (uint256);\\r\\n\\r\\n    // Note: this is required so that typechain generates a return value with named fields.\\r\\n    mapping(bytes32 => Request) public requests;\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\r\\n     * This can be changed with a subsequent call to setBond().\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Set the proposal bond associated with a price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param bond custom bond amount to set.\\r\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\r\\n     * changed again with a subsequent call to setBond().\\r\\n     */\\r\\n    function setBond(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 bond\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\r\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\r\\n     * bond, so there is still profit to be made even if the reward is refunded.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setRefundOnDispute(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\r\\n     * being auto-resolved.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param customLiveness new custom liveness.\\r\\n     */\\r\\n    function setCustomLiveness(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 customLiveness\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\r\\n     * @dev Calling this method has a few impacts on the request:\\r\\n     *\\r\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\r\\n     *    with the request.\\r\\n     *\\r\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\r\\n     *    prematurely proposes a response loses their bond.\\r\\n     *\\r\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\r\\n     *    the requesting contract.\\r\\n     *\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setEventBased(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets which callbacks should be enabled for the request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\r\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\r\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\r\\n     */\\r\\n    function setCallbacks(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        bool callbackOnPriceProposed,\\r\\n        bool callbackOnPriceDisputed,\\r\\n        bool callbackOnPriceSettled\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address proposer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value for an existing price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        address disputer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\r\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\r\\n     * hasn't been settled.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return resolved price.\\r\\n     */\\r\\n    function settleAndGetPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (int256);\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 payout);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current data structure containing all information about a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the Request data structure.\\r\\n     */\\r\\n    function getRequest(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (Request memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state of a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the State enum value.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (State);\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return true if price has resolved or settled, false otherwise.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x2090e3131c2b84fdb4ab163cdcc069f489c9781ae49678993957ecd516d12fea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610156200001357600080fd5b6000803560e01c8063124b4e3514620001975780631c39c38d146200016e57806322f8e56614620000e557806329cb924d14620000be578063b9a3c84c14620000935763e77772fe146200006657600080fd5b3462000090578060031936011262000090576001546040516001600160a01b039091168152602090f35b80fd5b503462000090578060031936011262000090576002546040516001600160a01b039091168152602090f35b503462000090578060031936011262000090576020620000dd62000cd3565b604051908152f35b5034620000905760203660031901126200009057805481906001600160a01b031680156200016b57803b156200016b5781809160246040518094819363117c72b360e11b835260043560048401525af18015620001605762000148575b50604051f35b620001539062000c2d565b6200009057803862000142565b6040513d84823e3d90fd5b50fd5b50346200009057806003193601126200009057546040516001600160a01b039091168152602090f35b503462000090576003196020368201126200096f576001600160401b03600435116200096f576101e090600435360301126200009057620001d9608062000bfa565b600435600401356001600160401b0381116200096f576200020290600436918135010162000cb2565b608052602460043501356001600160401b03811681036200096f5760a052600435604481013560c052606481013560e0526084013580151581036200096f576101005260043560a401356001600160401b0381116200096f576200026e90600436918135010162000cb2565b6101205260043560c401356001600160401b0381116200096f576200029b90600436918135010162000cb2565b6101405260043560e401356001600160401b0381116200096f57620002c890600436918135010162000cb2565b6101605260043561010401356001600160401b0381116200096f57620002f690600436918135010162000cb2565b6101805260043561012401356001600160a01b03811681036200096f576101a05260043561014401356001600160a01b038116900362000090576004356101448101356101c05261016401356001600160401b0381116200096f5736602382600435010112156200096f576200037e9036906024600482813501013591600435010162000c63565b6101e052600435610184810135610200526101a4810135610220526101c4013561024052805460a081901c60ff161562000bb55760ff60a01b1916815561012051511562000b705761016051511562000b2b5761014051511562000ae65761018051511562000aa1576101a05162000444919062000405906001600160a01b031662000df0565b600154610120516101405160405163e8a0aed360e01b81529593949360209387936001600160a01b03909116928492879284928a916004850162000db9565b03925af191821562000a21576200049b93829362000a7a575b50600154610160516101805160405163e8a0aed360e01b81529660209488946001600160a01b03169385938893859390929091906004850162000db9565b03925af192831562000a2157819362000a42575b50604051620004be8162000bfa565b606081528160208201528160408201528160608201528160808201528160a08201528160c08201528160e0820152816101008201526060610120820152816101408201528161016082015281610180820152816101a0820152816101c082015260805181526001600160401b036020608001511660208201526040608001516040820152606060800151606082015260808001511515608082015260018060a01b03610120608001511660e082015260018060a01b03610140608001511661010082015261016060800151610120820152610180608001516101408201526101a0608001516101608201526101c06080015161018082015260018060a01b03831660a082015260018060a01b03841660c082015260018060a01b03600254166101a082015260018060a01b038254166101c082015260405190816130b68101106001600160401b036130b68401111762000a2e5781906130b662000e6e833960206130b6830152620006e96200064b82516101e060206130b6870101526102006130b68601019062000d77565b60208301516001600160401b031660406130b6860181810192909252840151606080830191909152840151608080830191909152840151151560a0808301919091528401516001600160a01b0390811660c080840191909152850151811660e0808401919091528501518116610100808401919091528501511661012080830191909152840151818303601f19016101409092019190915262000d77565b906101408101516101606130b6850101526101608101516101806130b6850101526101808101516101a06130b68501015260018060a01b036101a0820151166101c06130b6850101526101c060018060a01b03910151166101e06130b684010152039082f0801562000a21576001600160a01b03908116929081163b156200096f57604051634c1d96ab60e11b80825260048201859052908381602481836001600160a01b0388165af180156200099a5762000a0b575b506001600160a01b0382163b156200097e57604051637a231bdd60e11b80825260048201869052908481602481836001600160a01b0389165af18015620009c157908591620009f3575b50506001600160a01b0383163b15620009a5576040516339e6401560e11b8082526004820187905292908581602481836001600160a01b038a165af18015620009e857908691620009d0575b50506001600160a01b0387163b15620009cc57604051908152600481018690528481602481836001600160a01b038c165af18015620009c157908591620009a9575b50506001600160a01b0386163b15620009a557604051908152600481018590528381602481836001600160a01b038b165af180156200099a5790849162000982575b50506001600160a01b0385163b156200097e57604051908152600481018490528281602481836001600160a01b038a165af18015620009735762000957575b506020936040519160018060a01b0316825260018060a01b031684820152827fd007d1b8d04c15a0cadef913ed5a5c4b381d3dcd2927c2de9a6dcc1ddab2d2f860403393a3805460ff60a01b1916600160a01b179055604051908152f35b62000963839162000c2d565b6200096f5738620008f9565b5080fd5b6040513d85823e3d90fd5b8280fd5b6200098d9062000c2d565b6200097e578238620008ba565b6040513d86823e3d90fd5b8380fd5b620009b49062000c2d565b620009a557833862000878565b6040513d87823e3d90fd5b8480fd5b620009db9062000c2d565b620009cc57843862000836565b6040513d88823e3d90fd5b620009fe9062000c2d565b620009a5578338620007ea565b62000a199093919362000c2d565b9138620007a0565b50604051903d90823e3d90fd5b634e487b7160e01b83526041600452602483fd5b62000a6a91935060203d60201162000a72575b62000a61818362000c41565b81019062000d56565b9138620004af565b503d62000a55565b602091935062000a9990823d841162000a725762000a61818362000c41565b92906200045d565b60405162461bcd60e51b815260206004820152601e60248201527f4d697373696e672073686f72742073796e7468657469632073796d626f6c00006044820152606490fd5b60405162461bcd60e51b815260206004820152601d60248201527f4d697373696e67206c6f6e672073796e7468657469632073796d626f6c0000006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f4d697373696e672073686f72742073796e746865746963206e616d65000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d697373696e67206c6f6e672073796e746865746963206e616d6500000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6101e081019081106001600160401b0382111762000c1757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160401b03811162000c1757604052565b90601f801991011681019081106001600160401b0382111762000c1757604052565b9291926001600160401b03821162000c17576040519162000c8f601f8201601f19166020018462000c41565b82948184528183011162000cad578281602093846000960137010152565b600080fd5b9080601f8301121562000cad5781602062000cd09335910162000c63565b90565b6000546001600160a01b0316801562000d51576020600491604051928380926329cb924d60e01b82525afa90811562000d455760009162000d12575090565b906020823d821162000d3c575b8162000d2e6020938362000c41565b810103126200009057505190565b3d915062000d1f565b6040513d6000823e3d90fd5b504290565b9081602091031262000cad57516001600160a01b038116810362000cad5790565b919082519283825260005b84811062000da4575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520162000d82565b9162000de960ff9162000dda60409497969760608752606087019062000d77565b90858203602087015262000d77565b9416910152565b60405163313ce56760e01b815290602090829060049082906001600160a01b03165afa809160009162000e2b575b509062000cd05750601290565b6020813d821162000e64575b8162000e466020938362000c41565b810103126200096f57519060ff821682036200009057503862000e1e565b3d915062000e3756fe608080604052346200078f57620030b6803803809162000020828562000df5565b83398101906020818303126200078f578051906001600160401b0382116200078f576101e090818382018503126200078f576040519182016001600160401b03811183821017620008bf57604052808301516001600160401b0381116200078f578382010184601f820112156200078f5784816020620000a39351910162000e5a565b8252808301602001516001600160401b03811681036200078f5760208301528083016040818101519084015260608082015190840152620000e79060800162000e98565b6080830152620000fc60a08483010162000ea6565b60a08301526200011160c08483010162000ea6565b60c083015280830160e001516001600160a01b03811681036200078f5760e08301526101008184018101519091906001600160a01b03811681036200078f578284015261012084820181015190956001600160401b0382116200078f576200017d918684010162000ebb565b858401526101408482018181015182860152610160808201519086015261018080820151908601526101a00151909490916001600160a01b03831683036200078f57620001d990836101a08701526101c0928391010162000ea6565b908401819052600080546001600160a81b0319166001600160a01b0392831617600160a01b179055600a80546001600160a01b0319169183169190911790558251511562000db05760208301516001600160401b03166200023962000ff8565b101562000d6b5760408301511562000d26576040516302abf57960e61b81527f4964656e74696669657257686974656c6973740000000000000000000000000060048201526020816024816001600160a01b0386165afa9081156200079d5760009162000ce4575b50602060608501516024604051809481936390978d1b60e01b8352600483015260018060a01b03165afa9081156200079d5760009162000ca2575b501562000c5d576001600160a01b03620002f5620010fa565b161562000c2757828201516001600160a01b03161562000be2576040516302abf57960e61b81527f436f6c6c61746572616c57686974656c69737400000000000000000000000000600482015290602090829060249082906001600160a01b03165afa9081156200079d5760009162000ba0575b5060e0830151604051631d1d5b3960e11b81526001600160a01b0391821660048201529160209183916024918391165afa9081156200079d5760009162000b5e575b501562000b19576101608201511562000ad45763bb744800610160830151101562000a8f5781518051906001600160401b038211620008bf578190620003f360025462000edb565b601f811162000a4d575b50602090601f8311600114620009cf57600092620009c3575b50508160011b916000199060031b1c1916176002555b602082015160008054604085015160035560608501516005556080850151600160b01b600160f81b031990911660b89390931b600160b81b600160f81b03169290921791151560b01b60ff60b01b1691909117905560a0820151600880546001600160a01b03199081166001600160a01b039384161790915560c084015160098054831691841691909117905560e084015160078054831691841691909117905591830151600b80549093169116179055620004e7620010fa565b9281015180519093906001600160401b038111620008bf576200050c600c5462000edb565b601f811162000964575b50602094601f8211600114620008f757948192939495600092620008eb575b50508160011b916000199060031b1c191617600c555b60005460b01c60ff1615620008d5576200056462000f31565b604080519081018082116001600160401b0390911117620008bf57806040620005ae9201604052600f81526e32b0b9363ca2bc3834b930ba34b7b760891b60208201528262001072565b906000600180805b620008a5575080620005c88362000e19565b92620005d8604051948562000df5565b808452601f19620005e98262000e19565b01366020860137905b620007f75750509162000659602060009360649695604051948262000621879451809287808801910162000e35565b8301620006378251809387808501910162000e35565b016200064c8251809386808501910162000e35565b0103808452018262000df5565b915b6040519384809263af5d2f3960e01b8252604060048301526200068e865180978160448601526020868601910162000e35565b3060248301526001600160a01b031694601f01601f19168101030181845afa9182156200079d57600092620007a9575b50602060049251916040519384809263c371dda760e01b82525afa9182156200079d576000926200075e575b5011620007195761018091810151600d55610160810151600e550151600f55604051611f069081620011908239f35b60405162461bcd60e51b815260206004820152601760248201527f416e63696c6c617279204461746120746f6f206c6f6e670000000000000000006044820152606490fd5b9091506020813d60201162000794575b816200077d6020938362000df5565b810103126200078f57519038620006ea565b600080fd5b3d91506200076e565b6040513d6000823e3d90fd5b91503d806000843e620007bd818462000df5565b8201916020818403126200078f578051906001600160401b0382116200078f57600493602092620007ef920162000ebb565b9250620006be565b600019908181018181116200088f578093600a8104809404600a11841515166200088f57600a840281039081116200088f5760ff166030019060ff82116200088f5785511115620008795760f81b7fff000000000000000000000000000000000000000000000000000000000000001660001a908401601f01539081620005f2565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b9160001981146200088f576001600a9101920480620005b6565b634e487b7160e01b600052604160045260246000fd5b6064906000620008e462000f31565b916200065b565b01519050388062000535565b601f19821695600c60005260206000209160005b8881106200094b5750836001959697981062000931575b505050811b01600c556200054b565b015160001960f88460031b161c1916905538808062000922565b919260206001819286850151815501940192016200090b565b600c600052620009b1907fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7601f840160051c81019160208510620009b8575b601f0160051c019062000f18565b3862000516565b9091508190620009a3565b01519050388062000416565b6002600090815293506000805160206200309683398151915291905b601f198416851062000a31576001945083601f1981161062000a17575b505050811b016002556200042c565b015160001960f88460031b161c1916905538808062000a08565b81810151835560209485019460019093019290910190620009eb565b600260005262000a889060008051602062003096833981519152601f850160051c81019160208610620009b857601f0160051c019062000f18565b38620003fd565b60405162461bcd60e51b815260206004820152601560248201527f4f4f206c6976656e65737320746f6f206c6172676500000000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f4f4f206c6976656e6573732063616e6e6f7420626520300000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f436f6c6c61746572616c206e6f742077686974656c69737465640000000000006044820152606490fd5b90506020813d60201162000b97575b8162000b7c6020938362000df5565b810103126200078f5762000b909062000e98565b38620003ab565b3d915062000b6d565b90506020813d60201162000bd9575b8162000bbe6020938362000df5565b810103126200078f5762000bd29062000ea6565b3862000369565b3d915062000baf565b60405162461bcd60e51b815260206004820152601f60248201527f496e76616c69642046696e616e6369616c50726f647563744c696272617279006044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b2103334b73232b960911b6044820152606490fd5b60405162461bcd60e51b815260206004820152601960248201527f4964656e746966696572206e6f742072656769737465726564000000000000006044820152606490fd5b90506020813d60201162000cdb575b8162000cc06020938362000df5565b810103126200078f5762000cd49062000e98565b38620002dc565b3d915062000cb1565b90506020813d60201162000d1d575b8162000d026020938362000df5565b810103126200078f5762000d169062000ea6565b38620002a1565b3d915062000cf3565b60405162461bcd60e51b815260206004820152601f60248201527f436f6c6c61746572616c2070657220706169722063616e6e6f742062652030006044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f45787069726174696f6e2074696d657374616d7020696e2070617374000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601760248201527f50616972206e616d652063616e7420626520656d7074790000000000000000006044820152606490fd5b601f909101601f19168101906001600160401b03821190821017620008bf57604052565b6001600160401b038111620008bf57601f01601f191660200190565b60005b83811062000e495750506000910152565b818101518382015260200162000e38565b9092919262000e698162000e19565b9162000e79604051938462000df5565b8294828452828201116200078f57602062000e9693019062000e35565b565b519081151582036200078f57565b51906001600160a01b03821682036200078f57565b9080601f830112156200078f57815162000ed89260200162000e5a565b90565b90600182811c9216801562000f0d575b602083101462000ef757565b634e487b7160e01b600052602260045260246000fd5b91607f169162000eeb565b81811062000f24575050565b6000815560010162000f18565b60405190600082600c549162000f478362000edb565b80835260019380851690811562000fd5575060011462000f71575b5062000e969250038362000df5565b600c60009081527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c794602093509091905b81831062000fbc57505062000e9693508201013862000f62565b8554888401850152948501948794509183019162000fa2565b905062000e9694506020925060ff191682840152151560051b8201013862000f62565b6000546001600160a01b031680156200106d576020600491604051928380926329cb924d60e01b82525afa9081156200079d5760009162001037575090565b906020823d821162001064575b81620010536020938362000df5565b810103126200106157505190565b80fd5b3d915062001044565b504290565b5115620010bf5762000ed860226040518093600b60fa1b6020830152620010a481518092602060218601910162000e35565b8101601d60f91b602182015203600281018452018262000df5565b62000ed8602160405183620010df82955180926020808601910162000e35565b8101601d60f91b602082015203600181018452018262000df5565b600a546040516302abf57960e61b81527127b83a34b6b4b9ba34b1a7b930b1b632ab1960711b60048201526001600160a01b03916020908290602490829086165afa9081156200079d576000916200115157501690565b906020823d821162001186575b816200116d6020938362000df5565b81010312620010615750620011829062000ea6565b1690565b3d91506200115e56fe608060408181526004918236101561001657600080fd5b600092833560e01c9182631c39c38d146112465750816322f8e566146111b857816329cb924d1461119457816340794c3b146110c15781634eef4a7314610fb55781634fe4ecbf14610f9657816358aee81514610f7157816374d3aa7e14610f52578163780900dc14610dad57816379599f9614610cc75781638150fd3d14610be157816383f8928614610bac57816385c9847414610b8d57816390392ae314610b685781639375f0e914610b3f5781639752366114610b205781639a9c29f6146106655781639da49b1a1461063d5781639f43ddd214610614578163a9ae29df146105f6578163b2016bd4146105cd578163b66333cd146105a4578163b9a3c84c1461057b578163c1e7d9b714610555578163cd4670f214610398578163d564fddd14610379578163db006a75146101d657508063e3065da7146101ae578063e964ae02146101905763edfa9a9b1461016f57600080fd5b3461018c578160031936011261018c576020906006549051908152f35b5080fd5b503461018c578160031936011261018c576020906003549051908152f35b503461018c578160031936011261018c5760095490516001600160a01b039091168152602090f35b90508234610376576020918260031936011261018c5780356101f661177a565b6000805460ff60a01b19908116909155600854865163079cc67960e41b808252338683019081526020810186905293956001600160a01b03949193909291899183918290036040019082908b9089165af190811561036c57879161034f575b501561034b57600954885192835233918301918252602082018590528791839185169082908990829060400103925af1908115610341578591610314575b501561031057856102c76102d7959697516102ad816112a4565b848152600354908351916102c0836112a4565b8252611817565b51948580933390600754166117cf565b51947fd171fb179b26c49e23fe46eddd44d3048a1ad277b62144ac0725fbcf1dbf6d52339187a4600160a01b9060005416176000558152f35b8380fd5b6103349150863d881161033a575b61032c81836112f0565b8101906114c4565b87610293565b503d610322565b87513d87823e3d90fd5b8580fd5b6103669150883d8a1161033a5761032c81836112f0565b89610255565b89513d89823e3d90fd5b80fd5b50503461018c578160031936011261018c57602090600d549051908152f35b9050346105515760203660031901126105515780356001600160401b039182821680920361054d576103c861177a565b60ff8060a01b199384600054166000556103e96103e3611a8a565b1561184e565b6104026103f46113fd565b8854928360b81c1611611478565b60b01c161561050a576104136113fd565b82116104c75781156104845750610448600154826001600160401b0319821617600155828661044061189a565b921617611b4e565b82519081527fe8f97c669cce9e6c955d0f1401760518c4d53fa550bcd00b4c21d16b7d91652560203392a2600160a01b90600054161760005551f35b606490602085519162461bcd60e51b8352820152601b60248201527f4561726c792065787069726174696f6e2063616e2774206265203000000000006044820152fd5b606490602085519162461bcd60e51b8352820152601f60248201527f4f6e6c792070726f706f73652065787069726520696e207468652070617374006044820152fd5b606490602085519162461bcd60e51b8352820152601960248201527f4561726c792065787069726174696f6e2064697361626c6564000000000000006044820152fd5b8480fd5b8280fd5b50503461018c578160031936011261018c57602090610572611a8a565b90519015158152f35b50503461018c578160031936011261018c57600a5490516001600160a01b039091168152602090f35b50503461018c578160031936011261018c5760085490516001600160a01b039091168152602090f35b50503461018c578160031936011261018c5760075490516001600160a01b039091168152602090f35b90503461055157826003193601126105515760209250549051908152f35b50503461018c578160031936011261018c576001600160401b036020925460b81c169051908152f35b50503461018c578160031936011261018c576020906001600160401b03600154169051908152f35b83833461018c578060031936011261018c5760248335813561068561177a565b60ff60a01b19928360005416600055855460ff8160b01c1680610b04575b8015610ae7575b15610ab55760ff8160a81c16156108d9575b50600854855163079cc67960e41b808252338a830190815260208082018890529a6001600160a01b0395949093918c9183918290036040019082908e908a165af19081156108cf578a916108b2575b50156108ae57600954885191825233838301908152602081018790528b9183918290036040019082908d9089165af19081156108a4578991610887575b50156108835761080c87519861075d8a6112a4565b868a526107ff61077e6003549b8b5190610776826112a4565b8d8252611817565b6107b761079b8654928d5190610793826112a4565b848252611817565b519c8c516107a8816112a4565b8a81528d51916102c0836112a4565b92808c516107c4816112a4565b528b51906107d1826112a4565b670de0b6b3a764000082528c51926107e8846112a4565b83528c516107f5816112a4565b5251905190611841565b908951916102c0836112a4565b51880180981161087057505085610828913390600754166117cf565b83519185835286830152838201527fe8fdc264e5a5640d893f125384c4e2c5afe2d9a04aef1129e643caaa72771cff60603392a2600160a01b90600054161760005551908152f35b601190634e487b7160e01b600052526000fd5b8780fd5b61089e91508a3d8c1161033a5761032c81836112f0565b8a610748565b88513d8b823e3d90fd5b8880fd5b6108c991508b3d8d1161033a5761032c81836112f0565b8b61070b565b89513d8c823e3d90fd5b6001600160a01b03806108ea611e43565b16916005548851938491635e2c665560e11b8352308d840152868301526001600160401b03809360b81c166044830152608060648301526020948591818061093460848201611359565b03915afa9081156108cf578a91610a98575b5015610a335761097290895460b81c1688519061096d8261096681611359565b03836112f0565b611abb565b6006555b600b541681600654848b8a519485938492632da5236160e01b84528301525afa918215610a295788926109f6575b50508686516109b2816112a4565b5285516109be816112a4565b670de0b6b3a76400008091528082106000146109ef57505b8755855460ff60a81b1916600160a81b178655876106bc565b90506109d6565b90809250813d8311610a22575b610a0d81836112f0565b81010312610a1d575188806109a4565b600080fd5b503d610a03565b87513d8a823e3d90fd5b610a499060015416610a4361189a565b90611abb565b6006819055600160ff1b03610976576064898385818b519362461bcd60e51b85528401528201527f4f7261636c652070726576656e7473206561726c792065787069726174696f6e6044820152fd5b610aaf9150843d861161033a5761032c81836112f0565b8b610946565b855162461bcd60e51b81526020818a0152600d818401526c43616e6e6f7420736574746c6560981b6044820152606490fd5b50610af06113fd565b6001600160401b038260b81c1611156106aa565b50610b0d6113fd565b6001600160401b038260b81c16116106a3565b50503461018c578160031936011261018c576020906005549051908152f35b50503461018c578160031936011261018c57600b5490516001600160a01b039091168152602090f35b50503461018c578160031936011261018c5760ff6020925460a81c1690519015158152f35b50503461018c578160031936011261018c57602090600f549051908152f35b50503461018c578160031936011261018c57610bdd90610bca61189a565b9051918291602083526020830190611334565b0390f35b828434610376578060031936011261037657508051600091600c54610c058161126a565b80845290600190818116908115610c9f5750600114610c42575b5050610c3082610bdd9403836112f0565b51918291602083526020830190611334565b600c600090815294507fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c75b828610610c875750505091810160200191610c3082610c1f565b80546020878701810191909152909501948101610c6d565b610bdd96508592506020915092610c309360ff191682840152151560051b8201019450610c1f565b91905034610551578260031936011261055157610ce261177a565b60ff60a01b19918260005416600055610cfc6103e3611a8a565b610d046113fd565b906001600160401b03855460b81c16809210610d6a57508151610d3391610d2e8261096681611359565b611b4e565b5190337f18600820405d6cf356e3556301762ca32395e72d8c81494fa344835c9da3633d8484a2600160a01b906000541617600055f35b606490602084519162461bcd60e51b8352820152601960248201527f4f6e6c792063616c6c61626c6520706f73742d657870697279000000000000006044820152fd5b8391503461018c5760209283600319360112610551578135610de4610dd06113fd565b6001600160401b03865460b81c1611611478565b610dec61177a565b60ff60a01b19918260005416600055610e238151610e09816112a4565b83815260035490835191610e1c836112a4565b82526116f7565b5160075490946001600160a01b0391610e439087903090339086166114dc565b60085483516340c10f1960e01b80825233848301908152602081018890529094928b91839185169082908d90829060400103925af1908115610f48578991610f2b575b5015610883576009548451938452339284019283526020830186905289928492908390036040019183918b91165af1908115610f21578691610f04575b501561054d57839051947f2b42f4b25222a5d447ca19dfca2afd1b8d32adfed550f7b87bf9569f6da70c00339187a4600160a01b9060005416176000558152f35b610f1b9150873d891161033a5761032c81836112f0565b87610ec3565b82513d88823e3d90fd5b610f4291508a3d8c1161033a5761032c81836112f0565b8a610e86565b85513d8b823e3d90fd5b50503461018c578160031936011261018c5751600160ff1b8152602090f35b50503461018c578160031936011261018c5760ff6020925460b01c1690519015158152f35b50503461018c578160031936011261018c57602090600e549051908152f35b905082346103765760208060031936011261018c576001600160a01b03928035848116919082900361031057610fe961177a565b846008541686519584876024816370a0823160e01b9586825288888301525afa9687156110b7578697611082575b50849291602491600954168951958694859384528301525afa9283156110775792611048575b508351928352820152f35b9080925081813d8311611070575b61106081836112f0565b81010312610a1d5751908461103d565b503d611056565b8551903d90823e3d90fd5b9096508481819493943d83116110b0575b61109d81836112f0565b81010312610a1d57519590919084611017565b503d611093565b88513d88823e3d90fd5b50503461018c578160031936011261018c57805190826002546110e38161126a565b8085529160019180831690811561116c575060011461110f575b505050610c3082610bdd9403836112f0565b9450600285527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace5b82861061115457505050610c30826020610bdd95820101946110fd565b80546020878701810191909152909501948101611137565b610bdd975086935060209250610c3094915060ff191682840152151560051b820101946110fd565b50503461018c578160031936011261018c576020906111b16113fd565b9051908152f35b8391503461018c57602036600319011261018c5781546001600160a01b0316801561055157803b156105515790828092602486518095819363117c72b360e11b83528635878401525af1801561123c5761121157828451f35b6001600160401b038211611229575082528280828451f35b634e487b7160e01b835260419052602482fd5b84513d85823e3d90fd5b84903461018c578160031936011261018c5790546001600160a01b03168152602090f35b90600182811c9216801561129a575b602083101461128457565b634e487b7160e01b600052602260045260246000fd5b91607f1691611279565b602081019081106001600160401b038211176112bf57604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b038211176112bf57604052565b90601f801991011681019081106001600160401b038211176112bf57604052565b60005b8381106113245750506000910152565b8181015183820152602001611314565b9060209161134d81518092818552858086019101611311565b601f01601f1916010190565b600c54600092916113698261126a565b808252916001908181169081156113e0575060011461138757505050565b91929350600c6000527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c7916000925b8484106113c857505060209250010190565b805460208585018101919091529093019281016113b6565b915050602093945060ff929192191683830152151560051b010190565b6000546001600160a01b03168015611473576020600491604051928380926329cb924d60e01b82525afa90811561146757600091611439575090565b906020823d821161145f575b81611452602093836112f0565b8101031261037657505190565b3d9150611445565b6040513d6000823e3d90fd5b504290565b1561147f57565b60405162461bcd60e51b815260206004820152601860248201527f4f6e6c792063616c6c61626c65207072652d65787069727900000000000000006044820152606490fd5b90816020910312610a1d57518015158103610a1d5790565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176112bf5761153492604052611551565b565b6001600160401b0381116112bf57601f01601f191660200190565b6040516115ce916001600160a01b031661156a826112d5565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d15611656573d916115b283611536565b926115c060405194856112f0565b83523d60008785013e61165a565b80519082821592831561163e575b505050156115e75750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61164e93508201810191016114c4565b3882816115dc565b6060915b919290156116bc575081511561166e575090565b3b156116775790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156116cf5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906116f3906024830190611334565b0390fd5b9061171491600060405161170a816112a4565b5251905190611767565b670de0b6b3a764000080820491061561175a5760018101809111611744576040519061173f826112a4565b815290565b634e487b7160e01b600052601160045260246000fd5b6040519061173f826112a4565b8060001904821181151516611744570290565b60ff60005460a01c161561178a57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208201526001600160a01b03909216602483015260448201929092526115349161181282606481015b03601f1981018452836112f0565b611551565b670de0b6b3a76400009161183391600060405161170a816112a4565b046040519061173f826112a4565b9190820391821161174457565b1561185557565b60405162461bcd60e51b815260206004820152601e60248201527f436f6e747261637420616c7265616479206561726c79206578706972656400006044820152606490fd5b604051906118ab8261096681611359565b6040516118b7816112d5565b600f81526118de6020916e32b0b9363ca2bc3834b930ba34b7b760891b8382015284611a0b565b90600193848080916000925b6119f25750506118f981611536565b61190660405191826112f0565b8181528661191383611536565b8286019390601f1901368537905b61197957506119769495965061196a6040519684611948899651809289808a019101611311565b850161195c82518093898085019101611311565b019151809386840190611311565b010380845201826112f0565b90565b60001990808201908111611744578098600a808204809404811184151516611744576119ab60ff928392860290611841565b166030019081116117445783518210156119dc5760f81b6001600160f81b03191660001a9083018601539687611921565b634e487b7160e01b600052603260045260246000fd5b909160001981146117445781600a9101920490816118ea565b5115611a535761197660226040518093600b60fa1b6020830152611a39815180926020602186019101611311565b8101601d60f91b60218201520360028101845201826112f0565b611976602160405183611a70829551809260208086019101611311565b8101601d60f91b60208201520360018101845201826112f0565b6001600160401b03600154168015159081611aa3575090565b600160ff1b9150611ab690610a4361189a565b141590565b6020906001600160401b03906001600160a01b03611ad7611e43565b16906000600554611b11604051978896879586946353b5923960e01b86526004860152166024840152606060448401526064830190611334565b03925af190811561146757600091611439575090565b949392606092611b499287526020870152608060408701526080860190611334565b930152565b611b56611e43565b90600d5460009080611cf4575b5060018060a01b0380931693600554946001600160401b03809416946007541693600d549660409586519889926311df92f160e01b8452600484015288602484015260a06044840152611bb960a4840187611334565b9160648401526084830152816020998a92038188875af18015611cc157908891611ccb575b5050600554600e54833b1561034b5787859392611c1088938a51968794859463239e22ff60e11b865260048601611b27565b038183875af18015611cc157908894939291611c94575b50506005549584600f5497611c518851998a96879586946356ad3aad60e11b865260048601611b27565b03925af1918215611c8a575050611c66575050565b813d8311611c83575b611c7981836112f0565b81010312610a1d57565b503d611c6f565b51903d90823e3d90fd5b9080929593945011611cad578452918591903880611c27565b634e487b7160e01b82526041600452602482fd5b86513d87823e3d90fd5b813d8311611ced575b611cde81836112f0565b81010312610310578638611bde565b503d611cd4565b6007546001600160a01b0391611d0f913090339085166114dc565b806007541690841690600d549081158015611dce575b15611d6a5760405163095ea7b360e01b60208201526001600160a01b0390931660248401526044830191909152611d6491906118128260648101611804565b38611b63565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b815230600482015260248101849052602081604481855afa908115611e38578591611e07575b5015611d25565b90506020813d8211611e30575b81611e21602093836112f0565b8101031261054d575138611e00565b3d9150611e14565b6040513d87823e3d90fd5b600a546040516302abf57960e61b81527127b83a34b6b4b9ba34b1a7b930b1b632ab1960711b60048201526001600160a01b03916020908290602490829086165afa90811561146757600091611e9857501690565b6020813d8211611ec8575b81611eb0602093836112f0565b8101031261018c575190828216820361037657501690565b3d9150611ea356fea264697066735822122091d7830c209d73caa51e306620b894030c618a5f958c215cae94591e6a2436b364736f6c63430008100033405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acea26469706673582212203c0e1299835a87a003873e686c72af40407cb42a76a0605ed79fb3bbda1b3c3b64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_finder": "UMA protocol Finder used to discover other protocol contracts.",
          "_timer": "Contract that stores the current time in a testing environment.",
          "_tokenFactory": "ERC20 token factory used to deploy synthetic token instances."
        }
      },
      "createLongShortPair((string,uint64,uint256,bytes32,bool,string,string,string,string,address,address,bytes,uint256,uint256,uint256))": {
        "params": {
          "params": "Constructor params used to initialize the LSP. Key-valued object with the following structure:     - `pairName`: Name of the long short pair contract.     - `expirationTimestamp`: Unix timestamp of when the contract will expire.     - `collateralPerPair`: How many units of collateral are required to mint one pair of synthetic tokens.     - `priceIdentifier`: Registered in the DVM for the synthetic.     - `enableEarlyExpiration`: Enables the LSP contract to be settled early.     - `longSynthName`: Name of the long synthetic tokens to be created.     - `longSynthSymbol`: Symbol of the long synthetic tokens to be created.     - `shortSynthName`: Name of the short synthetic tokens to be created.     - `shortSynthSymbol`: Symbol of the short synthetic tokens to be created.     - `collateralToken`: ERC20 token used as collateral in the LSP.     - `financialProductLibrary`: Contract providing settlement payout logic.     - `customAncillaryData`: Custom ancillary data to be passed along with the price request. If not needed, this                              should be left as a 0-length bytes array.     - `proposerReward`: Optimistic oracle reward amount, pulled from the caller of the expire function.     - `optimisticOracleLivenessTime`: Optimistic oracle liveness time for price requests.     - `optimisticOracleProposerBond`: Optimistic oracle proposer bond for price requests."
        },
        "returns": {
          "_0": "lspAddress the deployed address of the new long short pair contract."
        }
      },
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      }
    },
    "title": "Long Short Pair Contract Creator.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs the LongShortPairCreator contract."
      },
      "createLongShortPair((string,uint64,uint256,bytes32,bool,string,string,string,string,address,address,bytes,uint256,uint256,uint256))": {
        "notice": "Creates a longShortPair contract and associated long and short tokens.Created LSP is not registered within the registry as the LSP uses the Optimistic Oracle for settlement.The LSP constructor does a number of validations on input params. These are not repeated here."
      },
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      }
    },
    "notice": "Factory contract to create new instances of long short pair contracts. Responsible for constraining the parameters used to construct a new LSP. These constraints can evolve over time and are initially constrained to conservative values in this first iteration.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17751,
        "contract": "contracts/financial-templates/long-short-pair/LongShortPairCreator.sol:LongShortPairCreator",
        "label": "timerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/financial-templates/long-short-pair/LongShortPairCreator.sol:LongShortPairCreator",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 50054,
        "contract": "contracts/financial-templates/long-short-pair/LongShortPairCreator.sol:LongShortPairCreator",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TokenFactory)42660"
      },
      {
        "astId": 50057,
        "contract": "contracts/financial-templates/long-short-pair/LongShortPairCreator.sol:LongShortPairCreator",
        "label": "finder",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FinderInterface)36753"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(TokenFactory)42660": {
        "encoding": "inplace",
        "label": "contract TokenFactory",
        "numberOfBytes": "20"
      }
    }
  }
}