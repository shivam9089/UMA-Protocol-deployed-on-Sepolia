{
  "address": "0x86C03D9d2E4a4F4005d9233CE97c95CE63C858e3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addedAddress",
          "type": "address"
        }
      ],
      "name": "AddedToWhitelist",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "removedAddress",
          "type": "address"
        }
      ],
      "name": "RemovedFromWhitelist",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newElement",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelist",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "activeWhitelist",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "elementToCheck",
          "type": "address"
        }
      ],
      "name": "isOnWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "elementToRemove",
          "type": "address"
        }
      ],
      "name": "removeFromWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "enum AddressWhitelist.Status",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistIndices",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb6f4ae8ff19b09e3e9425527ebb8a2c75ddb98aff8c799a3040c44e2dda067aa",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x86C03D9d2E4a4F4005d9233CE97c95CE63C858e3",
    "transactionIndex": 50,
    "gasUsed": "560882",
    "logsBloom": "0x
    "blockHash": "0x4bd54b3a0aa98f774e4fa28e7555668dad40f682b02c2d2bbd9ac40d1d74199b",
    "transactionHash": "0xb6f4ae8ff19b09e3e9425527ebb8a2c75ddb98aff8c799a3040c44e2dda067aa",
    "logs": [
      {
        "transactionIndex": 50,
        "blockNumber": 6153533,
        "transactionHash": "0xb6f4ae8ff19b09e3e9425527ebb8a2c75ddb98aff8c799a3040c44e2dda067aa",
        "address": "0x86C03D9d2E4a4F4005d9233CE97c95CE63C858e3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 106,
        "blockHash": "0x4bd54b3a0aa98f774e4fa28e7555668dad40f682b02c2d2bbd9ac40d1d74199b"
      }
    ],
    "blockNumber": 6153533,
    "cumulativeGasUsed": "14439118",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addedAddress\",\"type\":\"address\"}],\"name\":\"AddedToWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"removedAddress\",\"type\":\"address\"}],\"name\":\"RemovedFromWhitelist\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newElement\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelist\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"activeWhitelist\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"elementToCheck\",\"type\":\"address\"}],\"name\":\"isOnWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"elementToRemove\",\"type\":\"address\"}],\"name\":\"removeFromWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"enum AddressWhitelist.Status\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistIndices\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addToWhitelist(address)\":{\"params\":{\"newElement\":\"the new address to add.\"}},\"getWhitelist()\":{\"details\":\"Note: This method skips over, but still iterates through addresses. It is possible for this call to run out of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we can modify the implementation so that when addresses are removed, the last addresses in the array is moved to the empty index.\",\"returns\":{\"activeWhitelist\":\"the list of addresses on the whitelist.\"}},\"isOnWhitelist(address)\":{\"params\":{\"elementToCheck\":\"the address to check.\"},\"returns\":{\"_0\":\"True if `elementToCheck` is on the whitelist, or False.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeFromWhitelist(address)\":{\"params\":{\"elementToRemove\":\"the existing address to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A contract to track a whitelist of addresses.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToWhitelist(address)\":{\"notice\":\"Adds an address to the whitelist.\"},\"getWhitelist()\":{\"notice\":\"Gets all addresses that are currently included in the whitelist.\"},\"isOnWhitelist(address)\":{\"notice\":\"Checks whether an address is on the whitelist.\"},\"removeFromWhitelist(address)\":{\"notice\":\"Removes an address from the whitelist.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/common/implementation/AddressWhitelist.sol\":\"AddressWhitelist\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/AddressWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/AddressWhitelistInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title A contract to track a whitelist of addresses.\\r\\n */\\r\\ncontract AddressWhitelist is AddressWhitelistInterface, Ownable, Lockable {\\r\\n    enum Status { None, In, Out }\\r\\n    mapping(address => Status) public whitelist;\\r\\n\\r\\n    address[] public whitelistIndices;\\r\\n\\r\\n    event AddedToWhitelist(address indexed addedAddress);\\r\\n    event RemovedFromWhitelist(address indexed removedAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an address to the whitelist.\\r\\n     * @param newElement the new address to add.\\r\\n     */\\r\\n    function addToWhitelist(address newElement) external override nonReentrant() onlyOwner {\\r\\n        // Ignore if address is already included\\r\\n        if (whitelist[newElement] == Status.In) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Only append new addresses to the array, never a duplicate\\r\\n        if (whitelist[newElement] == Status.None) {\\r\\n            whitelistIndices.push(newElement);\\r\\n        }\\r\\n\\r\\n        whitelist[newElement] = Status.In;\\r\\n\\r\\n        emit AddedToWhitelist(newElement);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes an address from the whitelist.\\r\\n     * @param elementToRemove the existing address to remove.\\r\\n     */\\r\\n    function removeFromWhitelist(address elementToRemove) external override nonReentrant() onlyOwner {\\r\\n        if (whitelist[elementToRemove] != Status.Out) {\\r\\n            whitelist[elementToRemove] = Status.Out;\\r\\n            emit RemovedFromWhitelist(elementToRemove);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an address is on the whitelist.\\r\\n     * @param elementToCheck the address to check.\\r\\n     * @return True if `elementToCheck` is on the whitelist, or False.\\r\\n     */\\r\\n    function isOnWhitelist(address elementToCheck) external view override nonReentrantView() returns (bool) {\\r\\n        return whitelist[elementToCheck] == Status.In;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets all addresses that are currently included in the whitelist.\\r\\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\\r\\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\\r\\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\\r\\n     * the empty index.\\r\\n     * @return activeWhitelist the list of addresses on the whitelist.\\r\\n     */\\r\\n    function getWhitelist() external view override nonReentrantView() returns (address[] memory activeWhitelist) {\\r\\n        // Determine size of whitelist first\\r\\n        uint256 activeCount = 0;\\r\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\r\\n            if (whitelist[whitelistIndices[i]] == Status.In) {\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Populate whitelist\\r\\n        activeWhitelist = new address[](activeCount);\\r\\n        activeCount = 0;\\r\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\r\\n            address addr = whitelistIndices[i];\\r\\n            if (whitelist[addr] == Status.In) {\\r\\n                activeWhitelist[activeCount] = addr;\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47dce8af3cc6ffa2b7432cb97246e8c5841d3261572d4af3f120d7bee0fa896a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AddressWhitelistInterface {\\r\\n    function addToWhitelist(address newElement) external;\\r\\n\\r\\n    function removeFromWhitelist(address newElement) external;\\r\\n\\r\\n    function isOnWhitelist(address newElement) external view returns (bool);\\r\\n\\r\\n    function getWhitelist() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x72c9c89bc8aa33b9bb4b5ce8d4fe365f60b08cb5179f240545b8b3f9ff1f61a5\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60808060405234610064576000543360018060a01b0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600085a36001600160a81b0319163360ff60a01b191617600160a01b176000556108b9908161006a8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816337797c08146105b8575080633a3ab67214610551578063715018a6146104f45780638ab1d681146104275780638da5cb5b146103ff5780639b19251a1461039e578063d01f63f5146101a9578063e43252d7146101515763f2fde38b1461008657600080fd5b3461014d57602036600319011261014d576001600160a01b0381358181169290839003610149576100b561065e565b82156100f7575083546001600160a01b0319811683178555925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b503461014d57602036600319011261014d57356001600160a01b038116810361014d5761017c61082e565b825460ff60a01b1990811684559061019b9061019661065e565b6106b6565b825416600160a01b17825551f35b50823461039b578060031936011261039b576101c361082e565b808092600254935b848110610328575090601f916101e084610800565b9386519484199485910116850185811067ffffffffffffffff82111761031557906102149188979694959852808452610800565b93602096878401950136863783805b828210610272575050505083519485948186019282875251809352850193925b82811061025257505050500390f35b83516001600160a01b031685528695509381019392810192600101610243565b61028182999695979899610611565b9054600391821b1c6001600160a01b031680875260018089528b8820549192909160ff169081101561030257146102ca575b50906102be906107db565b90979695939497610223565b87518210156102ef57816102e991886102be9460051b8b0101526107db565b906102b3565b634e487b7160e01b865260328552602486fd5b634e487b7160e01b885260218752602488fd5b634e487b7160e01b845260418352602484fd5b61033181610611565b9054600391821b1c6001600160a01b031684526001602081905287852054909160ff91909116908110156103885714610373575b61036e906107db565b6101cb565b9261038061036e916107db565b939050610365565b634e487b7160e01b855260218452602485fd5b80fd5b509190346103fb5760203660031901126103fb5782356001600160a01b0381169081900361014d578252600160205260ff818320541690519160038210156103e857602083838152f35b634e487b7160e01b815260218452602490fd5b5080fd5b5050346103fb57816003193601126103fb57905490516001600160a01b039091168152602090f35b503461014d57602036600319011261014d5780356001600160a01b038116908190036104f05761045561082e565b835460ff60a01b1990811685559161046b61065e565b818552600160205260ff84862054169060038210156104dd575060020361049c575b50825416600160a01b17825551f35b8084526001602052828420600260ff198254161790557fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df757848451a23861048d565b634e487b7160e01b865260219052602485fd5b8380fd5b5050346103fb57816003193601126103fb5761050e61065e565b81546001600160a01b03198116835590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50823461039b57602036600319011261039b5781356001600160a01b038116908190036103fb5761058061082e565b8152600160205260ff83822054169160038310156105a5576020836001865191148152f35b634e487b7160e01b825260219052602490fd5b9250503461014d57602036600319011261014d573560025481101561014d5760029092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101546001600160a01b03168152602090f35b6002548110156106485760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330361067257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b03908116600081815260016020819052604082205493949360ff1660038110156107c05781146107d4578282528060205260ff60408320541660038110156107c05715610745575b827fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab0393949550825280602052604082209060ff19825416179055604051a2565b60025494680100000000000000008610156107ac578361078d87847fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab0397989901600255610611565b909283549160031b90811b9283911b1691191617905584939250610705565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b83526021600452602483fd5b5050509050565b60001981146107ea5760010190565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81116108185760051b60200190565b634e487b7160e01b600052604160045260246000fd5b60ff60005460a01c161561083e57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfea26469706673582212206dfa2b7d4e9423044e98fe49b74ffd18122a20e22f7c5231a9f3da11204a138264736f6c63430008100033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816337797c08146105b8575080633a3ab67214610551578063715018a6146104f45780638ab1d681146104275780638da5cb5b146103ff5780639b19251a1461039e578063d01f63f5146101a9578063e43252d7146101515763f2fde38b1461008657600080fd5b3461014d57602036600319011261014d576001600160a01b0381358181169290839003610149576100b561065e565b82156100f7575083546001600160a01b0319811683178555925192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b503461014d57602036600319011261014d57356001600160a01b038116810361014d5761017c61082e565b825460ff60a01b1990811684559061019b9061019661065e565b6106b6565b825416600160a01b17825551f35b50823461039b578060031936011261039b576101c361082e565b808092600254935b848110610328575090601f916101e084610800565b9386519484199485910116850185811067ffffffffffffffff82111761031557906102149188979694959852808452610800565b93602096878401950136863783805b828210610272575050505083519485948186019282875251809352850193925b82811061025257505050500390f35b83516001600160a01b031685528695509381019392810192600101610243565b61028182999695979899610611565b9054600391821b1c6001600160a01b031680875260018089528b8820549192909160ff169081101561030257146102ca575b50906102be906107db565b90979695939497610223565b87518210156102ef57816102e991886102be9460051b8b0101526107db565b906102b3565b634e487b7160e01b865260328552602486fd5b634e487b7160e01b885260218752602488fd5b634e487b7160e01b845260418352602484fd5b61033181610611565b9054600391821b1c6001600160a01b031684526001602081905287852054909160ff91909116908110156103885714610373575b61036e906107db565b6101cb565b9261038061036e916107db565b939050610365565b634e487b7160e01b855260218452602485fd5b80fd5b509190346103fb5760203660031901126103fb5782356001600160a01b0381169081900361014d578252600160205260ff818320541690519160038210156103e857602083838152f35b634e487b7160e01b815260218452602490fd5b5080fd5b5050346103fb57816003193601126103fb57905490516001600160a01b039091168152602090f35b503461014d57602036600319011261014d5780356001600160a01b038116908190036104f05761045561082e565b835460ff60a01b1990811685559161046b61065e565b818552600160205260ff84862054169060038210156104dd575060020361049c575b50825416600160a01b17825551f35b8084526001602052828420600260ff198254161790557fcdd2e9b91a56913d370075169cefa1602ba36be5301664f752192bb1709df757848451a23861048d565b634e487b7160e01b865260219052602485fd5b8380fd5b5050346103fb57816003193601126103fb5761050e61065e565b81546001600160a01b03198116835590519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50823461039b57602036600319011261039b5781356001600160a01b038116908190036103fb5761058061082e565b8152600160205260ff83822054169160038310156105a5576020836001865191148152f35b634e487b7160e01b825260219052602490fd5b9250503461014d57602036600319011261014d573560025481101561014d5760029092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace909101546001600160a01b03168152602090f35b6002548110156106485760026000527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b0316330361067257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6001600160a01b03908116600081815260016020819052604082205493949360ff1660038110156107c05781146107d4578282528060205260ff60408320541660038110156107c05715610745575b827fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab0393949550825280602052604082209060ff19825416179055604051a2565b60025494680100000000000000008610156107ac578361078d87847fa850ae9193f515cbae8d35e8925bd2be26627fc91bce650b8652ed254e9cab0397989901600255610611565b909283549160031b90811b9283911b1691191617905584939250610705565b634e487b7160e01b83526041600452602483fd5b634e487b7160e01b83526021600452602483fd5b5050509050565b60001981146107ea5760010190565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81116108185760051b60200190565b634e487b7160e01b600052604160045260246000fd5b60ff60005460a01c161561083e57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fdfea26469706673582212206dfa2b7d4e9423044e98fe49b74ffd18122a20e22f7c5231a9f3da11204a138264736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addToWhitelist(address)": {
        "params": {
          "newElement": "the new address to add."
        }
      },
      "getWhitelist()": {
        "details": "Note: This method skips over, but still iterates through addresses. It is possible for this call to run out of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we can modify the implementation so that when addresses are removed, the last addresses in the array is moved to the empty index.",
        "returns": {
          "activeWhitelist": "the list of addresses on the whitelist."
        }
      },
      "isOnWhitelist(address)": {
        "params": {
          "elementToCheck": "the address to check."
        },
        "returns": {
          "_0": "True if `elementToCheck` is on the whitelist, or False."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeFromWhitelist(address)": {
        "params": {
          "elementToRemove": "the existing address to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A contract to track a whitelist of addresses.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToWhitelist(address)": {
        "notice": "Adds an address to the whitelist."
      },
      "getWhitelist()": {
        "notice": "Gets all addresses that are currently included in the whitelist."
      },
      "isOnWhitelist(address)": {
        "notice": "Checks whether an address is on the whitelist."
      },
      "removeFromWhitelist(address)": {
        "notice": "Removes an address from the whitelist."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4304,
        "contract": "contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 13819,
        "contract": "contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist",
        "label": "whitelist",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_enum(Status)13814)"
      },
      {
        "astId": 13822,
        "contract": "contracts/common/implementation/AddressWhitelist.sol:AddressWhitelist",
        "label": "whitelistIndices",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Status)13814": {
        "encoding": "inplace",
        "label": "enum AddressWhitelist.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(Status)13814)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum AddressWhitelist.Status)",
        "numberOfBytes": "32",
        "value": "t_enum(Status)13814"
      }
    }
  }
}