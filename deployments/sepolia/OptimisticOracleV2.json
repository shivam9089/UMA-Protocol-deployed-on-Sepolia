{
  "address": "0x69E4B55c0c27473aD28099424EE2783A79397E0c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liveness",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        }
      ],
      "name": "DisputePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expirationTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "ProposePrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "finalFee",
          "type": "uint256"
        }
      ],
      "name": "RequestPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "price",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "Settle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OO_ANCILLARY_DATA_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOO_EARLY_RESPONSE",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ancillaryBytesLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLiveness",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "disputePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "disputePriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "getRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "disputer",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "settled",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "eventBased",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "refundOnDispute",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceProposed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceDisputed",
                  "type": "bool"
                },
                {
                  "internalType": "bool",
                  "name": "callbackOnPriceSettled",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "customLiveness",
                  "type": "uint256"
                }
              ],
              "internalType": "struct OptimisticOracleV2Interface.RequestSettings",
              "name": "requestSettings",
              "type": "tuple"
            },
            {
              "internalType": "int256",
              "name": "proposedPrice",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "resolvedPrice",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "expirationTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "finalFee",
              "type": "uint256"
            }
          ],
          "internalType": "struct OptimisticOracleV2Interface.Request",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "getState",
      "outputs": [
        {
          "internalType": "enum OptimisticOracleV2Interface.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "hasPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        }
      ],
      "name": "proposePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        }
      ],
      "name": "proposePriceFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "requestPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "disputer",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "currency",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "settled",
          "type": "bool"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "eventBased",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "refundOnDispute",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceProposed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceDisputed",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "callbackOnPriceSettled",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "bond",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "customLiveness",
              "type": "uint256"
            }
          ],
          "internalType": "struct OptimisticOracleV2Interface.RequestSettings",
          "name": "requestSettings",
          "type": "tuple"
        },
        {
          "internalType": "int256",
          "name": "proposedPrice",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "resolvedPrice",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "expirationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "bond",
          "type": "uint256"
        }
      ],
      "name": "setBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalBond",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "callbackOnPriceProposed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "callbackOnPriceDisputed",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "callbackOnPriceSettled",
          "type": "bool"
        }
      ],
      "name": "setCallbacks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "customLiveness",
          "type": "uint256"
        }
      ],
      "name": "setCustomLiveness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "setEventBased",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "setRefundOnDispute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "settle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "settleAndGetPrice",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "stampAncillaryData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a6ee31290b8f1e3c08077f06f4f0a602b49c2d2cbac71ac5d5b230445688855",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x69E4B55c0c27473aD28099424EE2783A79397E0c",
    "transactionIndex": 27,
    "gasUsed": "2478321",
    "logsBloom": "0x
    "blockHash": "0x4599756d9c2fb029c9918f3da1d4aa803abacd0445eaa984cfa873b9b8ae10ca",
    "transactionHash": "0x0a6ee31290b8f1e3c08077f06f4f0a602b49c2d2cbac71ac5d5b230445688855",
    "logs": [],
    "blockNumber": 6153536,
    "cumulativeGasUsed": "9290892",
    "status": 1,
    "byzantium": true
  },
  "args": [
    7200,
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e",
    "0xf8815ce169E5450aa6908e76E1B970dBcEC11550"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liveness\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"DisputePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expirationTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"ProposePrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"name\":\"RequestPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"price\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"Settle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OO_ANCILLARY_DATA_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOO_EARLY_RESPONSE\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ancillaryBytesLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLiveness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"disputePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"disputePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"eventBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundOnDispute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticOracleV2Interface.Request\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"getState\",\"outputs\":[{\"internalType\":\"enum OptimisticOracleV2Interface.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"hasPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"}],\"name\":\"proposePriceFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"requestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"disputer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"settled\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"eventBased\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"refundOnDispute\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"internalType\":\"struct OptimisticOracleV2Interface.RequestSettings\",\"name\":\"requestSettings\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"proposedPrice\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"resolvedPrice\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"expirationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"}],\"name\":\"setBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalBond\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceProposed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceDisputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"callbackOnPriceSettled\",\"type\":\"bool\"}],\"name\":\"setCallbacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"customLiveness\",\"type\":\"uint256\"}],\"name\":\"setCustomLiveness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"setEventBased\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"setRefundOnDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"settle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"settleAndGetPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"stampAncillaryData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_finderAddress\":\"finder to use to get addresses of DVM contracts.\",\"_liveness\":\"default liveness applied to each price request.\",\"_timerAddress\":\"address of the timer contract. Should be 0x0 in prod.\"}},\"disputePrice(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).\"}},\"disputePriceFor(address,address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"disputer\":\"address to set as the disputer.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect).\"}},\"getRequest(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"the Request data structure.\"}},\"getState(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"the State.\"}},\"hasPrice(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"boolean indicating true if price exists and false if not.\"}},\"proposePrice(address,bytes32,uint256,bytes,int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"proposePriceFor(address,address,bytes32,uint256,bytes,int256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"proposedPrice\":\"price being proposed.\",\"proposer\":\"address to set as the proposer.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct.\"}},\"requestPrice(bytes32,uint256,bytes,address,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data representing additional args being passed with the price request.\",\"currency\":\"ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\",\"identifier\":\"price identifier being requested.\",\"reward\":\"reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.\",\"timestamp\":\"timestamp of the price being requested.\"},\"returns\":{\"totalBond\":\"default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond().\"}},\"setBond(bytes32,uint256,bytes,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"bond\":\"custom bond amount to set.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"totalBond\":\"new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond().\"}},\"setCallbacks(bytes32,uint256,bytes,bool,bool,bool)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"callbackOnPriceDisputed\":\"whether to enable the callback onPriceDisputed.\",\"callbackOnPriceProposed\":\"whether to enable the callback onPriceProposed.\",\"callbackOnPriceSettled\":\"whether to enable the callback onPriceSettled.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}},\"setCustomLiveness(bytes32,uint256,bytes,uint256)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"customLiveness\":\"new custom liveness.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setEventBased(bytes32,uint256,bytes)\":{\"details\":\"Calling this method has a few impacts on the request: 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated    with the request. 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who    prematurely proposes a response loses their bond. 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to    the requesting contract.\",\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"setRefundOnDispute(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"}},\"settle(address,bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"requester\":\"sender of the initial price request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"payout\":\"the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards.\"}},\"settleAndGetPrice(bytes32,uint256,bytes)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"identifier\":\"price identifier to identify the existing request.\",\"timestamp\":\"timestamp to identify the existing request.\"},\"returns\":{\"_0\":\"resolved price.\"}},\"stampAncillaryData(bytes,address)\":{\"params\":{\"ancillaryData\":\"ancillary data of the price being requested.\",\"requester\":\"sender of the initial price request.\"},\"returns\":{\"_0\":\"the stamped ancillary bytes.\"}}},\"title\":\"Optimistic Oracle.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor.\"},\"disputePrice(address,bytes32,uint256,bytes)\":{\"notice\":\"Disputes a price value for an existing price request with an active proposal.\"},\"disputePriceFor(address,address,bytes32,uint256,bytes)\":{\"notice\":\"Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\"},\"getRequest(address,bytes32,uint256,bytes)\":{\"notice\":\"Gets the current data structure containing all information about a price request.\"},\"getState(address,bytes32,uint256,bytes)\":{\"notice\":\"Computes the current state of a price request. See the State enum for more details.\"},\"hasPrice(address,bytes32,uint256,bytes)\":{\"notice\":\"Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\"},\"proposePrice(address,bytes32,uint256,bytes,int256)\":{\"notice\":\"Proposes a price value for an existing price request.\"},\"proposePriceFor(address,address,bytes32,uint256,bytes,int256)\":{\"notice\":\"Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller.\"},\"requestPrice(bytes32,uint256,bytes,address,uint256)\":{\"notice\":\"Requests a new price.\"},\"setBond(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Set the proposal bond associated with a price request.\"},\"setCallbacks(bytes32,uint256,bytes,bool,bool,bool)\":{\"notice\":\"Sets which callbacks should be enabled for the request.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"},\"setCustomLiveness(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved.\"},\"setEventBased(bytes32,uint256,bytes)\":{\"notice\":\"Sets the request to be an \\\"event-based\\\" request.\"},\"setRefundOnDispute(bytes32,uint256,bytes)\":{\"notice\":\"Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded.\"},\"settle(address,bytes32,uint256,bytes)\":{\"notice\":\"Attempts to settle an outstanding price request. Will revert if it isn't settleable.\"},\"settleAndGetPrice(bytes32,uint256,bytes)\":{\"notice\":\"Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled.\"},\"stampAncillaryData(bytes,address)\":{\"notice\":\"Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\"}},\"notice\":\"Pre-DVM escalation contract that allows faster settlement.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol\":\"OptimisticOracleV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"contracts/common/implementation/AddressWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/AddressWhitelistInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title A contract to track a whitelist of addresses.\\r\\n */\\r\\ncontract AddressWhitelist is AddressWhitelistInterface, Ownable, Lockable {\\r\\n    enum Status { None, In, Out }\\r\\n    mapping(address => Status) public whitelist;\\r\\n\\r\\n    address[] public whitelistIndices;\\r\\n\\r\\n    event AddedToWhitelist(address indexed addedAddress);\\r\\n    event RemovedFromWhitelist(address indexed removedAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an address to the whitelist.\\r\\n     * @param newElement the new address to add.\\r\\n     */\\r\\n    function addToWhitelist(address newElement) external override nonReentrant() onlyOwner {\\r\\n        // Ignore if address is already included\\r\\n        if (whitelist[newElement] == Status.In) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        // Only append new addresses to the array, never a duplicate\\r\\n        if (whitelist[newElement] == Status.None) {\\r\\n            whitelistIndices.push(newElement);\\r\\n        }\\r\\n\\r\\n        whitelist[newElement] = Status.In;\\r\\n\\r\\n        emit AddedToWhitelist(newElement);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes an address from the whitelist.\\r\\n     * @param elementToRemove the existing address to remove.\\r\\n     */\\r\\n    function removeFromWhitelist(address elementToRemove) external override nonReentrant() onlyOwner {\\r\\n        if (whitelist[elementToRemove] != Status.Out) {\\r\\n            whitelist[elementToRemove] = Status.Out;\\r\\n            emit RemovedFromWhitelist(elementToRemove);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an address is on the whitelist.\\r\\n     * @param elementToCheck the address to check.\\r\\n     * @return True if `elementToCheck` is on the whitelist, or False.\\r\\n     */\\r\\n    function isOnWhitelist(address elementToCheck) external view override nonReentrantView() returns (bool) {\\r\\n        return whitelist[elementToCheck] == Status.In;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets all addresses that are currently included in the whitelist.\\r\\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\\r\\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\\r\\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\\r\\n     * the empty index.\\r\\n     * @return activeWhitelist the list of addresses on the whitelist.\\r\\n     */\\r\\n    function getWhitelist() external view override nonReentrantView() returns (address[] memory activeWhitelist) {\\r\\n        // Determine size of whitelist first\\r\\n        uint256 activeCount = 0;\\r\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\r\\n            if (whitelist[whitelistIndices[i]] == Status.In) {\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Populate whitelist\\r\\n        activeWhitelist = new address[](activeCount);\\r\\n        activeCount = 0;\\r\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\r\\n            address addr = whitelistIndices[i];\\r\\n            if (whitelist[addr] == Status.In) {\\r\\n                activeWhitelist[activeCount] = addr;\\r\\n                activeCount++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x47dce8af3cc6ffa2b7432cb97246e8c5841d3261572d4af3f120d7bee0fa896a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/AncillaryData.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Library for encoding and decoding ancillary data for DVM price requests.\\r\\n * @notice  We assume that on-chain ancillary data can be formatted directly from bytes to utf8 encoding via\\r\\n * web3.utils.hexToUtf8, and that clients will parse the utf8-encoded ancillary data as a comma-delimitted key-value\\r\\n * dictionary. Therefore, this library provides internal methods that aid appending to ancillary data from Solidity\\r\\n * smart contracts. More details on UMA's ancillary data guidelines below:\\r\\n * https://docs.google.com/document/d/1zhKKjgY1BupBGPPrY_WOJvui0B6DMcd-xDR8-9-SPDw/edit\\r\\n */\\r\\nlibrary AncillaryData {\\r\\n    // This converts the bottom half of a bytes32 input to hex in a highly gas-optimized way.\\r\\n    // Source: the brilliant implementation at https://gitter.im/ethereum/solidity?at=5840d23416207f7b0ed08c9b.\\r\\n    function toUtf8Bytes32Bottom(bytes32 bytesIn) private pure returns (bytes32) {\\r\\n        unchecked {\\r\\n            uint256 x = uint256(bytesIn);\\r\\n\\r\\n            // Nibble interleave\\r\\n            x = x & 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\r\\n            x = (x | (x * 2**64)) & 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\r\\n            x = (x | (x * 2**32)) & 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\r\\n            x = (x | (x * 2**16)) & 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\r\\n            x = (x | (x * 2**8)) & 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\r\\n            x = (x | (x * 2**4)) & 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\r\\n\\r\\n            // Hex encode\\r\\n            uint256 h = (x & 0x0808080808080808080808080808080808080808080808080808080808080808) / 8;\\r\\n            uint256 i = (x & 0x0404040404040404040404040404040404040404040404040404040404040404) / 4;\\r\\n            uint256 j = (x & 0x0202020202020202020202020202020202020202020202020202020202020202) / 2;\\r\\n            x = x + (h & (i | j)) * 0x27 + 0x3030303030303030303030303030303030303030303030303030303030303030;\\r\\n\\r\\n            // Return the result.\\r\\n            return bytes32(x);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded bytes32 string that can be read via web3.utils.hexToUtf8.\\r\\n     * @dev Will return bytes32 in all lower case hex characters and without the leading 0x.\\r\\n     * This has minor changes from the toUtf8BytesAddress to control for the size of the input.\\r\\n     * @param bytesIn bytes32 to encode.\\r\\n     * @return utf8 encoded bytes32.\\r\\n     */\\r\\n    function toUtf8Bytes(bytes32 bytesIn) internal pure returns (bytes memory) {\\r\\n        return abi.encodePacked(toUtf8Bytes32Bottom(bytesIn >> 128), toUtf8Bytes32Bottom(bytesIn));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns utf8-encoded address that can be read via web3.utils.hexToUtf8.\\r\\n     * Source: https://ethereum.stackexchange.com/questions/8346/convert-address-to-string/8447#8447\\r\\n     * @dev Will return address in all lower case characters and without the leading 0x.\\r\\n     * @param x address to encode.\\r\\n     * @return utf8 encoded address bytes.\\r\\n     */\\r\\n    function toUtf8BytesAddress(address x) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(toUtf8Bytes32Bottom(bytes32(bytes20(x)) >> 128), bytes8(toUtf8Bytes32Bottom(bytes20(x))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Converts a uint into a base-10, UTF-8 representation stored in a `string` type.\\r\\n     * @dev This method is based off of this code: https://stackoverflow.com/a/65707309.\\r\\n     */\\r\\n    function toUtf8BytesUint(uint256 x) internal pure returns (bytes memory) {\\r\\n        if (x == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 j = x;\\r\\n        uint256 len;\\r\\n        while (j != 0) {\\r\\n            len++;\\r\\n            j /= 10;\\r\\n        }\\r\\n        bytes memory bstr = new bytes(len);\\r\\n        uint256 k = len;\\r\\n        while (x != 0) {\\r\\n            k = k - 1;\\r\\n            uint8 temp = (48 + uint8(x - (x / 10) * 10));\\r\\n            bytes1 b1 = bytes1(temp);\\r\\n            bstr[k] = b1;\\r\\n            x /= 10;\\r\\n        }\\r\\n        return bstr;\\r\\n    }\\r\\n\\r\\n    function appendKeyValueBytes32(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        bytes32 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8Bytes(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is an address that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value An address to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueAddress(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        address value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesAddress(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds \\\"key:value\\\" to `currentAncillaryData` where `value` is a uint that first needs to be converted\\r\\n     * to utf8 bytes. For example, if `utf8(currentAncillaryData)=\\\"k1:v1\\\"`, then this function will return\\r\\n     * `utf8(k1:v1,key:value)`, and if `currentAncillaryData` is blank, then this will return `utf8(key:value)`.\\r\\n     * @param currentAncillaryData This bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param key Again, this bytes data should ideally be able to be utf8-decoded, but its OK if not.\\r\\n     * @param value A uint to set as the value in the key:value pair to append to `currentAncillaryData`.\\r\\n     * @return Newly appended ancillary data.\\r\\n     */\\r\\n    function appendKeyValueUint(\\r\\n        bytes memory currentAncillaryData,\\r\\n        bytes memory key,\\r\\n        uint256 value\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        bytes memory prefix = constructPrefix(currentAncillaryData, key);\\r\\n        return abi.encodePacked(currentAncillaryData, prefix, toUtf8BytesUint(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Helper method that returns the left hand side of a \\\"key:value\\\" pair plus the colon \\\":\\\" and a leading\\r\\n     * comma \\\",\\\" if the `currentAncillaryData` is not empty. The return value is intended to be prepended as a prefix to\\r\\n     * some utf8 value that is ultimately added to a comma-delimited, key-value dictionary.\\r\\n     */\\r\\n    function constructPrefix(bytes memory currentAncillaryData, bytes memory key) internal pure returns (bytes memory) {\\r\\n        if (currentAncillaryData.length > 0) {\\r\\n            return abi.encodePacked(\\\",\\\", key, \\\":\\\");\\r\\n        } else {\\r\\n            return abi.encodePacked(key, \\\":\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbe2300c69cbaca3ca305dc9445e6f791ef26315d1af9cf4f8021757fd1e2fd07\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Library for fixed point arithmetic on uints\\r\\n */\\r\\nlibrary FixedPoint {\\r\\n    using SafeMath for uint256;\\r\\n    using SignedSafeMath for int256;\\r\\n\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For unsigned values:\\r\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\r\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\r\\n    struct Unsigned {\\r\\n        uint256 rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a uint to convert into a FixedPoint.\\r\\n     * @return the converted FixedPoint.\\r\\n     */\\r\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return add(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return sub(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\r\\n     * @param a a uint256.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return sub(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as a uint256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\r\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a uint256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\r\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(mulFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(mulFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.\\r\\n     * @param b a FixedPoint.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\r\\n        return Unsigned(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as a uint256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        return Unsigned(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a uint256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        return div(fromUnscaledUint(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\r\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\r\\n        uint256 divFloor = aScaled.div(b.rawValue);\\r\\n        uint256 mod = aScaled.mod(b.rawValue);\\r\\n        if (mod != 0) {\\r\\n            return Unsigned(divFloor.add(1));\\r\\n        } else {\\r\\n            return Unsigned(divFloor);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divCeil(a, fromUnscaledUint(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a uint256 denominator.\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\r\\n        output = fromUnscaledUint(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\r\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\r\\n    // For signed values:\\r\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\r\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\r\\n\\r\\n    struct Signed {\\r\\n        int256 rawValue;\\r\\n    }\\r\\n\\r\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\r\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\r\\n        return Unsigned(uint256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\r\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\r\\n        return Signed(int256(a.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\r\\n     * @param a int to convert into a FixedPoint.Signed.\\r\\n     * @return the converted FixedPoint.Signed.\\r\\n     */\\r\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\r\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a int256.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if equal, or False.\\r\\n     */\\r\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue == b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a > b`, or False.\\r\\n     */\\r\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is greater than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a >= b`, or False.\\r\\n     */\\r\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a < b`, or False.\\r\\n     */\\r\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\r\\n        return a.rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\r\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `a` is less than or equal to `b`.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return True if `a <= b`, or False.\\r\\n     */\\r\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\r\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The minimum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the minimum of `a` and `b`.\\r\\n     */\\r\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue < b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The maximum of `a` and `b`.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the maximum of `a` and `b`.\\r\\n     */\\r\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return a.rawValue > b.rawValue ? a : b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.add(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the sum of `a` and `b`.\\r\\n     */\\r\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return add(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.sub(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return sub(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\r\\n     * @param a an int256.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the difference of `a` and `b`.\\r\\n     */\\r\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return sub(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\r\\n        // stored internally as an int256 ~10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\r\\n        // would round to 3, but this computation produces the result 2.\\r\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\r\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\r\\n     * @dev This will \\\"floor\\\" the product.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b an int256.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\r\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(mulTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(mulTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a FixedPoint.Signed.\\r\\n     * @return the product of `a` and `b`.\\r\\n     */\\r\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\r\\n        return Signed(a.rawValue.mul(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        // There are two caveats with this computation:\\r\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\r\\n        // 10^41 is stored internally as an int256 10^59.\\r\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\r\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\r\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        return Signed(a.rawValue.div(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\r\\n     * @dev This will \\\"floor\\\" the quotient.\\r\\n     * @param a an int256 numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        return div(fromUnscaledInt(a), b);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b a FixedPoint denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\r\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\r\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\r\\n        // Manual mod because SignedSafeMath doesn't support it.\\r\\n        int256 mod = aScaled % b.rawValue;\\r\\n        if (mod != 0) {\\r\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\r\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\r\\n            return Signed(divTowardsZero.add(valueToAdd));\\r\\n        } else {\\r\\n            return Signed(divTowardsZero);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\r\\n     * @param a a FixedPoint numerator.\\r\\n     * @param b an int256 denominator.\\r\\n     * @return the quotient of `a` divided by `b`.\\r\\n     */\\r\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\r\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\r\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\r\\n        // This creates the possibility of overflow if b is very large.\\r\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\r\\n     * @dev This will \\\"floor\\\" the result.\\r\\n     * @param a a FixedPoint.Signed.\\r\\n     * @param b a uint256 (negative exponents are not allowed).\\r\\n     * @return output is `a` to the power of `b`.\\r\\n     */\\r\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\r\\n        output = fromUnscaledInt(1);\\r\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\r\\n            output = mul(output, a);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd32e845210e20d367e4deaffbfd6115876e9bbd934ea073a1802f8bcb9c2b166\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface AddressWhitelistInterface {\\r\\n    function addToWhitelist(address newElement) external;\\r\\n\\r\\n    function removeFromWhitelist(address newElement) external;\\r\\n\\r\\n    function isOnWhitelist(address newElement) external view returns (bool);\\r\\n\\r\\n    function getWhitelist() external view returns (address[] memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x72c9c89bc8aa33b9bb4b5ce8d4fe365f60b08cb5179f240545b8b3f9ff1f61a5\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/StoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Interface that allows financial contracts to pay oracle fees for their use of the system.\\r\\n */\\r\\ninterface StoreInterface {\\r\\n    /**\\r\\n     * @notice Pays Oracle fees in ETH to the store.\\r\\n     * @dev To be used by contracts whose margin currency is ETH.\\r\\n     */\\r\\n    function payOracleFees() external payable;\\r\\n\\r\\n    /**\\r\\n     * @notice Pays oracle fees in the margin currency, erc20Address, to the store.\\r\\n     * @dev To be used if the margin currency is an ERC20 token rather than ETH.\\r\\n     * @param erc20Address address of the ERC20 token used to pay the fee.\\r\\n     * @param amount number of tokens to transfer. An approval for at least this amount must exist.\\r\\n     */\\r\\n    function payOracleFeesErc20(address erc20Address, FixedPoint.Unsigned calldata amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the regular oracle fees that a contract should pay for a period.\\r\\n     * @param startTime defines the beginning time from which the fee is paid.\\r\\n     * @param endTime end time until which the fee is paid.\\r\\n     * @param pfc \\\"profit from corruption\\\", or the maximum amount of margin currency that a\\r\\n     * token sponsor could extract from the contract through corrupting the price feed in their favor.\\r\\n     * @return regularFee amount owed for the duration from start to end time for the given pfc.\\r\\n     * @return latePenalty for paying the fee after the deadline.\\r\\n     */\\r\\n    function computeRegularFee(\\r\\n        uint256 startTime,\\r\\n        uint256 endTime,\\r\\n        FixedPoint.Unsigned calldata pfc\\r\\n    ) external view returns (FixedPoint.Unsigned memory regularFee, FixedPoint.Unsigned memory latePenalty);\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the final oracle fees that a contract should pay at settlement.\\r\\n     * @param currency token used to pay the final fee.\\r\\n     * @return finalFee amount due.\\r\\n     */\\r\\n    function computeFinalFee(address currency) external view returns (FixedPoint.Unsigned memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xe3b9671f228acd1025324f8460a7e007cc364f2d5896112b1c264aacfc2368b4\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\nimport \\\"../../data-verification-mechanism/interfaces/StoreInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/OptimisticOracleV2Interface.sol\\\";\\r\\n\\r\\nimport \\\"../../common/implementation/Testable.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/FixedPoint.sol\\\";\\r\\nimport \\\"../../common/implementation/AncillaryData.sol\\\";\\r\\nimport \\\"../../common/implementation/AddressWhitelist.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Optimistic Requester.\\r\\n * @notice Optional interface that requesters can implement to receive callbacks.\\r\\n * @dev this contract does _not_ work with ERC777 collateral currencies or any others that call into the receiver on\\r\\n * transfer(). Using an ERC777 token would allow a user to maliciously grief other participants (while also losing\\r\\n * money themselves).\\r\\n */\\r\\ninterface OptimisticRequester {\\r\\n    /**\\r\\n     * @notice Callback for proposals.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function priceProposed(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for disputes.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param refund refund received in the case that refundOnDispute was enabled.\\r\\n     */\\r\\n    function priceDisputed(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 refund\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Callback for settlement.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param price price that was resolved by the escalation process.\\r\\n     */\\r\\n    function priceSettled(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 price\\r\\n    ) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Optimistic Oracle.\\r\\n * @notice Pre-DVM escalation contract that allows faster settlement.\\r\\n */\\r\\ncontract OptimisticOracleV2 is OptimisticOracleV2Interface, Testable, Lockable {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using Address for address;\\r\\n\\r\\n    // Finder to provide addresses for DVM contracts.\\r\\n    FinderInterface public override finder;\\r\\n\\r\\n    // Default liveness value for all price requests.\\r\\n    uint256 public override defaultLiveness;\\r\\n\\r\\n    // This is effectively the extra ancillary data to add \\\",ooRequester:0000000000000000000000000000000000000000\\\".\\r\\n    uint256 private constant MAX_ADDED_ANCILLARY_DATA = 53;\\r\\n    uint256 public constant OO_ANCILLARY_DATA_LIMIT = ancillaryBytesLimit - MAX_ADDED_ANCILLARY_DATA;\\r\\n    int256 public constant TOO_EARLY_RESPONSE = type(int256).min;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructor.\\r\\n     * @param _liveness default liveness applied to each price request.\\r\\n     * @param _finderAddress finder to use to get addresses of DVM contracts.\\r\\n     * @param _timerAddress address of the timer contract. Should be 0x0 in prod.\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _liveness,\\r\\n        address _finderAddress,\\r\\n        address _timerAddress\\r\\n    ) Testable(_timerAddress) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n        _validateLiveness(_liveness);\\r\\n        defaultLiveness = _liveness;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\r\\n     * This can be changed with a subsequent call to setBond().\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward\\r\\n    ) external override nonReentrant() returns (uint256 totalBond) {\\r\\n        require(_getState(msg.sender, identifier, timestamp, ancillaryData) == State.Invalid, \\\"requestPrice: Invalid\\\");\\r\\n        require(_getIdentifierWhitelist().isIdentifierSupported(identifier), \\\"Unsupported identifier\\\");\\r\\n        require(_getCollateralWhitelist().isOnWhitelist(address(currency)), \\\"Unsupported currency\\\");\\r\\n        require(timestamp <= getCurrentTime(), \\\"Timestamp in future\\\");\\r\\n\\r\\n        // This ensures that the ancillary data is <= the OO limit, which is lower than the DVM limit because the\\r\\n        // OO adds some data before sending to the DVM.\\r\\n        require(ancillaryData.length <= OO_ANCILLARY_DATA_LIMIT, \\\"Ancillary Data too long\\\");\\r\\n\\r\\n        uint256 finalFee = _getStore().computeFinalFee(address(currency)).rawValue;\\r\\n        requests[_getId(msg.sender, identifier, timestamp, ancillaryData)] = Request({\\r\\n            proposer: address(0),\\r\\n            disputer: address(0),\\r\\n            currency: currency,\\r\\n            settled: false,\\r\\n            requestSettings: RequestSettings({\\r\\n                eventBased: false,\\r\\n                refundOnDispute: false,\\r\\n                callbackOnPriceProposed: false,\\r\\n                callbackOnPriceDisputed: false,\\r\\n                callbackOnPriceSettled: false,\\r\\n                bond: finalFee,\\r\\n                customLiveness: 0\\r\\n            }),\\r\\n            proposedPrice: 0,\\r\\n            resolvedPrice: 0,\\r\\n            expirationTime: 0,\\r\\n            reward: reward,\\r\\n            finalFee: finalFee\\r\\n        });\\r\\n\\r\\n        if (reward > 0) {\\r\\n            currency.safeTransferFrom(msg.sender, address(this), reward);\\r\\n        }\\r\\n\\r\\n        emit RequestPrice(msg.sender, identifier, timestamp, ancillaryData, address(currency), reward, finalFee);\\r\\n\\r\\n        // This function returns the initial proposal bond for this request, which can be customized by calling\\r\\n        // setBond() with the same identifier and timestamp.\\r\\n        return finalFee.mul(2);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set the proposal bond associated with a price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param bond custom bond amount to set.\\r\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\r\\n     * changed again with a subsequent call to setBond().\\r\\n     */\\r\\n    function setBond(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 bond\\r\\n    ) external override nonReentrant() returns (uint256 totalBond) {\\r\\n        require(_getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested, \\\"setBond: Requested\\\");\\r\\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\\r\\n        request.requestSettings.bond = bond;\\r\\n\\r\\n        // Total bond is the final fee + the newly set bond.\\r\\n        return bond.add(request.finalFee);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\r\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\r\\n     * bond, so there is still profit to be made even if the reward is refunded.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setRefundOnDispute(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external override nonReentrant() {\\r\\n        require(\\r\\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\\r\\n            \\\"setRefundOnDispute: Requested\\\"\\r\\n        );\\r\\n        _getRequest(msg.sender, identifier, timestamp, ancillaryData).requestSettings.refundOnDispute = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\r\\n     * being auto-resolved.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param customLiveness new custom liveness.\\r\\n     */\\r\\n    function setCustomLiveness(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 customLiveness\\r\\n    ) external override nonReentrant() {\\r\\n        require(\\r\\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\\r\\n            \\\"setCustomLiveness: Requested\\\"\\r\\n        );\\r\\n        _validateLiveness(customLiveness);\\r\\n        _getRequest(msg.sender, identifier, timestamp, ancillaryData).requestSettings.customLiveness = customLiveness;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\r\\n     * @dev Calling this method has a few impacts on the request:\\r\\n     *\\r\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\r\\n     *    with the request.\\r\\n     *\\r\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\r\\n     *    prematurely proposes a response loses their bond.\\r\\n     *\\r\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\r\\n     *    the requesting contract.\\r\\n     *\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setEventBased(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external override nonReentrant() {\\r\\n        require(\\r\\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\\r\\n            \\\"setEventBased: Requested\\\"\\r\\n        );\\r\\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\\r\\n        request.requestSettings.eventBased = true;\\r\\n        request.requestSettings.refundOnDispute = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets which callbacks should be enabled for the request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\r\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\r\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\r\\n     */\\r\\n    function setCallbacks(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        bool callbackOnPriceProposed,\\r\\n        bool callbackOnPriceDisputed,\\r\\n        bool callbackOnPriceSettled\\r\\n    ) external override nonReentrant() {\\r\\n        require(\\r\\n            _getState(msg.sender, identifier, timestamp, ancillaryData) == State.Requested,\\r\\n            \\\"setCallbacks: Requested\\\"\\r\\n        );\\r\\n        Request storage request = _getRequest(msg.sender, identifier, timestamp, ancillaryData);\\r\\n        request.requestSettings.callbackOnPriceProposed = callbackOnPriceProposed;\\r\\n        request.requestSettings.callbackOnPriceDisputed = callbackOnPriceDisputed;\\r\\n        request.requestSettings.callbackOnPriceSettled = callbackOnPriceSettled;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address proposer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) public override nonReentrant() returns (uint256 totalBond) {\\r\\n        require(proposer != address(0), \\\"proposer address must be non 0\\\");\\r\\n        require(\\r\\n            _getState(requester, identifier, timestamp, ancillaryData) == State.Requested,\\r\\n            \\\"proposePriceFor: Requested\\\"\\r\\n        );\\r\\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\\r\\n        if (request.requestSettings.eventBased)\\r\\n            require(proposedPrice != TOO_EARLY_RESPONSE, \\\"Cannot propose 'too early'\\\");\\r\\n        request.proposer = proposer;\\r\\n        request.proposedPrice = proposedPrice;\\r\\n\\r\\n        // If a custom liveness has been set, use it instead of the default.\\r\\n        request.expirationTime = getCurrentTime().add(\\r\\n            request.requestSettings.customLiveness != 0 ? request.requestSettings.customLiveness : defaultLiveness\\r\\n        );\\r\\n\\r\\n        totalBond = request.requestSettings.bond.add(request.finalFee);\\r\\n        if (totalBond > 0) request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\\r\\n\\r\\n        emit ProposePrice(\\r\\n            requester,\\r\\n            proposer,\\r\\n            identifier,\\r\\n            timestamp,\\r\\n            ancillaryData,\\r\\n            proposedPrice,\\r\\n            request.expirationTime,\\r\\n            address(request.currency)\\r\\n        );\\r\\n\\r\\n        // End the re-entrancy guard early to allow the caller to potentially take OO-related actions inside this callback.\\r\\n        _startReentrantGuardDisabled();\\r\\n        // Callback.\\r\\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceProposed)\\r\\n            OptimisticRequester(requester).priceProposed(identifier, timestamp, ancillaryData);\\r\\n        _endReentrantGuardDisabled();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value for an existing price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) external override returns (uint256 totalBond) {\\r\\n        // Note: re-entrancy guard is done in the inner call.\\r\\n        return proposePriceFor(msg.sender, requester, identifier, timestamp, ancillaryData, proposedPrice);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        address disputer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public override nonReentrant() returns (uint256 totalBond) {\\r\\n        require(disputer != address(0), \\\"disputer address must be non 0\\\");\\r\\n        require(\\r\\n            _getState(requester, identifier, timestamp, ancillaryData) == State.Proposed,\\r\\n            \\\"disputePriceFor: Proposed\\\"\\r\\n        );\\r\\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\\r\\n        request.disputer = disputer;\\r\\n\\r\\n        uint256 finalFee = request.finalFee;\\r\\n        uint256 bond = request.requestSettings.bond;\\r\\n        totalBond = bond.add(finalFee);\\r\\n        if (totalBond > 0) {\\r\\n            request.currency.safeTransferFrom(msg.sender, address(this), totalBond);\\r\\n        }\\r\\n\\r\\n        StoreInterface store = _getStore();\\r\\n\\r\\n        // Along with the final fee, \\\"burn\\\" part of the loser's bond to ensure that a larger bond always makes it\\r\\n        // proportionally more expensive to delay the resolution even if the proposer and disputer are the same\\r\\n        // party.\\r\\n\\r\\n        // The total fee is the burned bond and the final fee added together.\\r\\n        uint256 totalFee = finalFee.add(_computeBurnedBond(request));\\r\\n        if (totalFee > 0) {\\r\\n            request.currency.safeIncreaseAllowance(address(store), totalFee);\\r\\n            _getStore().payOracleFeesErc20(address(request.currency), FixedPoint.Unsigned(totalFee));\\r\\n        }\\r\\n\\r\\n        _getOracle().requestPrice(\\r\\n            identifier,\\r\\n            _getTimestampForDvmRequest(request, timestamp),\\r\\n            _stampAncillaryData(ancillaryData, requester)\\r\\n        );\\r\\n\\r\\n        // Compute refund.\\r\\n        uint256 refund = 0;\\r\\n        if (request.reward > 0 && request.requestSettings.refundOnDispute) {\\r\\n            refund = request.reward;\\r\\n            request.reward = 0;\\r\\n            request.currency.safeTransfer(requester, refund);\\r\\n        }\\r\\n\\r\\n        emit DisputePrice(\\r\\n            requester,\\r\\n            request.proposer,\\r\\n            disputer,\\r\\n            identifier,\\r\\n            timestamp,\\r\\n            ancillaryData,\\r\\n            request.proposedPrice\\r\\n        );\\r\\n\\r\\n        // End the re-entrancy guard early to allow the caller to potentially re-request inside this callback.\\r\\n        _startReentrantGuardDisabled();\\r\\n        // Callback.\\r\\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceDisputed)\\r\\n            OptimisticRequester(requester).priceDisputed(identifier, timestamp, ancillaryData, refund);\\r\\n        _endReentrantGuardDisabled();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external override returns (uint256 totalBond) {\\r\\n        // Note: re-entrancy guard is done in the inner call.\\r\\n        return disputePriceFor(msg.sender, requester, identifier, timestamp, ancillaryData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\r\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\r\\n     * hasn't been settled.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return resolved price.\\r\\n     */\\r\\n    function settleAndGetPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external override nonReentrant() returns (int256) {\\r\\n        if (_getState(msg.sender, identifier, timestamp, ancillaryData) != State.Settled) {\\r\\n            _settle(msg.sender, identifier, timestamp, ancillaryData);\\r\\n        }\\r\\n\\r\\n        return _getRequest(msg.sender, identifier, timestamp, ancillaryData).resolvedPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external override nonReentrant() returns (uint256 payout) {\\r\\n        return _settle(requester, identifier, timestamp, ancillaryData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current data structure containing all information about a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the Request data structure.\\r\\n     */\\r\\n    function getRequest(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override nonReentrantView() returns (Request memory) {\\r\\n        return _getRequest(requester, identifier, timestamp, ancillaryData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Computes the current state of a price request. See the State enum for more details.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the State.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override nonReentrantView() returns (State) {\\r\\n        return _getState(requester, identifier, timestamp, ancillaryData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return boolean indicating true if price exists and false if not.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view override nonReentrantView() returns (bool) {\\r\\n        State state = _getState(requester, identifier, timestamp, ancillaryData);\\r\\n        return state == State.Settled || state == State.Resolved || state == State.Expired;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Generates stamped ancillary data in the format that it would be used in the case of a price dispute.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @return the stamped ancillary bytes.\\r\\n     */\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        pure\\r\\n        override\\r\\n        returns (bytes memory)\\r\\n    {\\r\\n        return _stampAncillaryData(ancillaryData, requester);\\r\\n    }\\r\\n\\r\\n    function _getId(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) private pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(requester, identifier, timestamp, ancillaryData));\\r\\n    }\\r\\n\\r\\n    function _settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) private returns (uint256 payout) {\\r\\n        State state = _getState(requester, identifier, timestamp, ancillaryData);\\r\\n\\r\\n        // Set it to settled so this function can never be entered again.\\r\\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\\r\\n        request.settled = true;\\r\\n\\r\\n        if (state == State.Expired) {\\r\\n            // In the expiry case, just pay back the proposer's bond and final fee along with the reward.\\r\\n            request.resolvedPrice = request.proposedPrice;\\r\\n            payout = request.requestSettings.bond.add(request.finalFee).add(request.reward);\\r\\n            request.currency.safeTransfer(request.proposer, payout);\\r\\n        } else if (state == State.Resolved) {\\r\\n            // In the Resolved case, pay either the disputer or the proposer the entire payout (+ bond and reward).\\r\\n            request.resolvedPrice = _getOracle().getPrice(\\r\\n                identifier,\\r\\n                _getTimestampForDvmRequest(request, timestamp),\\r\\n                _stampAncillaryData(ancillaryData, requester)\\r\\n            );\\r\\n            bool disputeSuccess = request.resolvedPrice != request.proposedPrice;\\r\\n            uint256 bond = request.requestSettings.bond;\\r\\n\\r\\n            // Unburned portion of the loser's bond = 1 - burned bond.\\r\\n            uint256 unburnedBond = bond.sub(_computeBurnedBond(request));\\r\\n\\r\\n            // Winner gets:\\r\\n            // - Their bond back.\\r\\n            // - The unburned portion of the loser's bond.\\r\\n            // - Their final fee back.\\r\\n            // - The request reward (if not already refunded -- if refunded, it will be set to 0).\\r\\n            payout = bond.add(unburnedBond).add(request.finalFee).add(request.reward);\\r\\n            request.currency.safeTransfer(disputeSuccess ? request.disputer : request.proposer, payout);\\r\\n        } else revert(\\\"_settle: not settleable\\\");\\r\\n\\r\\n        emit Settle(\\r\\n            requester,\\r\\n            request.proposer,\\r\\n            request.disputer,\\r\\n            identifier,\\r\\n            timestamp,\\r\\n            ancillaryData,\\r\\n            request.resolvedPrice,\\r\\n            payout\\r\\n        );\\r\\n\\r\\n        // Temporarily disable the re-entrancy guard early to allow the caller to take an OO-related action inside this callback.\\r\\n        _startReentrantGuardDisabled();\\r\\n        // Callback.\\r\\n        if (address(requester).isContract() && request.requestSettings.callbackOnPriceSettled)\\r\\n            OptimisticRequester(requester).priceSettled(identifier, timestamp, ancillaryData, request.resolvedPrice);\\r\\n        _endReentrantGuardDisabled();\\r\\n    }\\r\\n\\r\\n    function _getRequest(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) private view returns (Request storage) {\\r\\n        return requests[_getId(requester, identifier, timestamp, ancillaryData)];\\r\\n    }\\r\\n\\r\\n    function _computeBurnedBond(Request storage request) private view returns (uint256) {\\r\\n        // burnedBond = floor(bond / 2)\\r\\n        return request.requestSettings.bond.div(2);\\r\\n    }\\r\\n\\r\\n    function _validateLiveness(uint256 _liveness) private pure {\\r\\n        require(_liveness < 5200 weeks, \\\"Liveness too large\\\");\\r\\n        require(_liveness > 0, \\\"Liveness cannot be 0\\\");\\r\\n    }\\r\\n\\r\\n    function _getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) internal view returns (State) {\\r\\n        Request storage request = _getRequest(requester, identifier, timestamp, ancillaryData);\\r\\n\\r\\n        if (address(request.currency) == address(0)) return State.Invalid;\\r\\n\\r\\n        if (request.proposer == address(0)) return State.Requested;\\r\\n\\r\\n        if (request.settled) return State.Settled;\\r\\n\\r\\n        if (request.disputer == address(0))\\r\\n            return request.expirationTime <= getCurrentTime() ? State.Expired : State.Proposed;\\r\\n\\r\\n        return\\r\\n            _getOracle().hasPrice(\\r\\n                identifier,\\r\\n                _getTimestampForDvmRequest(request, timestamp),\\r\\n                _stampAncillaryData(ancillaryData, requester)\\r\\n            )\\r\\n                ? State.Resolved\\r\\n                : State.Disputed;\\r\\n    }\\r\\n\\r\\n    function _getOracle() internal view returns (OracleAncillaryInterface) {\\r\\n        return OracleAncillaryInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n\\r\\n    function _getCollateralWhitelist() internal view returns (AddressWhitelist) {\\r\\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\\r\\n    }\\r\\n\\r\\n    function _getStore() internal view returns (StoreInterface) {\\r\\n        return StoreInterface(finder.getImplementationAddress(OracleInterfaces.Store));\\r\\n    }\\r\\n\\r\\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n\\r\\n    function _getTimestampForDvmRequest(Request storage request, uint256 requestTimestamp)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        if (request.requestSettings.eventBased) {\\r\\n            uint256 liveness =\\r\\n                request.requestSettings.customLiveness != 0 ? request.requestSettings.customLiveness : defaultLiveness;\\r\\n            return request.expirationTime.sub(liveness);\\r\\n        } else {\\r\\n            return requestTimestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev We don't handle specifically the case where `ancillaryData` is not already readily translateable in utf8.\\r\\n     * For those cases, we assume that the client will be able to strip out the utf8-translateable part of the\\r\\n     * ancillary data that this contract stamps.\\r\\n     */\\r\\n    function _stampAncillaryData(bytes memory ancillaryData, address requester) internal pure returns (bytes memory) {\\r\\n        // Since this contract will be the one to formally submit DVM price requests, its useful for voters to know who\\r\\n        // the original requester was.\\r\\n        return AncillaryData.appendKeyValueAddress(ancillaryData, \\\"ooRequester\\\", requester);\\r\\n    }\\r\\n\\r\\n    function getCurrentTime() public view override(Testable, OptimisticOracleV2Interface) returns (uint256) {\\r\\n        return Testable.getCurrentTime();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x9b9707981142d0427f273de478787b5c15ed7d16d1a3ba21566b9725f6a490f7\",\"license\":\"AGPL-3.0-only\"},\"contracts/optimistic-oracle-v2/interfaces/OptimisticOracleV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OptimisticOracleV2Interface {\\r\\n    event RequestPrice(\\r\\n        address indexed requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        address currency,\\r\\n        uint256 reward,\\r\\n        uint256 finalFee\\r\\n    );\\r\\n    event ProposePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice,\\r\\n        uint256 expirationTimestamp,\\r\\n        address currency\\r\\n    );\\r\\n    event DisputePrice(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    );\\r\\n    event Settle(\\r\\n        address indexed requester,\\r\\n        address indexed proposer,\\r\\n        address indexed disputer,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes ancillaryData,\\r\\n        int256 price,\\r\\n        uint256 payout\\r\\n    );\\r\\n    // Struct representing the state of a price request.\\r\\n    enum State {\\r\\n        Invalid, // Never requested.\\r\\n        Requested, // Requested, no other actions taken.\\r\\n        Proposed, // Proposed, but not expired or disputed yet.\\r\\n        Expired, // Proposed, not disputed, past liveness.\\r\\n        Disputed, // Disputed, but no DVM price returned yet.\\r\\n        Resolved, // Disputed and DVM price is available.\\r\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\r\\n    }\\r\\n\\r\\n    struct RequestSettings {\\r\\n        bool eventBased; // True if the request is set to be event-based.\\r\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\r\\n        bool callbackOnPriceProposed; // True if callbackOnPriceProposed callback is required.\\r\\n        bool callbackOnPriceDisputed; // True if callbackOnPriceDisputed callback is required.\\r\\n        bool callbackOnPriceSettled; // True if callbackOnPriceSettled callback is required.\\r\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\r\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\r\\n    }\\r\\n\\r\\n    // Struct representing a price request.\\r\\n    struct Request {\\r\\n        address proposer; // Address of the proposer.\\r\\n        address disputer; // Address of the disputer.\\r\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\r\\n        bool settled; // True if the request is settled.\\r\\n        RequestSettings requestSettings; // Custom settings associated with a request.\\r\\n        int256 proposedPrice; // Price that the proposer submitted.\\r\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\r\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\r\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\r\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\r\\n    }\\r\\n\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\r\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\r\\n    // to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n\\r\\n    function defaultLiveness() external view virtual returns (uint256);\\r\\n\\r\\n    function finder() external view virtual returns (FinderInterface);\\r\\n\\r\\n    function getCurrentTime() external view virtual returns (uint256);\\r\\n\\r\\n    // Note: this is required so that typechain generates a return value with named fields.\\r\\n    mapping(bytes32 => Request) public requests;\\r\\n\\r\\n    /**\\r\\n     * @notice Requests a new price.\\r\\n     * @param identifier price identifier being requested.\\r\\n     * @param timestamp timestamp of the price being requested.\\r\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\r\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\r\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\r\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\r\\n     *               provides its own reward system.\\r\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\r\\n     * This can be changed with a subsequent call to setBond().\\r\\n     */\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        IERC20 currency,\\r\\n        uint256 reward\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Set the proposal bond associated with a price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param bond custom bond amount to set.\\r\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\r\\n     * changed again with a subsequent call to setBond().\\r\\n     */\\r\\n    function setBond(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 bond\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\r\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\r\\n     * bond, so there is still profit to be made even if the reward is refunded.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setRefundOnDispute(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\r\\n     * being auto-resolved.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param customLiveness new custom liveness.\\r\\n     */\\r\\n    function setCustomLiveness(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        uint256 customLiveness\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the request to be an \\\"event-based\\\" request.\\r\\n     * @dev Calling this method has a few impacts on the request:\\r\\n     *\\r\\n     * 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated\\r\\n     *    with the request.\\r\\n     *\\r\\n     * 2. The proposer cannot propose the \\\"too early\\\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who\\r\\n     *    prematurely proposes a response loses their bond.\\r\\n     *\\r\\n     * 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to\\r\\n     *    the requesting contract.\\r\\n     *\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     */\\r\\n    function setEventBased(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Sets which callbacks should be enabled for the request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param callbackOnPriceProposed whether to enable the callback onPriceProposed.\\r\\n     * @param callbackOnPriceDisputed whether to enable the callback onPriceDisputed.\\r\\n     * @param callbackOnPriceSettled whether to enable the callback onPriceSettled.\\r\\n     */\\r\\n    function setCallbacks(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        bool callbackOnPriceProposed,\\r\\n        bool callbackOnPriceDisputed,\\r\\n        bool callbackOnPriceSettled\\r\\n    ) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\r\\n     * from this proposal. However, any bonds are pulled from the caller.\\r\\n     * @param proposer address to set as the proposer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePriceFor(\\r\\n        address proposer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a price value for an existing price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @param proposedPrice price being proposed.\\r\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\r\\n     * the proposer once settled if the proposal is correct.\\r\\n     */\\r\\n    function proposePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData,\\r\\n        int256 proposedPrice\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\r\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\r\\n     * @param disputer address to set as the disputer.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePriceFor(\\r\\n        address disputer,\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\r\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\r\\n     */\\r\\n    function disputePrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 totalBond);\\r\\n\\r\\n    /**\\r\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\r\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\r\\n     * hasn't been settled.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return resolved price.\\r\\n     */\\r\\n    function settleAndGetPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (int256);\\r\\n\\r\\n    /**\\r\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\r\\n     * the returned bonds as well as additional rewards.\\r\\n     */\\r\\n    function settle(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual returns (uint256 payout);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current data structure containing all information about a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the Request data structure.\\r\\n     */\\r\\n    function getRequest(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (Request memory);\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the state of a price request.\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return the State enum value.\\r\\n     */\\r\\n    function getState(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (State);\\r\\n\\r\\n    /**\\r\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\r\\n     * @param requester sender of the initial price request.\\r\\n     * @param identifier price identifier to identify the existing request.\\r\\n     * @param timestamp timestamp to identify the existing request.\\r\\n     * @param ancillaryData ancillary data of the price being requested.\\r\\n     * @return true if price has resolved or settled, false otherwise.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        address requester,\\r\\n        bytes32 identifier,\\r\\n        uint256 timestamp,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (bytes memory);\\r\\n}\\r\\n\",\"keccak256\":\"0x2090e3131c2b84fdb4ab163cdcc069f489c9781ae49678993957ecd516d12fea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346200013b57601f62002bf438819003918201601f19168301916001600160401b0383118484101762000140578084926060946040528339810103126200013b57805190620000536020820162000156565b6001600160a01b0391600160a01b908390620000729060400162000156565b1660018060a81b03196001541617176001551660018060a01b0319600254161760025563bb74480081101562000101578015620000bc57600355604051612a8890816200016c8239f35b60405162461bcd60e51b815260206004820152601460248201527f4c6976656e6573732063616e6e6f7420626520300000000000000000000000006044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152714c6976656e65737320746f6f206c6172676560701b6044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200013b5756fe6080604052600436101561001257600080fd5b6000803560e01c806311df92f114610d07578063120698af14610c465780631c39c38d14610c1d57806322f8e56614610ba357806329cb924d14610b88578063473c45fe14610a4b5780634ccb56f514610a2e57806353b59239146109a55780635e9a79a91461097157806376c7823f146109195780637c82288f146108bd57806391f58dcb146107e85780639d86698514610738578063a9904f9b146105a1578063ad5a755a146104cc578063af5d2f3914610466578063b8b4f90814610414578063b9a3c84c146103eb578063ba4b930c146103b0578063bc58ccaa1461032a578063c371dda71461030d578063f327b07514610196578063fba7f1e314610170578063fe4e1983146101525763ff8c1a8c1461013057600080fd5b3461014f578060031936011261014f57604051600160ff1b8152602090f35b80fd5b503461014f578060031936011261014f576020600354604051908152f35b503461014f57602061018e610184366115c0565b9291909133611c75565b604051908152f35b503461014f5760c036600319011261014f576004356024356044356001600160401b038111610309576101cd9036906004016114bc565b906064358015158103610304576084359182151583036103045760a435928315158403610304576101fc611913565b60ff60a01b1995866001541660015561021786848333612533565b60078110156102f0576001036102ab576102989561027a9361023992336121c6565b8752602087905260408720600301805462ff0000191693151560101b62ff000016939093178355825463ff000000191690151560181b63ff00000016178255565b9064ff00000000825491151560201b169064ff000000001916179055565b600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601760248201527f73657443616c6c6261636b733a205265717565737465640000000000000000006044820152606490fd5b634e487b7160e01b89526021600452602489fd5b600080fd5b8380fd5b503461014f578060031936011261014f5760206040516120008152f35b503461014f5761034d61033c366115c0565b92610348929192611913565b612533565b906007821015908161038e57600683149182156103a2575b8215610379575b6020836040519015158152f35b90915061038e5750600360209114388061036c565b634e487b7160e01b81526021600452602490fd5b506005831491506000610365565b503461014f576103c261033c366115c0565b6040519060078110156103d757602092508152f35b634e487b7160e01b83526021600452602483fd5b503461014f578060031936011261014f576002546040516001600160a01b039091168152602090f35b503461014f5760a036600319011261014f5761042e611594565b90606435906001600160401b03821161014f57602061018e8461045436600487016114bc565b60843591604435906024359033611975565b503461014f57604036600319011261014f57600435906001600160401b03821161014f576104c86104b461049d36600486016114bc565b6104a56115aa565b906104ae612769565b90612790565b6040519182916020835260208301906116d6565b0390f35b503461014f576104db36611538565b906104e7939293611913565b60ff60a01b1993846001541660015561050282828633612533565b600781101561058d5760010361055357602095610528600a9360409361053c97336121c6565b815280875220826004820155015490611968565b90600160a01b906001541617600155604051908152f35b60405162461bcd60e51b81526020600482015260126024820152711cd95d109bdb990e8814995c5d595cdd195960721b6044820152606490fd5b634e487b7160e01b87526021600452602487fd5b503461014f576102009061064660406105b9366115c0565b908496939695929551956105cc87611436565b848752846020880152848688015284606088015285516105eb81611405565b85815285602082015285878201528560608201528560808201528560a08201528560c082015260808801528460a08801528460c08801528460e08801526101009785898901528561012080990152610641611913565b6121c6565b815280602052206040518093819261065d83611436565b61071360018060a01b0380835416855280600184015416906020860191825260028401549060408701818316815260ff606089019360a01c1615158352816106a760038801611607565b9460808a01958652600a60068901549860a08c01998a5260078101549a60c08d019b8c5260e060088301549d019c8d5260098201549d019c8d5201549b8d019b8c52816040519d51168d52511660208c0152511660408a01525115156060890152516080880190611668565b5161016086015251610180850152516101a0840152516101c0830152516101e0820152f35b503461014f57602036600319011261014f576040610200916004358152806020522060018060a01b0380825416918160018201541691600282015461077f60038401611607565b6107c860068501549160ff600787015494600888015496600a60098a0154990154996040519b8c5260208c0152811660408b015260a01c16151560608901526080880190611668565b6101608601526101808501526101a08401526101c08301526101e0820152f35b503461014f576107f736611503565b610802929192611913565b60ff60a01b1992836001541660015561081d82828533612533565b60078110156108a9576001036108645761083792336121c6565b8252816020526003604083200161010061ff0019825416179055600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601d60248201527f736574526566756e644f6e446973707574653a205265717565737465640000006044820152606490fd5b634e487b7160e01b86526021600452602486fd5b503461014f5760c036600319011261014f576108d7611594565b906108e06115aa565b90608435906001600160401b03821161014f57602061018e858561090736600488016114bc565b9060a435926064359160443591611975565b503461014f5760a036600319011261014f57610933611594565b9061093c6115aa565b90608435906001600160401b03821161014f57602061018e858561096336600488016114bc565b916064359160443591611c75565b503461014f57602061053c610985366115c0565b91610991949394611913565b60ff60a01b19948560015416600155612221565b503461014f576109b436611503565b906109bd611913565b60ff60a01b199283600154166001556109d883838333612533565b60078110156108a9576007936040936020979360066109fd9403610a1c575b336121c6565b815280855220015490600160a01b906001541617600155604051908152f35b610a2883838333612221565b506109f7565b503461014f578060031936011261014f576020604051611fcb8152f35b503461014f57610a5a36611538565b919290610a65611913565b60ff60a01b19938460015416600155610a8082828533612533565b600781101561058d57600103610b435763bb744800841015610b09578315610acd57610aac92336121c6565b8352826020526005604084200155600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601460248201527304c6976656e6573732063616e6e6f7420626520360641b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152714c6976656e65737320746f6f206c6172676560701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f736574437573746f6d4c6976656e6573733a20526571756573746564000000006044820152606490fd5b503461014f578060031936011261014f57602061018e6129e3565b503461014f57602036600319011261014f5760015481906001600160a01b03168015610c1a57803b15610c1a57819060246040518094819363117c72b360e11b835260043560048401525af18015610c0f57610c00575b50604051f35b610c0990611452565b38610bfa565b6040513d84823e3d90fd5b50fd5b503461014f578060031936011261014f576001546040516001600160a01b039091168152602090f35b503461014f57610c5536611503565b610c60929192611913565b60ff60a01b19928360015416600155610c7b82828533612533565b60078110156108a957600103610cc257610c9592336121c6565b8252816020526003604083200161010161ffff19825416179055600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601860248201527f7365744576656e7442617365643a2052657175657374656400000000000000006044820152606490fd5b503461014f5760a036600319011261014f576044356001600160401b03811161120b57610d389036906004016114bc565b906064356001600160a01b038116900361014f57610d54611913565b6001805460ff60a01b19169055610d718260243560043533612533565b60078110156113f1576113b4576002546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526001600160a01b0390911690602081602481855afa90811561138c576024916020918591611397575b506040516390978d1b60e01b8152600480359082015292839182906001600160a01b03165afa90811561138c57839161136d575b501561132f576040516302abf57960e61b81527210dbdb1b185d195c985b15da1a5d195b1a5cdd606a1b600482015290602090829060249082905afa908115610c0f576024916020918491611302575b50604051631d1d5b3960e11b81526001600160a01b03606435811660048301529093849290918391165afa908115610c0f5782916112d3575b501561129757610e9e6129e3565b6024351161125c57611fcb82511161121757602460206001600160a01b03610ec46126e8565b604051635b97aadd60e01b81526064356001600160a01b0316600482015293849290918391165afa908115610c0f5782916111a8575b505191604051610f0981611405565b8281528260208201528260408201528260608201528260808201528360a08201528260c082015260405190610f3d82611436565b83825283602083015260018060a01b0360643516604083015283606083015260808201528260a08201528260c08201528260e082015260843561010082015283610120820152610f9382602435600435336121c6565b835260208381526040808520835181546001600160a01b03199081166001600160a01b03928316178355858501516001840180549092169083161790558483015160028301805460608801516001600160a81b0319909116929093169190911791151560a01b60ff60a01b1691909117905560808401518051600383018054958301519483015162ffffff1990961691151560ff169190911793151560081b61ff00169390931793151560101b62ff00001693909317825592600a926101209260c09190611099906060830151815463ff000000191690151560181b63ff000000161781556080830151815464ff00000000191690151560201b64ff0000000016179055565b60a081015160048701550151600585015560a0810151600685015560c0810151600785015560e0810151600885015561010081015160098501550151910155608435611193575b7ff1679315ff325c257a944e0ca1bfe7b26616039e9511f9610d4ba3eca851027b611126604051926004358452602435602085015260c0604085015260c08401906116d6565b6064356001600160a01b03166060840152608435608084015260a0830185905233929081900390a281600019046002118215151661117f576001805460ff60a01b1916600160a01b1781556040519083901b8152602090f35b634e487b7160e01b81526011600452602490fd5b6111a36084353033606435611713565b6110e0565b90506020813d60201161120f575b816111c360209383611480565b8101031261120b57604051908160208101106001600160401b036020840111176111f7576020820160405251815238610efa565b634e487b7160e01b83526041600452602483fd5b5080fd5b3d91506111b6565b60405162461bcd60e51b815260206004820152601760248201527f416e63696c6c617279204461746120746f6f206c6f6e670000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527254696d657374616d7020696e2066757475726560681b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273556e737570706f727465642063757272656e637960601b6044820152606490fd5b6112f5915060203d6020116112fb575b6112ed8183611480565b8101906116fb565b38610e90565b503d6112e3565b6113229150823d8411611328575b61131a8183611480565b810190612664565b38610e57565b503d611310565b60405162461bcd60e51b81526020600482015260166024820152752ab739bab83837b93a32b21034b232b73a34b334b2b960511b6044820152606490fd5b611386915060203d6020116112fb576112ed8183611480565b38610e07565b6040513d85823e3d90fd5b6113ae9150823d84116113285761131a8183611480565b38610dd3565b60405162461bcd60e51b81526020600482015260156024820152741c995c5d595cdd141c9a58d94e88125b9d985b1a59605a1b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b60e081019081106001600160401b0382111761142057604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b0382111761142057604052565b6001600160401b03811161142057604052565b604081019081106001600160401b0382111761142057604052565b90601f801991011681019081106001600160401b0382111761142057604052565b6001600160401b03811161142057601f01601f191660200190565b81601f82011215610304578035906114d3826114a1565b926114e16040519485611480565b8284526020838301011161030457816000926020809301838601378301015290565b6060600319820112610304576004359160243591604435906001600160401b03821161030457611535916004016114bc565b90565b6080600319820112610304576004359160243591604435906001600160401b0382116103045761156a916004016114bc565b9060643590565b9190820391821161157e57565b634e487b7160e01b600052601160045260246000fd5b600435906001600160a01b038216820361030457565b602435906001600160a01b038216820361030457565b906080600319830112610304576004356001600160a01b038116810361030457916024359160443591606435906001600160401b03821161030457611535916004016114bc565b9060405161161481611405565b60c06002829460ff815481811615158652818160081c1615156020870152818160101c1615156040870152818160181c161515606087015260201c1615156080850152600181015460a08501520154910152565b60c0809180511515845260208101511515602085015260408101511515604085015260608101511515606085015260808101511515608085015260a081015160a08501520151910152565b60005b8381106116c65750506000910152565b81810151838201526020016116b6565b906020916116ef815180928185528580860191016116b3565b601f01601f1916010190565b90816020910312610304575180151581036103045790565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176114205761176b9260405261176d565b565b6040516117ea916001600160a01b031661178682611465565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d15611872573d916117ce836114a1565b926117dc6040519485611480565b83523d60008785013e611876565b80519082821592831561185a575b505050156118035750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61186a93508201810191016116fb565b3882816117f8565b6060915b919290156118d8575081511561188a575090565b3b156118935790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156118eb5750805190602001fd5b60405162461bcd60e51b81526020600482015290819061190f9060248301906116d6565b0390fd5b60ff60015460a01c161561192357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9190820180921161157e57565b959492919093611983611913565b6001805460ff60a01b19908116909155936001600160a01b039088821615611c14576119b18386868a612533565b6007811015611bfe57600103611bb9576119cd8386868a6121c6565b600052600060205260406000209060ff600383015416611b69575b81546001600160a01b0319168a841617825560068201819055611a1d611a0c6129e3565b60058401548015611b5f5790611968565b6008830155611a356004830154600a84015490611968565b998a611b46575b7f6e51dd00371aabffa82cd401592f76ed51e98a9ea4b58751c70463a2c78b5ca160088401548560028601541690868c169687946040519384938c85528d602086015260c06040860152611a9360c086018d6116d6565b986060860152608085015260a084015216940390a3600160a01b96878760015416176001553b15159081611b34575b50611ad6575b505050506001541617600155565b803b1561030457611b02936000809460405196879586948593639c2fd1df60e01b855260048501611c59565b03925af18015611b2857611b19575b808080611ac8565b611b2290611452565b38611b11565b6040513d6000823e3d90fd5b60ff91506003015460101c1638611ac2565b611b5a8b8560028601541630903390611713565b611a3c565b5060035490611968565b600160ff1b81016119e85760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742070726f706f73652027746f6f206561726c79270000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f70726f706f73655072696365466f723a205265717565737465640000000000006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f70726f706f7365722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b61153593926060928252602082015281604082015201906116d6565b949392909192600091611c86611913565b6001805460ff60a01b19168155946001600160a01b0388161561212157611caf83838388612533565b600781101561210d576002036120c857611ccb838383886121c6565b845283602052604084209786890160018060a01b0382166bffffffffffffffffffffffff60a01b825416179055600a8901549860048101611d29611d108c8354611968565b9b8c6120a6575b611d1f6126e8565b92548b1c90611968565b80611f25575b506001600160a01b039050611d42612683565b16611d4d8583612730565b90611d6089611d5a612769565b89612790565b91813b15611f2157918891611d8d938360405180968195829463085999a960e21b84528c60048501611c59565b03925af18015611f1657908791611f02575b5090611e0a94939260098201805480151580611ef1575b611ecd575b5050815460068301546040516001600160a01b038c8116999481169493169289927f5165909c3d1c01c5d1e121ac6f6d01dda1ba24bc9e1f975b5a375339c15be7f3929182918d8c8c85612166565b0390a4885460ff60a01b1916600160a01b9081178a55973b15159081611ebb575b50611e45575b50505050505060ff60a01b19825416179055565b833b15611eb7579185809492611e859694604051978896879586946306c791b960e11b8652600486015260248501526080604485015260848401906116d6565b90606483015203925af18015610c0f57611ea3575b80808080611e31565b611ead8291611452565b61014f5780611e9a565b8580fd5b60ff91506003015460181c1638611e2b565b611eea919450898195558a60018060a01b0360028601541661218d565b3880611dbb565b5060ff600385015460081c16611db6565b611f0b90611452565b611eb7578538611d9f565b6040513d89823e3d90fd5b8880fd5b600283018054604051636eb1769f60e11b81523060048201526001600160a01b0394851660248201819052929490911690602081604481855afa90811561209b579084918c91612060575b50611f83611fc1949392611fbc92611968565b60405163095ea7b360e01b60208201526001600160a01b039094166024850152604484015282606481015b03601f198101845283611480565b61176d565b6001600160a01b03611fd16126e8565b169160018060a01b0390541660405191602083018381106001600160401b0382111761204c576040528252823b15611f2157906044899283604051958694859363432ce91960e11b855260048501525160248401525af18015611f1657612039575b80611d2f565b61204590969196611452565b9438612033565b634e487b7160e01b8b52604160045260248bfd5b9150506020813d602011612093575b8161207c60209383611480565b8101031261208f57518390611f83611f70565b8a80fd5b3d915061206f565b6040513d8d823e3d90fd5b60028401546120c3908e90309033906001600160a01b0316611713565b611d17565b60405162461bcd60e51b815260206004820152601960248201527f646973707574655072696365466f723a2050726f706f736564000000000000006044820152606490fd5b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152601e60248201527f64697370757465722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b94939260609261218892875260208701526080604087015260808601906116d6565b930152565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604482019290925261176b91611fbc8260648101611fae565b9261221b9160749160405194859260208401976bffffffffffffffffffffffff199060601b1688526034840152605483015261220b81518092602086860191016116b3565b8101036054810184520182611480565b51902090565b939261222f81848488612533565b9461223c828585846121c6565b60005260006020526040600020906002820196875490600160a01b60ff60a01b1983161789556007811015611bfe57600381036123cd575050600682015460078301556122bb6122a36122986004850154600a86015490611968565b600985015490611968565b9754835489916001600160a01b03918216911661218d565b60018060a01b039182815416918360018301541660078301938a7f3f384afb4bd9f0aef0298c80399950011420eb33b0e1a750b20966270247b9a08a8a8854998716998a946040519384938452602084015260a060408401526123228d60a08501906116d6565b91606084015260808301520390a46001805460ff60a01b1916600160a01b1790553b151590816123bb575b50612367575b50506001805460ff60a01b19169055505050565b5493813b156103045760008094612394604051978896879586946304cc1fd560e01b865260048601612166565b03925af18015611b28576123ac575b80808080612353565b6123b590611452565b386123a3565b60ff91506003015460201c163861234d565b9097506005036124ee5761242360206001600160a01b036123ec612683565b166123f78886612730565b9061240485611d5a612769565b6040516338ce36ab60e11b815294859384928392918c60048501611c59565b03915afa8015611b28576000906124ba575b6124a491508060078501556006840154141561247e61247361246860048701546124628160011c82611571565b90611968565b600a87015490611968565b600986015490611968565b988991156124a95760018501546001600160a01b0316905b6001600160a01b031661218d565b6122bb565b84546001600160a01b031690612496565b506020813d6020116124e6575b816124d460209383611480565b81010312610304576124a49051612435565b3d91506124c7565b60405162461bcd60e51b815260206004820152601760248201527f5f736574746c653a206e6f7420736574746c6561626c650000000000000000006044820152606490fd5b92919091612543818385876121c6565b936000948552846020526040852092600284015460018060a01b03908181161561265a57818654161561264d5760a01c60ff1661264157806001860154161561261e57602094926125a76125ce989795936125b0936125a0612683565b1695612730565b926104ae612769565b604051630b551cd560e41b8152968794859384939160048501611c59565b03915afa9182156126115781926125f1575b5050156125ec57600590565b600490565b61260a91925060203d81116112fb576112ed8183611480565b90386125e0565b50604051903d90823e3d90fd5b505050506008915001546126306129e3565b10905061263c57600390565b600290565b50505050505050600690565b5050505050505050600190565b5050505050505090565b9081602091031261030457516001600160a01b03811681036103045790565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa908115611b28576000916126cc57501690565b6126e4915060203d81116113285761131a8183611480565b1690565b6002546040516302abf57960e61b81526453746f726560d81b60048201526001600160a01b03916020908290602490829086165afa908115611b28576000916126cc57501690565b600381015460ff16156127655760058101546115359250801561275957600890915b0154611571565b50600860035491612752565b5090565b6040519061277682611465565b600b82526a37b7a932b8bab2b9ba32b960a91b6020830152565b9061279b9082612964565b906127ba6fffffffffffffffffffffffffffffffff8460201c1661285d565b926001600160c01b0319906127e09060601b6bffffffffffffffffffffffff191661285d565b16604051906020820194855260408201526028815260608101938185106001600160401b0386111761142057611535936020938660405261282a81518092876080880191016116b3565b830161283f82518093876080850191016116b3565b016128518351809360808401906116b3565b01038084520182611480565b7f3030303030303030303030303030303030303030303030303030303030303030906001600160401b038060801b8260401b169116178060201b1779ffff000000000000ffff000000000000ffff000000000000ffff7dffff000000000000ffff000000000000ffff000000000000ffff000000008260101b169116178060081b177e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f7f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f008260041b1691161760277f0101010101010101010101010101010101010101010101010101010101010101808360011c16818460021c16178360031c161602010190565b51156129ac5761153560226040518093600b60fa1b60208301526129928151809260206021860191016116b3565b8101601d60f91b6021820152036002810184520182611480565b6115356021604051836129c98295518092602080860191016116b3565b8101601d60f91b6020820152036001810184520182611480565b6001546001600160a01b03168015612a4d576020600491604051928380926329cb924d60e01b82525afa908115611b2857600091612a1f575090565b906020823d8211612a45575b81612a3860209383611480565b8101031261014f57505190565b3d9150612a2b565b50429056fea264697066735822122092ac37647861bdaf202da12bfdbdd51ed99e6311b00fc8302b0c15dac49bac4b64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b6000803560e01c806311df92f114610d07578063120698af14610c465780631c39c38d14610c1d57806322f8e56614610ba357806329cb924d14610b88578063473c45fe14610a4b5780634ccb56f514610a2e57806353b59239146109a55780635e9a79a91461097157806376c7823f146109195780637c82288f146108bd57806391f58dcb146107e85780639d86698514610738578063a9904f9b146105a1578063ad5a755a146104cc578063af5d2f3914610466578063b8b4f90814610414578063b9a3c84c146103eb578063ba4b930c146103b0578063bc58ccaa1461032a578063c371dda71461030d578063f327b07514610196578063fba7f1e314610170578063fe4e1983146101525763ff8c1a8c1461013057600080fd5b3461014f578060031936011261014f57604051600160ff1b8152602090f35b80fd5b503461014f578060031936011261014f576020600354604051908152f35b503461014f57602061018e610184366115c0565b9291909133611c75565b604051908152f35b503461014f5760c036600319011261014f576004356024356044356001600160401b038111610309576101cd9036906004016114bc565b906064358015158103610304576084359182151583036103045760a435928315158403610304576101fc611913565b60ff60a01b1995866001541660015561021786848333612533565b60078110156102f0576001036102ab576102989561027a9361023992336121c6565b8752602087905260408720600301805462ff0000191693151560101b62ff000016939093178355825463ff000000191690151560181b63ff00000016178255565b9064ff00000000825491151560201b169064ff000000001916179055565b600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601760248201527f73657443616c6c6261636b733a205265717565737465640000000000000000006044820152606490fd5b634e487b7160e01b89526021600452602489fd5b600080fd5b8380fd5b503461014f578060031936011261014f5760206040516120008152f35b503461014f5761034d61033c366115c0565b92610348929192611913565b612533565b906007821015908161038e57600683149182156103a2575b8215610379575b6020836040519015158152f35b90915061038e5750600360209114388061036c565b634e487b7160e01b81526021600452602490fd5b506005831491506000610365565b503461014f576103c261033c366115c0565b6040519060078110156103d757602092508152f35b634e487b7160e01b83526021600452602483fd5b503461014f578060031936011261014f576002546040516001600160a01b039091168152602090f35b503461014f5760a036600319011261014f5761042e611594565b90606435906001600160401b03821161014f57602061018e8461045436600487016114bc565b60843591604435906024359033611975565b503461014f57604036600319011261014f57600435906001600160401b03821161014f576104c86104b461049d36600486016114bc565b6104a56115aa565b906104ae612769565b90612790565b6040519182916020835260208301906116d6565b0390f35b503461014f576104db36611538565b906104e7939293611913565b60ff60a01b1993846001541660015561050282828633612533565b600781101561058d5760010361055357602095610528600a9360409361053c97336121c6565b815280875220826004820155015490611968565b90600160a01b906001541617600155604051908152f35b60405162461bcd60e51b81526020600482015260126024820152711cd95d109bdb990e8814995c5d595cdd195960721b6044820152606490fd5b634e487b7160e01b87526021600452602487fd5b503461014f576102009061064660406105b9366115c0565b908496939695929551956105cc87611436565b848752846020880152848688015284606088015285516105eb81611405565b85815285602082015285878201528560608201528560808201528560a08201528560c082015260808801528460a08801528460c08801528460e08801526101009785898901528561012080990152610641611913565b6121c6565b815280602052206040518093819261065d83611436565b61071360018060a01b0380835416855280600184015416906020860191825260028401549060408701818316815260ff606089019360a01c1615158352816106a760038801611607565b9460808a01958652600a60068901549860a08c01998a5260078101549a60c08d019b8c5260e060088301549d019c8d5260098201549d019c8d5201549b8d019b8c52816040519d51168d52511660208c0152511660408a01525115156060890152516080880190611668565b5161016086015251610180850152516101a0840152516101c0830152516101e0820152f35b503461014f57602036600319011261014f576040610200916004358152806020522060018060a01b0380825416918160018201541691600282015461077f60038401611607565b6107c860068501549160ff600787015494600888015496600a60098a0154990154996040519b8c5260208c0152811660408b015260a01c16151560608901526080880190611668565b6101608601526101808501526101a08401526101c08301526101e0820152f35b503461014f576107f736611503565b610802929192611913565b60ff60a01b1992836001541660015561081d82828533612533565b60078110156108a9576001036108645761083792336121c6565b8252816020526003604083200161010061ff0019825416179055600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601d60248201527f736574526566756e644f6e446973707574653a205265717565737465640000006044820152606490fd5b634e487b7160e01b86526021600452602486fd5b503461014f5760c036600319011261014f576108d7611594565b906108e06115aa565b90608435906001600160401b03821161014f57602061018e858561090736600488016114bc565b9060a435926064359160443591611975565b503461014f5760a036600319011261014f57610933611594565b9061093c6115aa565b90608435906001600160401b03821161014f57602061018e858561096336600488016114bc565b916064359160443591611c75565b503461014f57602061053c610985366115c0565b91610991949394611913565b60ff60a01b19948560015416600155612221565b503461014f576109b436611503565b906109bd611913565b60ff60a01b199283600154166001556109d883838333612533565b60078110156108a9576007936040936020979360066109fd9403610a1c575b336121c6565b815280855220015490600160a01b906001541617600155604051908152f35b610a2883838333612221565b506109f7565b503461014f578060031936011261014f576020604051611fcb8152f35b503461014f57610a5a36611538565b919290610a65611913565b60ff60a01b19938460015416600155610a8082828533612533565b600781101561058d57600103610b435763bb744800841015610b09578315610acd57610aac92336121c6565b8352826020526005604084200155600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601460248201527304c6976656e6573732063616e6e6f7420626520360641b6044820152606490fd5b60405162461bcd60e51b81526020600482015260126024820152714c6976656e65737320746f6f206c6172676560701b6044820152606490fd5b60405162461bcd60e51b815260206004820152601c60248201527f736574437573746f6d4c6976656e6573733a20526571756573746564000000006044820152606490fd5b503461014f578060031936011261014f57602061018e6129e3565b503461014f57602036600319011261014f5760015481906001600160a01b03168015610c1a57803b15610c1a57819060246040518094819363117c72b360e11b835260043560048401525af18015610c0f57610c00575b50604051f35b610c0990611452565b38610bfa565b6040513d84823e3d90fd5b50fd5b503461014f578060031936011261014f576001546040516001600160a01b039091168152602090f35b503461014f57610c5536611503565b610c60929192611913565b60ff60a01b19928360015416600155610c7b82828533612533565b60078110156108a957600103610cc257610c9592336121c6565b8252816020526003604083200161010161ffff19825416179055600160a01b906001541617600155604051f35b60405162461bcd60e51b815260206004820152601860248201527f7365744576656e7442617365643a2052657175657374656400000000000000006044820152606490fd5b503461014f5760a036600319011261014f576044356001600160401b03811161120b57610d389036906004016114bc565b906064356001600160a01b038116900361014f57610d54611913565b6001805460ff60a01b19169055610d718260243560043533612533565b60078110156113f1576113b4576002546040516302abf57960e61b8152721259195b9d1a599a595c95da1a5d195b1a5cdd606a1b60048201526001600160a01b0390911690602081602481855afa90811561138c576024916020918591611397575b506040516390978d1b60e01b8152600480359082015292839182906001600160a01b03165afa90811561138c57839161136d575b501561132f576040516302abf57960e61b81527210dbdb1b185d195c985b15da1a5d195b1a5cdd606a1b600482015290602090829060249082905afa908115610c0f576024916020918491611302575b50604051631d1d5b3960e11b81526001600160a01b03606435811660048301529093849290918391165afa908115610c0f5782916112d3575b501561129757610e9e6129e3565b6024351161125c57611fcb82511161121757602460206001600160a01b03610ec46126e8565b604051635b97aadd60e01b81526064356001600160a01b0316600482015293849290918391165afa908115610c0f5782916111a8575b505191604051610f0981611405565b8281528260208201528260408201528260608201528260808201528360a08201528260c082015260405190610f3d82611436565b83825283602083015260018060a01b0360643516604083015283606083015260808201528260a08201528260c08201528260e082015260843561010082015283610120820152610f9382602435600435336121c6565b835260208381526040808520835181546001600160a01b03199081166001600160a01b03928316178355858501516001840180549092169083161790558483015160028301805460608801516001600160a81b0319909116929093169190911791151560a01b60ff60a01b1691909117905560808401518051600383018054958301519483015162ffffff1990961691151560ff169190911793151560081b61ff00169390931793151560101b62ff00001693909317825592600a926101209260c09190611099906060830151815463ff000000191690151560181b63ff000000161781556080830151815464ff00000000191690151560201b64ff0000000016179055565b60a081015160048701550151600585015560a0810151600685015560c0810151600785015560e0810151600885015561010081015160098501550151910155608435611193575b7ff1679315ff325c257a944e0ca1bfe7b26616039e9511f9610d4ba3eca851027b611126604051926004358452602435602085015260c0604085015260c08401906116d6565b6064356001600160a01b03166060840152608435608084015260a0830185905233929081900390a281600019046002118215151661117f576001805460ff60a01b1916600160a01b1781556040519083901b8152602090f35b634e487b7160e01b81526011600452602490fd5b6111a36084353033606435611713565b6110e0565b90506020813d60201161120f575b816111c360209383611480565b8101031261120b57604051908160208101106001600160401b036020840111176111f7576020820160405251815238610efa565b634e487b7160e01b83526041600452602483fd5b5080fd5b3d91506111b6565b60405162461bcd60e51b815260206004820152601760248201527f416e63696c6c617279204461746120746f6f206c6f6e670000000000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601360248201527254696d657374616d7020696e2066757475726560681b6044820152606490fd5b60405162461bcd60e51b8152602060048201526014602482015273556e737570706f727465642063757272656e637960601b6044820152606490fd5b6112f5915060203d6020116112fb575b6112ed8183611480565b8101906116fb565b38610e90565b503d6112e3565b6113229150823d8411611328575b61131a8183611480565b810190612664565b38610e57565b503d611310565b60405162461bcd60e51b81526020600482015260166024820152752ab739bab83837b93a32b21034b232b73a34b334b2b960511b6044820152606490fd5b611386915060203d6020116112fb576112ed8183611480565b38610e07565b6040513d85823e3d90fd5b6113ae9150823d84116113285761131a8183611480565b38610dd3565b60405162461bcd60e51b81526020600482015260156024820152741c995c5d595cdd141c9a58d94e88125b9d985b1a59605a1b6044820152606490fd5b634e487b7160e01b82526021600452602482fd5b60e081019081106001600160401b0382111761142057604052565b634e487b7160e01b600052604160045260246000fd5b61014081019081106001600160401b0382111761142057604052565b6001600160401b03811161142057604052565b604081019081106001600160401b0382111761142057604052565b90601f801991011681019081106001600160401b0382111761142057604052565b6001600160401b03811161142057601f01601f191660200190565b81601f82011215610304578035906114d3826114a1565b926114e16040519485611480565b8284526020838301011161030457816000926020809301838601378301015290565b6060600319820112610304576004359160243591604435906001600160401b03821161030457611535916004016114bc565b90565b6080600319820112610304576004359160243591604435906001600160401b0382116103045761156a916004016114bc565b9060643590565b9190820391821161157e57565b634e487b7160e01b600052601160045260246000fd5b600435906001600160a01b038216820361030457565b602435906001600160a01b038216820361030457565b906080600319830112610304576004356001600160a01b038116810361030457916024359160443591606435906001600160401b03821161030457611535916004016114bc565b9060405161161481611405565b60c06002829460ff815481811615158652818160081c1615156020870152818160101c1615156040870152818160181c161515606087015260201c1615156080850152600181015460a08501520154910152565b60c0809180511515845260208101511515602085015260408101511515604085015260608101511515606085015260808101511515608085015260a081015160a08501520151910152565b60005b8381106116c65750506000910152565b81810151838201526020016116b6565b906020916116ef815180928185528580860191016116b3565b601f01601f1916010190565b90816020910312610304575180151581036103045790565b6040516323b872dd60e01b60208201526001600160a01b03928316602482015292909116604483015260648083019390935291815260a08101918183106001600160401b038411176114205761176b9260405261176d565b565b6040516117ea916001600160a01b031661178682611465565b6000806020958685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656487860152868151910182855af13d15611872573d916117ce836114a1565b926117dc6040519485611480565b83523d60008785013e611876565b80519082821592831561185a575b505050156118035750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b61186a93508201810191016116fb565b3882816117f8565b6060915b919290156118d8575081511561188a575090565b3b156118935790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156118eb5750805190602001fd5b60405162461bcd60e51b81526020600482015290819061190f9060248301906116d6565b0390fd5b60ff60015460a01c161561192357565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b9190820180921161157e57565b959492919093611983611913565b6001805460ff60a01b19908116909155936001600160a01b039088821615611c14576119b18386868a612533565b6007811015611bfe57600103611bb9576119cd8386868a6121c6565b600052600060205260406000209060ff600383015416611b69575b81546001600160a01b0319168a841617825560068201819055611a1d611a0c6129e3565b60058401548015611b5f5790611968565b6008830155611a356004830154600a84015490611968565b998a611b46575b7f6e51dd00371aabffa82cd401592f76ed51e98a9ea4b58751c70463a2c78b5ca160088401548560028601541690868c169687946040519384938c85528d602086015260c06040860152611a9360c086018d6116d6565b986060860152608085015260a084015216940390a3600160a01b96878760015416176001553b15159081611b34575b50611ad6575b505050506001541617600155565b803b1561030457611b02936000809460405196879586948593639c2fd1df60e01b855260048501611c59565b03925af18015611b2857611b19575b808080611ac8565b611b2290611452565b38611b11565b6040513d6000823e3d90fd5b60ff91506003015460101c1638611ac2565b611b5a8b8560028601541630903390611713565b611a3c565b5060035490611968565b600160ff1b81016119e85760405162461bcd60e51b815260206004820152601a60248201527f43616e6e6f742070726f706f73652027746f6f206561726c79270000000000006044820152606490fd5b60405162461bcd60e51b815260206004820152601a60248201527f70726f706f73655072696365466f723a205265717565737465640000000000006044820152606490fd5b634e487b7160e01b600052602160045260246000fd5b60405162461bcd60e51b815260206004820152601e60248201527f70726f706f7365722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b61153593926060928252602082015281604082015201906116d6565b949392909192600091611c86611913565b6001805460ff60a01b19168155946001600160a01b0388161561212157611caf83838388612533565b600781101561210d576002036120c857611ccb838383886121c6565b845283602052604084209786890160018060a01b0382166bffffffffffffffffffffffff60a01b825416179055600a8901549860048101611d29611d108c8354611968565b9b8c6120a6575b611d1f6126e8565b92548b1c90611968565b80611f25575b506001600160a01b039050611d42612683565b16611d4d8583612730565b90611d6089611d5a612769565b89612790565b91813b15611f2157918891611d8d938360405180968195829463085999a960e21b84528c60048501611c59565b03925af18015611f1657908791611f02575b5090611e0a94939260098201805480151580611ef1575b611ecd575b5050815460068301546040516001600160a01b038c8116999481169493169289927f5165909c3d1c01c5d1e121ac6f6d01dda1ba24bc9e1f975b5a375339c15be7f3929182918d8c8c85612166565b0390a4885460ff60a01b1916600160a01b9081178a55973b15159081611ebb575b50611e45575b50505050505060ff60a01b19825416179055565b833b15611eb7579185809492611e859694604051978896879586946306c791b960e11b8652600486015260248501526080604485015260848401906116d6565b90606483015203925af18015610c0f57611ea3575b80808080611e31565b611ead8291611452565b61014f5780611e9a565b8580fd5b60ff91506003015460181c1638611e2b565b611eea919450898195558a60018060a01b0360028601541661218d565b3880611dbb565b5060ff600385015460081c16611db6565b611f0b90611452565b611eb7578538611d9f565b6040513d89823e3d90fd5b8880fd5b600283018054604051636eb1769f60e11b81523060048201526001600160a01b0394851660248201819052929490911690602081604481855afa90811561209b579084918c91612060575b50611f83611fc1949392611fbc92611968565b60405163095ea7b360e01b60208201526001600160a01b039094166024850152604484015282606481015b03601f198101845283611480565b61176d565b6001600160a01b03611fd16126e8565b169160018060a01b0390541660405191602083018381106001600160401b0382111761204c576040528252823b15611f2157906044899283604051958694859363432ce91960e11b855260048501525160248401525af18015611f1657612039575b80611d2f565b61204590969196611452565b9438612033565b634e487b7160e01b8b52604160045260248bfd5b9150506020813d602011612093575b8161207c60209383611480565b8101031261208f57518390611f83611f70565b8a80fd5b3d915061206f565b6040513d8d823e3d90fd5b60028401546120c3908e90309033906001600160a01b0316611713565b611d17565b60405162461bcd60e51b815260206004820152601960248201527f646973707574655072696365466f723a2050726f706f736564000000000000006044820152606490fd5b634e487b7160e01b85526021600452602485fd5b60405162461bcd60e51b815260206004820152601e60248201527f64697370757465722061646472657373206d757374206265206e6f6e203000006044820152606490fd5b94939260609261218892875260208701526080604087015260808601906116d6565b930152565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604482019290925261176b91611fbc8260648101611fae565b9261221b9160749160405194859260208401976bffffffffffffffffffffffff199060601b1688526034840152605483015261220b81518092602086860191016116b3565b8101036054810184520182611480565b51902090565b939261222f81848488612533565b9461223c828585846121c6565b60005260006020526040600020906002820196875490600160a01b60ff60a01b1983161789556007811015611bfe57600381036123cd575050600682015460078301556122bb6122a36122986004850154600a86015490611968565b600985015490611968565b9754835489916001600160a01b03918216911661218d565b60018060a01b039182815416918360018301541660078301938a7f3f384afb4bd9f0aef0298c80399950011420eb33b0e1a750b20966270247b9a08a8a8854998716998a946040519384938452602084015260a060408401526123228d60a08501906116d6565b91606084015260808301520390a46001805460ff60a01b1916600160a01b1790553b151590816123bb575b50612367575b50506001805460ff60a01b19169055505050565b5493813b156103045760008094612394604051978896879586946304cc1fd560e01b865260048601612166565b03925af18015611b28576123ac575b80808080612353565b6123b590611452565b386123a3565b60ff91506003015460201c163861234d565b9097506005036124ee5761242360206001600160a01b036123ec612683565b166123f78886612730565b9061240485611d5a612769565b6040516338ce36ab60e11b815294859384928392918c60048501611c59565b03915afa8015611b28576000906124ba575b6124a491508060078501556006840154141561247e61247361246860048701546124628160011c82611571565b90611968565b600a87015490611968565b600986015490611968565b988991156124a95760018501546001600160a01b0316905b6001600160a01b031661218d565b6122bb565b84546001600160a01b031690612496565b506020813d6020116124e6575b816124d460209383611480565b81010312610304576124a49051612435565b3d91506124c7565b60405162461bcd60e51b815260206004820152601760248201527f5f736574746c653a206e6f7420736574746c6561626c650000000000000000006044820152606490fd5b92919091612543818385876121c6565b936000948552846020526040852092600284015460018060a01b03908181161561265a57818654161561264d5760a01c60ff1661264157806001860154161561261e57602094926125a76125ce989795936125b0936125a0612683565b1695612730565b926104ae612769565b604051630b551cd560e41b8152968794859384939160048501611c59565b03915afa9182156126115781926125f1575b5050156125ec57600590565b600490565b61260a91925060203d81116112fb576112ed8183611480565b90386125e0565b50604051903d90823e3d90fd5b505050506008915001546126306129e3565b10905061263c57600390565b600290565b50505050505050600690565b5050505050505050600190565b5050505050505090565b9081602091031261030457516001600160a01b03811681036103045790565b6002546040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03916020908290602490829086165afa908115611b28576000916126cc57501690565b6126e4915060203d81116113285761131a8183611480565b1690565b6002546040516302abf57960e61b81526453746f726560d81b60048201526001600160a01b03916020908290602490829086165afa908115611b28576000916126cc57501690565b600381015460ff16156127655760058101546115359250801561275957600890915b0154611571565b50600860035491612752565b5090565b6040519061277682611465565b600b82526a37b7a932b8bab2b9ba32b960a91b6020830152565b9061279b9082612964565b906127ba6fffffffffffffffffffffffffffffffff8460201c1661285d565b926001600160c01b0319906127e09060601b6bffffffffffffffffffffffff191661285d565b16604051906020820194855260408201526028815260608101938185106001600160401b0386111761142057611535936020938660405261282a81518092876080880191016116b3565b830161283f82518093876080850191016116b3565b016128518351809360808401906116b3565b01038084520182611480565b7f3030303030303030303030303030303030303030303030303030303030303030906001600160401b038060801b8260401b169116178060201b1779ffff000000000000ffff000000000000ffff000000000000ffff7dffff000000000000ffff000000000000ffff000000000000ffff000000008260101b169116178060081b177e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f7f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f008260041b1691161760277f0101010101010101010101010101010101010101010101010101010101010101808360011c16818460021c16178360031c161602010190565b51156129ac5761153560226040518093600b60fa1b60208301526129928151809260206021860191016116b3565b8101601d60f91b6021820152036002810184520182611480565b6115356021604051836129c98295518092602080860191016116b3565b8101601d60f91b6020820152036001810184520182611480565b6001546001600160a01b03168015612a4d576020600491604051928380926329cb924d60e01b82525afa908115611b2857600091612a1f575090565b906020823d8211612a45575b81612a3860209383611480565b8101031261014f57505190565b3d9150612a2b565b50429056fea264697066735822122092ac37647861bdaf202da12bfdbdd51ed99e6311b00fc8302b0c15dac49bac4b64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_finderAddress": "finder to use to get addresses of DVM contracts.",
          "_liveness": "default liveness applied to each price request.",
          "_timerAddress": "address of the timer contract. Should be 0x0 in prod."
        }
      },
      "disputePrice(address,bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
        }
      },
      "disputePriceFor(address,address,bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "disputer": "address to set as the disputer.",
          "identifier": "price identifier to identify the existing request.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the disputer once settled if the dispute was valid (the proposal was incorrect)."
        }
      },
      "getRequest(address,bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "_0": "the Request data structure."
        }
      },
      "getState(address,bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "_0": "the State."
        }
      },
      "hasPrice(address,bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "_0": "boolean indicating true if price exists and false if not."
        }
      },
      "proposePrice(address,bytes32,uint256,bytes,int256)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "proposedPrice": "price being proposed.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
        }
      },
      "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "proposedPrice": "price being proposed.",
          "proposer": "address to set as the proposer.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "the amount that's pulled from the caller's wallet as a bond. The bond will be returned to the proposer once settled if the proposal is correct."
        }
      },
      "requestPrice(bytes32,uint256,bytes,address,uint256)": {
        "params": {
          "ancillaryData": "ancillary data representing additional args being passed with the price request.",
          "currency": "ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.",
          "identifier": "price identifier being requested.",
          "reward": "reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,               which could make sense if the contract requests and proposes the value in the same call or               provides its own reward system.",
          "timestamp": "timestamp of the price being requested."
        },
        "returns": {
          "totalBond": "default bond (final fee) + final fee that the proposer and disputer will be required to pay. This can be changed with a subsequent call to setBond()."
        }
      },
      "setBond(bytes32,uint256,bytes,uint256)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "bond": "custom bond amount to set.",
          "identifier": "price identifier to identify the existing request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "totalBond": "new bond + final fee that the proposer and disputer will be required to pay. This can be changed again with a subsequent call to setBond()."
        }
      },
      "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "callbackOnPriceDisputed": "whether to enable the callback onPriceDisputed.",
          "callbackOnPriceProposed": "whether to enable the callback onPriceProposed.",
          "callbackOnPriceSettled": "whether to enable the callback onPriceSettled.",
          "identifier": "price identifier to identify the existing request.",
          "timestamp": "timestamp to identify the existing request."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      },
      "setCustomLiveness(bytes32,uint256,bytes,uint256)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "customLiveness": "new custom liveness.",
          "identifier": "price identifier to identify the existing request.",
          "timestamp": "timestamp to identify the existing request."
        }
      },
      "setEventBased(bytes32,uint256,bytes)": {
        "details": "Calling this method has a few impacts on the request: 1. The timestamp at which the request is evaluated is the time of the proposal, not the timestamp associated    with the request. 2. The proposer cannot propose the \"too early\" value (TOO_EARLY_RESPONSE). This is to ensure that a proposer who    prematurely proposes a response loses their bond. 3. RefundoOnDispute is automatically set, meaning disputes trigger the reward to be automatically refunded to    the requesting contract.",
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "timestamp": "timestamp to identify the existing request."
        }
      },
      "setRefundOnDispute(bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "timestamp": "timestamp to identify the existing request."
        }
      },
      "settle(address,bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "requester": "sender of the initial price request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "payout": "the amount that the \"winner\" (proposer or disputer) receives on settlement. This amount includes the returned bonds as well as additional rewards."
        }
      },
      "settleAndGetPrice(bytes32,uint256,bytes)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "identifier": "price identifier to identify the existing request.",
          "timestamp": "timestamp to identify the existing request."
        },
        "returns": {
          "_0": "resolved price."
        }
      },
      "stampAncillaryData(bytes,address)": {
        "params": {
          "ancillaryData": "ancillary data of the price being requested.",
          "requester": "sender of the initial price request."
        },
        "returns": {
          "_0": "the stamped ancillary bytes."
        }
      }
    },
    "title": "Optimistic Oracle.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor."
      },
      "disputePrice(address,bytes32,uint256,bytes)": {
        "notice": "Disputes a price value for an existing price request with an active proposal."
      },
      "disputePriceFor(address,address,bytes32,uint256,bytes)": {
        "notice": "Disputes a price request with an active proposal on another address' behalf. Note: this address will receive any rewards that come from this dispute. However, any bonds are pulled from the caller."
      },
      "getRequest(address,bytes32,uint256,bytes)": {
        "notice": "Gets the current data structure containing all information about a price request."
      },
      "getState(address,bytes32,uint256,bytes)": {
        "notice": "Computes the current state of a price request. See the State enum for more details."
      },
      "hasPrice(address,bytes32,uint256,bytes)": {
        "notice": "Checks if a given request has resolved, expired or been settled (i.e the optimistic oracle has a price)."
      },
      "proposePrice(address,bytes32,uint256,bytes,int256)": {
        "notice": "Proposes a price value for an existing price request."
      },
      "proposePriceFor(address,address,bytes32,uint256,bytes,int256)": {
        "notice": "Proposes a price value on another address' behalf. Note: this address will receive any rewards that come from this proposal. However, any bonds are pulled from the caller."
      },
      "requestPrice(bytes32,uint256,bytes,address,uint256)": {
        "notice": "Requests a new price."
      },
      "setBond(bytes32,uint256,bytes,uint256)": {
        "notice": "Set the proposal bond associated with a price request."
      },
      "setCallbacks(bytes32,uint256,bytes,bool,bool,bool)": {
        "notice": "Sets which callbacks should be enabled for the request."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      },
      "setCustomLiveness(bytes32,uint256,bytes,uint256)": {
        "notice": "Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before being auto-resolved."
      },
      "setEventBased(bytes32,uint256,bytes)": {
        "notice": "Sets the request to be an \"event-based\" request."
      },
      "setRefundOnDispute(bytes32,uint256,bytes)": {
        "notice": "Sets the request to refund the reward if the proposal is disputed. This can help to \"hedge\" the caller in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's bond, so there is still profit to be made even if the reward is refunded."
      },
      "settle(address,bytes32,uint256,bytes)": {
        "notice": "Attempts to settle an outstanding price request. Will revert if it isn't settleable."
      },
      "settleAndGetPrice(bytes32,uint256,bytes)": {
        "notice": "Retrieves a price that was previously requested by a caller. Reverts if the request is not settled or settleable. Note: this method is not view so that this call may actually settle the price request if it hasn't been settled."
      },
      "stampAncillaryData(bytes,address)": {
        "notice": "Generates stamped ancillary data in the format that it would be used in the case of a price dispute."
      }
    },
    "notice": "Pre-DVM escalation contract that allows faster settlement.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 62810,
        "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
        "label": "requests",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Request)62786_storage)"
      },
      {
        "astId": 17751,
        "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
        "label": "timerAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
        "label": "_notEntered",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 59000,
        "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
        "label": "finder",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FinderInterface)36753"
      },
      {
        "astId": 59003,
        "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
        "label": "defaultLiveness",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)36753": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)5182": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Request)62786_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct OptimisticOracleV2Interface.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)62786_storage"
      },
      "t_struct(Request)62786_storage": {
        "encoding": "inplace",
        "label": "struct OptimisticOracleV2Interface.Request",
        "members": [
          {
            "astId": 62765,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "proposer",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 62767,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "disputer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 62770,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "currency",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC20)5182"
          },
          {
            "astId": 62772,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "settled",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 62775,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "requestSettings",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RequestSettings)62763_storage"
          },
          {
            "astId": 62777,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "proposedPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_int256"
          },
          {
            "astId": 62779,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "resolvedPrice",
            "offset": 0,
            "slot": "7",
            "type": "t_int256"
          },
          {
            "astId": 62781,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "expirationTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 62783,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "reward",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 62785,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "finalFee",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(RequestSettings)62763_storage": {
        "encoding": "inplace",
        "label": "struct OptimisticOracleV2Interface.RequestSettings",
        "members": [
          {
            "astId": 62750,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "eventBased",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 62752,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "refundOnDispute",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 62754,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "callbackOnPriceProposed",
            "offset": 2,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 62756,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "callbackOnPriceDisputed",
            "offset": 3,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 62758,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "callbackOnPriceSettled",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 62760,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "bond",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 62762,
            "contract": "contracts/optimistic-oracle-v2/implementation/OptimisticOracleV2.sol:OptimisticOracleV2",
            "label": "customLiveness",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}