{
  "address": "0x0C55e5b1604C4D9dd2857A324298C1cf11F051F4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_checkpointManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fxRoot",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "RelayedGovernanceRequest",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SEND_MESSAGE_EVENT_SIG",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpointManager",
      "outputs": [
        {
          "internalType": "contract ICheckpointManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChildTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRoot",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "processedExits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "inputData",
          "type": "bytes"
        }
      ],
      "name": "receiveMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "relayGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChildTunnel",
          "type": "address"
        }
      ],
      "name": "setFxChildTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd37f477636fb2091ab763f7807bc556dd33a06f72bee02417088d1955d99ada3",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x0C55e5b1604C4D9dd2857A324298C1cf11F051F4",
    "transactionIndex": 42,
    "gasUsed": "1672748",
    "logsBloom": "0x
    "blockHash": "0x0feae2bb373d474de63d6ed751b24e1606b706d9517e7fc16d3f2041e7afce06",
    "transactionHash": "0xd37f477636fb2091ab763f7807bc556dd33a06f72bee02417088d1955d99ada3",
    "logs": [
      {
        "transactionIndex": 42,
        "blockNumber": 6161300,
        "transactionHash": "0xd37f477636fb2091ab763f7807bc556dd33a06f72bee02417088d1955d99ada3",
        "address": "0x0C55e5b1604C4D9dd2857A324298C1cf11F051F4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 111,
        "blockHash": "0x0feae2bb373d474de63d6ed751b24e1606b706d9517e7fc16d3f2041e7afce06"
      }
    ],
    "blockNumber": 6161300,
    "cumulativeGasUsed": "9454066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "0x47CACA50f7A2CeE78Fa9f196C04ba8F4E6B54F73"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_checkpointManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fxRoot\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"RelayedGovernanceRequest\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEND_MESSAGE_EVENT_SIG\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpointManager\",\"outputs\":[{\"internalType\":\"contract ICheckpointManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChildTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRoot\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedExits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"inputData\",\"type\":\"bytes\"}],\"name\":\"receiveMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"relayGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChildTunnel\",\"type\":\"address\"}],\"name\":\"setFxChildTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"receiveMessage(bytes)\":{\"details\":\"This function verifies if the transaction actually happened on child chain\",\"params\":{\"inputData\":\"RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt\"}},\"relayGovernance(address,bytes)\":{\"details\":\"The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Governance relayer contract to be deployed on Ethereum that receives messages from the owner (Governor) and sends them to sidechain.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveMessage(bytes)\":{\"notice\":\"receive message from  L2 to L1, validated by proof\"},\"relayGovernance(address,bytes)\":{\"notice\":\"This should be called in order to relay a governance request to the `GovernorChildTunnel` contract deployed to the sidechain. Note: this can only be called by the owner (presumably the Ethereum Governor contract).\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol\":\"GovernorRootTunnel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@maticnetwork/fx-portal/contracts/lib/ExitPayloadReader.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary ExitPayloadReader {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct ExitPayload {\\n        RLPReader.RLPItem[] data;\\n    }\\n\\n    struct Receipt {\\n        RLPReader.RLPItem[] data;\\n        bytes raw;\\n        uint256 logIndex;\\n    }\\n\\n    struct Log {\\n        RLPReader.RLPItem data;\\n        RLPReader.RLPItem[] list;\\n    }\\n\\n    struct LogTopics {\\n        RLPReader.RLPItem[] data;\\n    }\\n\\n    // copy paste of private copy() from RLPReader to avoid changing of existing contracts\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n        \\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    function toExitPayload(bytes memory data) internal pure returns (ExitPayload memory) {\\n        RLPReader.RLPItem[] memory payloadData = data.toRlpItem().toList();\\n\\n        return ExitPayload(payloadData);\\n    }\\n\\n    function getHeaderNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[0].toUint();\\n    }\\n\\n    function getBlockProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n        return payload.data[1].toBytes();\\n    }\\n\\n    function getBlockNumber(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[2].toUint();\\n    }\\n\\n    function getBlockTime(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[3].toUint();\\n    }\\n\\n    function getTxRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n        return bytes32(payload.data[4].toUint());\\n    }\\n\\n    function getReceiptRoot(ExitPayload memory payload) internal pure returns (bytes32) {\\n        return bytes32(payload.data[5].toUint());\\n    }\\n\\n    function getReceipt(ExitPayload memory payload) internal pure returns (Receipt memory receipt) {\\n        receipt.raw = payload.data[6].toBytes();\\n        RLPReader.RLPItem memory receiptItem = receipt.raw.toRlpItem();\\n\\n        if (receiptItem.isList()) {\\n            // legacy tx\\n            receipt.data = receiptItem.toList();\\n        } else {\\n            // pop first byte before parsting receipt\\n            bytes memory typedBytes = receipt.raw;\\n            bytes memory result = new bytes(typedBytes.length - 1);\\n            uint256 srcPtr;\\n            uint256 destPtr;\\n            assembly {\\n                srcPtr := add(33, typedBytes)\\n                destPtr := add(0x20, result)\\n            }\\n\\n            copy(srcPtr, destPtr, result.length);\\n            receipt.data = result.toRlpItem().toList();\\n        }\\n\\n        receipt.logIndex = getReceiptLogIndex(payload);\\n        return receipt;\\n    }\\n\\n    function getReceiptProof(ExitPayload memory payload) internal pure returns (bytes memory) {\\n        return payload.data[7].toBytes();\\n    }\\n\\n    function getBranchMaskAsBytes(ExitPayload memory payload) internal pure returns (bytes memory) {\\n        return payload.data[8].toBytes();\\n    }\\n\\n    function getBranchMaskAsUint(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[8].toUint();\\n    }\\n\\n    function getReceiptLogIndex(ExitPayload memory payload) internal pure returns (uint256) {\\n        return payload.data[9].toUint();\\n    }\\n\\n    // Receipt methods\\n    function toBytes(Receipt memory receipt) internal pure returns (bytes memory) {\\n        return receipt.raw;\\n    }\\n\\n    function getLog(Receipt memory receipt) internal pure returns (Log memory) {\\n        RLPReader.RLPItem memory logData = receipt.data[3].toList()[receipt.logIndex];\\n        return Log(logData, logData.toList());\\n    }\\n\\n    // Log methods\\n    function getEmitter(Log memory log) internal pure returns (address) {\\n        return RLPReader.toAddress(log.list[0]);\\n    }\\n\\n    function getTopics(Log memory log) internal pure returns (LogTopics memory) {\\n        return LogTopics(log.list[1].toList());\\n    }\\n\\n    function getData(Log memory log) internal pure returns (bytes memory) {\\n        return log.list[2].toBytes();\\n    }\\n\\n    function toRlpBytes(Log memory log) internal pure returns (bytes memory) {\\n        return log.data.toRlpBytes();\\n    }\\n\\n    // LogTopics methods\\n    function getField(LogTopics memory topics, uint256 index) internal pure returns (RLPReader.RLPItem memory) {\\n        return topics.data[index];\\n    }\\n}\\n\",\"keccak256\":\"0xe0a46b1a34ba0564638fb0b8d3c38b969dd6dcf8a84f7de935f18d9abbf3c584\"},\"@maticnetwork/fx-portal/contracts/lib/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Merkle {\\n    function checkMembership(\\n        bytes32 leaf,\\n        uint256 index,\\n        bytes32 rootHash,\\n        bytes memory proof\\n    ) internal pure returns (bool) {\\n        require(proof.length % 32 == 0, \\\"Invalid proof length\\\");\\n        uint256 proofHeight = proof.length / 32;\\n        // Proof of size n means, height of the tree is n+1.\\n        // In a tree of height n+1, max #leafs possible is 2 ^ n\\n        require(index < 2**proofHeight, \\\"Leaf index is too big\\\");\\n\\n        bytes32 proofElement;\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            assembly {\\n                proofElement := mload(add(proof, i))\\n            }\\n\\n            if (index % 2 == 0) {\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\n            } else {\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\n            }\\n\\n            index = index / 2;\\n        }\\n        return computedHash == rootHash;\\n    }\\n}\\n\",\"keccak256\":\"0x3efdfa22d02994bddb88a504ec63920018b912768ea1782f8dc09e70237060a8\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/MerklePatriciaProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"./RLPReader.sol\\\";\\n\\nlibrary MerklePatriciaProof {\\n    /*\\n     * @dev Verifies a merkle patricia proof.\\n     * @param value The terminating value in the trie.\\n     * @param encodedPath The path in the trie leading to value.\\n     * @param rlpParentNodes The rlp encoded stack of nodes.\\n     * @param root The root hash of the trie.\\n     * @return The boolean validity of the proof.\\n     */\\n    function verify(\\n        bytes memory value,\\n        bytes memory encodedPath,\\n        bytes memory rlpParentNodes,\\n        bytes32 root\\n    ) internal pure returns (bool) {\\n        RLPReader.RLPItem memory item = RLPReader.toRlpItem(rlpParentNodes);\\n        RLPReader.RLPItem[] memory parentNodes = RLPReader.toList(item);\\n\\n        bytes memory currentNode;\\n        RLPReader.RLPItem[] memory currentNodeList;\\n\\n        bytes32 nodeKey = root;\\n        uint256 pathPtr = 0;\\n\\n        bytes memory path = _getNibbleArray(encodedPath);\\n        if (path.length == 0) {\\n            return false;\\n        }\\n\\n        for (uint256 i = 0; i < parentNodes.length; i++) {\\n            if (pathPtr > path.length) {\\n                return false;\\n            }\\n\\n            currentNode = RLPReader.toRlpBytes(parentNodes[i]);\\n            if (nodeKey != keccak256(currentNode)) {\\n                return false;\\n            }\\n            currentNodeList = RLPReader.toList(parentNodes[i]);\\n\\n            if (currentNodeList.length == 17) {\\n                if (pathPtr == path.length) {\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[16])) == keccak256(value)) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                uint8 nextPathNibble = uint8(path[pathPtr]);\\n                if (nextPathNibble > 16) {\\n                    return false;\\n                }\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[nextPathNibble]));\\n                pathPtr += 1;\\n            } else if (currentNodeList.length == 2) {\\n                uint256 traversed = _nibblesToTraverse(RLPReader.toBytes(currentNodeList[0]), path, pathPtr);\\n                if (pathPtr + traversed == path.length) {\\n                    //leaf node\\n                    if (keccak256(RLPReader.toBytes(currentNodeList[1])) == keccak256(value)) {\\n                        return true;\\n                    } else {\\n                        return false;\\n                    }\\n                }\\n\\n                //extension node\\n                if (traversed == 0) {\\n                    return false;\\n                }\\n\\n                pathPtr += traversed;\\n                nodeKey = bytes32(RLPReader.toUintStrict(currentNodeList[1]));\\n            } else {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    function _nibblesToTraverse(\\n        bytes memory encodedPartialPath,\\n        bytes memory path,\\n        uint256 pathPtr\\n    ) private pure returns (uint256) {\\n        uint256 len = 0;\\n        // encodedPartialPath has elements that are each two hex characters (1 byte), but partialPath\\n        // and slicedPath have elements that are each one hex character (1 nibble)\\n        bytes memory partialPath = _getNibbleArray(encodedPartialPath);\\n        bytes memory slicedPath = new bytes(partialPath.length);\\n\\n        // pathPtr counts nibbles in path\\n        // partialPath.length is a number of nibbles\\n        for (uint256 i = pathPtr; i < pathPtr + partialPath.length; i++) {\\n            bytes1 pathNibble = path[i];\\n            slicedPath[i - pathPtr] = pathNibble;\\n        }\\n\\n        if (keccak256(partialPath) == keccak256(slicedPath)) {\\n            len = partialPath.length;\\n        } else {\\n            len = 0;\\n        }\\n        return len;\\n    }\\n\\n    // bytes b must be hp encoded\\n    function _getNibbleArray(bytes memory b) internal pure returns (bytes memory) {\\n        bytes memory nibbles = \\\"\\\";\\n        if (b.length > 0) {\\n            uint8 offset;\\n            uint8 hpNibble = uint8(_getNthNibbleOfBytes(0, b));\\n            if (hpNibble == 1 || hpNibble == 3) {\\n                nibbles = new bytes(b.length * 2 - 1);\\n                bytes1 oddNibble = _getNthNibbleOfBytes(1, b);\\n                nibbles[0] = oddNibble;\\n                offset = 1;\\n            } else {\\n                nibbles = new bytes(b.length * 2 - 2);\\n                offset = 0;\\n            }\\n\\n            for (uint256 i = offset; i < nibbles.length; i++) {\\n                nibbles[i] = _getNthNibbleOfBytes(i - offset + 2, b);\\n            }\\n        }\\n        return nibbles;\\n    }\\n\\n    function _getNthNibbleOfBytes(uint256 n, bytes memory str) private pure returns (bytes1) {\\n        return bytes1(n % 2 == 0 ? uint8(str[n / 2]) / 0x10 : uint8(str[n / 2]) % 0x10);\\n    }\\n}\\n\",\"keccak256\":\"0xefa98466a4e3c85857cea4772f25f52ed61f2b90662fb6f67fb155455d644ffc\",\"license\":\"MIT\"},\"@maticnetwork/fx-portal/contracts/lib/RLPReader.sol\":{\"content\":\"/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len - _payloadOffset(item.memPtr);\\n    }\\n\\n    /*\\n     * @param item RLP encoded list in bytes\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        return result == 0 ? false : true;\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset;\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + offset;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 len = item.len - offset; // data length\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr + offset, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START) itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len == 0) return;\\n\\n        // left over bytes. Mask is used to remove unwanted bytes from the word\\n        uint256 mask = 256**(WORD_SIZE - len) - 1;\\n\\n        assembly {\\n            let srcpart := and(mload(src), not(mask)) // zero out src\\n            let destpart := and(mload(dest), mask) // retrieve the bytes\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x16e8cbf7c2a240044182576be529be0fa666ce0cdec46be3ff76d40491362a80\"},\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from \\\"../lib/RLPReader.sol\\\";\\nimport {MerklePatriciaProof} from \\\"../lib/MerklePatriciaProof.sol\\\";\\nimport {Merkle} from \\\"../lib/Merkle.sol\\\";\\nimport \\\"../lib/ExitPayloadReader.sol\\\";\\n\\ninterface IFxStateSender {\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\ncontract ICheckpointManager {\\n    struct HeaderBlock {\\n        bytes32 root;\\n        uint256 start;\\n        uint256 end;\\n        uint256 createdAt;\\n        address proposer;\\n    }\\n\\n    /**\\n     * @notice mapping of checkpoint header numbers to block details\\n     * @dev These checkpoints are submited by plasma contracts\\n     */\\n    mapping(uint256 => HeaderBlock) public headerBlocks;\\n}\\n\\nabstract contract FxBaseRootTunnel {\\n    using RLPReader for RLPReader.RLPItem;\\n    using Merkle for bytes32;\\n    using ExitPayloadReader for bytes;\\n    using ExitPayloadReader for ExitPayloadReader.ExitPayload;\\n    using ExitPayloadReader for ExitPayloadReader.Log;\\n    using ExitPayloadReader for ExitPayloadReader.LogTopics;\\n    using ExitPayloadReader for ExitPayloadReader.Receipt;\\n\\n    // keccak256(MessageSent(bytes))\\n    bytes32 public constant SEND_MESSAGE_EVENT_SIG = 0x8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036;\\n\\n    // state sender contract\\n    IFxStateSender public fxRoot;\\n    // root chain manager\\n    ICheckpointManager public checkpointManager;\\n    // child tunnel contract which receives and sends messages\\n    address public fxChildTunnel;\\n\\n    // storage to avoid duplicate exits\\n    mapping(bytes32 => bool) public processedExits;\\n\\n    constructor(address _checkpointManager, address _fxRoot) {\\n        checkpointManager = ICheckpointManager(_checkpointManager);\\n        fxRoot = IFxStateSender(_fxRoot);\\n    }\\n\\n    // set fxChildTunnel if not set already\\n    function setFxChildTunnel(address _fxChildTunnel) public virtual {\\n        require(fxChildTunnel == address(0x0), \\\"FxBaseRootTunnel: CHILD_TUNNEL_ALREADY_SET\\\");\\n        fxChildTunnel = _fxChildTunnel;\\n    }\\n\\n    /**\\n     * @notice Send bytes message to Child Tunnel\\n     * @param message bytes message that will be sent to Child Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToChild(bytes memory message) internal {\\n        fxRoot.sendMessageToChild(fxChildTunnel, message);\\n    }\\n\\n    function _validateAndExtractMessage(bytes memory inputData) internal returns (bytes memory) {\\n        ExitPayloadReader.ExitPayload memory payload = inputData.toExitPayload();\\n\\n        bytes memory branchMaskBytes = payload.getBranchMaskAsBytes();\\n        uint256 blockNumber = payload.getBlockNumber();\\n        // checking if exit has already been processed\\n        // unique exit is identified using hash of (blockNumber, branchMask, receiptLogIndex)\\n        bytes32 exitHash = keccak256(\\n            abi.encodePacked(\\n                blockNumber,\\n                // first 2 nibbles are dropped while generating nibble array\\n                // this allows branch masks that are valid but bypass exitHash check (changing first 2 nibbles only)\\n                // so converting to nibble array and then hashing it\\n                MerklePatriciaProof._getNibbleArray(branchMaskBytes),\\n                payload.getReceiptLogIndex()\\n            )\\n        );\\n        require(processedExits[exitHash] == false, \\\"FxRootTunnel: EXIT_ALREADY_PROCESSED\\\");\\n        processedExits[exitHash] = true;\\n\\n        ExitPayloadReader.Receipt memory receipt = payload.getReceipt();\\n        ExitPayloadReader.Log memory log = receipt.getLog();\\n\\n        // check child tunnel\\n        require(fxChildTunnel == log.getEmitter(), \\\"FxRootTunnel: INVALID_FX_CHILD_TUNNEL\\\");\\n\\n        bytes32 receiptRoot = payload.getReceiptRoot();\\n        // verify receipt inclusion\\n        require(\\n            MerklePatriciaProof.verify(receipt.toBytes(), branchMaskBytes, payload.getReceiptProof(), receiptRoot),\\n            \\\"FxRootTunnel: INVALID_RECEIPT_PROOF\\\"\\n        );\\n\\n        // verify checkpoint inclusion\\n        _checkBlockMembershipInCheckpoint(\\n            blockNumber,\\n            payload.getBlockTime(),\\n            payload.getTxRoot(),\\n            receiptRoot,\\n            payload.getHeaderNumber(),\\n            payload.getBlockProof()\\n        );\\n\\n        ExitPayloadReader.LogTopics memory topics = log.getTopics();\\n\\n        require(\\n            bytes32(topics.getField(0).toUint()) == SEND_MESSAGE_EVENT_SIG, // topic0 is event sig\\n            \\\"FxRootTunnel: INVALID_SIGNATURE\\\"\\n        );\\n\\n        // received message data\\n        bytes memory message = abi.decode(log.getData(), (bytes)); // event decodes params again, so decoding bytes to get message\\n        return message;\\n    }\\n\\n    function _checkBlockMembershipInCheckpoint(\\n        uint256 blockNumber,\\n        uint256 blockTime,\\n        bytes32 txRoot,\\n        bytes32 receiptRoot,\\n        uint256 headerNumber,\\n        bytes memory blockProof\\n    ) private view returns (uint256) {\\n        (bytes32 headerRoot, uint256 startBlock, , uint256 createdAt, ) = checkpointManager.headerBlocks(headerNumber);\\n\\n        require(\\n            keccak256(abi.encodePacked(blockNumber, blockTime, txRoot, receiptRoot)).checkMembership(\\n                blockNumber - startBlock,\\n                headerRoot,\\n                blockProof\\n            ),\\n            \\\"FxRootTunnel: INVALID_HEADER\\\"\\n        );\\n        return createdAt;\\n    }\\n\\n    /**\\n     * @notice receive message from  L2 to L1, validated by proof\\n     * @dev This function verifies if the transaction actually happened on child chain\\n     *\\n     * @param inputData RLP encoded data of the reference tx containing following list of fields\\n     *  0 - headerNumber - Checkpoint header block number containing the reference tx\\n     *  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root\\n     *  2 - blockNumber - Block number containing the reference tx on child chain\\n     *  3 - blockTime - Reference tx block time\\n     *  4 - txRoot - Transactions root of block\\n     *  5 - receiptRoot - Receipts root of block\\n     *  6 - receipt - Receipt of the reference transaction\\n     *  7 - receiptProof - Merkle proof of the reference receipt\\n     *  8 - branchMask - 32 bits denoting the path of receipt in merkle tree\\n     *  9 - receiptLogIndex - Log Index to read from the receipt\\n     */\\n    function receiveMessage(bytes memory inputData) public virtual {\\n        bytes memory message = _validateAndExtractMessage(inputData);\\n        _processMessageFromChild(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Child Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param message bytes message that was sent from Child Tunnel\\n     */\\n    function _processMessageFromChild(bytes memory message) internal virtual;\\n}\\n\",\"keccak256\":\"0xd9ddea51d758d6406e10c35f10a150495cfcc90f9334e34755ce5de31b27d447\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseRootTunnel.sol\\\";\\r\\nimport \\\"../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Governance relayer contract to be deployed on Ethereum that receives messages from the owner (Governor) and\\r\\n * sends them to sidechain.\\r\\n */\\r\\ncontract GovernorRootTunnel is Ownable, FxBaseRootTunnel, Lockable {\\r\\n    event RelayedGovernanceRequest(address indexed to, bytes data);\\r\\n\\r\\n    constructor(address _checkpointManager, address _fxRoot) FxBaseRootTunnel(_checkpointManager, _fxRoot) {}\\r\\n\\r\\n    /**\\r\\n     * @notice This should be called in order to relay a governance request to the `GovernorChildTunnel` contract\\r\\n     * deployed to the sidechain. Note: this can only be called by the owner (presumably the Ethereum Governor\\r\\n     * contract).\\r\\n     * @dev The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value`\\r\\n     * in order to avoid the added complexity of sending cross-chain transactions with positive value.\\r\\n     */\\r\\n    function relayGovernance(address to, bytes memory data) external nonReentrant() onlyOwner {\\r\\n        _sendMessageToChild(abi.encode(to, data));\\r\\n        emit RelayedGovernanceRequest(to, data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function called as callback from child tunnel. Should not do anything as governance actions should only\\r\\n     * be sent from root to child.\\r\\n     */\\r\\n    function _processMessageFromChild(bytes memory data) internal override {\\r\\n        // no-op\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x53ad2d12904081e9b99fd735ec1d9ca10c18ed93596591a29dedc4d6e20b06a9\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346100d257601f62001c9338819003918201601f19168301916001600160401b038311848410176100d75780849260409485528339810103126100d257610053602061004c836100ed565b92016100ed565b60008054336001600160a01b0319808316821784556040519590946001600160a01b03949093859391908416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09089a31683600254161760025516906001541617600155600160ff196005541617600555611b919081620001028239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100d25756fe60806040526004361015610013575b600080fd5b60003560e01c80630e387de6146100ef578063607f2d42146100e65780636296932d146100dd578063715018a6146100d45780638da5cb5b146100cb578063972c4928146100c2578063aea4e49e146100b9578063c0857ba0146100b0578063de9b771f146100a7578063f2fde38b1461009e5763f953cec71461009657600080fd5b61000e6106a3565b5061000e6105d6565b5061000e6105ac565b5061000e610582565b5061000e6104e4565b5061000e6104ba565b5061000e610490565b5061000e61042e565b5061000e610281565b5061000e61012b565b503461000e57600036600319011261000e5760206040517f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0368152f35b503461000e57602036600319011261000e576004356000526004602052602060ff604060002054166040519015158152f35b6001600160a01b0381160361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161019957604052565b6101a161016e565b604052565b6020810190811067ffffffffffffffff82111761019957604052565b6040810190811067ffffffffffffffff82111761019957604052565b90601f8019910116810190811067ffffffffffffffff82111761019957604052565b6040519061020d826101c2565b565b60209067ffffffffffffffff811161022d575b601f01601f19160190565b61023561016e565b610222565b81601f8201121561000e578035906102518261020f565b9261025f60405194856101de565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57600060408060031936011261042a576004356102a28161015d565b60243567ffffffffffffffff8111610426576102c290369060040161023a565b9060055460ff8116156103e25760ff19166005556102de611aab565b825190610301826102f3858460208401611b28565b03601f1981018452836101de565b6001546003546001600160a01b0393908416918791908516803b156103de576103409383895180968195829463b472047760e01b845260048401611b28565b03925af180156103d1575b61039c575b50907f887046c90d01e9c349ea73c35975920fcbb44c3c400f49e5c7c4b230a7252683916103848551928392169482611b4a565b0390a2610399600160ff196005541617600555565b51f35b946103c97f887046c90d01e9c349ea73c35975920fcbb44c3c400f49e5c7c4b230a7252683939296610185565b949091610350565b6103d96117e6565b61034b565b8280fd5b835162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8380fd5b5080fd5b503461000e5760008060031936011261048d57610449611aab565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e576004356105028161015d565b600354906001600160a01b039081831661052a576001600160a01b0319909216911617600355005b60405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608490fd5b503461000e57600036600319011261000e576002546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e576004356105f48161015d565b6105fc611aab565b6001600160a01b0390811690811561064f57600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57602036600319011261000e5760043567ffffffffffffffff811161000e5761086c6106e36106de61087b93369060040161023a565b610a7d565b6108236106ef82610e88565b916106f981610b7f565b9061077f610772610709866112a3565b61072a61073861071886610ea1565b60405192839160208301958a876108a0565b03601f1981018352826101de565b51902061076261075c610755836000526004602052604060002090565b5460ff1690565b156108c5565b6000526004602052604060002090565b805460ff19166001179055565b60206107f86107f361079084610cb8565b61079981610ed3565b6003549098906107d5906001600160a01b03166107c46107b88c610f45565b6001600160a01b031690565b6001600160a01b039091161461091d565b6107de86610bc7565b9485920151906107ed87610e6f565b91611022565b610977565b61080182610b97565b61080a83610baf565b9061081d61081785610b36565b94610b59565b9461183f565b506108677f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661086161085c61085785610f81565b610fc5565b611571565b146109cf565b610faa565b60208082518301019101610a1b565b005b60005b8381106108905750506000910152565b8181015183820152602001610880565b604093929181526108ba825180936020808501910161087d565b019060208201520190565b156108cc57565b60405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608490fd5b1561092457565b60405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608490fd5b1561097e57565b60405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608490fd5b156109d657565b60405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606490fd5b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e578051610a4e8161020f565b92610a5c60405194856101de565b8184526020828401011161000e57610a7a916020808501910161087d565b90565b610a98610a9d916060604051610a92816101a6565b526113fe565b61144b565b60405190610aaa826101a6565b815290565b50634e487b7160e01b600052603260045260246000fd5b60e090805160061015610ad7570190565b610adf610aaf565b0190565b602090805115610ad7570190565b604090805160011015610ad7570190565b61022090805160101015610ad7570190565b6020918151811015610b29575b60051b010190565b610b31610aaf565b610b21565b6020610a7a9151805115610b4c575b0151611571565b610b54610aaf565b610b45565b6040610a7a9151805160011015610b72575b0151611614565b610b7a610aaf565b610b6b565b6060610a7a9151805160021015610b4c570151611571565b6080610a7a9151805160031015610b4c570151611571565b60a0610a7a9151805160041015610b4c570151611571565b60c0610a7a9151805160051015610b4c570151611571565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211610c0557565b61020d610bdf565b6020039060208211610c0557565b600119810191908211610c0557565b60bf19810191908211610c0557565b607f19810191908211610c0557565b60f619810191908211610c0557565b60b619810191908211610c0557565b91908203918211610c0557565b60405190610c80826101a6565b60008252565b90610c908261020f565b610c9d60405191826101de565b8281528092610cae601f199161020f565b0190602036910137565b604051906060820182811067ffffffffffffffff821117610d66575b60405260608252610d2d602083019160608352604084019260008452610d0e610d06610d008451610ac6565b51611614565b8083526113fe565b610d178161151e565b15610d3257610d26915061144b565b8452610ea1565b905290565b50610a98610d269151610d61610d50610d4b8351610bf6565b610c86565b918251908360200190602101610dc7565b6113fe565b610d6e61016e565b610cd4565b9060018201809211610c0557565b9060028201809211610c0557565b9060208201809211610c0557565b91908201809211610c0557565b601f8111610dba575b6101000a90565b610dc2610bdf565b610db3565b929091928315610e695792915b602093848410610e335780518252848101809111610e26575b938101809111610e19575b91601f198101908111610e0c575b91610dd4565b610e14610bdf565b610e06565b610e21610bdf565b610df8565b610e2e610bdf565b610ded565b919350918015610e6457610e51610e4c610e5692610c0d565b610daa565b610bf6565b905182518216911916179052565b505050565b50915050565b610100610a7a9151805160071015610b72570151611614565b610120610a7a9151805160081015610b72570151611614565b610140610a7a9151805160091015610b4c570151611571565b60405190610ec7826101c2565b60006020838281520152565b610f179060606020604051610ee7816101c2565b610eef610eba565b815201526040610f0e60808351805160031015610f38575b015161144b565b91015190610b14565b51610f218161144b565b60405191610f2e836101c2565b8252602082015290565b610f40610aaf565b610f07565b602080910151805115610f74575b0151601581510361000e576001600160a01b0390610f7090611571565b1690565b610f7c610aaf565b610f53565b60406020610a9d9260608351610f96816101a6565b520151805160011015610f3857015161144b565b60606020610a7a920151805160021015610b72570151611614565b602090610fd0610eba565b5051805115610fde57015190565b610fe6610aaf565b015190565b6001906000198114610ffb570190565b610adf610bdf565b90602091805182101561101557010190565b61101d610aaf565b010190565b9093600093611035610a986000956113fe565b9061104085976112a3565b918251156111c8578597915b81518910156111bd57835183116111b15761107061106a8a84610b14565b51611545565b908151602080930120036111b15761109161108b8a84610b14565b5161144b565b90815160118114600014611142575084518414611112575060ff6110cf6110c96110bb8688611003565b516001600160f81b03191690565b60f81c90565b169060108211611105576110f26110ec6110fe936110f893610b14565b516115ec565b93610d73565b98610feb565b979161104c565b5050505050935050905090565b969750915050611128929650610d009150610b02565b82815191012091815191012014600014610a7a5750600190565b919993909160020361110557611164818661115f610d008e610ae3565b6111d3565b9161116f8383610d9d565b86511461119c57508115611105576110ec6111906110fe9361119693610d9d565b9a610af1565b92610feb565b979850505050505093610d0061112891610af1565b50505050935050905090565b505050509293505050565b505050935050905090565b90916111e06000926112a3565b926111eb8451610c86565b94825b85518401808511611272575b81101561124a57611238906001600160f81b03196112188286611003565b51166112328683039183831161123d575b881a918a611003565b53610feb565b6111ee565b611245610bdf565b611229565b50949150506020928051938491012090602081519101201460001461126d575090565b905090565b61127a610bdf565b6111fa565b806000190460021181151516611296575b60011b90565b61129e610bdf565b611290565b6112ab610c73565b9080516112b6575090565b6000915060ff6112d8600f60f81b6112cd84610ae3565b5160041c1660f81c90565b169160019283811490811561138c575b501561136b57506112ff610d4b610e51835161127f565b9161130982611397565b60001a61131584610ae3565b538060ff815b1680915b61132b575b5050505090565b845181101561136657806113538561134e6113498661136096610c66565b610d81565b6113b9565b60001a6112328288611003565b8261131f565b611324565b9160ff611383610d4b61137e855161127f565b610c1b565b9390829161131b565b6003915014386112e8565b8051156113ac575b60200151600f60f81b1690565b6113b4610aaf565b61139f565b90600182166113e4576113cf9160011c90611003565b5160fc1c5b60f81b6001600160f81b03191690565b6113f490600f9260011c90611003565b5160f81c166113d4565b611406610eba565b50602081519160405192611419846101c2565b835201602082015290565b60209067ffffffffffffffff811161143e575b60051b0190565b61144661016e565b611437565b6114548161151e565b1561000e5761146281611675565b61146b81611424565b9161147960405193846101de565b818352601f1961148883611424565b0160005b8181106115075750506114ad6020809201516114a781611786565b90610d9d565b6000905b8382106114bf575050505090565b6114fb816114cf61150193611700565b906114d8610200565b82815281878201526114ea868a610b14565b526114f58589610b14565b50610d9d565b91610feb565b906114b1565b602090611512610eba565b8282880101520161148c565b80511561153f57602060c09101515160001a1061153a57600190565b600090565b50600090565b61154f8151610c86565b9081511561156d57806020610a7a9201519051908360200190610dc7565b5090565b805180151590816115e0575b501561000e5760208101906115928251611786565b9051918183039283116115d3575b519081018091116115c6575b5190602081106115ba575090565b6020036101000a900490565b6115ce610bdf565b6115ac565b6115db610bdf565b6115a0565b6021915011153861157d565b602181510361000e576020015160018101809111611608575190565b611610610bdf565b5190565b80511561000e57610a7a602082019161162d8351611786565b905190808203918211611668575b61164482610c86565b935190810180911161165b575b8360200190610dc7565b611663610bdf565b611651565b611670610bdf565b61163b565b80511561153f576000906020810190815161168f81611786565b81018091116116f3575b9151905181018091116116e6575b91905b8281106116b75750905090565b806116c46116d392611700565b81018091116116d95791610feb565b906116aa565b6116e1610bdf565b6114fb565b6116ee610bdf565b6116a7565b6116fb610bdf565b611699565b805160001a906080821015611716575050600190565b60b8821015611731575061172c610a7a91610c39565b610d73565b9060c08110156117555760b51991600160b783602003016101000a91015104010190565b9060f882101561176c575061172c610a7a91610c2a565b60010151602082900360f7016101000a90040160f5190190565b5160001a60808110156117995750600090565b60b8811080156117d0575b156117af5750600190565b60c08110156117c45761172c610a7a91610c57565b61172c610a7a91610c48565b5060c081101580156117a4575060f881106117a4565b506040513d6000823e3d90fd5b156117fa57565b60405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606490fd5b919294939060a0600180821b0360025416926024604051809581936320a9cea560e11b835260048301525afa95861561193f575b600094859386986118d3575b5092610a7a9694926118c8926118bf6118ce989661072a60405193849260208401968a889290916080949284526020840152604083015260608201520190565b51902092610c66565b906119ee565b6117f3565b935096509360a0833d8211611937575b816118f060a093836101de565b8101031261048d5750916118c882610a7a96946118ce969451946118bf6020840151966119256080606087015196015161015d565b96939a9396985050925092949661187f565b3d91506118e3565b6119476117e6565b611873565b1561195357565b60405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60019060ff811161199e571b90565b6119a6610bdf565b1b90565b156119b157565b60405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606490fd5b9390919293611a07611a018651601f1690565b1561194c565b611a24611a1d611a18875160051c90565b61198f565b84106119aa565b60209182935b86518511611aa25786850151600193611a709291858316611a7657604080518881019384526020840192909252611a64908290840161072a565b519020935b1c94610d8f565b93611a2a565b90611a9961072a916040519283918a830195869091604092825260208201520190565b51902093611a69565b50931493505050565b6000546001600160a01b03163303611abf57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90602091611b1c8151809281855285808601910161087d565b601f01601f1916010190565b6001600160a01b039091168152604060208201819052610a7a92910190611b03565b906020610a7a928181520190611b0356fea264697066735822122012892cc00c0bed0d38822abf8d302fb66ddc10525cbefeb8f5801c9304af0d1464736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c80630e387de6146100ef578063607f2d42146100e65780636296932d146100dd578063715018a6146100d45780638da5cb5b146100cb578063972c4928146100c2578063aea4e49e146100b9578063c0857ba0146100b0578063de9b771f146100a7578063f2fde38b1461009e5763f953cec71461009657600080fd5b61000e6106a3565b5061000e6105d6565b5061000e6105ac565b5061000e610582565b5061000e6104e4565b5061000e6104ba565b5061000e610490565b5061000e61042e565b5061000e610281565b5061000e61012b565b503461000e57600036600319011261000e5760206040517f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b0368152f35b503461000e57602036600319011261000e576004356000526004602052602060ff604060002054166040519015158152f35b6001600160a01b0381160361000e57565b50634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161019957604052565b6101a161016e565b604052565b6020810190811067ffffffffffffffff82111761019957604052565b6040810190811067ffffffffffffffff82111761019957604052565b90601f8019910116810190811067ffffffffffffffff82111761019957604052565b6040519061020d826101c2565b565b60209067ffffffffffffffff811161022d575b601f01601f19160190565b61023561016e565b610222565b81601f8201121561000e578035906102518261020f565b9261025f60405194856101de565b8284526020838301011161000e57816000926020809301838601378301015290565b503461000e57600060408060031936011261042a576004356102a28161015d565b60243567ffffffffffffffff8111610426576102c290369060040161023a565b9060055460ff8116156103e25760ff19166005556102de611aab565b825190610301826102f3858460208401611b28565b03601f1981018452836101de565b6001546003546001600160a01b0393908416918791908516803b156103de576103409383895180968195829463b472047760e01b845260048401611b28565b03925af180156103d1575b61039c575b50907f887046c90d01e9c349ea73c35975920fcbb44c3c400f49e5c7c4b230a7252683916103848551928392169482611b4a565b0390a2610399600160ff196005541617600555565b51f35b946103c97f887046c90d01e9c349ea73c35975920fcbb44c3c400f49e5c7c4b230a7252683939296610185565b949091610350565b6103d96117e6565b61034b565b8280fd5b835162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b8380fd5b5080fd5b503461000e5760008060031936011261048d57610449611aab565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e576004356105028161015d565b600354906001600160a01b039081831661052a576001600160a01b0319909216911617600355005b60405162461bcd60e51b815260206004820152602a60248201527f467842617365526f6f7454756e6e656c3a204348494c445f54554e4e454c5f4160448201526913149150511657d4d15560b21b6064820152608490fd5b503461000e57600036600319011261000e576002546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e576001546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e576004356105f48161015d565b6105fc611aab565b6001600160a01b0390811690811561064f57600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b503461000e57602036600319011261000e5760043567ffffffffffffffff811161000e5761086c6106e36106de61087b93369060040161023a565b610a7d565b6108236106ef82610e88565b916106f981610b7f565b9061077f610772610709866112a3565b61072a61073861071886610ea1565b60405192839160208301958a876108a0565b03601f1981018352826101de565b51902061076261075c610755836000526004602052604060002090565b5460ff1690565b156108c5565b6000526004602052604060002090565b805460ff19166001179055565b60206107f86107f361079084610cb8565b61079981610ed3565b6003549098906107d5906001600160a01b03166107c46107b88c610f45565b6001600160a01b031690565b6001600160a01b039091161461091d565b6107de86610bc7565b9485920151906107ed87610e6f565b91611022565b610977565b61080182610b97565b61080a83610baf565b9061081d61081785610b36565b94610b59565b9461183f565b506108677f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b03661086161085c61085785610f81565b610fc5565b611571565b146109cf565b610faa565b60208082518301019101610a1b565b005b60005b8381106108905750506000910152565b8181015183820152602001610880565b604093929181526108ba825180936020808501910161087d565b019060208201520190565b156108cc57565b60405162461bcd60e51b8152602060048201526024808201527f4678526f6f7454756e6e656c3a20455849545f414c52454144595f50524f434560448201526314d4d15160e21b6064820152608490fd5b1561092457565b60405162461bcd60e51b815260206004820152602560248201527f4678526f6f7454756e6e656c3a20494e56414c49445f46585f4348494c445f54604482015264155393915360da1b6064820152608490fd5b1561097e57565b60405162461bcd60e51b815260206004820152602360248201527f4678526f6f7454756e6e656c3a20494e56414c49445f524543454950545f505260448201526227a7a360e91b6064820152608490fd5b156109d657565b60405162461bcd60e51b815260206004820152601f60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f5349474e4154555245006044820152606490fd5b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e578051610a4e8161020f565b92610a5c60405194856101de565b8184526020828401011161000e57610a7a916020808501910161087d565b90565b610a98610a9d916060604051610a92816101a6565b526113fe565b61144b565b60405190610aaa826101a6565b815290565b50634e487b7160e01b600052603260045260246000fd5b60e090805160061015610ad7570190565b610adf610aaf565b0190565b602090805115610ad7570190565b604090805160011015610ad7570190565b61022090805160101015610ad7570190565b6020918151811015610b29575b60051b010190565b610b31610aaf565b610b21565b6020610a7a9151805115610b4c575b0151611571565b610b54610aaf565b610b45565b6040610a7a9151805160011015610b72575b0151611614565b610b7a610aaf565b610b6b565b6060610a7a9151805160021015610b4c570151611571565b6080610a7a9151805160031015610b4c570151611571565b60a0610a7a9151805160041015610b4c570151611571565b60c0610a7a9151805160051015610b4c570151611571565b50634e487b7160e01b600052601160045260246000fd5b600019810191908211610c0557565b61020d610bdf565b6020039060208211610c0557565b600119810191908211610c0557565b60bf19810191908211610c0557565b607f19810191908211610c0557565b60f619810191908211610c0557565b60b619810191908211610c0557565b91908203918211610c0557565b60405190610c80826101a6565b60008252565b90610c908261020f565b610c9d60405191826101de565b8281528092610cae601f199161020f565b0190602036910137565b604051906060820182811067ffffffffffffffff821117610d66575b60405260608252610d2d602083019160608352604084019260008452610d0e610d06610d008451610ac6565b51611614565b8083526113fe565b610d178161151e565b15610d3257610d26915061144b565b8452610ea1565b905290565b50610a98610d269151610d61610d50610d4b8351610bf6565b610c86565b918251908360200190602101610dc7565b6113fe565b610d6e61016e565b610cd4565b9060018201809211610c0557565b9060028201809211610c0557565b9060208201809211610c0557565b91908201809211610c0557565b601f8111610dba575b6101000a90565b610dc2610bdf565b610db3565b929091928315610e695792915b602093848410610e335780518252848101809111610e26575b938101809111610e19575b91601f198101908111610e0c575b91610dd4565b610e14610bdf565b610e06565b610e21610bdf565b610df8565b610e2e610bdf565b610ded565b919350918015610e6457610e51610e4c610e5692610c0d565b610daa565b610bf6565b905182518216911916179052565b505050565b50915050565b610100610a7a9151805160071015610b72570151611614565b610120610a7a9151805160081015610b72570151611614565b610140610a7a9151805160091015610b4c570151611571565b60405190610ec7826101c2565b60006020838281520152565b610f179060606020604051610ee7816101c2565b610eef610eba565b815201526040610f0e60808351805160031015610f38575b015161144b565b91015190610b14565b51610f218161144b565b60405191610f2e836101c2565b8252602082015290565b610f40610aaf565b610f07565b602080910151805115610f74575b0151601581510361000e576001600160a01b0390610f7090611571565b1690565b610f7c610aaf565b610f53565b60406020610a9d9260608351610f96816101a6565b520151805160011015610f3857015161144b565b60606020610a7a920151805160021015610b72570151611614565b602090610fd0610eba565b5051805115610fde57015190565b610fe6610aaf565b015190565b6001906000198114610ffb570190565b610adf610bdf565b90602091805182101561101557010190565b61101d610aaf565b010190565b9093600093611035610a986000956113fe565b9061104085976112a3565b918251156111c8578597915b81518910156111bd57835183116111b15761107061106a8a84610b14565b51611545565b908151602080930120036111b15761109161108b8a84610b14565b5161144b565b90815160118114600014611142575084518414611112575060ff6110cf6110c96110bb8688611003565b516001600160f81b03191690565b60f81c90565b169060108211611105576110f26110ec6110fe936110f893610b14565b516115ec565b93610d73565b98610feb565b979161104c565b5050505050935050905090565b969750915050611128929650610d009150610b02565b82815191012091815191012014600014610a7a5750600190565b919993909160020361110557611164818661115f610d008e610ae3565b6111d3565b9161116f8383610d9d565b86511461119c57508115611105576110ec6111906110fe9361119693610d9d565b9a610af1565b92610feb565b979850505050505093610d0061112891610af1565b50505050935050905090565b505050509293505050565b505050935050905090565b90916111e06000926112a3565b926111eb8451610c86565b94825b85518401808511611272575b81101561124a57611238906001600160f81b03196112188286611003565b51166112328683039183831161123d575b881a918a611003565b53610feb565b6111ee565b611245610bdf565b611229565b50949150506020928051938491012090602081519101201460001461126d575090565b905090565b61127a610bdf565b6111fa565b806000190460021181151516611296575b60011b90565b61129e610bdf565b611290565b6112ab610c73565b9080516112b6575090565b6000915060ff6112d8600f60f81b6112cd84610ae3565b5160041c1660f81c90565b169160019283811490811561138c575b501561136b57506112ff610d4b610e51835161127f565b9161130982611397565b60001a61131584610ae3565b538060ff815b1680915b61132b575b5050505090565b845181101561136657806113538561134e6113498661136096610c66565b610d81565b6113b9565b60001a6112328288611003565b8261131f565b611324565b9160ff611383610d4b61137e855161127f565b610c1b565b9390829161131b565b6003915014386112e8565b8051156113ac575b60200151600f60f81b1690565b6113b4610aaf565b61139f565b90600182166113e4576113cf9160011c90611003565b5160fc1c5b60f81b6001600160f81b03191690565b6113f490600f9260011c90611003565b5160f81c166113d4565b611406610eba565b50602081519160405192611419846101c2565b835201602082015290565b60209067ffffffffffffffff811161143e575b60051b0190565b61144661016e565b611437565b6114548161151e565b1561000e5761146281611675565b61146b81611424565b9161147960405193846101de565b818352601f1961148883611424565b0160005b8181106115075750506114ad6020809201516114a781611786565b90610d9d565b6000905b8382106114bf575050505090565b6114fb816114cf61150193611700565b906114d8610200565b82815281878201526114ea868a610b14565b526114f58589610b14565b50610d9d565b91610feb565b906114b1565b602090611512610eba565b8282880101520161148c565b80511561153f57602060c09101515160001a1061153a57600190565b600090565b50600090565b61154f8151610c86565b9081511561156d57806020610a7a9201519051908360200190610dc7565b5090565b805180151590816115e0575b501561000e5760208101906115928251611786565b9051918183039283116115d3575b519081018091116115c6575b5190602081106115ba575090565b6020036101000a900490565b6115ce610bdf565b6115ac565b6115db610bdf565b6115a0565b6021915011153861157d565b602181510361000e576020015160018101809111611608575190565b611610610bdf565b5190565b80511561000e57610a7a602082019161162d8351611786565b905190808203918211611668575b61164482610c86565b935190810180911161165b575b8360200190610dc7565b611663610bdf565b611651565b611670610bdf565b61163b565b80511561153f576000906020810190815161168f81611786565b81018091116116f3575b9151905181018091116116e6575b91905b8281106116b75750905090565b806116c46116d392611700565b81018091116116d95791610feb565b906116aa565b6116e1610bdf565b6114fb565b6116ee610bdf565b6116a7565b6116fb610bdf565b611699565b805160001a906080821015611716575050600190565b60b8821015611731575061172c610a7a91610c39565b610d73565b9060c08110156117555760b51991600160b783602003016101000a91015104010190565b9060f882101561176c575061172c610a7a91610c2a565b60010151602082900360f7016101000a90040160f5190190565b5160001a60808110156117995750600090565b60b8811080156117d0575b156117af5750600190565b60c08110156117c45761172c610a7a91610c57565b61172c610a7a91610c48565b5060c081101580156117a4575060f881106117a4565b506040513d6000823e3d90fd5b156117fa57565b60405162461bcd60e51b815260206004820152601c60248201527f4678526f6f7454756e6e656c3a20494e56414c49445f484541444552000000006044820152606490fd5b919294939060a0600180821b0360025416926024604051809581936320a9cea560e11b835260048301525afa95861561193f575b600094859386986118d3575b5092610a7a9694926118c8926118bf6118ce989661072a60405193849260208401968a889290916080949284526020840152604083015260608201520190565b51902092610c66565b906119ee565b6117f3565b935096509360a0833d8211611937575b816118f060a093836101de565b8101031261048d5750916118c882610a7a96946118ce969451946118bf6020840151966119256080606087015196015161015d565b96939a9396985050925092949661187f565b3d91506118e3565b6119476117e6565b611873565b1561195357565b60405162461bcd60e51b8152602060048201526014602482015273092dcecc2d8d2c840e0e4dedecc40d8cadccee8d60631b6044820152606490fd5b60019060ff811161199e571b90565b6119a6610bdf565b1b90565b156119b157565b60405162461bcd60e51b81526020600482015260156024820152744c65616620696e64657820697320746f6f2062696760581b6044820152606490fd5b9390919293611a07611a018651601f1690565b1561194c565b611a24611a1d611a18875160051c90565b61198f565b84106119aa565b60209182935b86518511611aa25786850151600193611a709291858316611a7657604080518881019384526020840192909252611a64908290840161072a565b519020935b1c94610d8f565b93611a2a565b90611a9961072a916040519283918a830195869091604092825260208201520190565b51902093611a69565b50931493505050565b6000546001600160a01b03163303611abf57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90602091611b1c8151809281855285808601910161087d565b601f01601f1916010190565b6001600160a01b039091168152604060208201819052610a7a92910190611b03565b906020610a7a928181520190611b0356fea264697066735822122012892cc00c0bed0d38822abf8d302fb66ddc10525cbefeb8f5801c9304af0d1464736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "receiveMessage(bytes)": {
        "details": "This function verifies if the transaction actually happened on child chain",
        "params": {
          "inputData": "RLP encoded data of the reference tx containing following list of fields  0 - headerNumber - Checkpoint header block number containing the reference tx  1 - blockProof - Proof that the block header (in the child chain) is a leaf in the submitted merkle root  2 - blockNumber - Block number containing the reference tx on child chain  3 - blockTime - Reference tx block time  4 - txRoot - Transactions root of block  5 - receiptRoot - Receipts root of block  6 - receipt - Receipt of the reference transaction  7 - receiptProof - Merkle proof of the reference receipt  8 - branchMask - 32 bits denoting the path of receipt in merkle tree  9 - receiptLogIndex - Log Index to read from the receipt"
        }
      },
      "relayGovernance(address,bytes)": {
        "details": "The transaction submitted to `to` on the sidechain with the calldata `data` is assumed to have 0 `value` in order to avoid the added complexity of sending cross-chain transactions with positive value."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Governance relayer contract to be deployed on Ethereum that receives messages from the owner (Governor) and sends them to sidechain.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "receiveMessage(bytes)": {
        "notice": "receive message from  L2 to L1, validated by proof"
      },
      "relayGovernance(address,bytes)": {
        "notice": "This should be called in order to relay a governance request to the `GovernorChildTunnel` contract deployed to the sidechain. Note: this can only be called by the owner (presumably the Ethereum Governor contract)."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4304,
        "contract": "contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol:GovernorRootTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2923,
        "contract": "contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol:GovernorRootTunnel",
        "label": "fxRoot",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFxStateSender)2873"
      },
      {
        "astId": 2926,
        "contract": "contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol:GovernorRootTunnel",
        "label": "checkpointManager",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICheckpointManager)2891"
      },
      {
        "astId": 2928,
        "contract": "contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol:GovernorRootTunnel",
        "label": "fxChildTunnel",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2932,
        "contract": "contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol:GovernorRootTunnel",
        "label": "processedExits",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 16304,
        "contract": "contracts/polygon-cross-chain-oracle/GovernorRootTunnel.sol:GovernorRootTunnel",
        "label": "_notEntered",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ICheckpointManager)2891": {
        "encoding": "inplace",
        "label": "contract ICheckpointManager",
        "numberOfBytes": "20"
      },
      "t_contract(IFxStateSender)2873": {
        "encoding": "inplace",
        "label": "contract IFxStateSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}