{
  "address": "0x08e549A3f28302F507a7e9D04c1D8F9D26E75576",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "messenger",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct GovernorSpoke.Call[]",
          "name": "calls",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "dataSentToChild",
          "type": "bytes"
        }
      ],
      "name": "RelayedGovernanceRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentMessenger",
          "type": "address"
        }
      ],
      "name": "SetParentMessenger",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "messengers",
      "outputs": [
        {
          "internalType": "contract ParentMessengerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernorSpoke.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "relayGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "contract ParentMessengerInterface",
          "name": "messenger",
          "type": "address"
        }
      ],
      "name": "setMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeac5deb130e81390f88b16698d8b0837f871b351e80d4e7a7136a2793a15c6de",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x08e549A3f28302F507a7e9D04c1D8F9D26E75576",
    "transactionIndex": 32,
    "gasUsed": "697055",
    "logsBloom": "0x
    "blockHash": "0x7032714b96174439c00c9b87762397704b12e220ce5567b7f939801b5ba24afe",
    "transactionHash": "0xeac5deb130e81390f88b16698d8b0837f871b351e80d4e7a7136a2793a15c6de",
    "logs": [
      {
        "transactionIndex": 32,
        "blockNumber": 6161336,
        "transactionHash": "0xeac5deb130e81390f88b16698d8b0837f871b351e80d4e7a7136a2793a15c6de",
        "address": "0x08e549A3f28302F507a7e9D04c1D8F9D26E75576",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 100,
        "blockHash": "0x7032714b96174439c00c9b87762397704b12e220ce5567b7f939801b5ba24afe"
      }
    ],
    "blockNumber": 6161336,
    "cumulativeGasUsed": "7546406",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct GovernorSpoke.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"dataSentToChild\",\"type\":\"bytes\"}],\"name\":\"RelayedGovernanceRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentMessenger\",\"type\":\"address\"}],\"name\":\"SetParentMessenger\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messengers\",\"outputs\":[{\"internalType\":\"contract ParentMessengerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernorSpoke.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"relayGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"contract ParentMessengerInterface\",\"name\":\"messenger\",\"type\":\"address\"}],\"name\":\"setMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"relayGovernance(uint256,(address,bytes)[])\":{\"details\":\"Only callable by the owner (presumably the UMA DVM Governor contract, on L1 Ethereum).\",\"params\":{\"calls\":\"the calls to be made by the GovernorSpoke. Should encode a `to` and `data` prop for each call.\",\"chainId\":\"network that messenger contract will communicate with\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setMessenger(uint256,address)\":{\"details\":\"Only callable by the owner (presumably the Ethereum Governor contract).\",\"params\":{\"chainId\":\"child network that messenger contract will communicate with.\",\"messenger\":\"ParentMessenger contract that sends messages to ChildMessenger on network with ID `chainId`.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Cross-chain Oracle L1 Governor Hub.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"relayGovernance(uint256,(address,bytes)[])\":{\"notice\":\"This should be called in order to relay a governance request to the `GovernorSpoke` contract deployed to the child chain associated with `chainId`.\"},\"setMessenger(uint256,address)\":{\"notice\":\"Set new ParentMessenger contract for chainId.\"}},\"notice\":\"Governance relayer contract to be deployed on Ethereum that receives messages from the owner (Governor) and sends them to spoke contracts on child chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cross-chain-oracle/GovernorHub.sol\":\"GovernorHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/HasFinder.sol\":{\"content\":\"pragma solidity ^0.8.9;\\r\\n\\r\\n// SPDX-License-Identifier: UNLICENSED\\r\\nimport \\\"../../data-verification-mechanism/interfaces/FinderInterface.sol\\\";\\r\\n\\r\\n// Contract stores a reference to the DVM Finder contract which can be used to locate other important DVM contracts.\\r\\ncontract HasFinder {\\r\\n    FinderInterface public finder;\\r\\n\\r\\n    constructor(address _finder) {\\r\\n        finder = FinderInterface(_finder);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x755afa586fda2721076c48a4b6c6882443ff8fcde320d4bfe4b94dce32978a73\",\"license\":\"UNLICENSED\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// This contract is taken from Uniswap's multi call implementation (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol)\\r\\n// and was modified to be solidity 0.8 compatible. Additionally, the method was restricted to only work with msg.value\\r\\n// set to 0 to avoid any nasty attack vectors on function calls that use value sent with deposits.\\r\\n\\r\\n/// @title MultiCaller\\r\\n/// @notice Enables calling multiple methods in a single call to the contract\\r\\ncontract MultiCaller {\\r\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\r\\n        results = new bytes[](data.length);\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\r\\n\\r\\n            if (!success) {\\r\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\r\\n                if (result.length < 68) revert();\\r\\n                assembly {\\r\\n                    result := add(result, 0x04)\\r\\n                }\\r\\n                revert(abi.decode(result, (string)));\\r\\n            }\\r\\n\\r\\n            results[i] = result;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb65e9816df65a8c97c2db52e067dd39d5b959dc7524a7f518ff13567cb967bb\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/GovernorHub.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../common/implementation/MultiCaller.sol\\\";\\r\\nimport \\\"./interfaces/ParentMessengerInterface.sol\\\";\\r\\nimport \\\"./GovernorSpoke.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Cross-chain Oracle L1 Governor Hub.\\r\\n * @notice Governance relayer contract to be deployed on Ethereum that receives messages from the owner (Governor) and\\r\\n * sends them to spoke contracts on child chains.\\r\\n */\\r\\n\\r\\ncontract GovernorHub is Ownable, Lockable, MultiCaller {\\r\\n    // Associates chain ID with ParentMessenger contract to use to send governance actions to that chain's GovernorSpoke\\r\\n    // contract.\\r\\n    mapping(uint256 => ParentMessengerInterface) public messengers;\\r\\n\\r\\n    event RelayedGovernanceRequest(\\r\\n        uint256 indexed chainId,\\r\\n        address indexed messenger,\\r\\n        GovernorSpoke.Call[] calls,\\r\\n        bytes dataSentToChild\\r\\n    );\\r\\n    event SetParentMessenger(uint256 indexed chainId, address indexed parentMessenger);\\r\\n\\r\\n    /**\\r\\n     * @notice Set new ParentMessenger contract for chainId.\\r\\n     * @param chainId child network that messenger contract will communicate with.\\r\\n     * @param messenger ParentMessenger contract that sends messages to ChildMessenger on network with ID `chainId`.\\r\\n     * @dev Only callable by the owner (presumably the Ethereum Governor contract).\\r\\n     */\\r\\n    function setMessenger(uint256 chainId, ParentMessengerInterface messenger) public nonReentrant() onlyOwner {\\r\\n        messengers[chainId] = messenger;\\r\\n        emit SetParentMessenger(chainId, address(messenger));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice This should be called in order to relay a governance request to the `GovernorSpoke` contract deployed to\\r\\n     * the child chain associated with `chainId`.\\r\\n     * @param chainId network that messenger contract will communicate with\\r\\n     * @param calls the calls to be made by the GovernorSpoke. Should encode a `to` and `data` prop for each call.\\r\\n     * @dev Only callable by the owner (presumably the UMA DVM Governor contract, on L1 Ethereum).\\r\\n     */\\r\\n    function relayGovernance(uint256 chainId, GovernorSpoke.Call[] memory calls) external nonReentrant() onlyOwner {\\r\\n        bytes memory dataSentToChild = abi.encode(calls);\\r\\n        messengers[chainId].sendMessageToChild(dataSentToChild);\\r\\n        emit RelayedGovernanceRequest(chainId, address(messengers[chainId]), calls, dataSentToChild);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x95363665b0a367ad352cf732953f96e533e2e480d43a0cd4b68a77152634abb6\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/GovernorSpoke.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ChildMessengerConsumerInterface.sol\\\";\\r\\nimport \\\"../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"./SpokeBase.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Cross-chain Oracle L2 Governor Spoke.\\r\\n * @notice Governor contract deployed on L2 that receives governance actions from Ethereum.\\r\\n */\\r\\ncontract GovernorSpoke is Lockable, SpokeBase, ChildMessengerConsumerInterface {\\r\\n    struct Call {\\r\\n        address to;\\r\\n        bytes data;\\r\\n    }\\r\\n\\r\\n    constructor(address _finderAddress) HasFinder(_finderAddress) {}\\r\\n\\r\\n    event ExecutedGovernanceTransaction(address indexed to, bytes data);\\r\\n\\r\\n    /**\\r\\n     * @notice Executes governance transaction created on Ethereum.\\r\\n     * @dev Can only be called by ChildMessenger contract that wants to execute governance action on this child chain\\r\\n     * that originated from DVM voters on root chain. ChildMessenger should only receive communication from\\r\\n     * ParentMessenger on mainnet. See the SpokeBase for the onlyMessenger modifier.\\r\\n\\r\\n     * @param data Contains the target address and the encoded function selector + ABI encoded params to include in\\r\\n     * delegated transaction.\\r\\n     */\\r\\n    function processMessageFromParent(bytes memory data) public override nonReentrant() onlyMessenger() {\\r\\n        Call[] memory calls = abi.decode(data, (Call[]));\\r\\n\\r\\n        for (uint256 i = 0; i < calls.length; i++) {\\r\\n            (address to, bytes memory inputData) = (calls[i].to, calls[i].data);\\r\\n            require(_executeCall(to, inputData), \\\"execute call failed\\\");\\r\\n            emit ExecutedGovernanceTransaction(to, inputData);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Note: this snippet of code is copied from Governor.sol.\\r\\n    function _executeCall(address to, bytes memory data) private returns (bool) {\\r\\n        // Note: this snippet of code is copied from Governor.sol and modified to not include any \\\"value\\\" field.\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            let inputData := add(data, 0x20)\\r\\n            let inputDataSize := mload(data)\\r\\n            // Hardcode value to be 0 for relayed governance calls in order to avoid addressing complexity of bridging\\r\\n            // value cross-chain.\\r\\n            success := call(gas(), to, 0, inputData, inputDataSize, 0, 0)\\r\\n        }\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x72d53f1ce792060bf4997b1557252d9be2ef1bc3f297a6bf803ce6a9350917c9\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/SpokeBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./interfaces/ChildMessengerInterface.sol\\\";\\r\\n\\r\\nimport \\\"../data-verification-mechanism/implementation/Constants.sol\\\";\\r\\nimport \\\"../common/implementation/HasFinder.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Cross-chain Oracle L2 Spoke Base.\\r\\n * @notice Provides access control to Governance and Oracle spoke L2 contracts.\\r\\n */\\r\\n\\r\\nabstract contract SpokeBase is HasFinder {\\r\\n    modifier onlyMessenger() {\\r\\n        require(msg.sender == address(getChildMessenger()), \\\"Caller must be messenger\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the child messenger address set in the finder.\\r\\n     * @return ChildMessengerInterface instance of child messenger deployed on L2.\\r\\n     */\\r\\n    function getChildMessenger() public view returns (ChildMessengerInterface) {\\r\\n        return ChildMessengerInterface(finder.getImplementationAddress(OracleInterfaces.ChildMessenger));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xed5d177948f66946f6c49416a9d4c780c5abf10aa624e0a80fa4508899186910\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ChildMessengerConsumerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ChildMessengerConsumerInterface {\\r\\n    // Called on L2 by child messenger.\\r\\n    function processMessageFromParent(bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x909c5020914855274be891571c9d53ff9d57c8e0144279c3f808ea4fcc28b97f\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ChildMessengerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ChildMessengerInterface {\\r\\n    // Should send cross-chain message to Parent messenger contract or revert.\\r\\n    function sendMessageToParent(bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1276c829956f733346e033969998d3825bea284ba0c29c83d46fe72ebc93e5fa\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ParentMessengerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ParentMessengerInterface {\\r\\n    // Should send cross-chain message to Child messenger contract or revert.\\r\\n    function sendMessageToChild(bytes memory data) external;\\r\\n\\r\\n    // Informs Hub how much msg.value they need to include to call `sendMessageToChild`.\\r\\n    function getL1CallValue() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc74acc686b947b8634e084a110c511b167f8251138a80def1faae9101660fb05\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60808060405234610064576000543360018060a01b0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600085a36001600160a81b0319163360ff60a01b191617600160a01b17600055610b32908161006a8239f35b600080fdfe60806040526004361015610013575b600080fd5b6000803560e01c908163109ea4bf146100a25750806324ec66b3146100995780633582103814610090578063715018a6146100875780638da5cb5b1461007e578063ac9650d8146100755763f2fde38b1461006d57600080fd5b61000e610527565b5061000e6104bc565b5061000e6103e8565b5061000e610389565b5061000e61025c565b5061000e61015f565b3461014b57604036600319011261014b576024356004356100c28261014e565b6100ca6108ad565b6000805460ff60a01b191690556100df6105f4565b80835260016020526040832080546001600160a01b0319166001600160a01b038416179055604051916001600160a01b0316907fcf56c779a9eca65535bf3ac68fb105d582ccb9c630e86864b96a2994afec6f938484a36000805460ff60a01b1916600160a01b179055f35b80fd5b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356000526001602052602060018060a01b0360406000205416604051908152f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176101c757604052565b6101cf610194565b604052565b67ffffffffffffffff81116101c757604052565b90601f8019910116810190811067ffffffffffffffff8211176101c757604052565b60209067ffffffffffffffff8111610224575b60051b0190565b61022c610194565b61021d565b60209067ffffffffffffffff811161024f575b601f01601f19160190565b610257610194565b610244565b503461000e5760408060031936011261000e5760249081359167ffffffffffffffff80841161000e573660238501121561000e5783600401359061029f8261020a565b926102ac855194856101e8565b828452602092818486019160051b8801019236841161000e57828801915b8483106102e3576000886102e089600435610902565b51f35b823582811161000e5789019088602319833603011261000e57885190610308826101ab565b858301356103158161014e565b8252604492838101359085821161000e5701913660438401121561000e57868301359261034184610231565b9061034e8d5192836101e8565b8482523686868301011161000e578a858197968297600094018386013783010152838201528152019201916102ca565b600091031261000e57565b503461000e5760008060031936011261014b576103a46105f4565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b60005b8381106104255750506000910152565b8181015183820152602001610415565b9060209161044e81518092818552858086019101610412565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061048e5750505050505090565b90919293949584806104ac600193603f198682030187528a51610435565b980193019301919493929061047e565b503461000e57602036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e5761052391602461051792016107f5565b6040519182918261045a565b0390f35b503461000e57602036600319011261000e576004356105458161014e565b61054d6105f4565b6001600160a01b039081169081156105a057600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361060857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906106568261020a565b61066360405191826101e8565b8281528092610674601f199161020a565b019060005b82811061068557505050565b806060602080938501015201610679565b60001981146106a55760010190565b634e487b7160e01b600052601160045260246000fd5b50634e487b7160e01b600052603260045260246000fd5b9190811015610715575b60051b81013590601e198136030182121561000e57019081359167ffffffffffffffff831161000e57602001823603811361000e579190565b61071d6106bb565b6106dc565b908092918237016000815290565b3d1561075b573d9061074182610231565b9161074f60405193846101e8565b82523d6000602084013e565b606090565b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e57805161079381610231565b926107a160405194856101e8565b8184526020828401011161000e576107bf9160208085019101610412565b90565b9060206107bf928181520190610435565b60209181518110156107e8575b60051b010190565b6107f06106bb565b6107e0565b9190916108018361064c565b9260005b81811061081157505050565b60008061081f8385876106d2565b60409391610831855180938193610722565b0390305af49061083f610730565b9182901561086e575050906108699161085882886107d3565b5261086381876107d3565b50610696565b610805565b6044839293511061000e576108946108a991600480940160248091518301019101610760565b925162461bcd60e51b815292839283016107c2565b0390fd5b60ff60005460a01c16156108bd57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b61090a6108ad565b6000805460ff60a01b1916905561091f6105f4565b604051610941816109338560208301610ab9565b03601f1981018352826101e8565b61097461096861095b846000526001602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b90813b1561000e576040516309813cdd60e31b81527fe16a826432ccf4c9f0f27428e93786d4a6926fa64c4d7c8e12ef9408a7750ca89260009082908183816109c088600483016107c2565b03925af18015610a37575b610a1e575b5060008381526001602052604090206001600160a01b03906109f5906109689061095b565b1693610a0660405192839283610ad7565b0390a36000805460ff60a01b1916600160a01b179055565b80610a2b610a31926101d4565b8061037e565b386109d0565b610a3f610aca565b6109cb565b908082519081815260208091019281808460051b8301019501936000915b848310610a725750505050505090565b9091929394958480610aa9600193601f19868203018752828b51868060a01b03815116835201519060409081858201520190610435565b9801930193019194939290610a62565b9060206107bf928181520190610a44565b506040513d6000823e3d90fd5b9091610aee6107bf93604084526040840190610a44565b91602081840391015261043556fea264697066735822122064bea1258fda39a22fe11f39be489a5e702ada5b10214eac0f7c1e335f33340964736f6c63430008100033",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b6000803560e01c908163109ea4bf146100a25750806324ec66b3146100995780633582103814610090578063715018a6146100875780638da5cb5b1461007e578063ac9650d8146100755763f2fde38b1461006d57600080fd5b61000e610527565b5061000e6104bc565b5061000e6103e8565b5061000e610389565b5061000e61025c565b5061000e61015f565b3461014b57604036600319011261014b576024356004356100c28261014e565b6100ca6108ad565b6000805460ff60a01b191690556100df6105f4565b80835260016020526040832080546001600160a01b0319166001600160a01b038416179055604051916001600160a01b0316907fcf56c779a9eca65535bf3ac68fb105d582ccb9c630e86864b96a2994afec6f938484a36000805460ff60a01b1916600160a01b179055f35b80fd5b6001600160a01b0381160361000e57565b503461000e57602036600319011261000e576004356000526001602052602060018060a01b0360406000205416604051908152f35b50634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176101c757604052565b6101cf610194565b604052565b67ffffffffffffffff81116101c757604052565b90601f8019910116810190811067ffffffffffffffff8211176101c757604052565b60209067ffffffffffffffff8111610224575b60051b0190565b61022c610194565b61021d565b60209067ffffffffffffffff811161024f575b601f01601f19160190565b610257610194565b610244565b503461000e5760408060031936011261000e5760249081359167ffffffffffffffff80841161000e573660238501121561000e5783600401359061029f8261020a565b926102ac855194856101e8565b828452602092818486019160051b8801019236841161000e57828801915b8483106102e3576000886102e089600435610902565b51f35b823582811161000e5789019088602319833603011261000e57885190610308826101ab565b858301356103158161014e565b8252604492838101359085821161000e5701913660438401121561000e57868301359261034184610231565b9061034e8d5192836101e8565b8482523686868301011161000e578a858197968297600094018386013783010152838201528152019201916102ca565b600091031261000e57565b503461000e5760008060031936011261014b576103a46105f4565b80546001600160a01b0319811682556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b503461000e57600036600319011261000e576000546040516001600160a01b039091168152602090f35b60005b8381106104255750506000910152565b8181015183820152602001610415565b9060209161044e81518092818552858086019101610412565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061048e5750505050505090565b90919293949584806104ac600193603f198682030187528a51610435565b980193019301919493929061047e565b503461000e57602036600319011261000e5767ffffffffffffffff60043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e5761052391602461051792016107f5565b6040519182918261045a565b0390f35b503461000e57602036600319011261000e576004356105458161014e565b61054d6105f4565b6001600160a01b039081169081156105a057600080546001600160a01b031981168417825560405191939192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08484a3f35b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b6000546001600160a01b0316330361060857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b906106568261020a565b61066360405191826101e8565b8281528092610674601f199161020a565b019060005b82811061068557505050565b806060602080938501015201610679565b60001981146106a55760010190565b634e487b7160e01b600052601160045260246000fd5b50634e487b7160e01b600052603260045260246000fd5b9190811015610715575b60051b81013590601e198136030182121561000e57019081359167ffffffffffffffff831161000e57602001823603811361000e579190565b61071d6106bb565b6106dc565b908092918237016000815290565b3d1561075b573d9061074182610231565b9161074f60405193846101e8565b82523d6000602084013e565b606090565b60208183031261000e5780519067ffffffffffffffff821161000e570181601f8201121561000e57805161079381610231565b926107a160405194856101e8565b8184526020828401011161000e576107bf9160208085019101610412565b90565b9060206107bf928181520190610435565b60209181518110156107e8575b60051b010190565b6107f06106bb565b6107e0565b9190916108018361064c565b9260005b81811061081157505050565b60008061081f8385876106d2565b60409391610831855180938193610722565b0390305af49061083f610730565b9182901561086e575050906108699161085882886107d3565b5261086381876107d3565b50610696565b610805565b6044839293511061000e576108946108a991600480940160248091518301019101610760565b925162461bcd60e51b815292839283016107c2565b0390fd5b60ff60005460a01c16156108bd57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b61090a6108ad565b6000805460ff60a01b1916905561091f6105f4565b604051610941816109338560208301610ab9565b03601f1981018352826101e8565b61097461096861095b846000526001602052604060002090565b546001600160a01b031690565b6001600160a01b031690565b90813b1561000e576040516309813cdd60e31b81527fe16a826432ccf4c9f0f27428e93786d4a6926fa64c4d7c8e12ef9408a7750ca89260009082908183816109c088600483016107c2565b03925af18015610a37575b610a1e575b5060008381526001602052604090206001600160a01b03906109f5906109689061095b565b1693610a0660405192839283610ad7565b0390a36000805460ff60a01b1916600160a01b179055565b80610a2b610a31926101d4565b8061037e565b386109d0565b610a3f610aca565b6109cb565b908082519081815260208091019281808460051b8301019501936000915b848310610a725750505050505090565b9091929394958480610aa9600193601f19868203018752828b51868060a01b03815116835201519060409081858201520190610435565b9801930193019194939290610a62565b9060206107bf928181520190610a44565b506040513d6000823e3d90fd5b9091610aee6107bf93604084526040840190610a44565b91602081840391015261043556fea264697066735822122064bea1258fda39a22fe11f39be489a5e702ada5b10214eac0f7c1e335f33340964736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "relayGovernance(uint256,(address,bytes)[])": {
        "details": "Only callable by the owner (presumably the UMA DVM Governor contract, on L1 Ethereum).",
        "params": {
          "calls": "the calls to be made by the GovernorSpoke. Should encode a `to` and `data` prop for each call.",
          "chainId": "network that messenger contract will communicate with"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setMessenger(uint256,address)": {
        "details": "Only callable by the owner (presumably the Ethereum Governor contract).",
        "params": {
          "chainId": "child network that messenger contract will communicate with.",
          "messenger": "ParentMessenger contract that sends messages to ChildMessenger on network with ID `chainId`."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Cross-chain Oracle L1 Governor Hub.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "relayGovernance(uint256,(address,bytes)[])": {
        "notice": "This should be called in order to relay a governance request to the `GovernorSpoke` contract deployed to the child chain associated with `chainId`."
      },
      "setMessenger(uint256,address)": {
        "notice": "Set new ParentMessenger contract for chainId."
      }
    },
    "notice": "Governance relayer contract to be deployed on Ethereum that receives messages from the owner (Governor) and sends them to spoke contracts on child chains.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4304,
        "contract": "contracts/cross-chain-oracle/GovernorHub.sol:GovernorHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/cross-chain-oracle/GovernorHub.sol:GovernorHub",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 21645,
        "contract": "contracts/cross-chain-oracle/GovernorHub.sol:GovernorHub",
        "label": "messengers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_contract(ParentMessengerInterface)24537)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ParentMessengerInterface)24537": {
        "encoding": "inplace",
        "label": "contract ParentMessengerInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_contract(ParentMessengerInterface)24537)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract ParentMessengerInterface)",
        "numberOfBytes": "32",
        "value": "t_contract(ParentMessengerInterface)24537"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}