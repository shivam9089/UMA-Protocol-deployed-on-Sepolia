{
  "address": "0x68D1C3B1193a2550D0D9b468fEc6813f9e11eFf3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_parentMessenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetSpoke",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        }
      ],
      "name": "MessageReceivedFromParent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleSpoke",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "MessageSentToParent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "SentCrossDomainMessage",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracleSpoke",
          "type": "address"
        }
      ],
      "name": "SetOracleSpoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newParentMessenger",
          "type": "address"
        }
      ],
      "name": "SetParentMessenger",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "oracleSpoke",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "processMessageFromCrossChainParent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToParent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleSpoke",
          "type": "address"
        }
      ],
      "name": "setOracleSpoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newParentMessenger",
          "type": "address"
        }
      ],
      "name": "setParentMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1597be71b14000a862d797fc59ad33d954bc21ed47451f72c36e3eddda94cc70",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x68D1C3B1193a2550D0D9b468fEc6813f9e11eFf3",
    "transactionIndex": 8,
    "gasUsed": "494963",
    "logsBloom": "0x
    "blockHash": "0x526ff12dc1b191b60152797403f44978c9a590b0bc852ed0309ef84ec345afdc",
    "transactionHash": "0x1597be71b14000a862d797fc59ad33d954bc21ed47451f72c36e3eddda94cc70",
    "logs": [],
    "blockNumber": 6161472,
    "cumulativeGasUsed": "1063207",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB6F40ec1765fbc00C4ceDe1181331Fd41F8775E9"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_parentMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetSpoke\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"}],\"name\":\"MessageReceivedFromParent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleSpoke\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"MessageSentToParent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"SentCrossDomainMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracleSpoke\",\"type\":\"address\"}],\"name\":\"SetOracleSpoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newParentMessenger\",\"type\":\"address\"}],\"name\":\"SetParentMessenger\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"oracleSpoke\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"processMessageFromCrossChainParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMessageToParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleSpoke\",\"type\":\"address\"}],\"name\":\"setOracleSpoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newParentMessenger\",\"type\":\"address\"}],\"name\":\"setParentMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is ownable via the onlyCrossDomainAccount modifier, restricting ownership to the cross-domain parent messenger contract that lives on L1.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_parentMessenger\":\"The address of the L1 parent messenger. Acts as the \\\"owner\\\" of this contract.\"}},\"processMessageFromCrossChainParent(bytes,address)\":{\"details\":\"The caller must be the the parent messenger, sent over the canonical message bridge.\",\"params\":{\"data\":\"data message sent from the L1 messenger. Should be an encoded function call or packed data.\",\"target\":\"desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having this as a param enables the L1 Messenger to send messages to arbitrary addresses on the L1. This is primarily used to send messages to the OracleSpoke and GovernorSpoke on L2.\"}},\"sendMessageToParent(bytes)\":{\"details\":\"The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.The L1 target, the parent messenger, must implement processMessageFromChild to consume the message.\",\"params\":{\"data\":\"data message sent to the L1 messenger. Should be an encoded function call or packed data.\"}},\"setOracleSpoke(address)\":{\"details\":\"The caller of this function must be the parent messenger, over the canonical bridge.\",\"params\":{\"newOracleSpoke\":\"address of the new oracle spoke, deployed on L2.\"}},\"setParentMessenger(address)\":{\"details\":\"The caller of this function must be the parent messenger, over the canonical bridge.\",\"params\":{\"newParentMessenger\":\"address of the new parent messenger, deployed on L1.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Construct the Arbitrum_ChildMessenger contract.\"},\"processMessageFromCrossChainParent(bytes,address)\":{\"notice\":\"Process a received message from the parent messenger via the canonical message bridge.\"},\"sendMessageToParent(bytes)\":{\"notice\":\"Sends a message to the parent messenger via the canonical message bridge.\"},\"setOracleSpoke(address)\":{\"notice\":\"Changes the stored address of the Oracle spoke, deployed on L2.\"},\"setParentMessenger(address)\":{\"notice\":\"Changes the stored address of the parent messenger, deployed on L1.\"}},\"notice\":\"Sends and receives cross chain messages between Arbitrum L2 and Ethereum L1 network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cross-chain-oracle/chain-adapters/Arbitrum_ChildMessenger.sol\":\"Arbitrum_ChildMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/chain-adapters/Arbitrum_ChildMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../interfaces/ChildMessengerInterface.sol\\\";\\r\\nimport \\\"../interfaces/ChildMessengerConsumerInterface.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../external/avm/AVM_CrossDomainEnabled.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Sends and receives cross chain messages between Arbitrum L2 and Ethereum L1 network.\\r\\n * @dev This contract is ownable via the onlyCrossDomainAccount modifier, restricting ownership to the cross-domain\\r\\n * parent messenger contract that lives on L1.\\r\\n */\\r\\ncontract Arbitrum_ChildMessenger is AVM_CrossDomainEnabled, ChildMessengerInterface, Lockable {\\r\\n    // The only child network contract that can send messages over the bridge via the messenger is the oracle spoke.\\r\\n    address public oracleSpoke;\\r\\n\\r\\n    // Messenger contract on the other side of the L1<->L2 bridge.\\r\\n    address public parentMessenger;\\r\\n\\r\\n    event SetOracleSpoke(address newOracleSpoke);\\r\\n    event SetParentMessenger(address newParentMessenger);\\r\\n    event MessageSentToParent(bytes data, address indexed parentAddress, address indexed oracleSpoke, uint256 id);\\r\\n    event MessageReceivedFromParent(bytes data, address indexed targetSpoke, address indexed parentAddress);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Arbitrum_ChildMessenger contract.\\r\\n     * @param _parentMessenger The address of the L1 parent messenger. Acts as the \\\"owner\\\" of this contract.\\r\\n     */\\r\\n    constructor(address _parentMessenger) {\\r\\n        parentMessenger = _parentMessenger;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the Oracle spoke, deployed on L2.\\r\\n     * @dev The caller of this function must be the parent messenger, over the canonical bridge.\\r\\n     * @param newOracleSpoke address of the new oracle spoke, deployed on L2.\\r\\n     */\\r\\n    function setOracleSpoke(address newOracleSpoke) public onlyFromCrossDomainAccount(parentMessenger) nonReentrant() {\\r\\n        oracleSpoke = newOracleSpoke;\\r\\n        emit SetOracleSpoke(newOracleSpoke);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the parent messenger, deployed on L1.\\r\\n     * @dev The caller of this function must be the parent messenger, over the canonical bridge.\\r\\n     * @param newParentMessenger address of the new parent messenger, deployed on L1.\\r\\n     */\\r\\n    function setParentMessenger(address newParentMessenger)\\r\\n        public\\r\\n        onlyFromCrossDomainAccount(parentMessenger)\\r\\n        nonReentrant()\\r\\n    {\\r\\n        parentMessenger = newParentMessenger;\\r\\n        emit SetParentMessenger(newParentMessenger);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sends a message to the parent messenger via the canonical message bridge.\\r\\n     * @dev The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.\\r\\n     * @dev The L1 target, the parent messenger, must implement processMessageFromChild to consume the message.\\r\\n     * @param data data message sent to the L1 messenger. Should be an encoded function call or packed data.\\r\\n     */\\r\\n    function sendMessageToParent(bytes memory data) public override nonReentrant() {\\r\\n        require(msg.sender == oracleSpoke, \\\"Only callable by oracleSpoke\\\");\\r\\n        bytes memory dataSentToParent = abi.encodeWithSignature(\\\"processMessageFromCrossChainChild(bytes)\\\", data);\\r\\n        uint256 id = sendCrossDomainMessage(msg.sender, parentMessenger, dataSentToParent);\\r\\n        emit MessageSentToParent(dataSentToParent, parentMessenger, oracleSpoke, id);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process a received message from the parent messenger via the canonical message bridge.\\r\\n     * @dev The caller must be the the parent messenger, sent over the canonical message bridge.\\r\\n     * @param data data message sent from the L1 messenger. Should be an encoded function call or packed data.\\r\\n     * @param target desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having\\r\\n     * this as a param enables the L1 Messenger to send messages to arbitrary addresses on the L1. This is primarily\\r\\n     * used to send messages to the OracleSpoke and GovernorSpoke on L2.\\r\\n     */\\r\\n    function processMessageFromCrossChainParent(bytes memory data, address target)\\r\\n        public\\r\\n        onlyFromCrossDomainAccount(parentMessenger)\\r\\n        nonReentrant()\\r\\n    {\\r\\n        ChildMessengerConsumerInterface(target).processMessageFromParent(data);\\r\\n        emit MessageReceivedFromParent(data, target, parentMessenger);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd9884dc15479815099f14332aceef556bdd34689095089612fd88382d519b000\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ChildMessengerConsumerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ChildMessengerConsumerInterface {\\r\\n    // Called on L2 by child messenger.\\r\\n    function processMessageFromParent(bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x909c5020914855274be891571c9d53ff9d57c8e0144279c3f808ea4fcc28b97f\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ChildMessengerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ChildMessengerInterface {\\r\\n    // Should send cross-chain message to Parent messenger contract or revert.\\r\\n    function sendMessageToParent(bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1276c829956f733346e033969998d3825bea284ba0c29c83d46fe72ebc93e5fa\",\"license\":\"AGPL-3.0-only\"},\"contracts/external/avm/AVM_CrossDomainEnabled.sol\":{\"content\":\"// Copied logic from https://github.com/makerdao/arbitrum-dai-bridge/blob/34acc39bc6f3a2da0a837ea3c5dbc634ec61c7de/contracts/l2/L2CrossDomainEnabled.sol\\r\\n// with a change to the solidity version.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./interfaces/ArbSys.sol\\\";\\r\\n\\r\\nabstract contract AVM_CrossDomainEnabled {\\r\\n    event SentCrossDomainMessage(address indexed from, address indexed to, uint256 indexed id, bytes data);\\r\\n\\r\\n    modifier onlyFromCrossDomainAccount(address l1Counterpart) {\\r\\n        require(msg.sender == applyL1ToL2Alias(l1Counterpart), \\\"ONLY_COUNTERPART_GATEWAY\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    uint160 constant offset = uint160(0x1111000000000000000000000000000000001111);\\r\\n\\r\\n    // l1 addresses are transformed during l1->l2 calls. See https://developer.offchainlabs.com/docs/l1_l2_messages#address-aliasing for more information.\\r\\n    function applyL1ToL2Alias(address l1Address) internal pure returns (address l2Address) {\\r\\n        l2Address = address(uint160(l1Address) + offset);\\r\\n    }\\r\\n\\r\\n    // Sends a message to L1 via the ArbSys contract. See https://developer.offchainlabs.com/docs/arbsys.\\r\\n    // After the Arbitrum chain advances some set amount of time, ArbOS gathers all outgoing messages, Merklizes them,\\r\\n    // and publishes the root as an OutboxEntry in the chain's outbox. Note that this happens \\\"automatically\\\";\\r\\n    // i.e., it requires no additional action from the user. After the Outbox entry is published on the L1 chain,\\r\\n    // the user (or anybody) can compute the Merkle proof of inclusion of their outgoing message. Anytime after the\\r\\n    // dispute window passes (~7 days), any user can execute the L1 message by calling Outbox.executeTransaction;\\r\\n    // if it reverts, it can be re-executed any number of times and with no upper time-bound.\\r\\n    // To read more about the L2 --> L1 lifecycle, see: https://developer.offchainlabs.com/docs/l1_l2_messages#explanation.\\r\\n    function sendCrossDomainMessage(\\r\\n        address user,\\r\\n        address to,\\r\\n        bytes memory data\\r\\n    ) internal returns (uint256) {\\r\\n        // note: this method doesn't support sending ether to L1 together with a call\\r\\n        uint256 id = ArbSys(address(100)).sendTxToL1(to, data);\\r\\n\\r\\n        emit SentCrossDomainMessage(user, to, id, data);\\r\\n\\r\\n        return id;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb0829ca466d8b72d806c8e80a6bd47ca88d8768c6d9fb8ac56bad000efbfcabb\"},\"contracts/external/avm/interfaces/ArbSys.sol\":{\"content\":\"// Copied logic from https://github.com/makerdao/arbitrum-dai-bridge/blob/54a2109a97c5b1504824c6317d358e2d2733b5a3/contracts/arbitrum/ArbSys.sol\\r\\n// with changes only to the solidity version and comments.\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @notice Precompiled contract that exists in every Arbitrum chain at address(100),\\r\\n * 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality. ArbSys provides\\r\\n * systems functionality useful to some Arbitrum contracts. Any contract running on an Arbitrum Chain can call the\\r\\n * chain's ArbSys.\\r\\n */\\r\\ninterface ArbSys {\\r\\n    /**\\r\\n     * @notice Get internal version number identifying an ArbOS build\\r\\n     * @return version number as int\\r\\n     */\\r\\n    function arbOSVersion() external pure returns (uint256);\\r\\n\\r\\n    function arbChainID() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\r\\n     * @return block number as int\\r\\n     */\\r\\n    function arbBlockNumber() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Send given amount of Eth to dest from sender.\\r\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\r\\n     * @param destination recipient address on L1\\r\\n     * @return unique identifier for this L2-to-L1 transaction.\\r\\n     */\\r\\n    function withdrawEth(address destination) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Send a transaction to L1\\r\\n     * @param destination recipient address on L1\\r\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\r\\n     * @return a unique identifier for this L2-to-L1 transaction.\\r\\n     */\\r\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\r\\n     * @param account target account\\r\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\r\\n     */\\r\\n    function getTransactionCount(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get the value of target L2 storage slot\\r\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\r\\n     * @param account target account\\r\\n     * @param index target index of storage slot\\r\\n     * @return stotage value for the given account at the given index\\r\\n     */\\r\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice check if current call is coming from l1\\r\\n     * @return true if the caller of this was called directly from L1\\r\\n     */\\r\\n    function isTopLevelCall() external view returns (bool);\\r\\n\\r\\n    event EthWithdrawal(address indexed destAddr, uint256 amount);\\r\\n\\r\\n    event L2ToL1Transaction(\\r\\n        address caller,\\r\\n        address indexed destination,\\r\\n        uint256 indexed uniqueId,\\r\\n        uint256 indexed batchNumber,\\r\\n        uint256 indexInBatch,\\r\\n        uint256 arbBlockNum,\\r\\n        uint256 ethBlockNum,\\r\\n        uint256 timestamp,\\r\\n        uint256 callvalue,\\r\\n        bytes data\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0x54336b92dd2fed21ead667cade47eb34a1040628bb5531046f26418544b59146\"}},\"version\":1}",
  "bytecode": "0x60803461007d57601f6107be38819003918201601f19168301916001600160401b038311848410176100825780849260209460405283398101031261007d57516001600160a01b0381169081900361007d57600160ff19600054161760005560018060a01b0319600154161760015560405161072590816100998239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6040608081526004908136101561001557600080fd5b600090813560e01c8063187717ce146103d95780631a50ad3014610340578063820980691461031857806398e1e16f146102ed578063c948564b1461025b5763d982ebba1461006357600080fd5b34610257576020928360031936011261025357803567ffffffffffffffff811161024f57610094903690830161055d565b9061009d61061b565b6000805460ff19908116909155845490926001600160a01b039160081c8216330361020c57956100fb8596976100ed965196879163109ff9a960e01b85840152846024840152604483019061066d565b03601f198101875286610525565b8160015416808751946349460b4d60e11b8652850152866024850152818480610127604482018a61066d565b03818b60645af19384156102025788946101ce575b506001957f5e50e1a587d775dec347a2576d8380c9e958fa233e6ca174e67ee95b76f8ce7492856101bc938a518381527f207f52cdcf76353ab088164ca547215b83f41c62766a9da43d8da780dba9f0f333918061019c8782018961066d565b0390a484885416948a5460081c169589519384938b85528b85019061066d565b918301520390a3600054161760005551f35b9093508181813d83116101fb575b6101e68183610525565b810103126101f7575192600161013c565b8780fd5b503d6101dc565b87513d8a823e3d90fd5b845162461bcd60e51b8152808401889052601c60248201527f4f6e6c792063616c6c61626c65206279206f7261636c6553706f6b65000000006044820152606490fd5b8380fd5b8280fd5b5080fd5b50346102575760203660031901126102575760016102776105b9565b7fe5fae35015b48cf9b49a43c8dc7ca108df20ad6dc988ee556e65807bdcda4b9260208354848060a01b036102b9816102b18185166106ad565b1633146105cf565b6102c161061b565b60ff1960005416941680916bffffffffffffffffffffffff60a01b161785558551908152a11760005551f35b50346102575781600319360112610257579054905160089190911c6001600160a01b03168152602090f35b503461025757816003193601126102575760015490516001600160a01b039091168152602090f35b503461025757602036600319011261025757600161035c6105b9565b7f5e60d1b338c1efe33cdc840bc15ae31e8c16ec95b6ce1e2a41d334fc28b69fbc6020838060a01b0392610396846102b1818854166106ad565b61039e61061b565b60ff1993846000541660005587546101008760a81b038360081b16906101008860a81b031916178855865191168152a1600054161760005551f35b503461025757806003193601126102575767ffffffffffffffff833581811161024f57610409903690860161055d565b6001600160a01b0394602435868116919082900361052157610432876102b181600154166106ad565b61043a61061b565b60ff1993848754168755823b1561051d57855163065fef2360e11b81526020838201529087828061046e602482018961066d565b038183885af18015610202576104d0575b5050507fb7effaeeeb3f33c4c793ac44d123d88600fdfcdc7232156dc0d70dab4e5dbe0c6104c2600195969786541693875191829160208352602083019061066d565b0390a3600054161760005551f35b81989792981161050a5785529495507fb7effaeeeb3f33c4c793ac44d123d88600fdfcdc7232156dc0d70dab4e5dbe0c6104c2600161047f565b634e487b7160e01b825260418852602482fd5b8680fd5b8580fd5b90601f8019910116810190811067ffffffffffffffff82111761054757604052565b634e487b7160e01b600052604160045260246000fd5b81601f820112156105b45780359067ffffffffffffffff82116105475760405192610592601f8401601f191660200185610525565b828452602083830101116105b457816000926020809301838601378301015290565b600080fd5b600435906001600160a01b03821682036105b457565b156105d657565b60405162461bcd60e51b815260206004820152601860248201527f4f4e4c595f434f554e544552504152545f4741544557415900000000000000006044820152606490fd5b60ff600054161561062857565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b919082519283825260005b848110610699575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610678565b6001600160a01b03908116731111000000000000000000000000000000001111018181116106d9571690565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220dc778f6232c4ad276b38c734461f253963e6f61be0d29621fd37086c2d4806b364736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600090813560e01c8063187717ce146103d95780631a50ad3014610340578063820980691461031857806398e1e16f146102ed578063c948564b1461025b5763d982ebba1461006357600080fd5b34610257576020928360031936011261025357803567ffffffffffffffff811161024f57610094903690830161055d565b9061009d61061b565b6000805460ff19908116909155845490926001600160a01b039160081c8216330361020c57956100fb8596976100ed965196879163109ff9a960e01b85840152846024840152604483019061066d565b03601f198101875286610525565b8160015416808751946349460b4d60e11b8652850152866024850152818480610127604482018a61066d565b03818b60645af19384156102025788946101ce575b506001957f5e50e1a587d775dec347a2576d8380c9e958fa233e6ca174e67ee95b76f8ce7492856101bc938a518381527f207f52cdcf76353ab088164ca547215b83f41c62766a9da43d8da780dba9f0f333918061019c8782018961066d565b0390a484885416948a5460081c169589519384938b85528b85019061066d565b918301520390a3600054161760005551f35b9093508181813d83116101fb575b6101e68183610525565b810103126101f7575192600161013c565b8780fd5b503d6101dc565b87513d8a823e3d90fd5b845162461bcd60e51b8152808401889052601c60248201527f4f6e6c792063616c6c61626c65206279206f7261636c6553706f6b65000000006044820152606490fd5b8380fd5b8280fd5b5080fd5b50346102575760203660031901126102575760016102776105b9565b7fe5fae35015b48cf9b49a43c8dc7ca108df20ad6dc988ee556e65807bdcda4b9260208354848060a01b036102b9816102b18185166106ad565b1633146105cf565b6102c161061b565b60ff1960005416941680916bffffffffffffffffffffffff60a01b161785558551908152a11760005551f35b50346102575781600319360112610257579054905160089190911c6001600160a01b03168152602090f35b503461025757816003193601126102575760015490516001600160a01b039091168152602090f35b503461025757602036600319011261025757600161035c6105b9565b7f5e60d1b338c1efe33cdc840bc15ae31e8c16ec95b6ce1e2a41d334fc28b69fbc6020838060a01b0392610396846102b1818854166106ad565b61039e61061b565b60ff1993846000541660005587546101008760a81b038360081b16906101008860a81b031916178855865191168152a1600054161760005551f35b503461025757806003193601126102575767ffffffffffffffff833581811161024f57610409903690860161055d565b6001600160a01b0394602435868116919082900361052157610432876102b181600154166106ad565b61043a61061b565b60ff1993848754168755823b1561051d57855163065fef2360e11b81526020838201529087828061046e602482018961066d565b038183885af18015610202576104d0575b5050507fb7effaeeeb3f33c4c793ac44d123d88600fdfcdc7232156dc0d70dab4e5dbe0c6104c2600195969786541693875191829160208352602083019061066d565b0390a3600054161760005551f35b81989792981161050a5785529495507fb7effaeeeb3f33c4c793ac44d123d88600fdfcdc7232156dc0d70dab4e5dbe0c6104c2600161047f565b634e487b7160e01b825260418852602482fd5b8680fd5b8580fd5b90601f8019910116810190811067ffffffffffffffff82111761054757604052565b634e487b7160e01b600052604160045260246000fd5b81601f820112156105b45780359067ffffffffffffffff82116105475760405192610592601f8401601f191660200185610525565b828452602083830101116105b457816000926020809301838601378301015290565b600080fd5b600435906001600160a01b03821682036105b457565b156105d657565b60405162461bcd60e51b815260206004820152601860248201527f4f4e4c595f434f554e544552504152545f4741544557415900000000000000006044820152606490fd5b60ff600054161561062857565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b919082519283825260005b848110610699575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610678565b6001600160a01b03908116731111000000000000000000000000000000001111018181116106d9571690565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220dc778f6232c4ad276b38c734461f253963e6f61be0d29621fd37086c2d4806b364736f6c63430008100033",
  "devdoc": {
    "details": "This contract is ownable via the onlyCrossDomainAccount modifier, restricting ownership to the cross-domain parent messenger contract that lives on L1.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_parentMessenger": "The address of the L1 parent messenger. Acts as the \"owner\" of this contract."
        }
      },
      "processMessageFromCrossChainParent(bytes,address)": {
        "details": "The caller must be the the parent messenger, sent over the canonical message bridge.",
        "params": {
          "data": "data message sent from the L1 messenger. Should be an encoded function call or packed data.",
          "target": "desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having this as a param enables the L1 Messenger to send messages to arbitrary addresses on the L1. This is primarily used to send messages to the OracleSpoke and GovernorSpoke on L2."
        }
      },
      "sendMessageToParent(bytes)": {
        "details": "The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.The L1 target, the parent messenger, must implement processMessageFromChild to consume the message.",
        "params": {
          "data": "data message sent to the L1 messenger. Should be an encoded function call or packed data."
        }
      },
      "setOracleSpoke(address)": {
        "details": "The caller of this function must be the parent messenger, over the canonical bridge.",
        "params": {
          "newOracleSpoke": "address of the new oracle spoke, deployed on L2."
        }
      },
      "setParentMessenger(address)": {
        "details": "The caller of this function must be the parent messenger, over the canonical bridge.",
        "params": {
          "newParentMessenger": "address of the new parent messenger, deployed on L1."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Construct the Arbitrum_ChildMessenger contract."
      },
      "processMessageFromCrossChainParent(bytes,address)": {
        "notice": "Process a received message from the parent messenger via the canonical message bridge."
      },
      "sendMessageToParent(bytes)": {
        "notice": "Sends a message to the parent messenger via the canonical message bridge."
      },
      "setOracleSpoke(address)": {
        "notice": "Changes the stored address of the Oracle spoke, deployed on L2."
      },
      "setParentMessenger(address)": {
        "notice": "Changes the stored address of the parent messenger, deployed on L1."
      }
    },
    "notice": "Sends and receives cross chain messages between Arbitrum L2 and Ethereum L1 network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16304,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Arbitrum_ChildMessenger.sol:Arbitrum_ChildMessenger",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22900,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Arbitrum_ChildMessenger.sol:Arbitrum_ChildMessenger",
        "label": "oracleSpoke",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 22902,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Arbitrum_ChildMessenger.sol:Arbitrum_ChildMessenger",
        "label": "parentMessenger",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}