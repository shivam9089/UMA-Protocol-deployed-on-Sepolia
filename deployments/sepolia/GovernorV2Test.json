{
  "address": "0x681c205Ff833dFc748477061E9c299cDb07DE82e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startingId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "AddedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "EmergencyExecution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct GovernorV2.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        }
      ],
      "name": "NewProposal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transactionIndex",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "RemovedSharedMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ResetExclusiveMember",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "addMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernorV2.Transaction",
          "name": "transaction",
          "type": "tuple"
        }
      ],
      "name": "emergencyExecute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "transactionIndex",
          "type": "uint256"
        }
      ],
      "name": "executeProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finder",
      "outputs": [
        {
          "internalType": "contract FinderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "getMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getProposal",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "internalType": "struct GovernorV2.Transaction[]",
              "name": "transactions",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "requestTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "ancillaryData",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernorV2.Proposal",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToCheck",
          "type": "address"
        }
      ],
      "name": "holdsRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numProposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct GovernorV2.Transaction[]",
          "name": "transactions",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes",
          "name": "ancillaryData",
          "type": "bytes"
        }
      ],
      "name": "propose",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "memberToRemove",
          "type": "address"
        }
      ],
      "name": "removeMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        }
      ],
      "name": "renounceMembership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roleId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newMember",
          "type": "address"
        }
      ],
      "name": "resetMember",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xca11519c6cbd6f15bca487640142adcfdf86681c9c14fd6ac59fcb42b00cb7aa",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x681c205Ff833dFc748477061E9c299cDb07DE82e",
    "transactionIndex": 24,
    "gasUsed": "2017130",
    "logsBloom": "0x
    "blockHash": "0x8be188dc288ede5fc2acac0b2d25d9652d64ae829768bb343371d200358ca017",
    "transactionHash": "0xca11519c6cbd6f15bca487640142adcfdf86681c9c14fd6ac59fcb42b00cb7aa",
    "logs": [],
    "blockNumber": 6161826,
    "cumulativeGasUsed": "3893618",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA969917A4dFaB07936dEc60f70FA5c736A1e2b9e",
    0,
    "0xf8815ce169E5450aa6908e76E1B970dBcEC11550"
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"AddedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"EmergencyExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct GovernorV2.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"}],\"name\":\"NewProposal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transactionIndex\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"RemovedSharedMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ResetExclusiveMember\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernorV2.Transaction\",\"name\":\"transaction\",\"type\":\"tuple\"}],\"name\":\"emergencyExecute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionIndex\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finder\",\"outputs\":[{\"internalType\":\"contract FinderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"getMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getProposal\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernorV2.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernorV2.Proposal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToCheck\",\"type\":\"address\"}],\"name\":\"holdsRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numProposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct GovernorV2.Transaction[]\",\"name\":\"transactions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"ancillaryData\",\"type\":\"bytes\"}],\"name\":\"propose\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"memberToRemove\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"}],\"name\":\"renounceMembership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roleId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newMember\",\"type\":\"address\"}],\"name\":\"resetMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"newMember\":\"the new SharedRole member.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"emergencyExecute((address,uint256,bytes))\":{\"details\":\"This can only be called by the EmergencyProposer.\",\"params\":{\"transaction\":\"a single transaction to execute.\"}},\"executeProposal(uint256,uint256)\":{\"details\":\"This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\",\"params\":{\"id\":\"unique id for the executed proposal.\",\"transactionIndex\":\"unique transaction index for the executed proposal.\"}},\"getMember(uint256)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, exclusive role.\",\"params\":{\"roleId\":\"the ExclusiveRole membership to check.\"},\"returns\":{\"_0\":\"the address of the current ExclusiveRole member.\"}},\"getProposal(uint256)\":{\"details\":\"after a proposal is executed, its data will be zeroed out, except for the request time and ancillary data.\",\"params\":{\"id\":\"uniquely identify the identity of the proposal.\"},\"returns\":{\"_0\":\"proposal struct containing transactions[] and requestTime.\"}},\"holdsRole(uint256,address)\":{\"details\":\"Reverts if roleId does not correspond to an initialized role.\",\"params\":{\"memberToCheck\":\"the address to check.\",\"roleId\":\"the Role to check.\"},\"returns\":{\"_0\":\"True if `memberToCheck` is a member of `roleId`.\"}},\"numProposals()\":{\"returns\":{\"_0\":\"uint256 representing the current number of proposals.\"}},\"propose((address,uint256,bytes)[],bytes)\":{\"params\":{\"ancillaryData\":\"arbitrary data appended to a price request to give the voters more info from the caller.\",\"transactions\":\"list of transactions that are being proposed.\"}},\"removeMember(uint256,address)\":{\"details\":\"Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.\",\"params\":{\"memberToRemove\":\"the current SharedRole member to remove.\",\"roleId\":\"the SharedRole membership to modify.\"}},\"renounceMembership(uint256)\":{\"details\":\"Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.\",\"params\":{\"roleId\":\"the SharedRole membership to modify.\"}},\"resetMember(uint256,address)\":{\"details\":\"Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.\",\"params\":{\"newMember\":\"the new ExclusiveRole member.\",\"roleId\":\"the ExclusiveRole membership to modify.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addMember(uint256,address)\":{\"notice\":\"Adds `newMember` to the shared role, `roleId`.\"},\"emergencyExecute((address,uint256,bytes))\":{\"notice\":\"Emergency execution method that bypasses the voting system to execute a transaction.\"},\"executeProposal(uint256,uint256)\":{\"notice\":\"Executes a proposed governance action that has been approved by voters.\"},\"getMember(uint256)\":{\"notice\":\"Gets the current holder of the exclusive role, `roleId`.\"},\"getProposal(uint256)\":{\"notice\":\"Gets the proposal data for a particular id.\"},\"holdsRole(uint256,address)\":{\"notice\":\"Whether `memberToCheck` is a member of roleId.\"},\"numProposals()\":{\"notice\":\"Gets the total number of proposals (includes executed and non-executed).\"},\"propose((address,uint256,bytes)[],bytes)\":{\"notice\":\"Proposes a new governance action. Can only be called by the holder of the Proposer role.\"},\"removeMember(uint256,address)\":{\"notice\":\"Removes `memberToRemove` from the shared role, `roleId`.\"},\"renounceMembership(uint256)\":{\"notice\":\"Removes caller from the role, `roleId`.\"},\"resetMember(uint256,address)\":{\"notice\":\"Changes the exclusive role holder of `roleId` to `newMember`.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol\":\"GovernorV2Test\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiCaller.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// This contract is taken from Uniswap's multi call implementation (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/base/Multicall.sol)\\r\\n// and was modified to be solidity 0.8 compatible. Additionally, the method was restricted to only work with msg.value\\r\\n// set to 0 to avoid any nasty attack vectors on function calls that use value sent with deposits.\\r\\n\\r\\n/// @title MultiCaller\\r\\n/// @notice Enables calling multiple methods in a single call to the contract\\r\\ncontract MultiCaller {\\r\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\r\\n        results = new bytes[](data.length);\\r\\n        for (uint256 i = 0; i < data.length; i++) {\\r\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\r\\n\\r\\n            if (!success) {\\r\\n                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\\r\\n                if (result.length < 68) revert();\\r\\n                assembly {\\r\\n                    result := add(result, 0x04)\\r\\n                }\\r\\n                revert(abi.decode(result, (string)));\\r\\n            }\\r\\n\\r\\n            results[i] = result;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb65e9816df65a8c97c2db52e067dd39d5b959dc7524a7f518ff13567cb967bb\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Exclusive {\\r\\n    struct RoleMembership {\\r\\n        address member;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.member == memberToCheck;\\r\\n    }\\r\\n\\r\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\r\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\r\\n        roleMembership.member = newMember;\\r\\n    }\\r\\n\\r\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\r\\n        return roleMembership.member;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\r\\n        resetMember(roleMembership, initialMember);\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary Shared {\\r\\n    struct RoleMembership {\\r\\n        mapping(address => bool) members;\\r\\n    }\\r\\n\\r\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\r\\n        return roleMembership.members[memberToCheck];\\r\\n    }\\r\\n\\r\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\r\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\r\\n        roleMembership.members[memberToAdd] = true;\\r\\n    }\\r\\n\\r\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\r\\n        roleMembership.members[memberToRemove] = false;\\r\\n    }\\r\\n\\r\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\r\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\r\\n            addMember(roleMembership, initialMembers[i]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Base class to manage permissions for the derived class.\\r\\n */\\r\\nabstract contract MultiRole {\\r\\n    using Exclusive for Exclusive.RoleMembership;\\r\\n    using Shared for Shared.RoleMembership;\\r\\n\\r\\n    enum RoleType { Invalid, Exclusive, Shared }\\r\\n\\r\\n    struct Role {\\r\\n        uint256 managingRole;\\r\\n        RoleType roleType;\\r\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\r\\n        Shared.RoleMembership sharedRoleMembership;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => Role) private roles;\\r\\n\\r\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\r\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleHolder(uint256 roleId) {\\r\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\r\\n     */\\r\\n    modifier onlyRoleManager(uint256 roleId) {\\r\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\r\\n     */\\r\\n    modifier onlyExclusive(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\r\\n     */\\r\\n    modifier onlyShared(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Whether `memberToCheck` is a member of roleId.\\r\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\r\\n     * @param roleId the Role to check.\\r\\n     * @param memberToCheck the address to check.\\r\\n     * @return True if `memberToCheck` is a member of `roleId`.\\r\\n     */\\r\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\r\\n        Role storage role = roles[roleId];\\r\\n        if (role.roleType == RoleType.Exclusive) {\\r\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\r\\n        } else if (role.roleType == RoleType.Shared) {\\r\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\r\\n        }\\r\\n        revert(\\\"Invalid roleId\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\r\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\r\\n     * initialized, ExclusiveRole.\\r\\n     * @param roleId the ExclusiveRole membership to modify.\\r\\n     * @param newMember the new ExclusiveRole member.\\r\\n     */\\r\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\r\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\r\\n     * @param roleId the ExclusiveRole membership to check.\\r\\n     * @return the address of the current ExclusiveRole member.\\r\\n     */\\r\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\r\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param newMember the new SharedRole member.\\r\\n     */\\r\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\r\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\r\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\r\\n     * managing role for `roleId`.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     * @param memberToRemove the current SharedRole member to remove.\\r\\n     */\\r\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\r\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Removes caller from the role, `roleId`.\\r\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\r\\n     * initialized, SharedRole.\\r\\n     * @param roleId the SharedRole membership to modify.\\r\\n     */\\r\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\r\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\r\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is not initialized.\\r\\n     */\\r\\n    modifier onlyValidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if `roleId` is initialized.\\r\\n     */\\r\\n    modifier onlyInvalidRole(uint256 roleId) {\\r\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMembers` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createSharedRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address[] memory initialMembers\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Shared;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.sharedRoleMembership.init(initialMembers);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\r\\n     * `initialMember` will be immediately added to the role.\\r\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\r\\n     * initialized.\\r\\n     */\\r\\n    function _createExclusiveRole(\\r\\n        uint256 roleId,\\r\\n        uint256 managingRoleId,\\r\\n        address initialMember\\r\\n    ) internal onlyInvalidRole(roleId) {\\r\\n        Role storage role = roles[roleId];\\r\\n        role.roleType = RoleType.Exclusive;\\r\\n        role.managingRole = managingRoleId;\\r\\n        role.exclusiveRoleMembership.init(initialMember);\\r\\n        require(\\r\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\r\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xbec581749786ec3a2b56d74331914d03fd7a0bf0e853c6f8a3e778b39417606a\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Timer.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Base class that provides time overrides, but only if being run in test mode.\\r\\n */\\r\\nabstract contract Testable {\\r\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\r\\n    // Note: this variable should be set on construction and never modified.\\r\\n    address public timerAddress;\\r\\n\\r\\n    /**\\r\\n     * @notice Constructs the Testable contract. Called by child contracts.\\r\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\r\\n     * Must be set to 0x0 for production environments that use live time.\\r\\n     */\\r\\n    constructor(address _timerAddress) {\\r\\n        timerAddress = _timerAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Reverts if not running in test mode.\\r\\n     */\\r\\n    modifier onlyIfTest {\\r\\n        require(timerAddress != address(0x0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set current Testable time to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\r\\n        Timer(timerAddress).setCurrentTime(time);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\r\\n     * Otherwise, it will return the block timestamp.\\r\\n     * @return uint for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        if (timerAddress != address(0x0)) {\\r\\n            return Timer(timerAddress).getCurrentTime();\\r\\n        } else {\\r\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd0943490d2b65b1f76a2532924dc8e28c1e29c7e788e825944a234fbadb511c\",\"license\":\"AGPL-3.0-only\"},\"contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Universal store of current contract time for testing environments.\\r\\n */\\r\\ncontract Timer {\\r\\n    uint256 private currentTime;\\r\\n\\r\\n    constructor() {\\r\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the current time.\\r\\n     * @dev Will revert if not running in test mode.\\r\\n     * @param time timestamp to set `currentTime` to.\\r\\n     */\\r\\n    function setCurrentTime(uint256 time) external {\\r\\n        currentTime = time;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the currentTime variable set in the Timer.\\r\\n     * @return uint256 for the current Testable timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return currentTime;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4e0d9be5ba1850756eb638cff475080811dd1ca14ba9c99c8b8056f2ad75984f\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/AdminIdentifierLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n/**\\r\\n * @title Library to construct admin identifiers.\\r\\n */\\r\\nlibrary AdminIdentifierLib {\\r\\n    // Returns a UTF-8 identifier representing a particular admin proposal.\\r\\n    // The identifier is of the form \\\"Admin n\\\", where n is the proposal id provided.\\r\\n    function _constructIdentifier(uint256 id) internal pure returns (bytes32) {\\r\\n        bytes32 bytesId = _uintToUtf8(id);\\r\\n        return _addPrefix(bytesId, \\\"Admin \\\", 6);\\r\\n    }\\r\\n\\r\\n    // This method converts the integer `v` into a base-10, UTF-8 representation stored in a `bytes32` type.\\r\\n    // If the input cannot be represented by 32 base-10 digits, it returns only the highest 32 digits.\\r\\n    // This method is based off of this code: https://ethereum.stackexchange.com/a/6613/47801.\\r\\n    function _uintToUtf8(uint256 v) internal pure returns (bytes32) {\\r\\n        bytes32 ret;\\r\\n        if (v == 0) {\\r\\n            // Handle 0 case explicitly.\\r\\n            ret = \\\"0\\\";\\r\\n        } else {\\r\\n            // Constants.\\r\\n            uint256 bitsPerByte = 8;\\r\\n            uint256 base = 10; // Note: the output should be base-10. The below implementation will not work for bases > 10.\\r\\n            uint256 utf8NumberOffset = 48;\\r\\n            while (v > 0) {\\r\\n                // Downshift the entire bytes32 to allow the new digit to be added at the \\\"front\\\" of the bytes32, which\\r\\n                // translates to the beginning of the UTF-8 representation.\\r\\n                ret = ret >> bitsPerByte;\\r\\n\\r\\n                // Separate the last digit that remains in v by modding by the base of desired output representation.\\r\\n                uint256 leastSignificantDigit = v % base;\\r\\n\\r\\n                // Digits 0-9 are represented by 48-57 in UTF-8, so an offset must be added to create the character.\\r\\n                bytes32 utf8Digit = bytes32(leastSignificantDigit + utf8NumberOffset);\\r\\n\\r\\n                // The top byte of ret has already been cleared to make room for the new digit.\\r\\n                // Upshift by 31 bytes to put it in position, and OR it with ret to leave the other characters untouched.\\r\\n                ret |= utf8Digit << (31 * bitsPerByte);\\r\\n\\r\\n                // Divide v by the base to remove the digit that was just added.\\r\\n                v /= base;\\r\\n            }\\r\\n        }\\r\\n        return ret;\\r\\n    }\\r\\n\\r\\n    // This method takes two UTF-8 strings represented as bytes32 and outputs one as a prefixed by the other.\\r\\n    // `input` is the UTF-8 that should have the prefix prepended.\\r\\n    // `prefix` is the UTF-8 that should be prepended onto input.\\r\\n    // `prefixLength` is number of UTF-8 characters represented by `prefix`.\\r\\n    // Notes:\\r\\n    // 1. If the resulting UTF-8 is larger than 32 characters, then only the first 32 characters will be represented\\r\\n    //    by the bytes32 output.\\r\\n    // 2. If `prefix` has more characters than `prefixLength`, the function will produce an invalid result.\\r\\n    function _addPrefix(\\r\\n        bytes32 input,\\r\\n        bytes32 prefix,\\r\\n        uint256 prefixLength\\r\\n    ) internal pure returns (bytes32) {\\r\\n        // Downshift `input` to open space at the \\\"front\\\" of the bytes32\\r\\n        bytes32 shiftedInput = input >> (prefixLength * 8);\\r\\n        return shiftedInput | prefix;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa5dab9093cc4ffca70452f79f867fa9b29110210508f81a2ebcb872952009b59\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\r\\n */\\r\\nlibrary OracleInterfaces {\\r\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\r\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\r\\n    bytes32 public constant Store = \\\"Store\\\";\\r\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\r\\n    bytes32 public constant Registry = \\\"Registry\\\";\\r\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\r\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\r\\n    bytes32 public constant OptimisticOracleV2 = \\\"OptimisticOracleV2\\\";\\r\\n    bytes32 public constant OptimisticOracleV3 = \\\"OptimisticOracleV3\\\";\\r\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\r\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\r\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\r\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\r\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\r\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\r\\n */\\r\\nlibrary OptimisticOracleConstraints {\\r\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\r\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\r\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\r\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\r\\n    uint256 public constant ancillaryBytesLimit = 8192;\\r\\n}\\r\\n\",\"keccak256\":\"0xc91adf0214524d001e7d5eadc61c8e8406a62c97362e9c72fff121ff68676c00\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/GovernorV2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\nimport \\\"../../common/implementation/MultiCaller.sol\\\";\\r\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\r\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\r\\nimport \\\"../interfaces/IdentifierWhitelistInterface.sol\\\";\\r\\nimport \\\"../interfaces/OracleGovernanceInterface.sol\\\";\\r\\nimport \\\"./Constants.sol\\\";\\r\\nimport \\\"./AdminIdentifierLib.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Takes proposals for certain governance actions and allows UMA token holders to vote on them.\\r\\n */\\r\\ncontract GovernorV2 is MultiRole, Lockable, MultiCaller {\\r\\n    using Address for address;\\r\\n\\r\\n    /****************************************\\r\\n     *             GOVERNOR STATE           *\\r\\n     ****************************************/\\r\\n\\r\\n    // Permissioned governor rolls.\\r\\n    enum Roles {\\r\\n        Owner, // Can set the proposer.\\r\\n        Proposer, // Address that can make proposals.\\r\\n        EmergencyProposer // Address that can make emergency proposals.\\r\\n    }\\r\\n\\r\\n    // Structure to represent a transaction.\\r\\n    struct Transaction {\\r\\n        address to; // Target.\\r\\n        uint256 value; // value, in eth, to be sent as the msg.value.\\r\\n        bytes data; // payload data to be sent to the target. Would include encoded function call data usually.\\r\\n    }\\r\\n\\r\\n    // Structure to represent a governance proposal.\\r\\n    struct Proposal {\\r\\n        Transaction[] transactions; // Set of transactions to be sent, if the proposal is executed.\\r\\n        uint256 requestTime; // Time at which the proposal was proposed.\\r\\n        bytes ancillaryData; // Extra data appended to a proposal to enhance the voters information.\\r\\n    }\\r\\n\\r\\n    // Reference to UMA finder, used to find addresses of other UMA ecosystem contracts.\\r\\n    FinderInterface public immutable finder;\\r\\n\\r\\n    // Array of all proposals.\\r\\n    Proposal[] public proposals;\\r\\n\\r\\n    /****************************************\\r\\n     *                EVENTS                *\\r\\n     ****************************************/\\r\\n\\r\\n    event NewProposal(uint256 indexed id, Transaction[] transactions);\\r\\n\\r\\n    event ProposalExecuted(uint256 indexed id, uint256 transactionIndex);\\r\\n    event EmergencyExecution(address indexed to, uint256 value, bytes data);\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Governor contract.\\r\\n     * @param _finderAddress keeps track of all contracts within the system based on their interfaceName.\\r\\n     * @param _startingId the initial proposal id that the contract will begin incrementing from.\\r\\n     */\\r\\n    constructor(address _finderAddress, uint256 _startingId) {\\r\\n        finder = FinderInterface(_finderAddress);\\r\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\r\\n        _createExclusiveRole(uint256(Roles.Proposer), uint256(Roles.Owner), msg.sender);\\r\\n        _createExclusiveRole(uint256(Roles.EmergencyProposer), uint256(Roles.Owner), msg.sender);\\r\\n\\r\\n        // Ensure the startingId is not set unreasonably high to avoid it being set such that new proposals overwrite\\r\\n        // other storage slots in the contract.\\r\\n        uint256 maxStartingId = 10**18;\\r\\n        require(_startingId <= maxStartingId, \\\"Cannot set startingId larger than 10^18\\\");\\r\\n\\r\\n        // Sets the initial length of the array to the startingId. Modifying length directly has been disallowed in solidity 0.6.\\r\\n        assembly {\\r\\n            sstore(proposals.slot, _startingId)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *          PROPOSAL ACTIONS            *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Proposes a new governance action. Can only be called by the holder of the Proposer role.\\r\\n     * @param transactions list of transactions that are being proposed.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     */\\r\\n    function propose(Transaction[] memory transactions, bytes memory ancillaryData)\\r\\n        external\\r\\n        nonReentrant()\\r\\n        onlyRoleHolder(uint256(Roles.Proposer))\\r\\n    {\\r\\n        require(transactions.length > 0, \\\"Empty transactions array\\\");\\r\\n        uint256 id = proposals.length;\\r\\n        uint256 time = getCurrentTime();\\r\\n\\r\\n        // Note: doing all of this array manipulation manually is necessary because directly setting an array of\\r\\n        // structs in storage to an array of structs in memory is currently not implemented in solidity :/.\\r\\n\\r\\n        // Add a zero-initialized element to the proposals array.\\r\\n        proposals.push();\\r\\n\\r\\n        // Initialize the new proposal.\\r\\n        Proposal storage proposal = proposals[id];\\r\\n        proposal.requestTime = time;\\r\\n        proposal.ancillaryData = ancillaryData;\\r\\n\\r\\n        // Initialize the transaction array.\\r\\n        for (uint256 i = 0; i < transactions.length; i++) {\\r\\n            require(transactions[i].to != address(0), \\\"The `to` address cannot be 0x0\\\");\\r\\n            // If the transaction has any data with it the recipient must be a contract, not an EOA.\\r\\n            if (transactions[i].data.length > 0) {\\r\\n                require(transactions[i].to.isContract(), \\\"EOA can't accept tx with data\\\");\\r\\n            }\\r\\n            proposal.transactions.push(transactions[i]);\\r\\n        }\\r\\n\\r\\n        bytes32 identifier = AdminIdentifierLib._constructIdentifier(id);\\r\\n\\r\\n        // Request a vote on this proposal in the DVM.\\r\\n        _getOracle().requestGovernanceAction(identifier, time, ancillaryData);\\r\\n\\r\\n        emit NewProposal(id, transactions);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a proposed governance action that has been approved by voters.\\r\\n     * @dev This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.\\r\\n     * @param id unique id for the executed proposal.\\r\\n     * @param transactionIndex unique transaction index for the executed proposal.\\r\\n     */\\r\\n    function executeProposal(uint256 id, uint256 transactionIndex) external payable nonReentrant() {\\r\\n        Proposal storage proposal = proposals[id];\\r\\n        int256 price =\\r\\n            _getOracle().getPrice(\\r\\n                AdminIdentifierLib._constructIdentifier(id),\\r\\n                proposal.requestTime,\\r\\n                proposal.ancillaryData\\r\\n            );\\r\\n\\r\\n        Transaction memory transaction = proposal.transactions[transactionIndex];\\r\\n\\r\\n        require(\\r\\n            transactionIndex == 0 || proposal.transactions[transactionIndex - 1].to == address(0),\\r\\n            \\\"Previous tx not yet executed\\\"\\r\\n        );\\r\\n        require(transaction.to != address(0), \\\"Tx already executed\\\");\\r\\n        require(price != 0, \\\"Proposal was rejected\\\");\\r\\n        require(msg.value == transaction.value, \\\"Must send exact amount of ETH\\\");\\r\\n\\r\\n        // Delete the transaction before execution to avoid any potential re-entrancy issues.\\r\\n        delete proposal.transactions[transactionIndex];\\r\\n\\r\\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \\\"Tx execution failed\\\");\\r\\n\\r\\n        emit ProposalExecuted(id, transactionIndex);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Emergency execution method that bypasses the voting system to execute a transaction.\\r\\n     * @dev This can only be called by the EmergencyProposer.\\r\\n     * @param transaction a single transaction to execute.\\r\\n     */\\r\\n    function emergencyExecute(Transaction memory transaction)\\r\\n        external\\r\\n        payable\\r\\n        nonReentrant()\\r\\n        onlyRoleHolder(uint256(Roles.EmergencyProposer))\\r\\n    {\\r\\n        require(_executeCall(transaction.to, transaction.value, transaction.data), \\\"Tx execution failed\\\");\\r\\n\\r\\n        emit EmergencyExecution(transaction.to, transaction.value, transaction.data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the current block timestamp.\\r\\n     * @dev Can be overridden to control contract time.\\r\\n     * @return the current block timestamp.\\r\\n     */\\r\\n    function getCurrentTime() public view virtual returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *       GOVERNOR STATE GETTERS         *\\r\\n     ****************************************/\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the total number of proposals (includes executed and non-executed).\\r\\n     * @return uint256 representing the current number of proposals.\\r\\n     */\\r\\n    function numProposals() external view returns (uint256) {\\r\\n        return proposals.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the proposal data for a particular id.\\r\\n     * @dev after a proposal is executed, its data will be zeroed out, except for the request time and ancillary data.\\r\\n     * @param id uniquely identify the identity of the proposal.\\r\\n     * @return proposal struct containing transactions[] and requestTime.\\r\\n     */\\r\\n    function getProposal(uint256 id) external view returns (Proposal memory) {\\r\\n        return proposals[id];\\r\\n    }\\r\\n\\r\\n    /****************************************\\r\\n     *      PRIVATE GETTERS AND FUNCTIONS   *\\r\\n     ****************************************/\\r\\n\\r\\n    // Runs a function call on to, with value eth sent and data payload.\\r\\n    function _executeCall(\\r\\n        address to,\\r\\n        uint256 value,\\r\\n        bytes memory data\\r\\n    ) private returns (bool) {\\r\\n        // Mostly copied from:\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        // https://github.com/gnosis/safe-contracts/blob/59cfdaebcd8b87a0a32f87b50fead092c10d3a05/contracts/base/Executor.sol#L23-L31\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n\\r\\n        bool success;\\r\\n        assembly {\\r\\n            let inputData := add(data, 0x20)\\r\\n            let inputDataSize := mload(data)\\r\\n            success := call(gas(), to, value, inputData, inputDataSize, 0, 0)\\r\\n        }\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    // Returns the Voting contract address, named \\\"Oracle\\\" in the finder.\\r\\n    function _getOracle() private view returns (OracleGovernanceInterface) {\\r\\n        return OracleGovernanceInterface(finder.getImplementationAddress(OracleInterfaces.Oracle));\\r\\n    }\\r\\n\\r\\n    // Returns the IdentifierWhitelist contract address, named \\\"IdentifierWhitelist\\\" in the finder.\\r\\n    function _getIdentifierWhitelist() private view returns (IdentifierWhitelistInterface) {\\r\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4a61a8bd5b94fe568e3629ff1263f242719cd8d146d79a6b512321c4a43fc392\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"../GovernorV2.sol\\\";\\r\\nimport \\\"../../../common/implementation/Testable.sol\\\";\\r\\n\\r\\ncontract GovernorV2Test is GovernorV2, Testable {\\r\\n    constructor(\\r\\n        address _finderAddress,\\r\\n        uint256 _startingId,\\r\\n        address _timerAddress\\r\\n    ) GovernorV2(_finderAddress, _startingId) Testable(_timerAddress) {}\\r\\n\\r\\n    function getCurrentTime() public view override(GovernorV2, Testable) returns (uint256) {\\r\\n        return Testable.getCurrentTime();\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x3c47896b3b70282d68af2cfb284d50b3afa376e93becd729b9cfb3e5b8797b02\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\r\\n * @dev Examples are the Oracle or Store interfaces.\\r\\n */\\r\\ninterface FinderInterface {\\r\\n    /**\\r\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\r\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\r\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\r\\n     * @param interfaceName queried interface.\\r\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\r\\n     */\\r\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xad6668a10f243739d0bf5d077954119434f7b2cda129cb484ad6d359d158e5ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\r\\n */\\r\\ninterface IdentifierWhitelistInterface {\\r\\n    /**\\r\\n     * @notice Adds the provided identifier as a supported identifier.\\r\\n     * @dev Price requests using this identifier will succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function addSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Removes the identifier from the whitelist.\\r\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     */\\r\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Checks whether an identifier is on the whitelist.\\r\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\r\\n     * @return bool if the identifier is supported (or not).\\r\\n     */\\r\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x811cd273221c05eb94521f808a5603e3d12020336e4021c4ab93d188973fcee9\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleAncillaryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n\\r\\n    function requestPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n\\r\\n    function getPrice(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) public view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0x527e51a47c25f533cee60d7e2e2410b3d6a16b8dbdeca7d3fd734fabf76a109a\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleGovernanceInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./OracleInterface.sol\\\";\\r\\nimport \\\"./OracleAncillaryInterface.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing extending the Oracle interface with governance actions.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle extending governance actions. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleGovernanceInterface is OracleInterface, OracleAncillaryInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param ancillaryData arbitrary data appended to a price request to give the voters more info from the caller.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestGovernanceAction(\\r\\n        bytes32 identifier,\\r\\n        uint256 time,\\r\\n        bytes memory ancillaryData\\r\\n    ) external virtual;\\r\\n}\\r\\n\",\"keccak256\":\"0xaf51537a2ea58e7b5dc334de1ec72a85525bb3e16307f71a31c07357d4bd2814\",\"license\":\"AGPL-3.0-only\"},\"contracts/data-verification-mechanism/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Financial contract facing Oracle interface.\\r\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\r\\n */\\r\\nabstract contract OracleInterface {\\r\\n    /**\\r\\n     * @notice Enqueues a request (if a request isn't already present) for the given `identifier`, `time` pair.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     */\\r\\n    function requestPrice(bytes32 identifier, uint256 time) external virtual;\\r\\n\\r\\n    /**\\r\\n     * @notice Whether the price for `identifier` and `time` is available.\\r\\n     * @dev Time must be in the past and the identifier must be supported.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return bool if the DVM has resolved to a price for the given identifier and timestamp.\\r\\n     */\\r\\n    function hasPrice(bytes32 identifier, uint256 time) external view virtual returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the price for `identifier` and `time` if it has already been requested and resolved.\\r\\n     * @dev If the price is not available, the method reverts.\\r\\n     * @param identifier uniquely identifies the price requested. eg BTC/USD (encoded as bytes32) could be requested.\\r\\n     * @param time unix timestamp for the price request.\\r\\n     * @return int256 representing the resolved price for the given identifier and timestamp.\\r\\n     */\\r\\n    function getPrice(bytes32 identifier, uint256 time) external view virtual returns (int256);\\r\\n}\\r\\n\",\"keccak256\":\"0xa135756eabf06899395052031d8a2f617ef504477dc3037585f2b4ce0e3da22a\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a034620003c857601f6200240c38819003918201601f191683019291906001600160401b03841183851017620003cd578160609284926040968752833981010312620003c8576200005181620003e3565b6020916200006584848301519201620003e3565b90600160ff1994818681541617825560018060a01b0380951660805260009182805282825260ff9081818a8620015416620000a081620003f8565b620003845783805283835288842093818501828a8254161790558085556002809501983315620003345789546001600160a01b03199081163317909a558180528185528a82208301548416620000f681620003f8565b15620002db5782825281855283838c84200154166200011581620003f8565b6200029757828252818552858b8320848101858482541617905583815501338b82541617905581805283838c84200154166200015181620003f8565b15620002db5785825281855283838c84200154166200017081620003f8565b620002975790858b9281835282875283832090858083019182541617905582815501338b82541617905580805220015416620001ac81620003f8565b156200023f57670de0b6b3a76400008311620001ec5750551690600354161760035551611fd290816200041a8239608051818181610cc20152611eb90152f35b60849087519062461bcd60e51b82526004820152602760248201527f43616e6e6f7420736574207374617274696e674964206c6172676572207468616044820152660dc406260bc62760cb1b6064820152fd5b60849087519062461bcd60e51b82526004820152603c6024820152600080516020620023ec83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152fd5b8a5162461bcd60e51b815260048101869052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b8a5162461bcd60e51b815260048101869052603c6024820152600080516020620023ec83398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c65000000006064820152608490fd5b8a5162461bcd60e51b815260048101869052602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b885162461bcd60e51b815260048101849052601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c6500006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620003c857565b600311156200040357565b634e487b7160e01b600052602160045260246000fdfe60806040526004361015610013575b600080fd5b60003560e01c8063013cf08b146101675780631ab767121461015e5780631c39c38d1461015557806322f8e5661461014c57806329cb924d14610143578063400e39491461013a5780636be7658b1461013157806374d0a676146101285780637cdc1cb91461011f578063a7d0967c14610116578063aaa14ca31461010d578063ab3545e514610104578063ac9650d8146100fb578063b9a3c84c146100f2578063c7f758a8146100e9578063d4c408ac146100e05763d97c05be146100d857600080fd5b61000e610f1b565b5061000e610e66565b5061000e610da8565b5061000e610cab565b5061000e610c45565b5061000e610b88565b5061000e610aee565b5061000e610a35565b5061000e6108f8565b5061000e6107e9565b5061000e610715565b5061000e6106e5565b5061000e6106c1565b5061000e61063f565b5061000e610615565b5061000e61043a565b5061000e6103af565b50634e487b7160e01b600052603260045260246000fd5b6003906002548110156101c3575b6002600052027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b6101cb610170565b610195565b80548210156101ed575b6000526003602060002091020190600090565b6101f5610170565b6101da565b90600182811c9216801561022a575b602083101461021457565b634e487b7160e01b600052602260045260246000fd5b91607f1691610209565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161025e57604052565b610266610234565b604052565b606081019081106001600160401b0382111761025e57604052565b90601f801991011681019081106001600160401b0382111761025e57604052565b90604051918260008254926102bb846101fa565b90818452600194858116908160001461032a57506001146102e7575b50506102e592500383610286565b565b9093915060005260209081600020936000915b8183106103125750506102e5935082010138806102d7565b855488840185015294850194879450918301916102fa565b9150506102e594506020925060ff191682840152151560051b82010138806102d7565b60005b8381106103605750506000910152565b8181015183820152602001610350565b906020916103898151809281855285808601910161034d565b601f01601f1916010190565b6040906103ac939281528160208201520190610370565b90565b503461000e57602036600319011261000e5760043560025481101561000e576003906002600052026104267f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad07f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf83015492016102a7565b9061043660405192839283610395565b0390f35b50604036600319011261000e576004357ff758fc91e01b00ea6b4a6138756f7f28e021f9bf21db6dbf8c36c88eb737257a610590602435610479611afa565b61048860ff1960015416600155565b61058061057b61049786610187565b506104e460206104b46104a8611e8c565b6001600160a01b031690565b6104bd8a611b4c565b9060018501546040518095819482936338ce36ab60e11b845260028a019160048501611bb9565b03915afa9081156105fd575b6000916105cf575b5061053f61050f61050987856101d0565b50611c62565b91861580156105a6575b61052290611caf565b8251610538906001600160a01b03161515611cfb565b1515611d3d565b61056261055c86602084019461055786513414611d81565b6101d0565b90611dcd565b80516040906001600160a01b0316925191015191611e7a565b611e38565b6040519081529081906020820190565b0390a26105a4600160ff1981541617600155565b005b506105226105bc6105b689611c98565b866101d0565b50546001600160a01b0316159050610519565b6105f0915060203d81116105f6575b6105e88183610286565b810190611baa565b386104f8565b503d6105de565b610605611571565b6104f0565b600091031261000e57565b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57600060203660031901126106be5760035481906001600160a01b031680156106bb57803b156106bb57819060246040518094819363117c72b360e11b835260043560048401525af180156106ae575b61069f575b50604051f35b6106a89061024b565b38610699565b6106b6611571565b610694565b50fd5b80fd5b503461000e57600036600319011261000e5760206106dd611f35565b604051908152f35b503461000e57600036600319011261000e576020600254604051908152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5760243560043561073682610704565b6000918183528260205261075f600260ff60016040872001541661075981611280565b146114b9565b8183528260205261077d610778604085205433906113df565b611461565b818352826020526107b381600360408620016001600160a01b03909116600090815260209190915260409020805460ff19169055565b6040519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e5760408060031936011261000e5760243560043561080b82610704565b6000928184528360205261082d600260ff600184882001541661075981611280565b818452836020526108456107788286205433906113df565b81845260208490528084206001600160a01b038416939060030184156108b4576001600160a01b03909116600090815260209190915260409020805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b825162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b503461000e57604036600319011261000e57602061092360243561091b81610704565b6004356113df565b6040519015158152f35b6020906001600160401b038111610946575b60051b0190565b61094e610234565b61093f565b6020906001600160401b038111610970575b601f01601f19160190565b610978610234565b610965565b81601f8201121561000e5780359061099482610953565b926109a26040519485610286565b8284526020838301011161000e57816000926020809301838601378301015290565b91909160608184031261000e57604051906001600160401b03906060830182811184821017610a28575b604052829481356109fe81610704565b845260208201356020850152604082013592831161000e57604092610a23920161097d565b910152565b610a30610234565b6109ee565b503461000e57604036600319011261000e576001600160401b0360043581811161000e573660238201121561000e578060040135610a728161092d565b91610a806040519384610286565b8183526020908184016024809460051b8301019136831161000e57848101915b838310610ac85785358789821161000e57610ac26105a492369060040161097d565b9061157e565b823588811161000e578591610ae383928936918701016109c4565b815201920191610aa0565b503461000e57602036600319011261000e5760043560009080825281602052610b26600260ff60016040862001541661075981611280565b610b38610b3333836113df565b61151a565b808252602082815260408084203360008181526003909201909352819020805460ff19169055519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e57602036600319011261000e576020600435600090808252818352610bc6600160ff8160408620015416610bc081611280565b146113fd565b81528082526002604060018060a01b039220015416604051908152f35b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610c175750505050505090565b9091929394958480610c35600193603f198682030187528a51610370565b9801930193019194939290610c07565b503461000e57602036600319011261000e576001600160401b0360043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e57610436916024610c9f92016111c8565b60405191829182610be3565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90815180825260208092019182818360051b85019501936000915b848310610d1c5750505050505090565b9091929394958480610d5983856001950387528a51858060a01b038151168252838101518483015260408091015191606080928201520190610370565b9801930193019194939290610d0c565b906103ac91602081526040610d8a8351606060208501526080840190610cf1565b926020810151828401520151906060601f1982850301910152610370565b503461000e5760208060031936011261000e5760406060818051610dcb8161026b565b8281526000858201520152610de1600435610187565b5090805191610def8361026b565b805493610dfb8561092d565b94610e0884519687610286565b80865260008381528281208388015b838310610e49578888526001860154858901526104368888610e3b60028a016102a7565b818301525191829182610d69565b600385600192610e5885611c62565b815201920192019190610e17565b50602036600319011261000e576004356001600160401b03811161000e57610e929036906004016109c4565b610e9a611afa565b610ea960ff1960015416600155565b610eb5610b33336112a0565b7f30b23081131d845e535ea154259726b125804196aa1b2fcb38ac52e5fc34db3660018060a01b0380835116906020840193610f0560008087516040850196875191602083519301915af1611e38565b5116925190519061059060405192839283610395565b503461000e5760408060031936011261000e57602435600435610f3d82610704565b60009281845283602052610f5e600160ff81848820015416610bc081611280565b81845283602052610f766107788286205433906113df565b81845260208490528084206001600160a01b03841693906002018415610fdd5780546001600160a01b0319166001600160a01b03909216919091179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b825162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b906110378261092d565b6110446040519182610286565b8281528092611055601f199161092d565b019060005b82811061106657505050565b80606060208093850101520161105a565b50634e487b7160e01b600052601160045260246000fd5b600190600019811461109e570190565b6110a6611077565b0190565b91908110156110ec575b60051b81013590601e198136030182121561000e5701908135916001600160401b03831161000e57602001823603811361000e579190565b6110f4610170565b6110b4565b908092918237016000815290565b3d15611132573d9061111882610953565b916111266040519384610286565b82523d6000602084013e565b606090565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e57805161116981610953565b926111776040519485610286565b8184526020828401011161000e576103ac916020808501910161034d565b9060206103ac928181520190610370565b60209181518110156111bb575b60051b010190565b6111c3610170565b6111b3565b9190916111d48361102d565b9260005b8181106111e457505050565b6000806111f28385876110aa565b604093916112048551809381936110f9565b0390305af490611212611107565b918290156112415750509061123c9161122b82886111a6565b5261123681876111a6565b5061108e565b6111d8565b6044839293511061000e5761126761127c91600480940160248091518301019101611137565b925162461bcd60e51b81529283928301611195565b0390fd5b6003111561128a57565b634e487b7160e01b600052602160045260246000fd5b600260009081526020527fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56a547fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a5699060ff166112fa81611280565b600181036113185750600201546001600160a01b0391821691161490565b80611324600292611280565b1461135f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60ff91600361138092019060018060a01b0316600052602052604060002090565b541690565b600160009081526020527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d9060ff166112fa81611280565b6000526000602052604060002060ff6001820154166112fa81611280565b1561140457565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1561146857565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b156114c057565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1561152157565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b506040513d6000823e3d90fd5b90611587611afa565b61159660ff1960015416600155565b6115a2610b3333611385565b6115ae8251151561173f565b600254916115ba611f35565b906115c361178b565b50506115ce84610187565b50600183818301556115e3856002840161182e565b6000815b6116ae575b5050506115f884611b4c565b916116046104a8611e8c565b92833b1561000e577f082d2a29e61e3d0508e5617570bed4c7c58ae73d4719b31052d8638812bc4c0c9461167494611657936000809460405196879586948593639b21758d60e01b855260048501611acd565b03925af180156116a1575b611688575b5060405191829182611ae9565b0390a26102e5600160ff1981541617600155565b8061169561169b9261024b565b8061060a565b38611667565b6116a9611571565b611662565b835181101561173a57806116e36116dc6104a86116ce61171195896111a6565b51516001600160a01b031690565b151561190a565b60406116ef82876111a6565b51015151611717575b61170c61170582876111a6565b51856119a2565b61108e565b816115e7565b61173561173061172a6116ce84896111a6565b3b151590565b611956565b6116f8565b6115ec565b1561174657565b60405162461bcd60e51b815260206004820152601860248201527f456d707479207472616e73616374696f6e7320617272617900000000000000006044820152606490fd5b6117aa600254600160401b8110156117ae575b60018101600255610187565b9091565b6117b6610234565b61179e565b50634e487b7160e01b600052600060045260246000fd5b8181106117dd575050565b600081556001016117d2565b9190601f81116117f857505050565b6102e5926000526020600020906020601f840160051c83019310611824575b601f0160051c01906117d2565b9091508190611817565b91909182516001600160401b0381116118fd575b6118568161185084546101fa565b846117e9565b602080601f8311600114611892575081929394600092611887575b50508160011b916000199060031b1c1916179055565b015190503880611871565b90601f198316956118a885600052602060002090565b926000905b8882106118e5575050836001959697106118cc575b505050811b019055565b015160001960f88460031b161c191690553880806118c2565b806001859682949686015181550195019301906118ad565b611905610234565b611842565b1561191157565b60405162461bcd60e51b815260206004820152601e60248201527f5468652060746f6020616464726573732063616e6e6f742062652030783000006044820152606490fd5b1561195d57565b60405162461bcd60e51b815260206004820152601d60248201527f454f412063616e277420616363657074207478207769746820646174610000006044820152606490fd5b6119c18154600160401b811015611ac0575b60019283820181556101d0565b611ab3575b825181546001600160a01b0319166001600160a01b039190911617815560406002602092838601518582015501930151908151916001600160401b038311611aa6575b611a1d83611a1787546101fa565b876117e9565b81601f8411600114611a565750928293918392600094611a4b575b50501b916000199060031b1c1916179055565b015192503880611a38565b919083601f198116611a6d88600052602060002090565b946000905b88838310611a8c57505050106118cc57505050811b019055565b858701518855909601959485019487935090810190611a72565b611aae610234565b611a09565b611abb6117bb565b6119c6565b611ac8610234565b6119b4565b6103ac9392606092825260208201528160408201520190610370565b9060206103ac928181520190610cf1565b60ff6001541615611b0757565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60009080611b6e5750600360fc1b90505b60301c65020b236b4b7160d51b1790565b805b611b7a5750611b5d565b90600a9081830660308101809111611b9d575b60f81b9060081c17910480611b70565b611ba5611077565b611b8d565b9081602091031261000e575190565b90929192815260209283820152606060408201526000928254611bdb816101fa565b938460608501526001918281169081600014611c3d5750600114611c02575b505050505090565b6000908152828120949550935b858510611c29575050506080925001013880808080611bfa565b805485850160800152938201938101611c0f565b93505050506080935060ff929192191683830152151560051b01013880808080611bfa565b90604051611c6f8161026b565b82546001600160a01b0316815260018301546020820152918290604090610a23906002016102a7565b600019810191908211611ca757565b6102e5611077565b15611cb657565b60405162461bcd60e51b815260206004820152601c60248201527f50726576696f7573207478206e6f7420796574206578656375746564000000006044820152606490fd5b15611d0257565b60405162461bcd60e51b8152602060048201526013602482015272151e08185b1c9958591e48195e1958dd5d1959606a1b6044820152606490fd5b15611d4457565b60405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081dd85cc81c995a9958dd1959605a1b6044820152606490fd5b15611d8857565b60405162461bcd60e51b815260206004820152601d60248201527f4d7573742073656e6420657861637420616d6f756e74206f66204554480000006044820152606490fd5b90611e2b575b600260009182815582600182015501611dec81546101fa565b80611df657505050565b601f8111600114611e05575055565b81835260208320611e2191601f0160051c8101906001016117d2565b8160208120915555565b611e336117bb565b611dd3565b15611e3f57565b60405162461bcd60e51b8152602060048201526013602482015272151e08195e1958dd5d1a5bdb8819985a5b1959606a1b6044820152606490fd5b916000928392602083519301915af190565b6040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03906020816024817f000000000000000000000000000000000000000000000000000000000000000086165afa908115611f28575b600091611ef057501690565b906020823d8211611f20575b81611f0960209383610286565b810103126106be575051611f1c81610704565b1690565b3d9150611efc565b611f30611571565b611ee4565b6003546001600160a01b03168015611f97576020600491604051928380926329cb924d60e01b82525afa908115611f8a575b600091611f72575090565b6103ac915060203d81116105f6576105e88183610286565b611f92611571565b611f67565b50429056fea2646970667358221220dfb1a05240d84d98fc3bae48bfffc6616cfaf756506ca887a466ae466e80282864736f6c63430008100033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65",
  "deployedBytecode": "0x60806040526004361015610013575b600080fd5b60003560e01c8063013cf08b146101675780631ab767121461015e5780631c39c38d1461015557806322f8e5661461014c57806329cb924d14610143578063400e39491461013a5780636be7658b1461013157806374d0a676146101285780637cdc1cb91461011f578063a7d0967c14610116578063aaa14ca31461010d578063ab3545e514610104578063ac9650d8146100fb578063b9a3c84c146100f2578063c7f758a8146100e9578063d4c408ac146100e05763d97c05be146100d857600080fd5b61000e610f1b565b5061000e610e66565b5061000e610da8565b5061000e610cab565b5061000e610c45565b5061000e610b88565b5061000e610aee565b5061000e610a35565b5061000e6108f8565b5061000e6107e9565b5061000e610715565b5061000e6106e5565b5061000e6106c1565b5061000e61063f565b5061000e610615565b5061000e61043a565b5061000e6103af565b50634e487b7160e01b600052603260045260246000fd5b6003906002548110156101c3575b6002600052027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0190600090565b6101cb610170565b610195565b80548210156101ed575b6000526003602060002091020190600090565b6101f5610170565b6101da565b90600182811c9216801561022a575b602083101461021457565b634e487b7160e01b600052602260045260246000fd5b91607f1691610209565b50634e487b7160e01b600052604160045260246000fd5b6001600160401b03811161025e57604052565b610266610234565b604052565b606081019081106001600160401b0382111761025e57604052565b90601f801991011681019081106001600160401b0382111761025e57604052565b90604051918260008254926102bb846101fa565b90818452600194858116908160001461032a57506001146102e7575b50506102e592500383610286565b565b9093915060005260209081600020936000915b8183106103125750506102e5935082010138806102d7565b855488840185015294850194879450918301916102fa565b9150506102e594506020925060ff191682840152151560051b82010138806102d7565b60005b8381106103605750506000910152565b8181015183820152602001610350565b906020916103898151809281855285808601910161034d565b601f01601f1916010190565b6040906103ac939281528160208201520190610370565b90565b503461000e57602036600319011261000e5760043560025481101561000e576003906002600052026104267f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad07f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf83015492016102a7565b9061043660405192839283610395565b0390f35b50604036600319011261000e576004357ff758fc91e01b00ea6b4a6138756f7f28e021f9bf21db6dbf8c36c88eb737257a610590602435610479611afa565b61048860ff1960015416600155565b61058061057b61049786610187565b506104e460206104b46104a8611e8c565b6001600160a01b031690565b6104bd8a611b4c565b9060018501546040518095819482936338ce36ab60e11b845260028a019160048501611bb9565b03915afa9081156105fd575b6000916105cf575b5061053f61050f61050987856101d0565b50611c62565b91861580156105a6575b61052290611caf565b8251610538906001600160a01b03161515611cfb565b1515611d3d565b61056261055c86602084019461055786513414611d81565b6101d0565b90611dcd565b80516040906001600160a01b0316925191015191611e7a565b611e38565b6040519081529081906020820190565b0390a26105a4600160ff1981541617600155565b005b506105226105bc6105b689611c98565b866101d0565b50546001600160a01b0316159050610519565b6105f0915060203d81116105f6575b6105e88183610286565b810190611baa565b386104f8565b503d6105de565b610605611571565b6104f0565b600091031261000e57565b503461000e57600036600319011261000e576003546040516001600160a01b039091168152602090f35b503461000e57600060203660031901126106be5760035481906001600160a01b031680156106bb57803b156106bb57819060246040518094819363117c72b360e11b835260043560048401525af180156106ae575b61069f575b50604051f35b6106a89061024b565b38610699565b6106b6611571565b610694565b50fd5b80fd5b503461000e57600036600319011261000e5760206106dd611f35565b604051908152f35b503461000e57600036600319011261000e576020600254604051908152f35b6001600160a01b0381160361000e57565b503461000e57604036600319011261000e5760243560043561073682610704565b6000918183528260205261075f600260ff60016040872001541661075981611280565b146114b9565b8183528260205261077d610778604085205433906113df565b611461565b818352826020526107b381600360408620016001600160a01b03909116600090815260209190915260409020805460ff19169055565b6040519133916001600160a01b0316907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e5760408060031936011261000e5760243560043561080b82610704565b6000928184528360205261082d600260ff600184882001541661075981611280565b818452836020526108456107788286205433906113df565b81845260208490528084206001600160a01b038416939060030184156108b4576001600160a01b03909116600090815260209190915260409020805460ff19166001179055519133917f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f8585a4f35b825162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c65006044820152606490fd5b503461000e57604036600319011261000e57602061092360243561091b81610704565b6004356113df565b6040519015158152f35b6020906001600160401b038111610946575b60051b0190565b61094e610234565b61093f565b6020906001600160401b038111610970575b601f01601f19160190565b610978610234565b610965565b81601f8201121561000e5780359061099482610953565b926109a26040519485610286565b8284526020838301011161000e57816000926020809301838601378301015290565b91909160608184031261000e57604051906001600160401b03906060830182811184821017610a28575b604052829481356109fe81610704565b845260208201356020850152604082013592831161000e57604092610a23920161097d565b910152565b610a30610234565b6109ee565b503461000e57604036600319011261000e576001600160401b0360043581811161000e573660238201121561000e578060040135610a728161092d565b91610a806040519384610286565b8183526020908184016024809460051b8301019136831161000e57848101915b838310610ac85785358789821161000e57610ac26105a492369060040161097d565b9061157e565b823588811161000e578591610ae383928936918701016109c4565b815201920191610aa0565b503461000e57602036600319011261000e5760043560009080825281602052610b26600260ff60016040862001541661075981611280565b610b38610b3333836113df565b61151a565b808252602082815260408084203360008181526003909201909352819020805460ff19169055519181907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af8585a4f35b503461000e57602036600319011261000e576020600435600090808252818352610bc6600160ff8160408620015416610bc081611280565b146113fd565b81528082526002604060018060a01b039220015416604051908152f35b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610c175750505050505090565b9091929394958480610c35600193603f198682030187528a51610370565b9801930193019194939290610c07565b503461000e57602036600319011261000e576001600160401b0360043581811161000e573660238201121561000e57806004013591821161000e573660248360051b8301011161000e57610436916024610c9f92016111c8565b60405191829182610be3565b503461000e57600036600319011261000e576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b90815180825260208092019182818360051b85019501936000915b848310610d1c5750505050505090565b9091929394958480610d5983856001950387528a51858060a01b038151168252838101518483015260408091015191606080928201520190610370565b9801930193019194939290610d0c565b906103ac91602081526040610d8a8351606060208501526080840190610cf1565b926020810151828401520151906060601f1982850301910152610370565b503461000e5760208060031936011261000e5760406060818051610dcb8161026b565b8281526000858201520152610de1600435610187565b5090805191610def8361026b565b805493610dfb8561092d565b94610e0884519687610286565b80865260008381528281208388015b838310610e49578888526001860154858901526104368888610e3b60028a016102a7565b818301525191829182610d69565b600385600192610e5885611c62565b815201920192019190610e17565b50602036600319011261000e576004356001600160401b03811161000e57610e929036906004016109c4565b610e9a611afa565b610ea960ff1960015416600155565b610eb5610b33336112a0565b7f30b23081131d845e535ea154259726b125804196aa1b2fcb38ac52e5fc34db3660018060a01b0380835116906020840193610f0560008087516040850196875191602083519301915af1611e38565b5116925190519061059060405192839283610395565b503461000e5760408060031936011261000e57602435600435610f3d82610704565b60009281845283602052610f5e600160ff81848820015416610bc081611280565b81845283602052610f766107788286205433906113df565b81845260208490528084206001600160a01b03841693906002018415610fdd5780546001600160a01b0319166001600160a01b03909216919091179055519133917f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e7468585a4f35b825162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b6064820152608490fd5b906110378261092d565b6110446040519182610286565b8281528092611055601f199161092d565b019060005b82811061106657505050565b80606060208093850101520161105a565b50634e487b7160e01b600052601160045260246000fd5b600190600019811461109e570190565b6110a6611077565b0190565b91908110156110ec575b60051b81013590601e198136030182121561000e5701908135916001600160401b03831161000e57602001823603811361000e579190565b6110f4610170565b6110b4565b908092918237016000815290565b3d15611132573d9061111882610953565b916111266040519384610286565b82523d6000602084013e565b606090565b60208183031261000e578051906001600160401b03821161000e570181601f8201121561000e57805161116981610953565b926111776040519485610286565b8184526020828401011161000e576103ac916020808501910161034d565b9060206103ac928181520190610370565b60209181518110156111bb575b60051b010190565b6111c3610170565b6111b3565b9190916111d48361102d565b9260005b8181106111e457505050565b6000806111f28385876110aa565b604093916112048551809381936110f9565b0390305af490611212611107565b918290156112415750509061123c9161122b82886111a6565b5261123681876111a6565b5061108e565b6111d8565b6044839293511061000e5761126761127c91600480940160248091518301019101611137565b925162461bcd60e51b81529283928301611195565b0390fd5b6003111561128a57565b634e487b7160e01b600052602160045260246000fd5b600260009081526020527fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a56a547fabbb5caa7dda850e60932de0934eb1f9d0f59695050f761dc64e443e5030a5699060ff166112fa81611280565b600181036113185750600201546001600160a01b0391821691161490565b80611324600292611280565b1461135f5760405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b6044820152606490fd5b60ff91600361138092019060018060a01b0316600052602052604060002090565b541690565b600160009081526020527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7e547fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d9060ff166112fa81611280565b6000526000602052604060002060ff6001820154166112fa81611280565b1561140457565b60405162461bcd60e51b815260206004820152602f60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526e204578636c757369766520726f6c6560881b6064820152608490fd5b1561146857565b60405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60448201526330b3b2b960e11b6064820152608490fd5b156114c057565b60405162461bcd60e51b815260206004820152602c60248201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460448201526b2053686172656420726f6c6560a01b6064820152608490fd5b1561152157565b60405162461bcd60e51b815260206004820152602260248201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6044820152616c6560f01b6064820152608490fd5b506040513d6000823e3d90fd5b90611587611afa565b61159660ff1960015416600155565b6115a2610b3333611385565b6115ae8251151561173f565b600254916115ba611f35565b906115c361178b565b50506115ce84610187565b50600183818301556115e3856002840161182e565b6000815b6116ae575b5050506115f884611b4c565b916116046104a8611e8c565b92833b1561000e577f082d2a29e61e3d0508e5617570bed4c7c58ae73d4719b31052d8638812bc4c0c9461167494611657936000809460405196879586948593639b21758d60e01b855260048501611acd565b03925af180156116a1575b611688575b5060405191829182611ae9565b0390a26102e5600160ff1981541617600155565b8061169561169b9261024b565b8061060a565b38611667565b6116a9611571565b611662565b835181101561173a57806116e36116dc6104a86116ce61171195896111a6565b51516001600160a01b031690565b151561190a565b60406116ef82876111a6565b51015151611717575b61170c61170582876111a6565b51856119a2565b61108e565b816115e7565b61173561173061172a6116ce84896111a6565b3b151590565b611956565b6116f8565b6115ec565b1561174657565b60405162461bcd60e51b815260206004820152601860248201527f456d707479207472616e73616374696f6e7320617272617900000000000000006044820152606490fd5b6117aa600254600160401b8110156117ae575b60018101600255610187565b9091565b6117b6610234565b61179e565b50634e487b7160e01b600052600060045260246000fd5b8181106117dd575050565b600081556001016117d2565b9190601f81116117f857505050565b6102e5926000526020600020906020601f840160051c83019310611824575b601f0160051c01906117d2565b9091508190611817565b91909182516001600160401b0381116118fd575b6118568161185084546101fa565b846117e9565b602080601f8311600114611892575081929394600092611887575b50508160011b916000199060031b1c1916179055565b015190503880611871565b90601f198316956118a885600052602060002090565b926000905b8882106118e5575050836001959697106118cc575b505050811b019055565b015160001960f88460031b161c191690553880806118c2565b806001859682949686015181550195019301906118ad565b611905610234565b611842565b1561191157565b60405162461bcd60e51b815260206004820152601e60248201527f5468652060746f6020616464726573732063616e6e6f742062652030783000006044820152606490fd5b1561195d57565b60405162461bcd60e51b815260206004820152601d60248201527f454f412063616e277420616363657074207478207769746820646174610000006044820152606490fd5b6119c18154600160401b811015611ac0575b60019283820181556101d0565b611ab3575b825181546001600160a01b0319166001600160a01b039190911617815560406002602092838601518582015501930151908151916001600160401b038311611aa6575b611a1d83611a1787546101fa565b876117e9565b81601f8411600114611a565750928293918392600094611a4b575b50501b916000199060031b1c1916179055565b015192503880611a38565b919083601f198116611a6d88600052602060002090565b946000905b88838310611a8c57505050106118cc57505050811b019055565b858701518855909601959485019487935090810190611a72565b611aae610234565b611a09565b611abb6117bb565b6119c6565b611ac8610234565b6119b4565b6103ac9392606092825260208201528160408201520190610370565b9060206103ac928181520190610cf1565b60ff6001541615611b0757565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60009080611b6e5750600360fc1b90505b60301c65020b236b4b7160d51b1790565b805b611b7a5750611b5d565b90600a9081830660308101809111611b9d575b60f81b9060081c17910480611b70565b611ba5611077565b611b8d565b9081602091031261000e575190565b90929192815260209283820152606060408201526000928254611bdb816101fa565b938460608501526001918281169081600014611c3d5750600114611c02575b505050505090565b6000908152828120949550935b858510611c29575050506080925001013880808080611bfa565b805485850160800152938201938101611c0f565b93505050506080935060ff929192191683830152151560051b01013880808080611bfa565b90604051611c6f8161026b565b82546001600160a01b0316815260018301546020820152918290604090610a23906002016102a7565b600019810191908211611ca757565b6102e5611077565b15611cb657565b60405162461bcd60e51b815260206004820152601c60248201527f50726576696f7573207478206e6f7420796574206578656375746564000000006044820152606490fd5b15611d0257565b60405162461bcd60e51b8152602060048201526013602482015272151e08185b1c9958591e48195e1958dd5d1959606a1b6044820152606490fd5b15611d4457565b60405162461bcd60e51b8152602060048201526015602482015274141c9bdc1bdcd85b081dd85cc81c995a9958dd1959605a1b6044820152606490fd5b15611d8857565b60405162461bcd60e51b815260206004820152601d60248201527f4d7573742073656e6420657861637420616d6f756e74206f66204554480000006044820152606490fd5b90611e2b575b600260009182815582600182015501611dec81546101fa565b80611df657505050565b601f8111600114611e05575055565b81835260208320611e2191601f0160051c8101906001016117d2565b8160208120915555565b611e336117bb565b611dd3565b15611e3f57565b60405162461bcd60e51b8152602060048201526013602482015272151e08195e1958dd5d1a5bdb8819985a5b1959606a1b6044820152606490fd5b916000928392602083519301915af190565b6040516302abf57960e61b8152654f7261636c6560d01b60048201526001600160a01b03906020816024817f000000000000000000000000000000000000000000000000000000000000000086165afa908115611f28575b600091611ef057501690565b906020823d8211611f20575b81611f0960209383610286565b810103126106be575051611f1c81610704565b1690565b3d9150611efc565b611f30611571565b611ee4565b6003546001600160a01b03168015611f97576020600491604051928380926329cb924d60e01b82525afa908115611f8a575b600091611f72575090565b6103ac915060203d81116105f6576105e88183610286565b611f92611571565b611f67565b50429056fea2646970667358221220dfb1a05240d84d98fc3bae48bfffc6616cfaf756506ca887a466ae466e80282864736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "newMember": "the new SharedRole member.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "emergencyExecute((address,uint256,bytes))": {
        "details": "This can only be called by the EmergencyProposer.",
        "params": {
          "transaction": "a single transaction to execute."
        }
      },
      "executeProposal(uint256,uint256)": {
        "details": "This can be called by any address. Caller is expected to send enough ETH to execute payable transactions.",
        "params": {
          "id": "unique id for the executed proposal.",
          "transactionIndex": "unique transaction index for the executed proposal."
        }
      },
      "getMember(uint256)": {
        "details": "Reverts if `roleId` does not represent an initialized, exclusive role.",
        "params": {
          "roleId": "the ExclusiveRole membership to check."
        },
        "returns": {
          "_0": "the address of the current ExclusiveRole member."
        }
      },
      "getProposal(uint256)": {
        "details": "after a proposal is executed, its data will be zeroed out, except for the request time and ancillary data.",
        "params": {
          "id": "uniquely identify the identity of the proposal."
        },
        "returns": {
          "_0": "proposal struct containing transactions[] and requestTime."
        }
      },
      "holdsRole(uint256,address)": {
        "details": "Reverts if roleId does not correspond to an initialized role.",
        "params": {
          "memberToCheck": "the address to check.",
          "roleId": "the Role to check."
        },
        "returns": {
          "_0": "True if `memberToCheck` is a member of `roleId`."
        }
      },
      "numProposals()": {
        "returns": {
          "_0": "uint256 representing the current number of proposals."
        }
      },
      "propose((address,uint256,bytes)[],bytes)": {
        "params": {
          "ancillaryData": "arbitrary data appended to a price request to give the voters more info from the caller.",
          "transactions": "list of transactions that are being proposed."
        }
      },
      "removeMember(uint256,address)": {
        "details": "Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the managing role for `roleId`.",
        "params": {
          "memberToRemove": "the current SharedRole member to remove.",
          "roleId": "the SharedRole membership to modify."
        }
      },
      "renounceMembership(uint256)": {
        "details": "Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an initialized, SharedRole.",
        "params": {
          "roleId": "the SharedRole membership to modify."
        }
      },
      "resetMember(uint256,address)": {
        "details": "Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an initialized, ExclusiveRole.",
        "params": {
          "newMember": "the new ExclusiveRole member.",
          "roleId": "the ExclusiveRole membership to modify."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addMember(uint256,address)": {
        "notice": "Adds `newMember` to the shared role, `roleId`."
      },
      "emergencyExecute((address,uint256,bytes))": {
        "notice": "Emergency execution method that bypasses the voting system to execute a transaction."
      },
      "executeProposal(uint256,uint256)": {
        "notice": "Executes a proposed governance action that has been approved by voters."
      },
      "getMember(uint256)": {
        "notice": "Gets the current holder of the exclusive role, `roleId`."
      },
      "getProposal(uint256)": {
        "notice": "Gets the proposal data for a particular id."
      },
      "holdsRole(uint256,address)": {
        "notice": "Whether `memberToCheck` is a member of roleId."
      },
      "numProposals()": {
        "notice": "Gets the total number of proposals (includes executed and non-executed)."
      },
      "propose((address,uint256,bytes)[],bytes)": {
        "notice": "Proposes a new governance action. Can only be called by the holder of the Proposer role."
      },
      "removeMember(uint256,address)": {
        "notice": "Removes `memberToRemove` from the shared role, `roleId`."
      },
      "renounceMembership(uint256)": {
        "notice": "Removes caller from the role, `roleId`."
      },
      "resetMember(uint256,address)": {
        "notice": "Changes the exclusive role holder of `roleId` to `newMember`."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16654,
        "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
        "label": "roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Role)16649_storage)"
      },
      {
        "astId": 16304,
        "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
        "label": "_notEntered",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 26922,
        "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
        "label": "proposals",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Proposal)26915_storage)dyn_storage"
      },
      {
        "astId": 17751,
        "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
        "label": "timerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Proposal)26915_storage)dyn_storage": {
        "base": "t_struct(Proposal)26915_storage",
        "encoding": "dynamic_array",
        "label": "struct GovernorV2.Proposal[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transaction)26906_storage)dyn_storage": {
        "base": "t_struct(Transaction)26906_storage",
        "encoding": "dynamic_array",
        "label": "struct GovernorV2.Transaction[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(RoleType)16637": {
        "encoding": "inplace",
        "label": "enum MultiRole.RoleType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Role)16649_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiRole.Role)",
        "numberOfBytes": "32",
        "value": "t_struct(Role)16649_storage"
      },
      "t_struct(Proposal)26915_storage": {
        "encoding": "inplace",
        "label": "struct GovernorV2.Proposal",
        "members": [
          {
            "astId": 26910,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "transactions",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transaction)26906_storage)dyn_storage"
          },
          {
            "astId": 26912,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "requestTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26914,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "ancillaryData",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Role)16649_storage": {
        "encoding": "inplace",
        "label": "struct MultiRole.Role",
        "members": [
          {
            "astId": 16639,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "managingRole",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 16642,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "roleType",
            "offset": 0,
            "slot": "1",
            "type": "t_enum(RoleType)16637"
          },
          {
            "astId": 16645,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "exclusiveRoleMembership",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(RoleMembership)16460_storage"
          },
          {
            "astId": 16648,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "sharedRoleMembership",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(RoleMembership)16533_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleMembership)16460_storage": {
        "encoding": "inplace",
        "label": "struct Exclusive.RoleMembership",
        "members": [
          {
            "astId": 16459,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "member",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleMembership)16533_storage": {
        "encoding": "inplace",
        "label": "struct Shared.RoleMembership",
        "members": [
          {
            "astId": 16532,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Transaction)26906_storage": {
        "encoding": "inplace",
        "label": "struct GovernorV2.Transaction",
        "members": [
          {
            "astId": 26901,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "to",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 26903,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 26905,
            "contract": "contracts/data-verification-mechanism/implementation/test/GovernorV2Test.sol:GovernorV2Test",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}