{
  "address": "0xEE2a8513C6e1836f2cA87D0C5a788C47114Ee1eF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_crossDomainMessenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_childChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childMessenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetHub",
          "type": "address"
        }
      ],
      "name": "MessageReceivedFromChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetSpoke",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "childMessenger",
          "type": "address"
        }
      ],
      "name": "MessageSentToChild",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "childMessenger",
          "type": "address"
        }
      ],
      "name": "SetChildMessenger",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newDefaultGasLimit",
          "type": "uint32"
        }
      ],
      "name": "SetDefaultGasLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governorHub",
          "type": "address"
        }
      ],
      "name": "SetGovernorHub",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "governorSpoke",
          "type": "address"
        }
      ],
      "name": "SetGovernorSpoke",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleHub",
          "type": "address"
        }
      ],
      "name": "SetOracleHub",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleSpoke",
          "type": "address"
        }
      ],
      "name": "SetOracleSpoke",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "childChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "childMessenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getL1CallValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorSpoke",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messenger",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleSpoke",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromCrossChainChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newDefaultGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setChildDefaultGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newChildMessenger",
          "type": "address"
        }
      ],
      "name": "setChildMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleSpoke",
          "type": "address"
        }
      ],
      "name": "setChildOracleSpoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newParentMessenger",
          "type": "address"
        }
      ],
      "name": "setChildParentMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newDefaultGasLimit",
          "type": "uint32"
        }
      ],
      "name": "setDefaultGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernorHub",
          "type": "address"
        }
      ],
      "name": "setGovernorHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernorSpoke",
          "type": "address"
        }
      ],
      "name": "setGovernorSpoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleHub",
          "type": "address"
        }
      ],
      "name": "setOracleHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleSpoke",
          "type": "address"
        }
      ],
      "name": "setOracleSpoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb81244a29f95f79b720e4b05d563d0f042dbb2e68ba676e15537d07fa715f2ad",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0xEE2a8513C6e1836f2cA87D0C5a788C47114Ee1eF",
    "transactionIndex": 51,
    "gasUsed": "949849",
    "logsBloom": "0x
    "blockHash": "0xe675015d8070971d6507634e7e53a448fc046738cc9db7c4d81e5c4ba736805f",
    "transactionHash": "0xb81244a29f95f79b720e4b05d563d0f042dbb2e68ba676e15537d07fa715f2ad",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 6161936,
        "transactionHash": "0xb81244a29f95f79b720e4b05d563d0f042dbb2e68ba676e15537d07fa715f2ad",
        "address": "0xEE2a8513C6e1836f2cA87D0C5a788C47114Ee1eF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 152,
        "blockHash": "0xe675015d8070971d6507634e7e53a448fc046738cc9db7c4d81e5c4ba736805f"
      }
    ],
    "blockNumber": 6161936,
    "cumulativeGasUsed": "10451248",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5D4472f31Bd9385709ec61305AFc749F0fA8e9d0",
    81457
  ],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_crossDomainMessenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_childChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childMessenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetHub\",\"type\":\"address\"}],\"name\":\"MessageReceivedFromChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetSpoke\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childMessenger\",\"type\":\"address\"}],\"name\":\"MessageSentToChild\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"childMessenger\",\"type\":\"address\"}],\"name\":\"SetChildMessenger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newDefaultGasLimit\",\"type\":\"uint32\"}],\"name\":\"SetDefaultGasLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governorHub\",\"type\":\"address\"}],\"name\":\"SetGovernorHub\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"governorSpoke\",\"type\":\"address\"}],\"name\":\"SetGovernorSpoke\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleHub\",\"type\":\"address\"}],\"name\":\"SetOracleHub\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleSpoke\",\"type\":\"address\"}],\"name\":\"SetOracleSpoke\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"childChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"childMessenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getL1CallValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorSpoke\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messenger\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleSpoke\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromCrossChainChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMessageToChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newDefaultGasLimit\",\"type\":\"uint32\"}],\"name\":\"setChildDefaultGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newChildMessenger\",\"type\":\"address\"}],\"name\":\"setChildMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleSpoke\",\"type\":\"address\"}],\"name\":\"setChildOracleSpoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newParentMessenger\",\"type\":\"address\"}],\"name\":\"setChildParentMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newDefaultGasLimit\",\"type\":\"uint32\"}],\"name\":\"setDefaultGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernorHub\",\"type\":\"address\"}],\"name\":\"setGovernorHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernorSpoke\",\"type\":\"address\"}],\"name\":\"setGovernorSpoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleHub\",\"type\":\"address\"}],\"name\":\"setOracleHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleSpoke\",\"type\":\"address\"}],\"name\":\"setOracleSpoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is ownable and should be owned by the DVM governor.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_childChainId\":\"The chain id of the Optimism L2 network this messenger should connect to.*\",\"_crossDomainMessenger\":\"The address of the Optimism cross domain messenger contract.\"}},\"getL1CallValue()\":{\"returns\":{\"_0\":\"The amount of ETH required for a caller to pass as msg.value when calling `sendMessageToChild`.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processMessageFromCrossChainChild(bytes)\":{\"details\":\"The caller must be the the child messenger, sent over the canonical message bridge.Note that only the OracleHub can receive messages from the child messenger. Therefore we can always forward these messages to this contract. The OracleHub must implement processMessageFromChild to handle this message.\",\"params\":{\"data\":\"data message sent from the child messenger. Should be an encoded function call or packed data.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendMessageToChild(bytes)\":{\"details\":\"The caller must be the either the OracleHub or the GovernorHub. This is to send either a price or initiate a governance action to the OracleSpoke or GovernorSpoke on the child network.The recipient of this message is the child messenger. The messenger must implement processMessageFromParent which then forwards the data to the target either the OracleSpoke or the governorSpoke depending on the caller.\",\"params\":{\"data\":\"data message sent to the child messenger. Should be an encoded function call or packed data.\"}},\"setChildDefaultGasLimit(uint32)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newDefaultGasLimit\":\"the new default gas limit set on L2.\"}},\"setChildMessenger(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newChildMessenger\":\"address of the new child messenger, deployed on L2.\"}},\"setChildOracleSpoke(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newOracleSpoke\":\"the new oracle spoke address set on L2.\"}},\"setChildParentMessenger(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newParentMessenger\":\"the new parent messenger contract to be set on L2.\"}},\"setDefaultGasLimit(uint32)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newDefaultGasLimit\":\"the new L2 gas limit to be set.\"}},\"setGovernorHub(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newGovernorHub\":\"address of the new governor hub, deployed on L1 Ethereum.\"}},\"setGovernorSpoke(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newGovernorSpoke\":\"address of the new governor spoke, deployed on L2.\"}},\"setOracleHub(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newOracleHub\":\"address of the new oracle hub, deployed on L1 Ethereum.\"}},\"setOracleSpoke(address)\":{\"details\":\"The caller of this function must be the owner. This should be set to the DVM governor.\",\"params\":{\"newOracleSpoke\":\"address of the new oracle spoke, deployed on L2.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Construct the Optimism_ParentMessenger contract.\"},\"getL1CallValue()\":{\"notice\":\"Returns the amount of ETH required for a caller to pass as msg.value when calling `sendMessageToChild`.\"},\"processMessageFromCrossChainChild(bytes)\":{\"notice\":\"Process a received message from the child messenger via the canonical message bridge.\"},\"sendMessageToChild(bytes)\":{\"notice\":\"Sends a message to the child messenger via the canonical message bridge.\"},\"setChildDefaultGasLimit(uint32)\":{\"notice\":\"Changes the Optimism_ChildMessenger default gas limit on L2 via the child messenger.\"},\"setChildMessenger(address)\":{\"notice\":\"Changes the stored address of the child messenger, deployed on L2.\"},\"setChildOracleSpoke(address)\":{\"notice\":\"Changes the address of the oracle spoke on L2 via the child messenger.\"},\"setChildParentMessenger(address)\":{\"notice\":\"Changes the address of the parent messenger on L2 via the child messenger.\"},\"setDefaultGasLimit(uint32)\":{\"notice\":\"Changes the default gas limit that is sent along with transactions to Optimism.\"},\"setGovernorHub(address)\":{\"notice\":\"Changes the stored address of the Governor hub, deployed on L1.\"},\"setGovernorSpoke(address)\":{\"notice\":\"Changes the stored address of the governor spoke, deployed on L2.\"},\"setOracleHub(address)\":{\"notice\":\"Changes the stored address of the Oracle hub, deployed on L1.\"},\"setOracleSpoke(address)\":{\"notice\":\"Changes the stored address of the oracle spoke, deployed on L2.\"}},\"notice\":\"Sends cross chain messages from Ethereum L1 to Optimism L2 network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol\":\"Optimism_ParentMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@eth-optimism/contracts/libraries/bridge/CrossDomainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/* Interface Imports */\\nimport { ICrossDomainMessenger } from \\\"./ICrossDomainMessenger.sol\\\";\\n\\n/**\\n * @title CrossDomainEnabled\\n * @dev Helper contract for contracts performing cross-domain communications\\n *\\n * Compiler used: defined by inheriting contract\\n */\\ncontract CrossDomainEnabled {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // Messenger contract used to send and recieve messages from the other domain.\\n    address public messenger;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _messenger Address of the CrossDomainMessenger on the current layer.\\n     */\\n    constructor(address _messenger) {\\n        messenger = _messenger;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    /**\\n     * Enforces that the modified function is only callable by a specific cross-domain account.\\n     * @param _sourceDomainAccount The only account on the originating domain which is\\n     *  authenticated to call this function.\\n     */\\n    modifier onlyFromCrossDomainAccount(address _sourceDomainAccount) {\\n        require(\\n            msg.sender == address(getCrossDomainMessenger()),\\n            \\\"OVM_XCHAIN: messenger contract unauthenticated\\\"\\n        );\\n\\n        require(\\n            getCrossDomainMessenger().xDomainMessageSender() == _sourceDomainAccount,\\n            \\\"OVM_XCHAIN: wrong sender of cross-domain message\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Gets the messenger, usually from storage. This function is exposed in case a child contract\\n     * needs to override.\\n     * @return The address of the cross-domain messenger contract which should be used.\\n     */\\n    function getCrossDomainMessenger() internal virtual returns (ICrossDomainMessenger) {\\n        return ICrossDomainMessenger(messenger);\\n    }\\n\\n    /**q\\n     * Sends a message to an account on another domain\\n     * @param _crossDomainTarget The intended recipient on the destination domain\\n     * @param _message The data to send to the target (usually calldata to a function with\\n     *  `onlyFromCrossDomainAccount()`)\\n     * @param _gasLimit The gasLimit for the receipt of the message on the target domain.\\n     */\\n    function sendCrossDomainMessage(\\n        address _crossDomainTarget,\\n        uint32 _gasLimit,\\n        bytes memory _message\\n    ) internal {\\n        // slither-disable-next-line reentrancy-events, reentrancy-benign\\n        getCrossDomainMessenger().sendMessage(_crossDomainTarget, _message, _gasLimit);\\n    }\\n}\\n\",\"keccak256\":\"0x9c3cc8b7047c68a403529b15769a21c2e2668ea71db7bef51f123288009811ea\",\"license\":\"MIT\"},\"@eth-optimism/contracts/libraries/bridge/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(\\n        address indexed target,\\n        address sender,\\n        bytes message,\\n        uint256 messageNonce,\\n        uint256 gasLimit\\n    );\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param _target Target contract address.\\n     * @param _message Message to send to the target.\\n     * @param _gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address _target,\\n        bytes calldata _message,\\n        uint32 _gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f29ae23021345a20ccac7b5edb3fc38268aef943b65adc8a32e74b80bf1833a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// This should be replaced with a \\\"real\\\" import when Optimism release their new contract versions.\\r\\nimport \\\"@eth-optimism/contracts/libraries/bridge/CrossDomainEnabled.sol\\\";\\r\\nimport \\\"../interfaces/ParentMessengerInterface.sol\\\";\\r\\nimport \\\"../interfaces/ParentMessengerConsumerInterface.sol\\\";\\r\\nimport \\\"./ParentMessengerBase.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice Sends cross chain messages from Ethereum L1 to Optimism L2 network.\\r\\n * @dev This contract is ownable and should be owned by the DVM governor.\\r\\n */\\r\\ncontract Optimism_ParentMessenger is CrossDomainEnabled, ParentMessengerInterface, ParentMessengerBase, Lockable {\\r\\n    event SetDefaultGasLimit(uint32 newDefaultGasLimit);\\r\\n    event MessageSentToChild(bytes data, address indexed targetSpoke, uint32 gasLimit, address indexed childMessenger);\\r\\n    event MessageReceivedFromChild(bytes data, address indexed childMessenger, address indexed targetHub);\\r\\n\\r\\n    uint32 public defaultGasLimit = 5_000_000;\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the Optimism_ParentMessenger contract.\\r\\n     * @param _crossDomainMessenger The address of the Optimism cross domain messenger contract.\\r\\n     * @param _childChainId The chain id of the Optimism L2 network this messenger should connect to.\\r\\n     **/\\r\\n    constructor(address _crossDomainMessenger, uint256 _childChainId)\\r\\n        CrossDomainEnabled(_crossDomainMessenger)\\r\\n        ParentMessengerBase(_childChainId)\\r\\n    {}\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the default gas limit that is sent along with transactions to Optimism.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newDefaultGasLimit the new L2 gas limit to be set.\\r\\n     */\\r\\n    function setDefaultGasLimit(uint32 newDefaultGasLimit) public onlyOwner nonReentrant() {\\r\\n        defaultGasLimit = newDefaultGasLimit;\\r\\n        emit SetDefaultGasLimit(newDefaultGasLimit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the address of the oracle spoke on L2 via the child messenger.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newOracleSpoke the new oracle spoke address set on L2.\\r\\n     */\\r\\n    function setChildOracleSpoke(address newOracleSpoke) public onlyOwner nonReentrant() {\\r\\n        bytes memory dataSentToChild = abi.encodeWithSignature(\\\"setOracleSpoke(address)\\\", newOracleSpoke);\\r\\n        sendCrossDomainMessage(childMessenger, defaultGasLimit, dataSentToChild);\\r\\n        emit MessageSentToChild(dataSentToChild, address(0), defaultGasLimit, childMessenger);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the address of the parent messenger on L2 via the child messenger.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newParentMessenger the new parent messenger contract to be set on L2.\\r\\n     */\\r\\n    function setChildParentMessenger(address newParentMessenger) public onlyOwner nonReentrant() {\\r\\n        bytes memory dataSentToChild = abi.encodeWithSignature(\\\"setParentMessenger(address)\\\", newParentMessenger);\\r\\n        sendCrossDomainMessage(childMessenger, defaultGasLimit, dataSentToChild);\\r\\n        emit MessageSentToChild(dataSentToChild, address(0), defaultGasLimit, childMessenger);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the Optimism_ChildMessenger default gas limit on L2 via the child messenger.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newDefaultGasLimit the new default gas limit set on L2.\\r\\n     */\\r\\n    function setChildDefaultGasLimit(uint32 newDefaultGasLimit) public onlyOwner nonReentrant() {\\r\\n        bytes memory dataSentToChild = abi.encodeWithSignature(\\\"setDefaultGasLimit(uint32)\\\", newDefaultGasLimit);\\r\\n        sendCrossDomainMessage(childMessenger, defaultGasLimit, dataSentToChild);\\r\\n        emit MessageSentToChild(dataSentToChild, address(0), defaultGasLimit, childMessenger);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sends a message to the child messenger via the canonical message bridge.\\r\\n     * @dev The caller must be the either the OracleHub or the GovernorHub. This is to send either a\\r\\n     * price or initiate a governance action to the OracleSpoke or GovernorSpoke on the child network.\\r\\n     * @dev The recipient of this message is the child messenger. The messenger must implement processMessageFromParent\\r\\n     * which then forwards the data to the target either the OracleSpoke or the governorSpoke depending on the caller.\\r\\n     * @param data data message sent to the child messenger. Should be an encoded function call or packed data.\\r\\n     */\\r\\n    function sendMessageToChild(bytes memory data) public override onlyHubContract() nonReentrant() {\\r\\n        address target = msg.sender == oracleHub ? oracleSpoke : governorSpoke;\\r\\n        bytes memory dataSentToChild =\\r\\n            abi.encodeWithSignature(\\\"processMessageFromCrossChainParent(bytes,address)\\\", data, target);\\r\\n        sendCrossDomainMessage(childMessenger, defaultGasLimit, dataSentToChild);\\r\\n        emit MessageSentToChild(dataSentToChild, target, defaultGasLimit, childMessenger);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process a received message from the child messenger via the canonical message bridge.\\r\\n     * @dev The caller must be the the child messenger, sent over the canonical message bridge.\\r\\n     * @dev Note that only the OracleHub can receive messages from the child messenger. Therefore we can always forward\\r\\n     * these messages to this contract. The OracleHub must implement processMessageFromChild to handle this message.\\r\\n     * @param data data message sent from the child messenger. Should be an encoded function call or packed data.\\r\\n     */\\r\\n    function processMessageFromCrossChainChild(bytes memory data)\\r\\n        public\\r\\n        onlyFromCrossDomainAccount(childMessenger)\\r\\n        nonReentrant()\\r\\n    {\\r\\n        ParentMessengerConsumerInterface(oracleHub).processMessageFromChild(childChainId, data);\\r\\n        emit MessageReceivedFromChild(data, childMessenger, oracleHub);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1dbef737c9515b6ddb80806e0205c0ee6f6d4c984723d844bc02f15d8d31d840\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/chain-adapters/ParentMessengerBase.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ParentMessengerInterface.sol\\\";\\r\\n\\r\\nabstract contract ParentMessengerBase is Ownable, ParentMessengerInterface {\\r\\n    uint256 public childChainId;\\r\\n\\r\\n    address public childMessenger;\\r\\n\\r\\n    address public oracleHub;\\r\\n    address public governorHub;\\r\\n\\r\\n    address public oracleSpoke;\\r\\n    address public governorSpoke;\\r\\n\\r\\n    event SetChildMessenger(address indexed childMessenger);\\r\\n    event SetOracleHub(address indexed oracleHub);\\r\\n    event SetGovernorHub(address indexed governorHub);\\r\\n    event SetOracleSpoke(address indexed oracleSpoke);\\r\\n    event SetGovernorSpoke(address indexed governorSpoke);\\r\\n\\r\\n    modifier onlyHubContract() {\\r\\n        require(msg.sender == oracleHub || msg.sender == governorHub, \\\"Only privileged caller\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Construct the ParentMessengerBase contract.\\r\\n     * @param _childChainId The chain id of the L2 network this messenger should connect to.\\r\\n     **/\\r\\n    constructor(uint256 _childChainId) {\\r\\n        childChainId = _childChainId;\\r\\n    }\\r\\n\\r\\n    /*******************\\r\\n     *  OWNER METHODS  *\\r\\n     *******************/\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the child messenger, deployed on L2.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newChildMessenger address of the new child messenger, deployed on L2.\\r\\n     */\\r\\n    function setChildMessenger(address newChildMessenger) public onlyOwner {\\r\\n        childMessenger = newChildMessenger;\\r\\n        emit SetChildMessenger(childMessenger);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the Oracle hub, deployed on L1.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newOracleHub address of the new oracle hub, deployed on L1 Ethereum.\\r\\n     */\\r\\n    function setOracleHub(address newOracleHub) public onlyOwner {\\r\\n        oracleHub = newOracleHub;\\r\\n        emit SetOracleHub(oracleHub);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the Governor hub, deployed on L1.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newGovernorHub address of the new governor hub, deployed on L1 Ethereum.\\r\\n     */\\r\\n    function setGovernorHub(address newGovernorHub) public onlyOwner {\\r\\n        governorHub = newGovernorHub;\\r\\n        emit SetGovernorHub(governorHub);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the oracle spoke, deployed on L2.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newOracleSpoke address of the new oracle spoke, deployed on L2.\\r\\n     */\\r\\n    function setOracleSpoke(address newOracleSpoke) public onlyOwner {\\r\\n        oracleSpoke = newOracleSpoke;\\r\\n        emit SetOracleSpoke(oracleSpoke);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the governor spoke, deployed on L2.\\r\\n     * @dev The caller of this function must be the owner. This should be set to the DVM governor.\\r\\n     * @param newGovernorSpoke address of the new governor spoke, deployed on L2.\\r\\n     */\\r\\n    function setGovernorSpoke(address newGovernorSpoke) public onlyOwner {\\r\\n        governorSpoke = newGovernorSpoke;\\r\\n        emit SetGovernorSpoke(governorSpoke);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Returns the amount of ETH required for a caller to pass as msg.value when calling `sendMessageToChild`.\\r\\n     * @return The amount of ETH required for a caller to pass as msg.value when calling `sendMessageToChild`.\\r\\n     */\\r\\n    function getL1CallValue() external view virtual override returns (uint256) {\\r\\n        return 0;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x517819d0f7af95682ac76a03af3b6fac11367d993b8791a1e5eb12527156d163\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ParentMessengerConsumerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ParentMessengerConsumerInterface {\\r\\n    // Function called on Oracle hub to pass in data send from L2, with chain ID.\\r\\n    function processMessageFromChild(uint256 chainId, bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa847709b6502eb61850bed4229702c9935789adbe0d7e010c4ad763b4563434c\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ParentMessengerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ParentMessengerInterface {\\r\\n    // Should send cross-chain message to Child messenger contract or revert.\\r\\n    function sendMessageToChild(bytes memory data) external;\\r\\n\\r\\n    // Informs Hub how much msg.value they need to include to call `sendMessageToChild`.\\r\\n    function getL1CallValue() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc74acc686b947b8634e084a110c511b167f8251138a80def1faae9101660fb05\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6080346100cb57601f610f6738819003918201601f19168301916001600160401b038311848410176100d05780849260409485528339810103126100cb5780516001600160a01b0391828216918290036100cb57602001519060018060a01b031990816000541617600055600154903390821617600155604051923391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600085a36002556007805464ffffffffff60a01b1916634c4b400160a01b179055610e8090816100e78239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816308f1ed1514610b8f575080630a2b5e0314610b275780630e28c76414610aae578063109ff9a9146108575780631a50ad30146107e95780633cb747bf146107c15780634c09e6e8146106b7578063524b6f70146106325780635f234d531461060957806362315c421461059c5780637092a2b214610573578063715018a61461051257806373d62b46146104eb57806381e8ea461461047d5780638d09550e146104545780638da5cb5b1461042b57806395368d2e1461040357806398e1e16f146103da578063acab324c14610347578063b14b0f5614610324578063c75ba1f4146102b6578063ea48b5fe146101f05763f2fde38b1461012057600080fd5b346101ec5760203660031901126101ec576001600160a01b03813581811692908390036101e85761014f610c72565b8215610196575060015492826001600160601b0360a01b8516176001555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50346101ec5760203660031901126101ec573563ffffffff908181168091036102b25761021b610c72565b610223610cca565b6007549184600080516020610e2b83398151915260ff60a01b1993848616600755865190630524b6f760e41b602083015260248201526024815261026681610ba8565b6003546001600160a01b039661028591839160a81c8716908916610d83565b6007549560035416936102a288519283928960a81c169083610d5f565b0390a316600160a01b1760075551f35b8380fd5b50346101ec5760203660031901126101ec57356001600160a01b038116908190036101ec576102e3610c72565b8260075492826001600160601b0360a01b851617600755519216177f642412aa8027246b85920fe1c2364b4928dba23ead405e72d6c3ea90305d0a298383a2f35b5050346103435781600319360112610343576020906002549051908152f35b5080fd5b50346101ec5760203660031901126101ec576001600160a01b039035818116908190036102b257610376610c72565b61037e610cca565b60075484600080516020610e2b83398151915260ff60a01b19938484166007558651906301a50ad360e41b60208301526024820152602481526103c081610ba8565b61028581876003541663ffffffff809760a81c1690610d83565b50503461034357816003193601126103435760065490516001600160a01b039091168152602090f35b50503461034357816003193601126103435760209063ffffffff60075460a81c169051908152f35b50503461034357816003193601126103435760015490516001600160a01b039091168152602090f35b50503461034357816003193601126103435760055490516001600160a01b039091168152602090f35b50346101ec5760203660031901126101ec57356001600160a01b038116908190036101ec576104aa610c72565b8260035492826001600160601b0360a01b851617600355519216177f2b3527e6183dce7676cc1a77ba1c1a943740ff02cfcd0d8ff32ae5b42205ccc58383a2f35b50346101ec57826003193601126101ec575490516001600160a01b03909116815260209150f35b50503461034357816003193601126103435761052c610c72565b600180546001600160a01b031981169091559051906000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50503461034357816003193601126103435760075490516001600160a01b039091168152602090f35b5090346101ec5760203660031901126101ec5781356001600160a01b038116918491839003610343576105cd610c72565b83546001600160a01b031981168417909455519216177fe5c5f8656458e7eb3288974c5d146e8b37414ece1fccdfc3d377f58c5ead3a168383a2f35b50503461034357816003193601126103435760035490516001600160a01b039091168152602090f35b50346101ec5760203660031901126101ec573563ffffffff81168082036102b25761065b610c72565b610663610cca565b7f82420e5818c266bec5ae52072a057f0b7dae2f148dfa3cc4d2d94fcba1e99cfb6020600754928551908152a164ffffffffff60a01b191660a89190911b63ffffffff60a81b1617600160a01b1760075551f35b50346101ec576106c636610bfc565b9060018060a01b0391828254163314918280156107b4575b1561077857506106ec610cca565b6007549060ff60a01b199283831660075560001461075a57600080516020610e2b8339815191526107436103c08660065416935b878951938492630c3b8be760e11b60208501528b60248501526064840190610d1f565b95169485604483015203601f198101835282610bda565b600080516020610e2b8339815191526107436103c086851693610720565b606490602086519162461bcd60e51b8352820152601660248201527527b7363c90383934bb34b632b3b2b21031b0b63632b960511b6044820152fd5b50836005541633146106de565b505034610343578160031936011261034357905490516001600160a01b039091168152602090f35b50346101ec5760203660031901126101ec57356001600160a01b038116908190036101ec57610816610c72565b8260065492826001600160601b0360a01b851617600655519216177f5e60d1b338c1efe33cdc840bc15ae31e8c16ec95b6ce1e2a41d334fc28b69fbc8383a2f35b50346101ec5761086636610bfc565b60035484546001600160a01b0393908416929091841633849003610a545785518094636e296e4560e01b8252818560209788935afa80156109b15786918991610a16575b5016036109bb576108b9610cca565b60ff60a01b199384600754166007558083541687600254823b15610343578851928391633211db0760e11b835287830152896024830152818381610900604482018a610d1f565b03925af180156109b157610963575b5090817f0900453a3fb13750c432500a3921b5e974ecf1362cf21947630d60528d6bdd5992600354169354169361094f8751928284938452830190610d1f565b0390a3600160a01b90600754161760075551f35b67ffffffffffffffff819892981161099e578652957f0900453a3fb13750c432500a3921b5e974ecf1362cf21947630d60528d6bdd5961090f565b634e487b7160e01b825260418452602482fd5b87513d8a823e3d90fd5b5060849184519162461bcd60e51b8352820152603060248201527f4f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f7360448201526f732d646f6d61696e206d65737361676560801b6064820152fd5b809250868092503d8311610a4d575b610a2f8183610bda565b81010312610a4957518581168103610a49578590386108aa565b8780fd5b503d610a25565b855162461bcd60e51b8152602081850152602e60248201527f4f564d5f58434841494e3a206d657373656e67657220636f6e7472616374207560448201526d1b985d5d1a195b9d1a58d85d195960921b6064820152608490fd5b50346101ec5760203660031901126101ec576001600160a01b039035818116908190036102b257610add610c72565b610ae5610cca565b60075484600080516020610e2b83398151915260ff60a01b199384841660075586519063c948564b60e01b60208301526024820152602481526103c081610ba8565b50346101ec5760203660031901126101ec57356001600160a01b03811691908290036101ec57610b55610c72565b600580546001600160a01b0319168317905551907f378c0ff663d300fda5b8ad9e2dee32975ac78884277c539d47671a8d2b5d797b8383a2f35b8490346103435781600319360112610343576020918152f35b6060810190811067ffffffffffffffff821117610bc457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bc457604052565b6020600319820112610c6d5767ffffffffffffffff600435818111610c6d5782602382011215610c6d578060040135918211610bc45760405192610c4a601f8401601f191660200185610bda565b82845260248383010111610c6d5781600092602460209301838601378301015290565b600080fd5b6001546001600160a01b03163303610c8657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff60075460a01c1615610cda57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b919082519283825260005b848110610d4b575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610d2a565b9063ffffffff610d7c602092959495604085526040850190610d1f565b9416910152565b6000805493949390926001600160a01b039182169290833b156101e8579184809492610ddb97989463ffffffff604051998a9788968795633dbb202b60e01b8752166004860152606060248601526064850190610d1f565b9116604483015203925af18015610e1d57610df4575050565b67ffffffffffffffff8211610e095750604052565b634e487b7160e01b81526041600452602490fd5b50604051903d90823e3d90fdfe1c1cf06b9276b6c1bb4f7ee9951a4ec64752530e0d8d0532b2d68cfdf0b8d7eba2646970667358221220d304fd99c190a9664ec948843d04843701ad241e1ac5e8a4645a2c385b7b430a64736f6c63430008100033",
  "deployedBytecode": "0x6080604081815260048036101561001557600080fd5b600092833560e01c90816308f1ed1514610b8f575080630a2b5e0314610b275780630e28c76414610aae578063109ff9a9146108575780631a50ad30146107e95780633cb747bf146107c15780634c09e6e8146106b7578063524b6f70146106325780635f234d531461060957806362315c421461059c5780637092a2b214610573578063715018a61461051257806373d62b46146104eb57806381e8ea461461047d5780638d09550e146104545780638da5cb5b1461042b57806395368d2e1461040357806398e1e16f146103da578063acab324c14610347578063b14b0f5614610324578063c75ba1f4146102b6578063ea48b5fe146101f05763f2fde38b1461012057600080fd5b346101ec5760203660031901126101ec576001600160a01b03813581811692908390036101e85761014f610c72565b8215610196575060015492826001600160601b0360a01b8516176001555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50346101ec5760203660031901126101ec573563ffffffff908181168091036102b25761021b610c72565b610223610cca565b6007549184600080516020610e2b83398151915260ff60a01b1993848616600755865190630524b6f760e41b602083015260248201526024815261026681610ba8565b6003546001600160a01b039661028591839160a81c8716908916610d83565b6007549560035416936102a288519283928960a81c169083610d5f565b0390a316600160a01b1760075551f35b8380fd5b50346101ec5760203660031901126101ec57356001600160a01b038116908190036101ec576102e3610c72565b8260075492826001600160601b0360a01b851617600755519216177f642412aa8027246b85920fe1c2364b4928dba23ead405e72d6c3ea90305d0a298383a2f35b5050346103435781600319360112610343576020906002549051908152f35b5080fd5b50346101ec5760203660031901126101ec576001600160a01b039035818116908190036102b257610376610c72565b61037e610cca565b60075484600080516020610e2b83398151915260ff60a01b19938484166007558651906301a50ad360e41b60208301526024820152602481526103c081610ba8565b61028581876003541663ffffffff809760a81c1690610d83565b50503461034357816003193601126103435760065490516001600160a01b039091168152602090f35b50503461034357816003193601126103435760209063ffffffff60075460a81c169051908152f35b50503461034357816003193601126103435760015490516001600160a01b039091168152602090f35b50503461034357816003193601126103435760055490516001600160a01b039091168152602090f35b50346101ec5760203660031901126101ec57356001600160a01b038116908190036101ec576104aa610c72565b8260035492826001600160601b0360a01b851617600355519216177f2b3527e6183dce7676cc1a77ba1c1a943740ff02cfcd0d8ff32ae5b42205ccc58383a2f35b50346101ec57826003193601126101ec575490516001600160a01b03909116815260209150f35b50503461034357816003193601126103435761052c610c72565b600180546001600160a01b031981169091559051906000906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b50503461034357816003193601126103435760075490516001600160a01b039091168152602090f35b5090346101ec5760203660031901126101ec5781356001600160a01b038116918491839003610343576105cd610c72565b83546001600160a01b031981168417909455519216177fe5c5f8656458e7eb3288974c5d146e8b37414ece1fccdfc3d377f58c5ead3a168383a2f35b50503461034357816003193601126103435760035490516001600160a01b039091168152602090f35b50346101ec5760203660031901126101ec573563ffffffff81168082036102b25761065b610c72565b610663610cca565b7f82420e5818c266bec5ae52072a057f0b7dae2f148dfa3cc4d2d94fcba1e99cfb6020600754928551908152a164ffffffffff60a01b191660a89190911b63ffffffff60a81b1617600160a01b1760075551f35b50346101ec576106c636610bfc565b9060018060a01b0391828254163314918280156107b4575b1561077857506106ec610cca565b6007549060ff60a01b199283831660075560001461075a57600080516020610e2b8339815191526107436103c08660065416935b878951938492630c3b8be760e11b60208501528b60248501526064840190610d1f565b95169485604483015203601f198101835282610bda565b600080516020610e2b8339815191526107436103c086851693610720565b606490602086519162461bcd60e51b8352820152601660248201527527b7363c90383934bb34b632b3b2b21031b0b63632b960511b6044820152fd5b50836005541633146106de565b505034610343578160031936011261034357905490516001600160a01b039091168152602090f35b50346101ec5760203660031901126101ec57356001600160a01b038116908190036101ec57610816610c72565b8260065492826001600160601b0360a01b851617600655519216177f5e60d1b338c1efe33cdc840bc15ae31e8c16ec95b6ce1e2a41d334fc28b69fbc8383a2f35b50346101ec5761086636610bfc565b60035484546001600160a01b0393908416929091841633849003610a545785518094636e296e4560e01b8252818560209788935afa80156109b15786918991610a16575b5016036109bb576108b9610cca565b60ff60a01b199384600754166007558083541687600254823b15610343578851928391633211db0760e11b835287830152896024830152818381610900604482018a610d1f565b03925af180156109b157610963575b5090817f0900453a3fb13750c432500a3921b5e974ecf1362cf21947630d60528d6bdd5992600354169354169361094f8751928284938452830190610d1f565b0390a3600160a01b90600754161760075551f35b67ffffffffffffffff819892981161099e578652957f0900453a3fb13750c432500a3921b5e974ecf1362cf21947630d60528d6bdd5961090f565b634e487b7160e01b825260418452602482fd5b87513d8a823e3d90fd5b5060849184519162461bcd60e51b8352820152603060248201527f4f564d5f58434841494e3a2077726f6e672073656e646572206f662063726f7360448201526f732d646f6d61696e206d65737361676560801b6064820152fd5b809250868092503d8311610a4d575b610a2f8183610bda565b81010312610a4957518581168103610a49578590386108aa565b8780fd5b503d610a25565b855162461bcd60e51b8152602081850152602e60248201527f4f564d5f58434841494e3a206d657373656e67657220636f6e7472616374207560448201526d1b985d5d1a195b9d1a58d85d195960921b6064820152608490fd5b50346101ec5760203660031901126101ec576001600160a01b039035818116908190036102b257610add610c72565b610ae5610cca565b60075484600080516020610e2b83398151915260ff60a01b199384841660075586519063c948564b60e01b60208301526024820152602481526103c081610ba8565b50346101ec5760203660031901126101ec57356001600160a01b03811691908290036101ec57610b55610c72565b600580546001600160a01b0319168317905551907f378c0ff663d300fda5b8ad9e2dee32975ac78884277c539d47671a8d2b5d797b8383a2f35b8490346103435781600319360112610343576020918152f35b6060810190811067ffffffffffffffff821117610bc457604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bc457604052565b6020600319820112610c6d5767ffffffffffffffff600435818111610c6d5782602382011215610c6d578060040135918211610bc45760405192610c4a601f8401601f191660200185610bda565b82845260248383010111610c6d5781600092602460209301838601378301015290565b600080fd5b6001546001600160a01b03163303610c8657565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff60075460a01c1615610cda57565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b919082519283825260005b848110610d4b575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610d2a565b9063ffffffff610d7c602092959495604085526040850190610d1f565b9416910152565b6000805493949390926001600160a01b039182169290833b156101e8579184809492610ddb97989463ffffffff604051998a9788968795633dbb202b60e01b8752166004860152606060248601526064850190610d1f565b9116604483015203925af18015610e1d57610df4575050565b67ffffffffffffffff8211610e095750604052565b634e487b7160e01b81526041600452602490fd5b50604051903d90823e3d90fdfe1c1cf06b9276b6c1bb4f7ee9951a4ec64752530e0d8d0532b2d68cfdf0b8d7eba2646970667358221220d304fd99c190a9664ec948843d04843701ad241e1ac5e8a4645a2c385b7b430a64736f6c63430008100033",
  "devdoc": {
    "details": "This contract is ownable and should be owned by the DVM governor.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_childChainId": "The chain id of the Optimism L2 network this messenger should connect to.*",
          "_crossDomainMessenger": "The address of the Optimism cross domain messenger contract."
        }
      },
      "getL1CallValue()": {
        "returns": {
          "_0": "The amount of ETH required for a caller to pass as msg.value when calling `sendMessageToChild`."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processMessageFromCrossChainChild(bytes)": {
        "details": "The caller must be the the child messenger, sent over the canonical message bridge.Note that only the OracleHub can receive messages from the child messenger. Therefore we can always forward these messages to this contract. The OracleHub must implement processMessageFromChild to handle this message.",
        "params": {
          "data": "data message sent from the child messenger. Should be an encoded function call or packed data."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendMessageToChild(bytes)": {
        "details": "The caller must be the either the OracleHub or the GovernorHub. This is to send either a price or initiate a governance action to the OracleSpoke or GovernorSpoke on the child network.The recipient of this message is the child messenger. The messenger must implement processMessageFromParent which then forwards the data to the target either the OracleSpoke or the governorSpoke depending on the caller.",
        "params": {
          "data": "data message sent to the child messenger. Should be an encoded function call or packed data."
        }
      },
      "setChildDefaultGasLimit(uint32)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newDefaultGasLimit": "the new default gas limit set on L2."
        }
      },
      "setChildMessenger(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newChildMessenger": "address of the new child messenger, deployed on L2."
        }
      },
      "setChildOracleSpoke(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newOracleSpoke": "the new oracle spoke address set on L2."
        }
      },
      "setChildParentMessenger(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newParentMessenger": "the new parent messenger contract to be set on L2."
        }
      },
      "setDefaultGasLimit(uint32)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newDefaultGasLimit": "the new L2 gas limit to be set."
        }
      },
      "setGovernorHub(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newGovernorHub": "address of the new governor hub, deployed on L1 Ethereum."
        }
      },
      "setGovernorSpoke(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newGovernorSpoke": "address of the new governor spoke, deployed on L2."
        }
      },
      "setOracleHub(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newOracleHub": "address of the new oracle hub, deployed on L1 Ethereum."
        }
      },
      "setOracleSpoke(address)": {
        "details": "The caller of this function must be the owner. This should be set to the DVM governor.",
        "params": {
          "newOracleSpoke": "address of the new oracle spoke, deployed on L2."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Construct the Optimism_ParentMessenger contract."
      },
      "getL1CallValue()": {
        "notice": "Returns the amount of ETH required for a caller to pass as msg.value when calling `sendMessageToChild`."
      },
      "processMessageFromCrossChainChild(bytes)": {
        "notice": "Process a received message from the child messenger via the canonical message bridge."
      },
      "sendMessageToChild(bytes)": {
        "notice": "Sends a message to the child messenger via the canonical message bridge."
      },
      "setChildDefaultGasLimit(uint32)": {
        "notice": "Changes the Optimism_ChildMessenger default gas limit on L2 via the child messenger."
      },
      "setChildMessenger(address)": {
        "notice": "Changes the stored address of the child messenger, deployed on L2."
      },
      "setChildOracleSpoke(address)": {
        "notice": "Changes the address of the oracle spoke on L2 via the child messenger."
      },
      "setChildParentMessenger(address)": {
        "notice": "Changes the address of the parent messenger on L2 via the child messenger."
      },
      "setDefaultGasLimit(uint32)": {
        "notice": "Changes the default gas limit that is sent along with transactions to Optimism."
      },
      "setGovernorHub(address)": {
        "notice": "Changes the stored address of the Governor hub, deployed on L1."
      },
      "setGovernorSpoke(address)": {
        "notice": "Changes the stored address of the governor spoke, deployed on L2."
      },
      "setOracleHub(address)": {
        "notice": "Changes the stored address of the Oracle hub, deployed on L1."
      },
      "setOracleSpoke(address)": {
        "notice": "Changes the stored address of the oracle spoke, deployed on L2."
      }
    },
    "notice": "Sends cross chain messages from Ethereum L1 to Optimism L2 network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "messenger",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4304,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 23860,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "childChainId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 23862,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "childMessenger",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 23864,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "oracleHub",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 23866,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "governorHub",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 23868,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "oracleSpoke",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 23870,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "governorSpoke",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "_notEntered",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 23640,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Optimism_ParentMessenger.sol:Optimism_ParentMessenger",
        "label": "defaultGasLimit",
        "offset": 21,
        "slot": "7",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}