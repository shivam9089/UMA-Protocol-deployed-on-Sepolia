{
  "address": "0x71bFB9f7aDEb2F7196BAAb6DBB26e77D204c8823",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "targetSpoke",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "MessageReceivedFromParent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracleSpoke",
          "type": "address"
        }
      ],
      "name": "MessageSentToParent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOracleSpoke",
          "type": "address"
        }
      ],
      "name": "SetOracleSpoke",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "oracleSpoke",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "processMessageFromCrossChainParent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToParent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleSpoke",
          "type": "address"
        }
      ],
      "name": "setOracleSpoke",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0e0e9ee4a748c9c0a8c27628deeb02783f3847b490a6377639e54736e6184b8",
  "receipt": {
    "to": null,
    "from": "0x2d92211362AdAa7963De4609214282FFf44859F6",
    "contractAddress": "0x71bFB9f7aDEb2F7196BAAb6DBB26e77D204c8823",
    "transactionIndex": 47,
    "gasUsed": "421599",
    "logsBloom": "0x
    "blockHash": "0x729a9e99ffcf9a1387293bac7b8c7adc654082d9c000b9620dd06d7eaf65237c",
    "transactionHash": "0xb0e0e9ee4a748c9c0a8c27628deeb02783f3847b490a6377639e54736e6184b8",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 6161512,
        "transactionHash": "0xb0e0e9ee4a748c9c0a8c27628deeb02783f3847b490a6377639e54736e6184b8",
        "address": "0x71bFB9f7aDEb2F7196BAAb6DBB26e77D204c8823",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002d92211362adaa7963de4609214282fff44859f6"
        ],
        "data": "0x",
        "logIndex": 133,
        "blockHash": "0x729a9e99ffcf9a1387293bac7b8c7adc654082d9c000b9620dd06d7eaf65237c"
      }
    ],
    "blockNumber": 6161512,
    "cumulativeGasUsed": "11005381",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "864d61c65c789401ae17358a5af86557",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"targetSpoke\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"MessageReceivedFromParent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracleSpoke\",\"type\":\"address\"}],\"name\":\"MessageSentToParent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOracleSpoke\",\"type\":\"address\"}],\"name\":\"SetOracleSpoke\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"oracleSpoke\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"processMessageFromCrossChainParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"sendMessageToParent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleSpoke\",\"type\":\"address\"}],\"name\":\"setOracleSpoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"No parent messenger is needed for this case, as the admin could be trusted to manually send DVM requests on mainnet. This is intended to be used as a \\\"beta\\\" deployment compatible with any EVM-compatible chains before implementing a full bridge adapter. Put simply, it is meant as a stop-gap.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"processMessageFromCrossChainParent(bytes,address)\":{\"details\":\"The caller must be the the admin.\",\"params\":{\"data\":\"data message sent from the admin. Should be an encoded function call or packed data.\",\"target\":\"desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having this as a param enables the Admin to send messages to arbitrary addresses from the messenger contract. This is primarily used to send messages to the OracleSpoke and GovernorSpoke.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"sendMessageToParent(bytes)\":{\"details\":\"The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.\",\"params\":{\"data\":\"data message sent to the L1 messenger. Should be an encoded function call or packed data.\"}},\"setOracleSpoke(address)\":{\"details\":\"The caller of this function must be the admin.\",\"params\":{\"newOracleSpoke\":\"address of the new oracle spoke, deployed on L2.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"processMessageFromCrossChainParent(bytes,address)\":{\"notice\":\"Process a received message from the admin.\"},\"sendMessageToParent(bytes)\":{\"notice\":\"Logs a message to be manually relayed to L1.\"},\"setOracleSpoke(address)\":{\"notice\":\"Changes the stored address of the Oracle spoke, deployed on L2.\"}},\"notice\":\"A version of the child messenger that allows an admin to relay messages on its behalf.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/cross-chain-oracle/chain-adapters/Admin_ChildMessenger.sol\":\"Admin_ChildMessenger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\r\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\r\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\r\\n */\\r\\ncontract Lockable {\\r\\n    bool private _notEntered;\\r\\n\\r\\n    constructor() {\\r\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\r\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\r\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\r\\n        // refund coming into effect.\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\r\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\r\\n     * function that does the actual state modification.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _preEntranceCheck();\\r\\n        _preEntranceSet();\\r\\n        _;\\r\\n        _postEntranceReset();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\r\\n     */\\r\\n    modifier nonReentrantView() {\\r\\n        _preEntranceCheck();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\r\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\r\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\r\\n    // then call `_postEntranceReset()`.\\r\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\r\\n    function _preEntranceCheck() internal view {\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n    }\\r\\n\\r\\n    function _preEntranceSet() internal {\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _notEntered = false;\\r\\n    }\\r\\n\\r\\n    function _postEntranceReset() internal {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    // These functions are intended to be used by child contracts to temporarily disable and re-enable the guard.\\r\\n    // Intended use:\\r\\n    // _startReentrantGuardDisabled();\\r\\n    // ...\\r\\n    // _endReentrantGuardDisabled();\\r\\n    //\\r\\n    // IMPORTANT: these should NEVER be used in a method that isn't inside a nonReentrant block. Otherwise, it's\\r\\n    // possible to permanently lock your contract.\\r\\n    function _startReentrantGuardDisabled() internal {\\r\\n        _notEntered = true;\\r\\n    }\\r\\n\\r\\n    function _endReentrantGuardDisabled() internal {\\r\\n        _notEntered = false;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0d2de08951d2be32ceb242649e4b248508f43ce9184ee9ac69eedcef9f6afd8b\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/chain-adapters/Admin_ChildMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ChildMessengerInterface.sol\\\";\\r\\nimport \\\"../interfaces/ChildMessengerConsumerInterface.sol\\\";\\r\\nimport \\\"../../common/implementation/Lockable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @notice A version of the child messenger that allows an admin to relay messages on its behalf.\\r\\n * @dev No parent messenger is needed for this case, as the admin could be trusted to manually send DVM requests on\\r\\n * mainnet. This is intended to be used as a \\\"beta\\\" deployment compatible with any EVM-compatible chains before\\r\\n * implementing a full bridge adapter. Put simply, it is meant as a stop-gap.\\r\\n */\\r\\ncontract Admin_ChildMessenger is Ownable, Lockable, ChildMessengerInterface {\\r\\n    // The only child network contract that can send messages over the bridge via the messenger is the oracle spoke.\\r\\n    address public oracleSpoke;\\r\\n\\r\\n    event SetOracleSpoke(address newOracleSpoke);\\r\\n    event MessageSentToParent(bytes data, address indexed oracleSpoke);\\r\\n    event MessageReceivedFromParent(bytes data, address indexed targetSpoke, address indexed caller);\\r\\n\\r\\n    /**\\r\\n     * @notice Changes the stored address of the Oracle spoke, deployed on L2.\\r\\n     * @dev The caller of this function must be the admin.\\r\\n     * @param newOracleSpoke address of the new oracle spoke, deployed on L2.\\r\\n     */\\r\\n    function setOracleSpoke(address newOracleSpoke) public onlyOwner nonReentrant() {\\r\\n        oracleSpoke = newOracleSpoke;\\r\\n        emit SetOracleSpoke(newOracleSpoke);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Logs a message to be manually relayed to L1.\\r\\n     * @dev The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.\\r\\n     * @param data data message sent to the L1 messenger. Should be an encoded function call or packed data.\\r\\n     */\\r\\n    function sendMessageToParent(bytes memory data) public override nonReentrant() {\\r\\n        require(msg.sender == oracleSpoke, \\\"Only callable by oracleSpoke\\\");\\r\\n\\r\\n        // Note: only emit an event. These messages will be manually relayed.\\r\\n        emit MessageSentToParent(data, oracleSpoke);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Process a received message from the admin.\\r\\n     * @dev The caller must be the the admin.\\r\\n     * @param data data message sent from the admin. Should be an encoded function call or packed data.\\r\\n     * @param target desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having\\r\\n     * this as a param enables the Admin to send messages to arbitrary addresses from the messenger contract. This is\\r\\n     * primarily used to send messages to the OracleSpoke and GovernorSpoke.\\r\\n     */\\r\\n    function processMessageFromCrossChainParent(bytes memory data, address target) public onlyOwner nonReentrant() {\\r\\n        ChildMessengerConsumerInterface(target).processMessageFromParent(data);\\r\\n        emit MessageReceivedFromParent(data, target, msg.sender);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7041445ab67b892f438a72bb6ce03900cfb869a86ea7e9f5e5fa8cbc930b8f2b\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ChildMessengerConsumerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ChildMessengerConsumerInterface {\\r\\n    // Called on L2 by child messenger.\\r\\n    function processMessageFromParent(bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x909c5020914855274be891571c9d53ff9d57c8e0144279c3f808ea4fcc28b97f\",\"license\":\"AGPL-3.0-only\"},\"contracts/cross-chain-oracle/interfaces/ChildMessengerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ChildMessengerInterface {\\r\\n    // Should send cross-chain message to Parent messenger contract or revert.\\r\\n    function sendMessageToParent(bytes memory data) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x1276c829956f733346e033969998d3825bea284ba0c29c83d46fe72ebc93e5fa\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60808060405234610064576000543360018060a01b0382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600085a36001600160a81b0319163360ff60a01b191617600160a01b17600055610635908161006a8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063187717ce146103585780631a50ad30146102cd578063715018a6146102705780638da5cb5b1461024857806398e1e16f1461021b578063d982ebba1461013d5763f2fde38b1461006e57600080fd5b34610139576020366003190112610139576100876104f3565b61008f610509565b6001600160a01b039081169182156100e7575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b503461013957602036600319011261013957803567ffffffffffffffff81116102175761016d9036908301610475565b90610176610561565b60ff60a01b19600054169160018060a01b0360015416918233036101d457506101c57f8e5ae3bead3f4b8f987aac6bd4e445c1e8853b844cf7ce654391c573d9eb790d918551918291826105b6565b0390a2600160a01b1760005551f35b606490602086519162461bcd60e51b8352820152601c60248201527f4f6e6c792063616c6c61626c65206279206f7261636c6553706f6b65000000006044820152fd5b8380fd5b50503461024457816003193601126102445760015490516001600160a01b039091168152602090f35b5080fd5b505034610244578160031936011261024457905490516001600160a01b039091168152602090f35b50503461024457816003193601126102445761028a610509565b600080546001600160a01b0319811682559151916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b505034610244576020366003190112610244576102e86104f3565b6102f0610509565b6102f8610561565b600054600180546001600160a01b0319166001600160a01b039093169283179055825191825260ff60a01b1916907f5e60d1b338c1efe33cdc840bc15ae31e8c16ec95b6ce1e2a41d334fc28b69fbc90602090a1600160a01b1760005551f35b503461013957816003193601126101395767ffffffffffffffff8135818111610471576103889036908401610475565b906024356001600160a01b038116919082900361046d576103a7610509565b6103af610561565b855460ff60a01b19908116875593823b1561046957855163065fef2360e11b8152918783806103e0888683016105b6565b038183885af1801561045f57610437575b5050507fb7effaeeeb3f33c4c793ac44d123d88600fdfcdc7232156dc0d70dab4e5dbe0c8451806104233395826105b6565b0390a3600160a01b90600054161760005551f35b829793971161044c57508452933880806103f1565b634e487b7160e01b835260419052602482fd5b87513d8a823e3d90fd5b8680fd5b8580fd5b8480fd5b81601f820112156104d85780359067ffffffffffffffff928383116104dd5760405193601f8401601f19908116603f01168501908111858210176104dd57604052828452602083830101116104d857816000926020809301838601378301015290565b600080fd5b634e487b7160e01b600052604160045260246000fd5b600435906001600160a01b03821682036104d857565b6000546001600160a01b0316330361051d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff60005460a01c161561057157565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6020808252825181830181905290939260005b8281106105eb57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016105c956fea2646970667358221220f73e2a22c4ff1e426ee9465e3ca3df3d221473df30ad1a177f20783cdff4e59a64736f6c63430008100033",
  "deployedBytecode": "0x6040608081526004908136101561001557600080fd5b600091823560e01c8063187717ce146103585780631a50ad30146102cd578063715018a6146102705780638da5cb5b1461024857806398e1e16f1461021b578063d982ebba1461013d5763f2fde38b1461006e57600080fd5b34610139576020366003190112610139576100876104f3565b61008f610509565b6001600160a01b039081169182156100e7575060005492826bffffffffffffffffffffffff60a01b8516176000555192167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600084a3f35b608490602085519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b503461013957602036600319011261013957803567ffffffffffffffff81116102175761016d9036908301610475565b90610176610561565b60ff60a01b19600054169160018060a01b0360015416918233036101d457506101c57f8e5ae3bead3f4b8f987aac6bd4e445c1e8853b844cf7ce654391c573d9eb790d918551918291826105b6565b0390a2600160a01b1760005551f35b606490602086519162461bcd60e51b8352820152601c60248201527f4f6e6c792063616c6c61626c65206279206f7261636c6553706f6b65000000006044820152fd5b8380fd5b50503461024457816003193601126102445760015490516001600160a01b039091168152602090f35b5080fd5b505034610244578160031936011261024457905490516001600160a01b039091168152602090f35b50503461024457816003193601126102445761028a610509565b600080546001600160a01b0319811682559151916001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b505034610244576020366003190112610244576102e86104f3565b6102f0610509565b6102f8610561565b600054600180546001600160a01b0319166001600160a01b039093169283179055825191825260ff60a01b1916907f5e60d1b338c1efe33cdc840bc15ae31e8c16ec95b6ce1e2a41d334fc28b69fbc90602090a1600160a01b1760005551f35b503461013957816003193601126101395767ffffffffffffffff8135818111610471576103889036908401610475565b906024356001600160a01b038116919082900361046d576103a7610509565b6103af610561565b855460ff60a01b19908116875593823b1561046957855163065fef2360e11b8152918783806103e0888683016105b6565b038183885af1801561045f57610437575b5050507fb7effaeeeb3f33c4c793ac44d123d88600fdfcdc7232156dc0d70dab4e5dbe0c8451806104233395826105b6565b0390a3600160a01b90600054161760005551f35b829793971161044c57508452933880806103f1565b634e487b7160e01b835260419052602482fd5b87513d8a823e3d90fd5b8680fd5b8580fd5b8480fd5b81601f820112156104d85780359067ffffffffffffffff928383116104dd5760405193601f8401601f19908116603f01168501908111858210176104dd57604052828452602083830101116104d857816000926020809301838601378301015290565b600080fd5b634e487b7160e01b600052604160045260246000fd5b600435906001600160a01b03821682036104d857565b6000546001600160a01b0316330361051d57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60ff60005460a01c161561057157565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b6020808252825181830181905290939260005b8281106105eb57505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016105c956fea2646970667358221220f73e2a22c4ff1e426ee9465e3ca3df3d221473df30ad1a177f20783cdff4e59a64736f6c63430008100033",
  "devdoc": {
    "details": "No parent messenger is needed for this case, as the admin could be trusted to manually send DVM requests on mainnet. This is intended to be used as a \"beta\" deployment compatible with any EVM-compatible chains before implementing a full bridge adapter. Put simply, it is meant as a stop-gap.",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "processMessageFromCrossChainParent(bytes,address)": {
        "details": "The caller must be the the admin.",
        "params": {
          "data": "data message sent from the admin. Should be an encoded function call or packed data.",
          "target": "desired recipient of `data`. Target must implement the `processMessageFromParent` function. Having this as a param enables the Admin to send messages to arbitrary addresses from the messenger contract. This is primarily used to send messages to the OracleSpoke and GovernorSpoke."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "sendMessageToParent(bytes)": {
        "details": "The caller must be the OracleSpoke on L2. No other contract is permissioned to call this function.",
        "params": {
          "data": "data message sent to the L1 messenger. Should be an encoded function call or packed data."
        }
      },
      "setOracleSpoke(address)": {
        "details": "The caller of this function must be the admin.",
        "params": {
          "newOracleSpoke": "address of the new oracle spoke, deployed on L2."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "processMessageFromCrossChainParent(bytes,address)": {
        "notice": "Process a received message from the admin."
      },
      "sendMessageToParent(bytes)": {
        "notice": "Logs a message to be manually relayed to L1."
      },
      "setOracleSpoke(address)": {
        "notice": "Changes the stored address of the Oracle spoke, deployed on L2."
      }
    },
    "notice": "A version of the child messenger that allows an admin to relay messages on its behalf.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4304,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Admin_ChildMessenger.sol:Admin_ChildMessenger",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16304,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Admin_ChildMessenger.sol:Admin_ChildMessenger",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 22797,
        "contract": "contracts/cross-chain-oracle/chain-adapters/Admin_ChildMessenger.sol:Admin_ChildMessenger",
        "label": "oracleSpoke",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}